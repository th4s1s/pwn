


Gadgets
=======


0x00000000004aec38: adc ah, bh; clc; push rax; std; clc; call rax; 
0x000000000043ca0d: adc ah, byte ptr [rip + 0xffff]; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000004aecc8: adc ah, dh; clc; jmp qword ptr [rax - 0xb]; 
0x00000000004c75fd: adc al, 0; add byte ptr [rax + 0x20], al; hlt; call qword ptr [rax]; 
0x000000000044c76f: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044c7d9: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004c7641: adc al, 0; add byte ptr [rax - 0xc], ch; call qword ptr [rdi]; 
0x00000000004ca3a8: adc al, 0; add byte ptr [rax], al; adc byte ptr [rdx], al; add al, dh; fcomip st(5); call qword ptr [rdx]; 
0x000000000049c4bd: adc al, 0; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000004cc880: adc al, 0; add byte ptr [rax], al; call 0xffffffffc80cc8ef; iretd; clc; jmp qword ptr [rcx]; 
0x00000000004d1ad0: adc al, 0; add byte ptr [rax], al; cmp byte ptr [rcx - 0x78280000], bh; cld; jmp qword ptr [rcx]; 
0x00000000004cdfd0: adc al, 0; add byte ptr [rax], al; cmp byte ptr [rsi], bh; add al, bh; ret 0xfff9; 
0x00000000004cb970: adc al, 0; add byte ptr [rax], al; fcom dword ptr [rdi]; add byte ptr [rax], ch; jl 0xcb971; jmp qword ptr [rbx]; 
0x00000000004cb870: adc al, 0; add byte ptr [rax], al; fcom dword ptr [rsi]; add byte ptr [rax], ch; je 0xcb871; jmp qword ptr [rbx]; 
0x00000000004d1670: adc al, 0; add byte ptr [rax], al; fdiv dword ptr [rax + rax - 0x3a18800]; call qword ptr [rbx]; 
0x00000000004cc570: adc al, 0; add byte ptr [rax], al; fsub dword ptr [rbx]; add byte ptr [rax], cl; ret 0xfff8; 
0x00000000004ccd00: adc al, 0; add byte ptr [rax], al; push 0x1800006b; out 0xf8, al; call qword ptr [rdx]; 
0x00000000004ce2e8: adc al, 0; add byte ptr [rax], al; push rax; add dword ptr [rax], 0xf9de6000; call qword ptr [rbx]; 
0x000000000040959f: adc al, 0; add byte ptr [rax], al; ret; 
0x00000000004ce058: adc al, 0; add byte ptr [rax], al; sar byte ptr [rsi], 0; nop; ret; 
0x00000000004d17b0: adc al, 0; add byte ptr [rax], al; sbb byte ptr [rsi + 0x62280000], dh; cld; jmp qword ptr [rcx]; 
0x00000000004d0f68: adc al, 0; add byte ptr [rax], al; shr byte ptr [rbp + 0x29400000], 1; cld; call qword ptr [rax]; 
0x000000000048d34a: adc al, 0; add byte ptr [rax], al; syscall; 
0x00000000004c7611: adc al, 0; add byte ptr [rax], bh; hlt; jmp qword ptr [rax]; 
0x000000000046faab: adc al, 0; add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x000000000045b427: adc al, 0x11; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x000000000043cbb5: adc al, 0x13; jmp rdx; 
0x00000000004c76b0: adc al, 0x15; add byte ptr [rax], al; sub al, 0x21; hlt; jmp rsi; 
0x0000000000434e75: adc al, 0x16; sub eax, edx; ret; 
0x000000000043a285: adc al, 0x16; test r8d, r8d; je 0x3a28d; xchg eax, edx; sub eax, edx; ret; 
0x000000000049c1da: adc al, 0x24; mov edi, 1; call rax; 
0x000000000049c88d: adc al, 0x24; mov esi, 1; mov edi, 1; call rax; 
0x0000000000458c67: adc al, 0x24; mov r8d, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x000000000040169f: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x172d; add rsp, 0xc8; ret; 
0x000000000040182f: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x18bd; add rsp, 0xc8; ret; 
0x0000000000458761: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x58779; add rsp, 0x28; ret; 
0x0000000000459710: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x59727; add rsp, 0x28; ret; 
0x0000000000494367: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x94374; add rsp, 0x38; ret; 
0x000000000049444a: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x94464; add rsp, 0x38; ret; 
0x000000000041d5c1: adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x000000000041d6ad: adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x0000000000407a89: adc al, 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000453b40: adc al, 0x48; lea eax, [rdi + 0x14]; ret; 
0x000000000042599b: adc al, 0x48; mov eax, dword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000049c46b: adc al, 0x49; cmp dword ptr [rcx + 0x38], 0; je 0x9c490; add rsp, 0x18; ret; 
0x00000000004b0084: adc al, 0x85; cli; jmp rcx; 
0x000000000044dc00: adc al, 0x91; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000044c32e: adc al, 0x91; sub eax, edx; ret; 
0x000000000043cbb1: adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040467a: adc al, 0x96; add rdx, r14; jmp rdx; 
0x000000000041bf70: adc al, 0x97; add rdx, rdi; jmp rdx; 
0x00000000004cdc7c: adc al, 0x9e; stc; jmp rax; 
0x0000000000434fe3: adc al, 0xa; sub eax, edx; ret; 
0x00000000004cc0ec: adc al, 0xad; clc; jmp rbx; 
0x00000000004560bf: adc al, 0xe; cmp rdi, rdx; jb 0x560c9; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044de51: adc al, 0xe; lea rcx, [rip + 0x64fa6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000044c321: adc al, 0xe; lea rcx, [rip + 0x66ad6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043945a: adc al, 0xe; sub eax, edx; ret; 
0x000000000043b12a: adc al, 0xe; sub eax, edx; vzeroupper; ret; 
0x00000000004caa5d: adc al, 0xf6; call qword ptr [rdx]; 
0x0000000000421c9b: adc al, 0xf6; ret 0x7420; 
0x000000000049c55d: adc al, 0xf7; ret; 
0x000000000049b51b: adc al, 0xf8; jmp qword ptr [rsi - 0x70]; 
0x0000000000402038: adc al, 0xf9; or dword ptr [rax], eax; mov edi, edi; movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; jmp rax; 
0x000000000049b401: adc al, 1; add byte ptr [rax], al; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x0000000000432222: adc al, 1; cmp dl, r8b; jne 0x32210; sub rax, 0x10; ret; 
0x000000000043d6b6: adc al, 7; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042d311: adc al, 8; add byte ptr [rcx], dh; call qword ptr [rax + 0x31]; 
0x00000000004d21ac: adc al, al; add byte ptr [rax], al; nop; mov ch, 0xfc; jmp qword ptr [rbx]; 
0x00000000004798ef: adc al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; test dword ptr [rax], esi; idiv edi; dec dword ptr [rax - 0x39]; ret 0x7c60; 
0x000000000044c917: adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044c981: adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004c73b1: adc al, byte ptr [rax]; add byte ptr [rbp + rdx - 0xc], ch; jmp qword ptr [rbx]; 
0x00000000004ab9ad: adc al, byte ptr [rax]; add byte ptr [rcx + rax], bl; add byte ptr [rax], al; movabs eax, dword ptr [0x8ffffd808000001]; fdivr st(7); jmp qword ptr [rcx + 0x8000001]; 
0x00000000004822ea: adc al, byte ptr [rcx + 0xf]; mov dh, 0x47; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000043d8a4: adc al, byte ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040fe2a: adc al, byte ptr [rdx]; add byte ptr [rax], al; call qword ptr [rbx + 0x10]; 
0x0000000000408348: adc al, ch; ret 0xffa1; 
0x000000000045e948: adc al, ch; ret 0xffb4; 
0x000000000045387a: adc al, dl; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000428a4f: adc bh, al; add eax, 0x2b0376; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004aeb7c: adc bh, bh; clc; push rax; add cl, bh; jmp rax; 
0x00000000004011c5: adc bh, byte ptr [rbx - 0x16]; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004078b9: adc bh, byte ptr [rcx]; xor dh, byte ptr [rdx + rdx + 0x48]; cmp eax, ecx; jne 0x78b0; xor eax, eax; ret; 
0x00000000004aeea9: adc bh, cl; jmp qword ptr [rax + 0x13]; 
0x00000000004af998: adc bl, 0xf9; jmp qword ptr [rax]; 
0x00000000004d24ac: adc bl, al; add byte ptr [rax], al; jo 0xd247a; cld; jmp qword ptr [rcx]; 
0x00000000004aebb4: adc bl, bh; clc; push rax; cld; clc; call rax; 
0x0000000000445dfa: adc bl, byte ptr [rax + 0x63490006]; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000492182: adc bl, ch; jno 0x921cf; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x00000000004443f0: adc bl, dh; movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000456e46: adc bl, dh; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000453b16: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000453b36: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000453486: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000453476: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000453b97: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000453bb7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000453507: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004534e7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000453ad7: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000453447: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000453c98: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004535e8: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000004af9fc: adc bl, dh; stc; jmp qword ptr [rax - 0xc]; 
0x00000000004443ef: adc bl, r14b; movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000453b15: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000453b35: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000453485: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000453475: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000453b96: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000453bb6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000453506: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004534e6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000453ad6: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000453446: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000048e61a: adc byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x0000000000428535: adc byte ptr [r11 + 0x5d], r11b; ret; 
0x0000000000420bd9: adc byte ptr [r13 + r9*4 + 0x44], cl; and al, 0x10; call qword ptr [rbp + 0x18]; 
0x00000000004991f5: adc byte ptr [r13 - 0x267bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x000000000043a55f: adc byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000492bee: adc byte ptr [r15], cl; sahf; ret 0x3948; 
0x000000000046b6f9: adc byte ptr [r15], cl; sahf; ret 0x894c; 
0x0000000000493403: adc byte ptr [r15], cl; xchg eax, ebx; ret 0x3949; 
0x00000000004561f2: adc byte ptr [r15], r9b; adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000046a915: adc byte ptr [r15], r9b; xchg eax, ebx; ret 0x3948; 
0x000000000046b0f6: adc byte ptr [r15], r9b; xchg eax, ebx; ret 0x3949; 
0x00000000004910df: adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000420912: adc byte ptr [r8 + 1], r9b; ret; 
0x0000000000494243: adc byte ptr [r8 - 0x73], cl; adc eax, 0x30fe0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000427b1f: adc byte ptr [r8 - 0x77], r9b; ret 0xf8b; 
0x000000000042585c: adc byte ptr [r8 - 0x77], r9b; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x000000000046b6f2: adc byte ptr [r8 - 0x7b], cl; ror byte ptr [rcx - 0x73], 0x43; adc byte ptr [rdi], cl; sahf; ret 0x894c; 
0x000000000048b71f: adc byte ptr [r8 - 0x7d], cl; ret; 
0x000000000042093d: adc byte ptr [r9 + 0x2b], r9b; or byte ptr [r8 + 0x29], r9b; ret; 
0x00000000004538ba: adc byte ptr [rax + 0x29], cl; retf 0x8d4c; sbb eax, 0x5c1cb; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045329a: adc byte ptr [rax + 0x29], cl; retf 0x8d4c; sbb eax, 0x5c76b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000497bb5: adc byte ptr [rax + 0x31487], cl; add byte ptr [rdi], cl; test byte ptr [rsi - 0x7cfffff5], bl; ret 0x4101; 
0x000000000042ddb3: adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x000000000042a0dc: adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x000000000042a2f8: adc byte ptr [rax + 0x39], cl; ret 0xb277; 
0x0000000000432e06: adc byte ptr [rax + 0x39], cl; ret 0xf475; 
0x00000000004933fd: adc byte ptr [rax + 0x39], cl; ret; 
0x000000000049752f: adc byte ptr [rax + 0x3b], cl; sub byte ptr [rbx - 0x26], sil; mov eax, 1; ret; 
0x00000000004910e0: adc byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x0000000000453897: adc byte ptr [rax + 0xf], cl; mov esp, 0x1d8d4cd2; in eax, dx; rol dword ptr [rip + 0xc634900], 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000041fd17: adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x0000000000420913: adc byte ptr [rax + 1], cl; ret; 
0x000000000045b4bb: adc byte ptr [rax + rbp*8 + 0x48], bh; cmp ecx, dword ptr [rax + 0x18]; jg 0x5b4a6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000045b4ba: adc byte ptr [rax + rbp*8 + 0x48], dil; cmp ecx, dword ptr [rax + 0x18]; jg 0x5b4a6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000040fc5e: adc byte ptr [rax - 0x39], cl; ret 0; 
0x000000000046b6ef: adc byte ptr [rax - 0x73], cl; adc byte ptr [r8 - 0x7b], cl; ror byte ptr [rcx - 0x73], 0x43; adc byte ptr [rdi], cl; sahf; ret 0x894c; 
0x0000000000494506: adc byte ptr [rax - 0x73], cl; adc eax, 0x102; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x0000000000432c36: adc byte ptr [rax - 0x73], cl; adc eax, 0x23042; lea rax, [rip + 0x22f9b]; cmovne rax, rdx; ret; 
0x0000000000494244: adc byte ptr [rax - 0x73], cl; adc eax, 0x30fe0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000433586: adc byte ptr [rax - 0x73], cl; adc eax, 0xfffffc92; lea rax, [rip + 0x221ab]; cmove rax, rdx; ret; 
0x000000000048e6bf: adc byte ptr [rax - 0x73], cl; add dword ptr [rax - 0x77], r9d; add eax, 0x24ad45; ret; 
0x00000000004895a7: adc byte ptr [rax - 0x73], cl; jl 0x895b2; and al, ch; push -0x49; jmp qword ptr [rsi + 0xf]; 
0x0000000000426087: adc byte ptr [rax - 0x75], cl; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000048356b: adc byte ptr [rax - 0x75], cl; je 0x83594; sbb byte ptr [rax - 0x77], cl; out dx, eax; mov r9, r14; call rbx; 
0x000000000042be0d: adc byte ptr [rax - 0x77], cl; and al, 8; call rcx; 
0x000000000045b495: adc byte ptr [rax - 0x77], cl; and sil, al; sub byte ptr [rcx], al; ret; 
0x0000000000467ba8: adc byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000047fe47: adc byte ptr [rax - 0x77], cl; jo 0x7fe5c; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000048e8d7: adc byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000041cd39: adc byte ptr [rax - 0x77], cl; out dx, al; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000480e42: adc byte ptr [rax - 0x77], cl; push rax; sub byte ptr [rax - 0x77], cl; push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x000000000042c3f3: adc byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004315cf: adc byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000042d1f1: adc byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x0000000000427b20: adc byte ptr [rax - 0x77], cl; ret 0xf8b; 
0x000000000042585d: adc byte ptr [rax - 0x77], cl; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x00000000004262ff: adc byte ptr [rax - 0x78], al; jl 0x26319; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000493b5b: adc byte ptr [rax - 0x7b], cl; dec dword ptr [rax + 0x48e57506]; mov eax, esi; ret; 
0x00000000004a00e6: adc byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rdx + 0x48]; mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0xa00fc; call rax; 
0x000000000046b6f3: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rcx - 0x73], 0x43; adc byte ptr [rdi], cl; sahf; ret 0x894c; 
0x00000000004501e7: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x0000000000450223: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x0000000000433495: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rbx*8 + 0x48], 0x29; ret; 
0x00000000004197a5: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret 0x18; 
0x0000000000416316: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret; 
0x0000000000409686: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rbx + 0x48], cl; mov edi, eax; call rdx; 
0x0000000000428bd3: adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000464888: adc byte ptr [rax - 0x7d], cl; ret 0x4902; 
0x000000000040fe30: adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000004ae8fc: adc byte ptr [rax - 8], ah; call qword ptr [rax + 0x61]; 
0x00000000004c7251: adc byte ptr [rax], al; add ah, ch; or esp, esi; call qword ptr [rbx + 1]; 
0x00000000004d1acd: adc byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; cmp byte ptr [rcx - 0x78280000], bh; cld; jmp qword ptr [rcx]; 
0x00000000004b9c75: adc byte ptr [rax], al; add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x00000000004aaf51: adc byte ptr [rax], al; add byte ptr [rax - 0x60000000], bl; add dword ptr [rax], eax; add byte ptr [rcx], dl; fdivr st(7); call qword ptr [rcx]; 
0x0000000000482fa0: adc byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0xfffd40c6; cmove rax, rdx; ret; 
0x000000000048ef9e: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c4a4d03; ret; 
0x000000000048efbb: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c4a4d20; ret; 
0x000000000048eff8: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c4a4d5d; ret; 
0x00000000004394ba: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0x7f10; 
0x000000000044c702: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0xf10; 
0x000000000044e1cc: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044cb21: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004a89c8: adc byte ptr [rax], al; add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; fdivr st(7); call qword ptr [rax]; 
0x00000000004ca3fc: adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr fs:[rax], al; sbb al, 0xe0; cmc; call qword ptr [rbx]; 
0x00000000004d0480: adc byte ptr [rax], al; add byte ptr [rax], al; call 0xffffffffc20d052b; add bl, dh; jmp qword ptr [rcx]; 
0x00000000004d1270: adc byte ptr [rax], al; add byte ptr [rax], al; fdiv dword ptr [rax + 0x34c80000]; cld; call qword ptr [rax]; 
0x00000000004a89ac: adc byte ptr [rax], al; add byte ptr [rax], al; fdivr st(7); call qword ptr [rax]; 
0x00000000004ccc70: adc byte ptr [rax], al; add byte ptr [rax], al; fsubr dword ptr [rdx]; add byte ptr [rax], cl; in al, 0xf8; call qword ptr [rsi]; 
0x00000000004ce314: adc byte ptr [rax], al; add byte ptr [rax], al; jl 0xce29b; add byte ptr [rax], al; fdivp st(1); call qword ptr [rdx]; 
0x00000000004cdffc: adc byte ptr [rax], al; add byte ptr [rax], al; jle 0xce003; add byte ptr [rbx + rax*8], cl; stc; call qword ptr [rcx]; 
0x0000000000458c33: adc byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x48; syscall; 
0x00000000004cd150: adc byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xcf00006f; xor esi, ebx; jmp qword ptr [rbx]; 
0x00000000004d1fd8: adc byte ptr [rax], al; add byte ptr [rax], al; mov esi, 0xb0100000; cld; call qword ptr [rbx]; 
0x000000000047f789: adc byte ptr [rax], al; add byte ptr [rax], al; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000045739c: adc byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004ce300: adc byte ptr [rax], al; add byte ptr [rax], al; push 0x68000081; fdivp st(1); call qword ptr [rax]; 
0x00000000004d0800: adc byte ptr [rax], al; add byte ptr [rax], al; push 0x680000a6; idiv bl; jmp qword ptr [rcx]; 
0x00000000004cdfe8: adc byte ptr [rax], al; add byte ptr [rax], al; push rax; jle 0xcdfef; add byte ptr [rax], al; ret; 
0x00000000004095b3: adc byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004d04b0: adc byte ptr [rax], al; add byte ptr [rax], al; sbb byte ptr [rbx - 0x1d080000], ah; sti; jmp qword ptr [rdx]; 
0x00000000004c8bd8: adc byte ptr [rax], al; add byte ptr [rax], al; sub al, byte ptr [rax]; add al, dl; cmc; call qword ptr [rax]; 
0x0000000000459671: adc byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000459671: adc byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x59680; ret; 
0x00000000004cc01c: adc byte ptr [rax], al; add byte ptr [rax], al; test byte ptr [rsi], bl; add byte ptr [rsp], bl; clc; call rsp; 
0x00000000004d242c: adc byte ptr [rax], al; add byte ptr [rax], al; xchg eax, esp; ret 0; 
0x00000000004ca1c8: adc byte ptr [rax], al; add byte ptr [rax], al; xor byte ptr [rax], al; add byte ptr [rax - 0x27], al; cmc; call qword ptr [rsi]; 
0x00000000004c71b5: adc byte ptr [rax], al; add byte ptr [rax], bh; or ah, dh; jmp qword ptr [rsi + 1]; 
0x00000000004c7281: adc byte ptr [rax], al; add byte ptr [rbx + rcx], bl; hlt; call qword ptr [rax]; 
0x000000000047bee5: adc byte ptr [rax], al; add byte ptr [rcx - 0x75], al; add byte ptr [r11 - 0x78f0d008], r8b; mov eax, 0x8900001d; ret 0x349; 
0x00000000004790a6: adc byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rdx + rbx], esp; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000481bda: adc byte ptr [rax], al; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0xdf2]; cmove rax, rdx; ret; 
0x00000000004b9c6d: adc byte ptr [rax], al; add byte ptr [rsi - 0x46fffff0], dh; adc byte ptr [rax], al; add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x000000000044a3d8: adc byte ptr [rax], al; add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x0000000000482f94: adc byte ptr [rax], al; lea rax, [rip - 0x2c0ad]; cmp edx, 0x1000; lea rdx, [rip - 0x2bf3a]; cmove rax, rdx; ret; 
0x0000000000493910: adc byte ptr [rax], al; or rsi, rax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x00000000004aec20: adc byte ptr [rax], al; stc; jmp rax; 
0x00000000004c87af: adc byte ptr [rax], dh; add byte ptr [rax], al; add byte ptr [rax], bl; add byte ptr es:[rax], al; or byte ptr [rax - 0xb], dl; jmp qword ptr [rax]; 
0x000000000049d488: adc byte ptr [rbp + 0x13], dh; xor eax, eax; ret; 
0x000000000049a2e8: adc byte ptr [rbp + 0x1d], dh; xor eax, eax; ret; 
0x0000000000400aad: adc byte ptr [rbp + rbp*2], bh; jmp rax; 
0x00000000004538ff: adc byte ptr [rbp + rcx*4 + 0x1d], cl; mov ecx, eax; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004532df: adc byte ptr [rbp + rcx*4 + 0x1d], cl; sub edi, eax; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000420bda: adc byte ptr [rbp + rcx*4 + 0x44], cl; and al, 0x10; call qword ptr [rbp + 0x18]; 
0x00000000004991f6: adc byte ptr [rbp - 0x267bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x000000000041d75c: adc byte ptr [rbx + 0x3948006d], al; ret; 
0x000000000040ff3d: adc byte ptr [rbx + 0x480c247c], cl; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x0000000000422fd4: adc byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000401af5: adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000428536: adc byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000409540: adc byte ptr [rbx + 0x6d], 0; pop rbx; ret; 
0x0000000000409243: adc byte ptr [rbx + 0x6d], 0; ret; 
0x00000000004d23b7: adc byte ptr [rbx + 0xec37602], al; or byte ptr [rax], al; add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax], ch; ret 0; 
0x0000000000453547: adc byte ptr [rbx + 0xff3174e], cl; jg 0x53556; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000453bf7: adc byte ptr [rbx + 0xff3174e], cl; jg 0x53c06; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000453567: adc byte ptr [rbx + 0xff3184e], cl; jg 0x53576; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000453c17: adc byte ptr [rbx + 0xff3184e], cl; jg 0x53c26; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000498b24: adc byte ptr [rbx + rax], 0; add byte ptr [rax + 0x74], ah; xor ecx, dword ptr [rcx - 0x7d]; ret; 
0x0000000000420d6b: adc byte ptr [rbx + rcx*4 + 0x44], cl; and al, 0x18; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000427702: adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000048033e: adc byte ptr [rbx - 0x3b7cb7fa], cl; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000484a0d: adc byte ptr [rbx - 0x47e7db84], cl; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000004ae990: adc byte ptr [rbx - 0x6b0f0008], 0xf8; jmp qword ptr [rax - 0x6a]; 
0x00000000004ae8ec: adc byte ptr [rbx - 8], bl; call qword ptr [rax + 0x5c]; 
0x00000000004aec88: adc byte ptr [rbx], al; stc; call qword ptr [rax]; 
0x00000000004afa74: adc byte ptr [rbx], bh; cli; push qword ptr [rax]; cmp edi, edx; call qword ptr [rax + 0x3b]; 
0x00000000004aed24: adc byte ptr [rbx], ch; stc; call qword ptr [rax]; 
0x00000000004aee54: adc byte ptr [rbx], cl; stc; jmp qword ptr [rax + 0xc]; 
0x000000000042093e: adc byte ptr [rcx + 0x2b], cl; or byte ptr [r8 + 0x29], r9b; ret; 
0x0000000000404677: adc byte ptr [rcx + 0x63], cl; adc al, 0x96; add rdx, r14; jmp rdx; 
0x00000000004d2453: adc byte ptr [rcx + 0xe], cl; or byte ptr [rax], al; add byte ptr [rax], r8b; add al, al; ret 0; 
0x0000000000455d0b: adc byte ptr [rcx + rbp - 0x40], al; cmp eax, ecx; jle 0x55d48; movsxd rax, ecx; ret; 
0x0000000000481443: adc byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x000000000041cca4: adc byte ptr [rcx + rcx*4 - 2], cl; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000045a202: adc byte ptr [rcx - 0x75], cl; add al, byte ptr [rbx + 0x94801e0]; ret 0x8949; 
0x000000000045a2fa: adc byte ptr [rcx - 0x75], cl; push rax; or byte ptr [rbx + 0x94801e2], al; ret 0x8949; 
0x0000000000428ccf: adc byte ptr [rcx - 0x75], cl; sbb byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x0000000000499eef: adc byte ptr [rcx - 0x77], cl; ret; 
0x0000000000428487: adc byte ptr [rcx - 0x7d], al; ret; 
0x00000000004394ed: adc byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000046b691: adc byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000491a3a: adc byte ptr [rcx], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000457cf9: adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004aec84: adc byte ptr [rcx], al; stc; call qword ptr [rax]; 
0x00000000004aed20: adc byte ptr [rcx], ch; stc; call qword ptr [rax]; 
0x00000000004822fa: adc byte ptr [rcx], cl; ret 0xb60f; 
0x0000000000467c25: adc byte ptr [rcx], dh; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000043daa6: adc byte ptr [rdi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000045630d: adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000004561f3: adc byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000492bef: adc byte ptr [rdi], cl; sahf; ret 0x3948; 
0x000000000046b6fa: adc byte ptr [rdi], cl; sahf; ret 0x894c; 
0x0000000000453d53: adc byte ptr [rdi], cl; test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x00000000004398d1: adc byte ptr [rdi], cl; xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004399c1: adc byte ptr [rdi], cl; xchg ah, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004397e1: adc byte ptr [rdi], cl; xchg ah, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000043a229: adc byte ptr [rdi], cl; xchg byte ptr [rax + rax - 0x7cb80000], al; ret 0xeb10; 
0x0000000000439d81: adc byte ptr [rdi], cl; xchg byte ptr [rax - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000439511: adc byte ptr [rdi], cl; xchg byte ptr [rbp + rcx - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000439f61: adc byte ptr [rdi], cl; xchg byte ptr [rbx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004396f1: adc byte ptr [rdi], cl; xchg byte ptr [rbx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000043a141: adc byte ptr [rdi], cl; xchg byte ptr [rcx + rax], ch; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000043a051: adc byte ptr [rdi], cl; xchg byte ptr [rdx + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000439993: adc byte ptr [rdi], cl; xchg byte ptr [rdx], bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000439a83: adc byte ptr [rdi], cl; xchg byte ptr [rdx], ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004398a3: adc byte ptr [rdi], cl; xchg byte ptr [rdx], cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000439601: adc byte ptr [rdi], cl; xchg byte ptr [rsp + rcx - 0x7cb80000], ch; ret 0xeb10; 
0x00000000004397b3: adc byte ptr [rdi], cl; xchg dl, bh; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004395d3: adc byte ptr [rdi], cl; xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004396c3: adc byte ptr [rdi], cl; xchg dl, ch; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004394e3: adc byte ptr [rdi], cl; xchg dl, cl; or eax, 0x83480000; ret 0x4910; 
0x000000000046a916: adc byte ptr [rdi], cl; xchg eax, ebx; ret 0x3948; 
0x000000000046b0f7: adc byte ptr [rdi], cl; xchg eax, ebx; ret 0x3949; 
0x0000000000459109: adc byte ptr [rdi], cl; xchg eax, esp; ret 0x2044; 
0x00000000004932b1: adc byte ptr [rdi], r9b; sahf; ret 0x3948; 
0x00000000004925ed: adc byte ptr [rdi], r9b; xchg eax, ebx; ret 0x3948; 
0x000000000045b48d: adc byte ptr [rdx + 0x40], dh; cmp rcx, qword ptr [rax + 0x18]; ja 0x5b4a6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000045b48c: adc byte ptr [rdx + 0x40], sil; cmp rcx, qword ptr [rax + 0x18]; ja 0x5b4a6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x00000000004c983b: adc byte ptr [rdx + 0xe], al; or byte ptr [rax + 0xb], cl; add dh, byte ptr [rbx + 0xa]; ret; 
0x000000000048329d: adc byte ptr [rdx + 1], ch; xor r8d, r8d; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000004ae9f0: adc byte ptr [rdx - 0x4cff0008], dh; clc; push rax; mov bl, 0xf8; jmp rax; 
0x00000000004ca3ac: adc byte ptr [rdx], al; add al, dh; fcomip st(5); call qword ptr [rdx]; 
0x0000000000455826: adc byte ptr [rdx], al; jne 0x55840; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x55820; ret; 
0x00000000004558d6: adc byte ptr [rdx], al; jne 0x558f0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x558d0; ret; 
0x00000000004afa4c: adc byte ptr [rdx], bh; cli; jmp qword ptr [rax]; 
0x000000000043bfeb: adc byte ptr [rdx], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004aeea8: adc byte ptr [rdx], dl; stc; jmp qword ptr [rax + 0x13]; 
0x0000000000455825: adc byte ptr [rdx], r8b; jne 0x55840; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x55820; ret; 
0x00000000004558d5: adc byte ptr [rdx], r8b; jne 0x558f0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x558d0; ret; 
0x000000000049c5ec: adc byte ptr [rip - 0x7ab80000], ah; sal byte ptr [rbx + rcx + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x000000000043b495: adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043be9a: adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret; 
0x000000000043b490: adc byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000433bc5: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x00000000004480eb: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x000000000043a560: adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x000000000045606b: adc byte ptr [rsi + rdx - 0x10], cl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004561e9: adc byte ptr [rsi + rdx - 0x20], bl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000453d23: adc byte ptr [rsi - 0x70], ah; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000044773a: adc byte ptr [rsi - 0x75], ah; mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000453527: adc byte ptr [rsi - 0x75], ah; sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000004ae8dc: adc byte ptr [rsi - 8], dl; call qword ptr [rax + 0x57]; 
0x0000000000456068: adc byte ptr [rsi], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004d0380: adc ch, 0xfb; jmp qword ptr [rdx]; 
0x0000000000427a95: adc ch, byte ptr [rbx]; add byte ptr [rbx + 0x2b12d505], al; add byte ptr [rcx], al; ret; 
0x0000000000427a9b: adc ch, byte ptr [rbx]; add byte ptr [rcx], al; ret; 
0x00000000004c3fb9: adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x0000000000410220: adc ch, cl; ret; 
0x00000000004aeea5: adc cl, bh; call qword ptr [rax]; 
0x00000000004aeea5: adc cl, bh; call qword ptr [rax]; adc bh, cl; jmp qword ptr [rax + 0x13]; 
0x000000000046cbdf: adc cl, byte ptr [rax - 0x75]; adc cl, byte ptr [rbx + rcx*4 + 0x6c]; ret 0x4c40; 
0x0000000000427b35: adc cl, byte ptr [rax - 0x75]; or byte ptr [r8 + 0x39], r9b; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x000000000045ba5a: adc cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x000000000044ff15: adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x000000000048bc2d: adc cl, byte ptr [rbx + rcx*4 + 0x3b]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000046cbe2: adc cl, byte ptr [rbx + rcx*4 + 0x6c]; ret 0x4c40; 
0x00000000004952fa: adc cl, byte ptr [rcx + 0x48b48d8]; ret 0x8b48; 
0x000000000046b9b5: adc cl, byte ptr [rcx - 0x7d]; ret; 
0x000000000041bf6b: adc cl, byte ptr [rcx]; add byte ptr [rax + 0x63], cl; adc al, 0x97; add rdx, rdi; jmp rdx; 
0x00000000004aecdc: adc dh, ah; clc; jmp qword ptr [rax - 0x19]; 
0x00000000004946b9: adc dh, byte ptr [rbx - 0xc]; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x000000000041f0b5: adc dh, dh; ret 0x7420; 
0x000000000042b85e: adc dh, dh; ret 0xf0f; 
0x000000000047f4fb: adc dword ptr [rax + 0x39], ecx; ret 0x3873; 
0x00000000004230c1: adc dword ptr [rax + 0x48000000], -0x77; call 0x5c438e28; ret; 
0x0000000000407558: adc dword ptr [rax + 0xc0], eax; pop rbx; ret; 
0x000000000041d5bd: adc dword ptr [rax + rcx*2 + 0x33], esp; adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x000000000041d6a9: adc dword ptr [rax + rcx*2 + 0x33], esp; adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000041d683: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000046a2bd: adc dword ptr [rax - 0x39], ecx; ret 0xffe0; 
0x000000000042092f: adc dword ptr [rax - 0x3f], ecx; cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x000000000045b428: adc dword ptr [rax - 0x73], ecx; or eax, 0xffffffa0; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x00000000004809d4: adc dword ptr [rax - 0x7d], ecx; ret 0x4110; 
0x0000000000413e5f: adc dword ptr [rax - 0x7d], ecx; ret; 
0x000000000048035e: adc dword ptr [rax - 1], edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044e1cb: adc dword ptr [rax], 0x83480000; ret 0x4910; 
0x000000000044cab7: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044e0cf: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004c72c1: adc dword ptr [rax], eax; add byte ptr [rbx + rcx], bh; hlt; call qword ptr [rdi]; 
0x00000000004ab34d: adc dword ptr [rax], eax; add byte ptr [rbx], bl; add byte ptr [rax], al; or eax, 0xe4000001; fdivr st(7); jmp rsp; 
0x000000000046dbd0: adc dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000046a925: adc dword ptr [rax], eax; add byte ptr [rcx - 0x7d], cl; call qword ptr [rbx]; 
0x00000000004ab309: adc dword ptr [rax], eax; add byte ptr [rsi - 0x3c000000], dh; add byte ptr [rax], al; add ah, dl; fdivr st(7); call rsp; 
0x00000000004c7361: adc dword ptr [rax], eax; add byte ptr [rsp + rcx - 0xc], bl; jmp qword ptr [rax + 9]; 
0x0000000000481127: adc dword ptr [rbp + 0x16], esi; sub rdx, qword ptr [rcx + 0x10]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x000000000043b0d6: adc dword ptr [rbp + 0x31000002], -0x40; vzeroupper; ret; 
0x0000000000444ab6: adc dword ptr [rbp + 0x4c000000], -0x73; sbb eax, 0x6a90e; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004c60ac: adc dword ptr [rbp + rdi*8 - 1], 0xfffd5481; fstp dword ptr [rcx - 3]; jmp rsp; 
0x00000000004c2477: adc dword ptr [rbp - 0x1f57cada], ebp; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x0000000000456318: adc dword ptr [rbx], eax; ret; 
0x0000000000456291: adc dword ptr [rbx], esp; ret; 
0x0000000000447a09: adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000447a10: adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000447a17: adc dword ptr [rcx + 7], edi; ret; 
0x0000000000456283: adc dword ptr [rcx - 0x10], esi; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000456287: adc dword ptr [rcx - 0x20], edi; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000045628c: adc dword ptr [rcx - 0x30], eax; movups xmmword ptr [r11], xmm4; ret; 
0x00000000004476b2: adc dword ptr [rcx - 1], ebx; ret; 
0x0000000000447676: adc dword ptr [rcx - 1], edi; ret; 
0x00000000004476ab: adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004478a9: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000044766f: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004478a2: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000447668: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000044789b: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000447661: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000456280: adc dword ptr [rcx], ebp; movups xmmword ptr [rcx - 0x10], xmm6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000040647d: adc dword ptr [rcx], esi; ret 0xd269; 
0x0000000000427b76: adc dword ptr [rcx], esi; rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x000000000045630b: adc dword ptr [rdi + 0x10], ebp; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000004561f1: adc dword ptr [rdi + 0x10], ecx; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000045630f: adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000456313: adc dword ptr [rdi + 0x30], edi; movups xmmword ptr [r11], xmm8; ret; 
0x00000000004476a4: adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000455e51: adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000456073: adc dword ptr [rdi + rdx - 0x10], ecx; ret; 
0x00000000004561f5: adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000004561c8: adc dword ptr [rdi + rdx - 0x10], esp; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000004561cd: adc dword ptr [rdi + rdx - 0x20], ebp; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000004561fa: adc dword ptr [rdi + rdx - 0x20], ebx; ret; 
0x00000000004561d2: adc dword ptr [rdi + rdx - 0x30], esi; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000004561d7: adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x0000000000447b64: adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000447b6b: adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000447b72: adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000447b79: adc dword ptr [rdi - 8], edi; ret; 
0x000000000043d95b: adc dword ptr [rdi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004561ee: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000456070: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000044769e: adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000455350: adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x0000000000455e4b: adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455e6c: adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000456308: adc dword ptr [rdi], esp; movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000455f91: adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000455f98: adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000455f9f: adc dword ptr [rsi + 3], edx; ret; 
0x000000000045602e: adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000456035: adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000045603c: adc dword ptr [rsi + 7], edx; ret; 
0x0000000000455e3e: adc dword ptr [rsi - 1], edx; ret; 
0x0000000000455e37: adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455e30: adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455e29: adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455f8b: adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000044cab6: adc dword ptr es:[rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000494509: adc eax, 0x102; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x00000000004339c8: adc eax, 0x1bf63; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x000000000040b505: adc eax, 0x1f0f0000; test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff94; ret; 
0x00000000004a00eb: adc eax, 0x20478b48; test rax, rax; je 0xa00fc; call rax; 
0x00000000004c76b1: adc eax, 0x212c0000; hlt; jmp rsi; 
0x0000000000433912: adc eax, 0x227d9; lea rax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x00000000004337d2: adc eax, 0x22909; lea rax, [rip + 0x22862]; cmovne rax, rdx; ret; 
0x0000000000433672: adc eax, 0x22a79; lea rax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x0000000000433979: adc eax, 0x22ac2; lea rax, [rip + 0x22a7b]; cmovne rax, rdx; ret; 
0x0000000000433839: adc eax, 0x22bf2; lea rax, [rip + 0x22bab]; cmovne rax, rdx; ret; 
0x00000000004336d9: adc eax, 0x22d62; lea rax, [rip + 0x22d1b]; cmovne rax, rdx; ret; 
0x0000000000433958: adc eax, 0x22f23; lea rax, [rip + 0x22ecc]; cmovne rax, rdx; ret; 
0x0000000000432c39: adc eax, 0x23042; lea rax, [rip + 0x22f9b]; cmovne rax, rdx; ret; 
0x0000000000433818: adc eax, 0x23053; lea rax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x0000000000433727: adc eax, 0x23834; lea rax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x0000000000433778: adc eax, 0x23973; lea rax, [rip + 0x2390c]; cmovne rax, rdx; ret; 
0x000000000049c4f7: adc eax, 0x23cd04; cmp byte ptr [rdx + rsi], 8; jne 0x9c51c; mov rax, qword ptr [rax]; ret; 
0x00000000004941d7: adc eax, 0x2439c4; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000494785: adc eax, 0x244a4e; add word ptr [rdx + rax*2], 1; ret; 
0x000000000045c877: adc eax, 0x27923c; pop rbx; ret; 
0x0000000000427a93: adc eax, 0x2b12e0; add dword ptr [rip + 0x2b12d5], 1; ret; 
0x000000000040ff34: adc eax, 0x2c8ecf; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004c7765: adc eax, 0x2ca80000; hlt; call qword ptr [rcx]; 
0x0000000000494247: adc eax, 0x30fe0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000049d46a: adc eax, 0x30ff8040; jne 0x9d498; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000049e2ca: adc eax, 0x30ff8040; jne 0x9e2f8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000047e9a6: adc eax, 0x3fe3d; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000048aff2: adc eax, 0x4000003; ret; 
0x000000000048af42: adc eax, 0x4000003; xor eax, eax; ret; 
0x00000000004c0ede: adc eax, 0x42d35a1d; cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x00000000004448a5: adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004448a0: adc eax, 0x477f0ff3; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000470787: adc eax, 0x48002632; mov eax, dword ptr [rax + rdi*8]; jmp rax; 
0x000000000045840e: adc eax, 0x57c09; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000043d566: adc eax, 0x63490007; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044f2b8: adc eax, 0x63b43; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044f29e: adc eax, 0x63b5d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044dc48: adc eax, 0x651b3; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044dc2e: adc eax, 0x651cd; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044c098: adc eax, 0x66d63; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044c07e: adc eax, 0x66d7d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000449f48: adc eax, 0x68eb3; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000449f2e: adc eax, 0x68ecd; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004755aa: adc eax, 0x6be0f44; cmp edi, r8d; ja 0x75590; mov eax, r9d; ret; 
0x0000000000433998: adc eax, 0x7133; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x00000000004325df: adc eax, 0x7c22c; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000049acf4: adc eax, 0x80023e5; mov byte ptr [rip + 0x23e50f], 8; mov byte ptr [rip + 0x23e509], 8; ret; 
0x000000000044c641: adc eax, 0x83480000; ret 0xe910; 
0x0000000000478d75: adc eax, 0x83fffffd; ret; 
0x00000000004880f1: adc eax, 0x89000003; ret 0xe8c0; 
0x000000000049ea56: adc eax, 0x8948ffb6; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004795b6: adc eax, 0x8b480000; test dword ptr [rax], esi; idiv edi; dec dword ptr [rax - 0x39]; ret 0x7c60; 
0x000000000048ef73: adc eax, 0x8d48fff7; push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000041c24f: adc eax, 0x90fc4; movzx edi, dl; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x000000000040cc95: adc eax, 0x957de; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004085da: adc eax, 0x996b9; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000408540: adc eax, 0x99733; mov r12d, eax; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x000000000049ea7e: adc eax, 0x9ae8ffb6; fdivrp st(7); jmp qword ptr [rsi + 0x2e]; 
0x00000000004110c1: adc eax, 0x9c042; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000410ef4: adc eax, 0x9c1b7; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000410d70: adc eax, 0x9c30f; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000402037: adc eax, 0x9f914; mov edi, edi; movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; jmp rax; 
0x0000000000481c08: adc eax, 0xc03; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x902]; cmove rax, rdx; ret; 
0x0000000000482f28: adc eax, 0xcd3; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000434e6a: adc eax, 0xd0bc0f48; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000040cc92: adc eax, 0xde158d48; push rdi; or dword ptr [rax], eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000483b3a: adc eax, 0xe180d188; pcmpeqb mm3, qword ptr [rsi]; ret; 
0x0000000000490453: adc eax, 0xf000000; add eax, 0x940fc085; ret 0x3d; 
0x0000000000456ec4: adc eax, 0xf880272; ret; 
0x00000000004090a0: adc eax, 0xfc00000; test dh, cl; add dword ptr [rax], eax; add byte ptr [rdi], cl; xchg dword ptr [rax - 0x7f000000], esp; call qword ptr [rsi]; 
0x0000000000482fa5: adc eax, 0xfffd40c6; cmove rax, rdx; ret; 
0x0000000000433589: adc eax, 0xfffffc92; lea rax, [rip + 0x221ab]; cmove rax, rdx; ret; 
0x0000000000456ebf: adc eax, dword ptr [rax + 0x157701fa]; jb 0x56ec9; mov byte ptr [rdi], cl; ret; 
0x000000000048b533: adc eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; or eax, 0x34243; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000044df2e: adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004c74a5: adc eax, dword ptr [rax]; add byte ptr [rax], bh; sbb esp, esi; jmp qword ptr [rcx + 2]; 
0x000000000040a49c: adc eax, dword ptr [rax]; add byte ptr [rbp - 0x3db6f040], al; add rsp, 8; ret; 
0x000000000043d754: adc eax, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000493769: adc eax, eax; ret; 
0x00000000004aea5c: adc eax, ebx; clc; call qword ptr [rcx]; 
0x00000000004938a6: adc eax, edx; pop rbp; pop rbx; ret; 
0x000000000048e778: adc eax, esi; add eax, 0x24b0a8; add byte ptr [rax - 0x77], cl; add eax, 0x24ac89; add rsp, 8; ret; 
0x00000000004c2305: adc ebp, dword ptr [rbx]; fstp dword ptr [rbx + 0x4a315a58]; ret 0x1b49; 
0x0000000000421fc7: adc ebx, dword ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x0000000000445af9: adc ebx, dword ptr [rbx + 0x63490006]; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004457f9: adc ebx, dword ptr [rsi + 0x63490006]; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000484d3c: adc ebx, esi; ret; 
0x0000000000403462: adc ecx, dword ptr [rax - 0x39]; ret 0xffff; 
0x000000000047f8d0: adc ecx, dword ptr [rax - 0x39]; ror byte ptr [rax], 0x83; insd dword ptr [rdi], dx; add byte ptr [rax - 0x39], cl; ret 0x7c60; 
0x000000000042651a: adc ecx, dword ptr [rax - 0x7b]; push qword ptr [rbp + rax - 0xa]; ret 0x7401; 
0x000000000041d781: adc ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000466b74: adc ecx, dword ptr [rcx + 0x29d231fb]; ret; 
0x0000000000400ccc: adc edi, dword ptr [rax + 1]; mov dword ptr [rip + 0x2d7698], eax; add rsp, 8; ret; 
0x0000000000426531: adc edi, dword ptr [rax + 1]; pop rbx; pop rbp; pop r12; ret; 
0x00000000004010f4: adc edi, dword ptr [rax - 0x16]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048e4be: adc edi, dword ptr [rcx]; ret 0x840f; 
0x000000000048e55b: adc edi, dword ptr [rcx]; ret 0xc74; 
0x00000000004cee09: adc edi, ebx; jmp qword ptr [rdi]; 
0x00000000004aea58: adc edi, edx; clc; call qword ptr [rcx]; 
0x00000000004460f9: adc edx, dword ptr [rbp + 0x63490006]; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000049288a: adc edx, eax; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x00000000004975a1: adc edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000045f330: adc edx, edi; jmp qword ptr [rsi + 0xf]; 
0x00000000004c381e: adc esi, dword ptr [rbp - 0x60001a67]; mov dh, 0xc7; ret 0xe71f; 
0x00000000004258e3: adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000049d2fc: adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000041f0b3: adc esi, dword ptr [rdx + rdx - 0xa]; ret 0x7420; 
0x0000000000421c99: adc esi, dword ptr [rsp + rdx - 0xa]; ret 0x7420; 
0x00000000004454f9: adc esp, dword ptr [rcx + 0x63490006]; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444ef9: adc esp, dword ptr [rdi + 0x63490006]; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004451f9: adc esp, dword ptr [rsi + rax + 0x14634900]; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000447a08: adc qword ptr [rcx + 5], rbp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000447a0f: adc qword ptr [rcx + 6], rsi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000447a16: adc qword ptr [rcx + 7], rdi; ret; 
0x00000000004476b1: adc qword ptr [rcx - 1], rbx; ret; 
0x0000000000447675: adc qword ptr [rcx - 1], rdi; ret; 
0x00000000004476aa: adc qword ptr [rcx - 2], rdx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004478a8: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000044766e: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004478a1: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000447667: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000044789a: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000447660: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004476a3: adc qword ptr [rdi + 1], rcx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000455e50: adc qword ptr [rdi + 1], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000447b63: adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000447b6a: adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000447b71: adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000447b78: adc qword ptr [rdi - 8], rdi; ret; 
0x000000000044769d: adc qword ptr [rdi], rax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000455e4a: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455e6b: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455f90: adc qword ptr [rsi + 1], rdx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000455f97: adc qword ptr [rsi + 2], rdx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000455f9e: adc qword ptr [rsi + 3], rdx; ret; 
0x000000000045602d: adc qword ptr [rsi + 5], rdx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000456034: adc qword ptr [rsi + 6], rdx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000045603b: adc qword ptr [rsi + 7], rdx; ret; 
0x0000000000455e3d: adc qword ptr [rsi - 1], rdx; ret; 
0x0000000000455e36: adc qword ptr [rsi - 2], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455e2f: adc qword ptr [rsi - 3], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455e28: adc qword ptr [rsi - 4], rdx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455f8a: adc qword ptr [rsi], rdx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000004975a0: adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000456e45: adc r11b, r14b; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000048b532: adc r8, qword ptr [r8]; add byte ptr [rax - 0x73], cl; or eax, 0x34243; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x00000000004ab9ac: adc r8b, byte ptr [r8]; add byte ptr [rcx + rax], bl; add byte ptr [rax], al; movabs eax, dword ptr [0x8ffffd808000001]; fdivr st(7); jmp qword ptr [rcx + 0x8000001]; 
0x000000000043d805: adc r8d, dword ptr [r15]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d603: adc rax, 0x63490007; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004938a5: adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000492889: adc rdx, r8; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x00000000004c727f: add ah, ah; adc byte ptr [rax], al; add byte ptr [rbx + rcx], bl; hlt; call qword ptr [rax]; 
0x00000000004ab357: add ah, ah; fdivr st(7); jmp rsp; 
0x00000000004cdbfb: add ah, ah; popfq; stc; call qword ptr [rdx]; 
0x00000000004caa5b: add ah, al; adc al, 0xf6; call qword ptr [rdx]; 
0x00000000004c735f: add ah, al; adc dword ptr [rax], eax; add byte ptr [rsp + rcx - 0xc], bl; jmp qword ptr [rax + 9]; 
0x00000000004ab30f: add ah, al; add byte ptr [rax], al; add ah, dl; fdivr st(7); call rsp; 
0x0000000000457309: add ah, bh; add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; pop rbx; ret; 
0x00000000004572ee: add ah, bh; add eax, dword ptr [rax]; pop rbx; ret; 
0x00000000004573cb: add ah, bh; inc dword ptr [rbx]; div ecx; pop rbx; mov eax, eax; ret; 
0x0000000000457339: add ah, bh; inc dword ptr [rbx]; pop rbx; ret; 
0x00000000004cc933: add ah, bh; sar al, 1; call rsi; 
0x00000000004cdc77: add ah, bl; jp 0xcdc7b; add byte ptr [rsi + rbx*4], dl; stc; jmp rax; 
0x0000000000456bc0: add ah, byte ptr [rdx - 0xf]; dec byte ptr [rax + 0x7f]; jg 0x56bcb; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000456d66: add ah, byte ptr [rdx - 0xf]; dec byte ptr [rax + 0x7f]; jg 0x56d71; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000455f9a: add ah, byte ptr [rdx - 0xf]; jl 0x55fe7; adc dword ptr [rsi + 3], edx; ret; 
0x0000000000485c79: add ah, byte ptr [rip + 0x508b4800]; or byte ptr [rax - 0x75], cl; xor al, ch; and byte ptr [rax + 0x3948fff7], ch; ret; 
0x0000000000452ec3: add ah, byte ptr [rsi - 0x75]; add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x0000000000451703: add ah, byte ptr [rsi - 0x75]; add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x00000000004c8887: add ah, ch; add byte ptr es:[rax], al; push rdx; cmc; call qword ptr [rdx]; 
0x00000000004d13d3: add ah, ch; cmp edi, esp; call qword ptr [rax]; 
0x00000000004c7253: add ah, ch; or esp, esi; call qword ptr [rbx + 1]; 
0x00000000004cc187: add ah, ch; pop rdi; add byte ptr [rax], al; scasd eax, dword ptr [rdi]; clc; call qword ptr [rcx + 1]; 
0x00000000004aa2bf: add ah, cl; add byte ptr [rax], al; add bh, ah; fdivr st(7); jmp rdi; 
0x00000000004c8c43: add ah, cl; cmc; call qword ptr [rdi]; 
0x00000000004cbd67: add ah, cl; pop rbx; add byte ptr [rax], al; add al, 0x1f; clc; call qword ptr [rsi + 0x16]; 
0x00000000004c84a3: add ah, cl; retf; hlt; jmp qword ptr [rdx + 0x36]; 
0x00000000004cc09b: add ah, dh; lodsb al, byte ptr [rsi]; clc; call qword ptr [rdx]; 
0x00000000004c670b: add ah, dh; mov dl, 0xf3; call qword ptr [rcx]; 
0x00000000004d0bcb: add ah, dh; or bh, ah; call qword ptr [rdi + 1]; 
0x00000000004c8b33: add ah, dl; add byte ptr [rax], al; add byte ptr [rax + 0x63], bl; cmc; jmp qword ptr [rcx + 1]; 
0x00000000004ab31f: add ah, dl; fdivr st(7); call rsi; 
0x00000000004ab313: add ah, dl; fdivr st(7); call rsp; 
0x00000000004c716f: add ah, dl; sldt word ptr [rax]; or al, 7; hlt; call qword ptr [rdi]; 
0x000000000049b516: add al, 0; add al, ch; add dl, byte ptr [rax + rdi*8]; jmp qword ptr [rsi - 0x70]; 
0x00000000004624b3: add al, 0; add bh, dh; ret 0; 
0x00000000004624a7: add al, 0; add bh, dh; ret 0xf800; 
0x00000000004661af: add al, 0; add byte ptr [rax + 0x29], cl; ret 0x349; 
0x00000000004204b0: add al, 0; add byte ptr [rax + 1], cl; ret; 
0x0000000000439e47: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000047ea16: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x8b08; 
0x000000000044edef: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000439e75: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000407559: add al, 0; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000483bc3: add al, 0; add byte ptr [rax], al; ret; 
0x000000000045878f: add al, 0; add byte ptr [rax], al; syscall; 
0x000000000046249f: add al, 0; add byte ptr [rbp + 0x6d880fd2], al; add al, 0; add bh, dh; ret 0xf800; 
0x00000000004819d0: add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000418d21: add al, 0; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000418bd7: add al, 0; add byte ptr [rbx - 0x7bf0fc08], al; insd dword ptr [rdi], dx; add al, 0; add byte ptr [rbx - 0x7bf0fe08], al; ret 4; 
0x0000000000419924: add al, 0; add byte ptr [rbx - 0x7bf0fc08], al; ret; 
0x0000000000418be0: add al, 0; add byte ptr [rbx - 0x7bf0fe08], al; ret 4; 
0x000000000046dfdf: add al, 0; add byte ptr [rcx - 0x7d], al; in al, dx; add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x00000000004335e5: add al, 0; add byte ptr [rsi - 9], dh; ret 0; 
0x00000000004bd315: add al, 0; add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x0000000000410313: add al, 0; cmp eax, -1; je 0x103eb; add rsp, 0x98; ret; 
0x000000000047e1f4: add al, 0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000047e13a: add al, 0; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000493b5a: add al, 0x10; test rdi, rdi; mov byte ptr [rsi], al; jne 0x93b48; mov rax, rsi; ret; 
0x0000000000457384: add al, 0x12; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000044f29a: add al, 0x17; lea rdx, [rip + 0x63b5d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044dc2a: add al, 0x17; lea rdx, [rip + 0x651cd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044c07a: add al, 0x17; lea rdx, [rip + 0x66d7d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000449f2a: add al, 0x17; lea rdx, [rip + 0x68ecd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000434e71: add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000434e0a: add al, 0x17; sub eax, ecx; ret; 
0x000000000040f8e2: add al, 0x18; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004cbd6c: add al, 0x1f; clc; call qword ptr [rsi + 0x16]; 
0x00000000004960f0: add al, 0x24; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000049a067: add al, 0x24; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000499d6b: add al, 0x24; add rsp, 0x38; ret; 
0x0000000000499d62: add al, 0x24; call 0x9a0e0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000498fb6: add al, 0x24; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000498f64: add al, 0x24; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000423364: add al, 0x24; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000004107aa: add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000046a3d9: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6a3e6; add rsp, 0x18; ret; 
0x00000000004936bb: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x936fe; leave; ret; 
0x000000000041d687: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000048270e: add al, 0x31; ret; 
0x000000000040f9b9: add al, 0x32; mov dword ptr [rip + 0x2c89c7], eax; lea rax, [rip + 0x2c89b8]; ret; 
0x000000000048260a: add al, 0x37; ret; 
0x0000000000493bde: add al, 0x38; mov rdi, rdx; mov byte ptr [rsi], al; jne 0x93bc0; mov rax, rsi; ret; 
0x0000000000482320: add al, 0x39; ret 0xeb75; 
0x0000000000426d9f: add al, 0x3a; ret; 
0x000000000045c940: add al, 0x48; cmp eax, 0x16; ja 0x5c990; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x000000000048ed96: add al, 0x48; cmp ecx, dword ptr [rdi + rsi]; jae 0x8ed41; xor eax, eax; ret; 
0x00000000004539ab: add al, 0x48; lea eax, [rdi + 5]; ret; 
0x0000000000452eb9: add al, 0x48; lea eax, [rdx + 4]; ret; 
0x0000000000452ecb: add al, 0x48; lea eax, [rdx + 5]; ret; 
0x000000000049c570: add al, 0x48; mov dword ptr [rax], edx; ret; 
0x00000000004445ba: add al, 0x48; mov dword ptr [rdi], ecx; ret; 
0x000000000048ed44: add al, 0x48; mov eax, dword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x00000000004516f9: add al, 0x48; mov eax, edi; ret; 
0x00000000004445b3: add al, 0x48; mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000045b424: add al, 0x48; mov edx, dword ptr [rcx + rdx]; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x00000000004846c5: add al, 0x48; sub esp, 0x80; call 0x5b060; add rsp, 0x80; pop rbx; ret; 
0x00000000004829e4: add al, 0x48; xor eax, eax; ret; 
0x000000000048db26: add al, 0x4c; cmp ecx, eax; jne 0x8dacb; mov eax, dword ptr [rdx + 4]; ret; 
0x00000000004832a8: add al, 0x4c; lea ecx, [rsp + 0x20]; call rbx; 
0x00000000004c5d20: add al, 0x5b; std; call rsp; 
0x0000000000452ec7: add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x0000000000451707: add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x000000000040afe3: add al, 0x6d; or dword ptr [rax], eax; ret; 
0x0000000000466b72: add al, 0x72; adc ecx, dword ptr [rcx + 0x29d231fb]; ret; 
0x0000000000447727: add al, 0x72; or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000456ebd: add al, 0x73; adc eax, dword ptr [rax + 0x157701fa]; jb 0x56ec9; mov byte ptr [rdi], cl; ret; 
0x000000000048afe3: add al, 0x74; or bh, bh; and eax, 0x24c274; nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x0000000000433720: add al, 0x74; sbb eax, 0x8d48c085; adc eax, 0x23834; lea rax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x00000000004079d7: add al, 0x75; add eax, 0x18c48348; ret; 
0x000000000042eb98: add al, 0x7d; sub al, byte ptr [rax]; ret; 
0x000000000047c098: add al, 0x80; and eax, 0x48b4800; clc; jmp rax; 
0x000000000047e1f8: add al, 0x81; add rax, rcx; jmp rax; 
0x000000000040cc12: add al, 0x81; add rax, rcx; lea rcx, [rip + 0x97182]; jmp rax; 
0x000000000040f93d: add al, 0x81; add rax, rdx; ret; 
0x000000000044c32b: add al, 0x81; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000044dc03: add al, 0x81; sub eax, edx; ret; 
0x0000000000400dc8: add al, 0x82; add rax, rdx; jmp rax; 
0x0000000000449f37: add al, 0x82; sub eax, ecx; ret; 
0x0000000000457cf6: add al, 0x83; adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045c949: add al, 0x83; add rax, rbx; jmp rax; 
0x0000000000410fd1: add al, 0x83; call 0xaf992db; ja 0x10c3f; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x000000000049b40a: add al, 0x84; add rax, r12; jmp rax; 
0x0000000000476339: add al, 0x84; ror byte ptr [rdi], 0x84; ret 0x17; 
0x00000000004b01ac: add al, 0x85; cli; call qword ptr [rbx - 0x7a]; 
0x00000000004b01a4: add al, 0x85; cli; inc dword ptr [rax*4 - 0x7afb0006]; cli; call qword ptr [rbx - 0x7a]; 
0x00000000004b0218: add al, 0x85; cli; jmp rcx; 
0x000000000049bd0b: add al, 0x86; add rax, r14; jmp rax; 
0x000000000047e08c: add al, 0x86; add rax, rsi; jmp rax; 
0x000000000049a3b9: add al, 0x87; add rax, r15; jmp rax; 
0x000000000047e828: add al, 0x87; add rax, rdi; jmp rax; 
0x0000000000452eb6: add al, 0x88; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x00000000004516f6: add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x000000000049a193: add al, 0x88; add rax, r8; jmp rax; 
0x000000000048aa6e: add al, 0x90; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x0000000000457353: add al, 0x96; add rax, rsi; jmp rax; 
0x000000000049b943: add al, 0x99; add rax, r9; jmp rax; 
0x0000000000458415: add al, 0x9a; add rax, rdx; jmp rax; 
0x000000000048b53f: add al, 0xa1; add rax, rcx; jmp rax; 
0x000000000040854a: add al, 0xa2; add rax, rdx; jmp rax; 
0x000000000048be67: add al, 0xa7; add rax, rdi; jmp rax; 
0x00000000004078f4: add al, 0xb1; add rax, rcx; jmp rax; 
0x0000000000407a0f: add al, 0xb2; add rax, rdx; jmp rax; 
0x0000000000401f58: add al, 0xba; add rax, rdx; jmp rax; 
0x0000000000457299: add al, 0xbe; add rax, rsi; jmp rax; 
0x000000000041bf5f: add al, 0xc3; ja 0x1c5e5; lea rdi, [rip + 0x91272]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000047b40d: add al, 0xc6; jmp rax; 
0x00000000004705d2: add al, 0xc6; mov esi, 1; jmp rax; 
0x0000000000470c2a: add al, 0xc6; xor esi, esi; jmp rax; 
0x0000000000470588: add al, 0xc7; jmp rax; 
0x000000000047b448: add al, 0xc8; mov ecx, 1; jmp rax; 
0x000000000049c4f8: add al, 0xcd; and eax, dword ptr [rax]; cmp byte ptr [rdx + rsi], 8; jne 0x9c51c; mov rax, qword ptr [rax]; ret; 
0x0000000000472769: add al, 0xd1; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000046d3d7: add al, 0xd8; mov dword ptr [rbp - 0x93c], r9d; mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x00000000004288e9: add al, 0xe8; or dword ptr [rsi], 0x83480003; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000428a03: add al, 0xe8; or eax, 0x83480003; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000004688d1: add al, 0xe8; test rax, rax; je 0x688da; call rax; 
0x00000000004688c6: add al, 0xeb; lea rax, [rip + 0x26d371]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x688da; call rax; 
0x00000000004101f2: add al, 0xeb; mov byte ptr [rcx], bh; ret 0x860f; 
0x0000000000444923: add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x0000000000458a8b: add al, 0xf3; ret; 
0x000000000040959d: add al, 0xf5; adc al, 0; add byte ptr [rax], al; ret; 
0x00000000004095b1: add al, 0xf5; adc byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000049c569: add al, 0xf7; cmp byte ptr [rcx + rsi], 8; jne 0x9c575; mov qword ptr [rax], rdx; ret; 
0x000000000047003e: add al, 0xf8; jmp rax; 
0x00000000004aebc9: add al, 0xf9; call qword ptr [rax + 0x20fff906]; stc; clc; jmp rax; 
0x00000000004aebe9: add al, 0xf9; jmp qword ptr [rax + 6]; 
0x00000000004aec09: add al, 0xf9; jmp qword ptr [rax]; 
0x00000000004aeb89: add al, 0xf9; jmp rax; 
0x00000000004940c8: add al, 0xf; mov dh, 0xc0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000439456: add al, 0xf; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000043b126: add al, 0xf; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000455dab: add al, 0xf; sub rax, rsi; ret; 
0x00000000004be7ed: add al, 0xfc; call rax; 
0x000000000041dca7: add al, 1; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000048ed47: add al, 2; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000043c6f7: add al, 3; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000470c1f: add al, 6; lea rsi, [rip + 0x262978]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x00000000004705c7: add al, 6; lea rsi, [rip + 0x262fd0]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x000000000044f31d: add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000044f77e: add al, 7; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000047057d: add al, 7; lea rdi, [rip + 0x26301a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000047b409: add al, 7; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000044f538: add al, 7; ret; 
0x0000000000434fdf: add al, 8; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000004a88c7: add al, ah; fdivr st(7); jmp qword ptr [rbx]; 
0x00000000004a8893: add al, ah; fdivr st(7); jmp rax; 
0x00000000004cc89f: add al, ah; iretd; clc; jmp qword ptr [rcx]; 
0x000000000040916a: add al, ah; jne 0x9270; mov rax, 0x6d2e60; ret; 
0x00000000004cea7b: add al, ah; mov byte ptr [rax], al; add byte ptr [rax - 3], al; cli; jmp qword ptr [rbx + 8]; 
0x00000000004cd81f: add al, ah; pop rcx; stc; jmp qword ptr [rdi + 0x11]; 
0x00000000004c7f7b: add al, ah; sbb eax, 0x88200000; hlt; call qword ptr [rcx]; 
0x00000000004aad37: add al, al; add byte ptr [rax], al; add bl, dl; fdivr st(7); call rbx; 
0x00000000004a663f: add al, al; fdivr st(7); call rcx; 
0x000000000040915e: add al, al; je 0x9260; cmp edi, 0xe0000008; jne 0x9270; mov rax, 0x6d2e60; ret; 
0x0000000000401f03: add al, al; jg 0x1f7b; or bl, dh; ret; 
0x00000000004090d2: add al, al; jne 0x9270; mov rax, 0x6d2de0; ret; 
0x00000000004091dc: add al, al; jne 0x9270; mov rax, 0x6d52c0; ret; 
0x00000000004d1cdf: add al, al; movsb byte ptr [rdi], byte ptr [rsi]; cld; jmp qword ptr [rsi]; 
0x00000000004d245b: add al, al; ret 0; 
0x00000000004c97ef: add al, al; scasd eax, dword ptr [rdi]; cmc; call qword ptr [rdi]; 
0x00000000004b9b27: add al, al; sldt word ptr [rax]; ret; 
0x00000000004cac1f: add al, al; sub dh, dh; jmp rsi; 
0x00000000004cc8b7: add al, bh; iretd; clc; jmp qword ptr [rcx]; 
0x00000000004cd493: add al, bh; jb 0xcd497; add byte ptr [rax], ch; sub bh, cl; call qword ptr [rax]; 
0x00000000004573e5: add al, bh; jg 0x573e0; int1; mov eax, eax; ret; 
0x00000000004c8f67: add al, bh; jnp 0xc8f60; jmp qword ptr [rdx + 1]; 
0x00000000004cbee7: add al, bh; pushfq; clc; call qword ptr [rdi]; 
0x00000000004cdfd7: add al, bh; ret 0xfff9; 
0x00000000004c7f93: add al, bh; sbb eax, 0x88280000; hlt; call qword ptr [rbx + 1]; 
0x00000000004ca307: add al, bl; fdivrp st(5); call qword ptr [rsi]; 
0x00000000004ce073: add al, bl; jle 0xce077; add al, bl; ret; 
0x00000000004cd773: add al, bl; jne 0xcd777; add byte ptr [rax + 0x4a], ch; stc; call qword ptr [rdi]; 
0x00000000004d1673: add al, bl; mov ah, 0; add byte ptr [rax + 0x5e], bh; cld; call qword ptr [rbx]; 
0x00000000004d1273: add al, bl; mov al, 0; add al, cl; xor al, 0xfc; call qword ptr [rax]; 
0x00000000004cc573: add al, bl; movsxd rax, dword ptr [rax]; add byte ptr [rax], cl; ret 0xfff8; 
0x00000000004cbaf7: add al, bl; out 0xf6, eax; jmp qword ptr [rbx]; 
0x00000000004ccc73: add al, bl; push 0; add byte ptr [rax], cl; in al, 0xf8; call qword ptr [rsi]; 
0x00000000004ce077: add al, bl; ret; 
0x00000000004cf773: add al, bl; xchg eax, ebp; add byte ptr [rax], al; or byte ptr [rdi], bh; sti; jmp qword ptr [rax]; 
0x00000000004d1ad7: add al, bl; xchg esp, edi; jmp qword ptr [rcx]; 
0x0000000000425ed6: add al, bpl; push rbx; mov ebp, 0xc4ebffff; nop; mov eax, 0xffffffff; ret; 
0x000000000040ab55: add al, byte ptr [eax]; add byte ptr [rax - 0x7d], cl; ret 0x4820; 
0x000000000040cc61: add al, byte ptr [r9]; ret 0xb60f; 
0x000000000044ff11: add al, byte ptr [rax + rax*8 - 0xb7ed8c]; ret 0x2288; 
0x0000000000462fef: add al, byte ptr [rax]; add al, ch; sub ecx, ebx; cli; jmp qword ptr [rsi + 0xf]; 
0x000000000040fe2b: add al, byte ptr [rax]; add bh, bh; push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000048a3a0: add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret 0xed75; 
0x00000000004644ad: add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000046eec3: add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x000000000043a352: add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000049751e: add al, byte ptr [rax]; add byte ptr [rax + 1], cl; ret 0x3a83; 
0x000000000046a38d: add al, byte ptr [rax]; add byte ptr [rax + rcx*2 - 0x77], ah; adc dword ptr [rax - 0x39], ecx; ret 0xffe0; 
0x0000000000478204: add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0x7c60; 
0x00000000004327d3: add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffdf; 
0x000000000040fe15: add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000458409: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x57c09; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000048b71a: add al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; adc byte ptr [r8 - 0x7d], cl; ret; 
0x000000000042a3fb: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000004568d4: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000048aaa1: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; xchg dword ptr [rax], eax; add eax, dword ptr [rax]; add bl, dh; ret; 
0x0000000000430ada: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000463c4b: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000409e0a: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4820; 
0x000000000043a027: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d9c1: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043a055: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000046a282: add al, byte ptr [rax]; add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x00000000004938f8: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x0000000000493b01: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x000000000048d016: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000459929: add al, byte ptr [rax]; add byte ptr [rax], al; jmp rax; 
0x000000000041c8cc: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x0000000000483954: add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000042b148: add al, byte ptr [rax]; add byte ptr [rbp + rcx*4 + 5], cl; ret 0x826; 
0x0000000000455354: add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000041ff16: add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fd08], al; ret; 
0x0000000000494e24: add al, byte ptr [rax]; add byte ptr [rcx + 0xc8b48d8], cl; ret 0xb60f; 
0x000000000042057d: add al, byte ptr [rax]; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000472b1f: add al, byte ptr [rax]; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; sbb ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x000000000042a057: add al, byte ptr [rax]; add dh, dh; ret 0xf08; 
0x00000000004023f3: add al, byte ptr [rax]; add rsp, 8; mov eax, 0xfffffff4; pop rbx; pop rbp; ret; 
0x0000000000433593: add al, byte ptr [rax]; cmove rax, rdx; ret; 
0x0000000000432c43: add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x00000000004339d0: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x0000000000432cb0: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0x1ce62]; cmove rax, rdx; ret; 
0x00000000004339a0: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x00000000004335b0: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x0000000000481c10: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0x902]; cmove rax, rdx; ret; 
0x0000000000482f30: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000481be0: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0xdf2]; cmove rax, rdx; ret; 
0x0000000000433915: add al, byte ptr [rax]; lea rax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x00000000004337d5: add al, byte ptr [rax]; lea rax, [rip + 0x22862]; cmovne rax, rdx; ret; 
0x0000000000433675: add al, byte ptr [rax]; lea rax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x000000000043397c: add al, byte ptr [rax]; lea rax, [rip + 0x22a7b]; cmovne rax, rdx; ret; 
0x000000000043383c: add al, byte ptr [rax]; lea rax, [rip + 0x22bab]; cmovne rax, rdx; ret; 
0x00000000004336dc: add al, byte ptr [rax]; lea rax, [rip + 0x22d1b]; cmovne rax, rdx; ret; 
0x000000000043395b: add al, byte ptr [rax]; lea rax, [rip + 0x22ecc]; cmovne rax, rdx; ret; 
0x0000000000432c3c: add al, byte ptr [rax]; lea rax, [rip + 0x22f9b]; cmovne rax, rdx; ret; 
0x000000000043381b: add al, byte ptr [rax]; lea rax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x00000000004336bb: add al, byte ptr [rax]; lea rax, [rip + 0x2316c]; cmovne rax, rdx; ret; 
0x000000000043372a: add al, byte ptr [rax]; lea rax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x000000000043377b: add al, byte ptr [rax]; lea rax, [rip + 0x2390c]; cmovne rax, rdx; ret; 
0x000000000040975f: add al, byte ptr [rax]; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000432b77: add al, byte ptr [rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000049044c: add al, byte ptr [rax]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x0000000000467a4f: add al, byte ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000004005a2: add al, byte ptr [rax]; mov qword ptr [rip + 0x2d8b49], 0; pop rax; ret; 
0x0000000000403737: add al, byte ptr [rax]; mov rax, rbx; pop rbx; ret; 
0x000000000049a18c: add al, byte ptr [rax]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000040193a: add al, byte ptr [rax]; nop dword ptr [rax]; pop rbx; ret; 
0x000000000040251d: add al, byte ptr [rax]; nop; xor eax, eax; ret; 
0x000000000045a205: add al, byte ptr [rbx + 0x94801e0]; ret 0x8949; 
0x000000000047e819: add al, byte ptr [rbx - 0x77cdf18]; sub dword ptr [rdi], ecx; xchg dword ptr [rdx + 0x48000000], ecx; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000045b08e: add al, byte ptr [rcx + 0x39]; ret; 
0x00000000004c7421: add al, byte ptr [rcx + 0xe]; sbb byte ptr [rsi + 0x200e4103], al; add dword ptr [rdx + rax], 0x47; ret; 
0x000000000046e79c: add al, byte ptr [rcx - 5]; jg 0x6e7b3; test byte ptr [rip - 0x7c000011], al; ret; 
0x000000000049450a: add al, byte ptr [rcx]; add byte ptr [rax], al; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x000000000040cc62: add al, byte ptr [rcx]; ret 0xb60f; 
0x0000000000483b36: add al, byte ptr [rdx + rdx*8 - 0x2e77ea8c]; and cl, 0xf; je 0x83b60; ret; 
0x00000000004c6275: add al, byte ptr [rdx]; cwde; or cl, byte ptr [rsi]; or byte ptr [rbp + 0xb], al; add edx, dword ptr [rsi + 0x4a080e01]; ret; 
0x00000000004c864d: add al, byte ptr [rdx]; ret 0xb00e; 
0x00000000004939ee: add al, byte ptr [rdx]; sar bh, 0xff; mov eax, 1; ret; 
0x0000000000433961: add al, byte ptr cs:[rax]; cmovne rax, rdx; ret; 
0x000000000049b518: add al, ch; add dl, byte ptr [rax + rdi*8]; jmp qword ptr [rsi - 0x70]; 
0x0000000000479681: add al, ch; cdq; jb 0x7967f; jmp qword ptr [rsi + 0xf]; 
0x00000000004613e4: add al, ch; cmc; cli; jmp qword ptr [rsi + 0xf]; 
0x000000000045dbde: add al, ch; cmp al, 0x2d; sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000049ea53: add al, ch; cmpsd dword ptr [rsi], dword ptr [rdi]; adc eax, 0x8948ffb6; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004ab2bf: add al, ch; fdivr st(7); jmp qword ptr [rdx]; 
0x0000000000468620: add al, ch; fidivr dword ptr [rcx - 0x47]; jmp qword ptr [rsi + 0x2e]; 
0x000000000046a23c: add al, ch; fisub word ptr [rsi - 6]; jmp qword ptr [rsi + 0x2e]; 
0x00000000004ccb83: add al, ch; imul eax, dword ptr [rax], 0xf8e35800; call qword ptr [rcx]; 
0x000000000045ec6e: add al, ch; in al, dx; ret; 
0x00000000004596cb: add al, ch; jb 0x596cb; jmp qword ptr [rsi + 0x2e]; 
0x0000000000400be9: add al, ch; mov cl, 0xcb; add dword ptr [rax], eax; nop; leave; ret; 
0x000000000048c7f8: add al, ch; mov dl, 0xb9; cld; jmp qword ptr [rsi - 0x70]; 
0x0000000000494d12: add al, ch; or byte ptr [rdi + rsi*8 - 0x7be0f001], bh; add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x0000000000471824: add al, ch; out 3, al; sti; jmp qword ptr [rsi + 0xf]; 
0x0000000000469cc1: add al, ch; pop rcx; insb byte ptr [rdi], dx; cli; jmp qword ptr [rsi + 0xf]; 
0x000000000045acc0: add al, ch; pop rdx; pop rsp; sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000045ecd0: add al, ch; pop rdx; ret; 
0x00000000004cbe83: add al, ch; pop rsp; add byte ptr [rax], al; js 0xcbf01; clc; jmp qword ptr [rdi + 6]; 
0x000000000048aaca: add al, ch; push rax; pop rsi; clc; call qword ptr [rbp + 0x53]; 
0x0000000000425ed7: add al, ch; push rbx; mov ebp, 0xc4ebffff; nop; mov eax, 0xffffffff; ret; 
0x00000000004583de: add al, ch; pushfq; cmp eax, 0x89480001; ret 0x8b48; 
0x0000000000431398: add al, ch; ret 0x29c; 
0x0000000000429498: add al, ch; ret 0x31b; 
0x00000000004754b8: add al, ch; ret 0xac; 
0x0000000000412638: add al, ch; ret 0xbed9; 
0x0000000000408988: add al, ch; ret 0xc; 
0x0000000000466ea8: add al, ch; ret 0xfc85; 
0x0000000000401bd7: add al, ch; ret; 
0x0000000000400521: add al, ch; stc; ret; 
0x0000000000488970: add al, ch; stosb byte ptr [rdi], al; jg 0x8896d; jmp qword ptr [rsi + 0x2e]; 
0x0000000000462ff1: add al, ch; sub ecx, ebx; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000004631f1: add al, ch; sub edi, edx; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000004617e9: add al, ch; xor ecx, esi; cli; inc dword ptr [rcx - 0x77]; ret; 
0x00000000004c7763: add al, cl; adc eax, 0x2ca80000; hlt; call qword ptr [rcx]; 
0x00000000004cbdf7: add al, cl; clc; call qword ptr [rax + 1]; 
0x00000000004cc887: add al, cl; iretd; clc; jmp qword ptr [rcx]; 
0x00000000004d1f63: add al, cl; mov ebp, 0xae280000; cld; jmp qword ptr [rdx + 1]; 
0x00000000004c8f63: add al, cl; sub eax, 0x7bf80000; cmc; jmp qword ptr [rdx + 1]; 
0x00000000004d1277: add al, cl; xor al, 0xfc; call qword ptr [rax]; 
0x00000000004ca3af: add al, dh; fcomip st(5); call qword ptr [rdx]; 
0x00000000004cc0ff: add al, dh; lodsd eax, dword ptr [rsi]; clc; call qword ptr [rdx]; 
0x00000000004cb98b: add al, dh; push rdi; add byte ptr [rax], al; jl 0xcb989; call qword ptr [rsi]; 
0x00000000004a624f: add al, dl; add byte ptr [rax], al; add byte ptr [rsi - 0x41000028], bh; fdivr st(7); call rax; 
0x00000000004c8bdf: add al, dl; cmc; call qword ptr [rax]; 
0x00000000004a8ef3: add al, dl; fdivr st(7); call rax; 
0x00000000004d0f6b: add al, dl; lodsd eax, dword ptr [rsi]; add byte ptr [rax], al; sub esp, edi; call qword ptr [rax]; 
0x00000000004d1a6b: add al, dl; mov eax, 0x84500000; cld; call qword ptr [rdx]; 
0x00000000004be7e5: add bh, ah; call qword ptr [rax - 0x70003fd]; add al, 0xfc; call rax; 
0x00000000004be6c1: add bh, ah; call rsp; 
0x00000000004aa2cf: add bh, ah; fdivr st(7); call qword ptr [rcx + 0xe]; 
0x00000000004aa2af: add bh, ah; fdivr st(7); call rsp; 
0x00000000004aa29b: add bh, ah; fdivr st(7); jmp rdi; 
0x00000000004be6b5: add bh, ah; jmp rsp; 
0x00000000004be6bd: add bh, ah; ljmp [rdx + rax]; cld; call rsp; 
0x00000000004d0756: add bh, ah; ret; 
0x00000000004939ec: add bh, al; add al, byte ptr [rdx]; sar bh, 0xff; mov eax, 1; ret; 
0x000000000045db6f: add bh, al; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000042eb9f: add bh, al; add eax, 0x2aa226; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000401bec: add bh, al; add eax, 0x2d4511; add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; ret; 
0x000000000048de34: add bh, al; test dword ptr [rax + 0xfffffd], esp; add byte ptr [rax], al; add byte ptr [rcx - 0x26b7b], cl; jmp qword ptr [rsi + 0x41]; 
0x000000000046e217: add bh, al; test dword ptr [rax], ecx; idiv edi; call qword ptr [rax]; 
0x000000000041d77f: add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000040fe2d: add bh, bh; push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000493939: add bh, byte ptr [rax + 1]; ret; 
0x0000000000493a96: add bh, byte ptr [rax + 2]; ret; 
0x00000000004587ab: add bh, byte ptr [rax - 1]; ret; 
0x0000000000403906: add bh, byte ptr [rcx]; ret 0xd77; 
0x00000000004af4ac: add bh, byte ptr [rdi - 7]; call qword ptr [rdx + 0x22fff97e]; jle 0xaf4b0; push qword ptr [rdx + 0x42fff97d]; jge 0xaf4b8; call rdx; 
0x000000000048ed48: add bh, byte ptr [rdx]; cmp rax, -1; cmove rax, rdx; ret; 
0x00000000004a41eb: add bh, cl; fdivr st(7); dec edi; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004a41f7: add bh, cl; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004aebe5: add bh, cl; jmp qword ptr [rax + 4]; 
0x00000000004aec05: add bh, cl; jmp qword ptr [rax]; 
0x00000000004aeb85: add bh, cl; jmp rax; 
0x00000000004cd157: add bh, cl; xor esi, ebx; jmp qword ptr [rbx]; 
0x000000000040fbfa: add bh, dh; ret 0; 
0x00000000004624a9: add bh, dh; ret 0xf800; 
0x000000000041ddbf: add bh, dh; ret 0xffef; 
0x00000000004ab413: add bh, dl; fdivr st(7); call qword ptr [rbx + 0x11]; 
0x00000000004ab3df: add bh, dl; fdivr st(7); call rdi; 
0x00000000004aec94: add bl, ah; clc; call qword ptr [rax - 0x1c]; 
0x00000000004a4273: add bl, ah; fdivr st(7); jmp rbx; 
0x00000000004ce0ab: add bl, ah; ret; 
0x00000000004a664f: add bl, al; fdivr st(7); inc ebx; fdivr st(7); call rdi; 
0x00000000004cdff0: add bl, al; stc; call qword ptr [rcx]; 
0x000000000049938b: add bl, ch; add eax, 0x1489066; ret 0xb70f; 
0x00000000004a701f: add bl, ch; fdivr st(7); call rsi; 
0x0000000000432924: add bl, ch; iretd; nop word ptr [rax + rax]; mov rsi, rbp; mov rdi, rax; call rcx; 
0x000000000047fa5f: add bl, ch; nop word ptr es:[rax + rax]; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000041e058: add bl, ch; ret 0x1f0f; 
0x0000000000410283: add bl, ch; ret 0xe883; 
0x0000000000494fb9: add bl, ch; ret; 
0x000000000043abad: add bl, ch; sal bl, 1; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000004581c3: add bl, ch; sbb dword ptr [rsi + 0x2e], esp; nop dword ptr [rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x000000000043aa7f: add bl, dh; bsf eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000044fdbf: add bl, dh; bsf eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa6f: add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000004d0489: add bl, dh; jmp qword ptr [rcx]; 
0x000000000040754e: add bl, dh; movq mm0, qword ptr [rbx + 0xc0]; movups xmmword ptr [rax + 0xc0], xmm0; pop rbx; ret; 
0x000000000045343f: add bl, dh; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000045345f: add bl, dh; movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000004534df: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000045349f: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000004534bf: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004535df: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000045357f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000045359f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004535bf: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000453aaf: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x0000000000453abf: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000045342f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000400a7f: add bl, dh; ret; 
0x00000000004aad3b: add bl, dl; fdivr st(7); call rbx; 
0x00000000004aad47: add bl, dl; fdivr st(7); call rdx; 
0x000000000045343e: add bl, sil; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000042a2be: add bl, sil; ret; 
0x00000000004cc8b5: add byte ptr [eax], al; clc; iretd; clc; jmp qword ptr [rcx]; 
0x00000000004cc931: add byte ptr [eax], al; cld; sar al, 1; call rsi; 
0x00000000004023ba: add byte ptr [r10 + rbp + 0x31], r14b; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000047beea: add byte ptr [r11 - 0x78f0d008], r8b; mov eax, 0x8900001d; ret 0x349; 
0x000000000047b59c: add byte ptr [r11 - 0x78f0d008], r8b; mov ebx, 0x89000025; ret 0x349; 
0x000000000047b04e: add byte ptr [r11 - 0x78f0d008], r8b; mov esi, 0x8900002b; ret 0x349; 
0x0000000000403995: add byte ptr [r8 + 0x29], r9b; ret 0x8d48; 
0x0000000000490a20: add byte ptr [r8 + 9], r9b; ret 0x840f; 
0x000000000045896c: add byte ptr [r8 + rsi - 0x77], sil; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000481c76: add byte ptr [r8 - 0x77], r9b; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000464655: add byte ptr [r8 - 0x77], r9b; fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x00000000004275ea: add byte ptr [r8 - 0x77], r9b; imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x000000000041ce7a: add byte ptr [r8 - 0x7d], r9b; ret; 
0x00000000004ca305: add byte ptr [r8], al; fcomp st(6); cmc; call qword ptr [rsi]; 
0x0000000000467d1c: add byte ptr [r8], r8b; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000484a9b: add byte ptr [r9 + rbp - 0x48], sil; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000409697: add byte ptr [r9 + rcx*4 - 0x20], r8b; pop rbx; pop rbp; pop r12; ret; 
0x000000000048497b: add byte ptr [r9 + rdi - 0x75], sil; add eax, 0x254ee7; test eax, eax; jne 0x849e6; mov eax, 0x101; syscall; 
0x00000000004aaf57: add byte ptr [rax + 0x11000001], ah; fdivr st(7); call qword ptr [rcx]; 
0x000000000040913e: add byte ptr [rax + 0x12a850f], al; add byte ptr [rax], al; mov rax, 0x6d2e20; ret; 
0x00000000004c75fb: add byte ptr [rax + 0x14], ah; add byte ptr [rax], al; and spl, sil; call qword ptr [rax]; 
0x00000000004090c6: add byte ptr [rax + 0x152840f], ah; add byte ptr [rax], al; cmp edi, 0xc0000008; jne 0x9270; mov rax, 0x6d2de0; ret; 
0x000000000045b503: add byte ptr [rax + 0x15], bh; syscall; 
0x00000000004328cf: add byte ptr [rax + 0x16], bh; ret; 
0x00000000004cc123: add byte ptr [rax + 0x1800005f], cl; scasb al, byte ptr [rdi]; clc; call qword ptr [rbx]; 
0x00000000004586ff: add byte ptr [rax + 0x18], bh; syscall; 
0x00000000004586ff: add byte ptr [rax + 0x18], bh; syscall; cmp rax, -0xfff; jae 0x58710; ret; 
0x00000000004586fe: add byte ptr [rax + 0x18], dil; syscall; 
0x00000000004586fe: add byte ptr [rax + 0x18], dil; syscall; cmp rax, -0xfff; jae 0x58710; ret; 
0x00000000004598af: add byte ptr [rax + 0x1c], bh; syscall; 
0x00000000004598af: add byte ptr [rax + 0x1c], bh; syscall; cmp rax, -0xfff; jae 0x598c0; ret; 
0x00000000004cf027: add byte ptr [rax + 0x1e], cl; sti; jmp qword ptr [rbx]; 
0x00000000004ccd1b: add byte ptr [rax + 0x2000006b], al; out 0xf8, al; jmp qword ptr [rcx]; 
0x00000000004c75ff: add byte ptr [rax + 0x20], al; hlt; call qword ptr [rax]; 
0x0000000000458e2f: add byte ptr [rax + 0x20], bh; syscall; 
0x0000000000458e2f: add byte ptr [rax + 0x20], bh; syscall; cmp rax, -0xfff; jae 0x58e40; ret; 
0x00000000004cf0ef: add byte ptr [rax + 0x20], dh; sti; jmp qword ptr [rdx]; 
0x00000000004c844b: add byte ptr [rax + 0x22], dh; leave; hlt; jmp qword ptr [rax]; 
0x00000000004c94bb: add byte ptr [rax + 0x24000000], al; xor eax, dword ptr [rax]; add byte ptr [rcx + rbx*4], cl; cmc; call qword ptr [rdi + 2]; 
0x000000000048e7af: add byte ptr [rax + 0x24b0713d], al; add byte ptr [rax], al; jne 0x8e7c8; mov rax, qword ptr [rip + 0x24ac50]; ret; 
0x00000000004c86f3: add byte ptr [rax + 0x25], bl; add byte ptr [rax], al; cmc; call rsp; 
0x00000000004979df: add byte ptr [rax + 0x26], bh; syscall; 
0x00000000004979df: add byte ptr [rax + 0x26], bh; syscall; cmp rax, -0xfff; jae 0x979f0; ret; 
0x00000000004d0f17: add byte ptr [rax + 0x27], bl; cld; call qword ptr [rbx]; 
0x00000000004d0f6f: add byte ptr [rax + 0x29], al; cld; call qword ptr [rax]; 
0x0000000000461c31: add byte ptr [rax + 0x29], cl; ret 0x349; 
0x0000000000462797: add byte ptr [rax + 0x29], cl; ret 0x8348; 
0x0000000000475548: add byte ptr [rax + 0x29], cl; ret 0x8349; 
0x0000000000486038: add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x00000000004035a0: add byte ptr [rax + 0x29], cl; ret 0x8d48; 
0x00000000004047e5: add byte ptr [rax + 0x29], cl; ret 0xc148; 
0x0000000000421530: add byte ptr [rax + 0x29], cl; ret; 
0x00000000004c8bdb: add byte ptr [rax + 0x2a], al; add byte ptr [rax], al; shl byte ptr [rbp - 0xb], 1; call qword ptr [rax]; 
0x00000000004d10e7: add byte ptr [rax + 0x31], cl; cld; jmp rdx; 
0x00000000004d1227: add byte ptr [rax + 0x33], cl; cld; call qword ptr [rdi]; 
0x00000000004d12e7: add byte ptr [rax + 0x36], bl; cld; call qword ptr [rbx + 1]; 
0x00000000004d1143: add byte ptr [rax + 0x380000af], ch; xor bh, ah; jmp qword ptr [rbp]; 
0x000000000049a363: add byte ptr [rax + 0x39], cl; ret 0x830f; 
0x000000000042942f: add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000042251f: add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x000000000049a3f8: add byte ptr [rax + 0x39], cl; ret 0x9272; 
0x0000000000408c75: add byte ptr [rax + 0x39], cl; ret 0xed75; 
0x000000000042c3c0: add byte ptr [rax + 0x39], cl; ret 0xf275; 
0x0000000000487678: add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000041d75f: add byte ptr [rax + 0x39], cl; ret; 
0x00000000004571d3: add byte ptr [rax + 0x39], cl; retf 0xd975; vzeroupper; ret; 
0x0000000000457010: add byte ptr [rax + 0x39], cl; retf 0xe175; vzeroupper; ret; 
0x00000000004c9bf3: add byte ptr [rax + 0x3a], bl; add byte ptr [rax], al; pop rax; ret; 
0x00000000004ca303: add byte ptr [rax + 0x41], ch; add byte ptr [rax], al; fcomp st(6); cmc; call qword ptr [rsi]; 
0x00000000004d1223: add byte ptr [rax + 0x480000b0], cl; xor edi, esp; call qword ptr [rdi]; 
0x0000000000458c36: add byte ptr [rax + 0x48], bh; syscall; 
0x00000000004cd777: add byte ptr [rax + 0x4a], ch; stc; call qword ptr [rdi]; 
0x00000000004c86f7: add byte ptr [rax + 0x4d], cl; cmc; call rsp; 
0x00000000004cf9ef: add byte ptr [rax + 0x4e], al; sti; jmp qword ptr [rcx]; 
0x00000000004c8877: add byte ptr [rax + 0x52], ch; cmc; call qword ptr [rax]; 
0x00000000004c889f: add byte ptr [rax + 0x52], dh; cmc; jmp qword ptr [rax]; 
0x00000000004cba33: add byte ptr [rax + 0x58000058], bl; jg 0xcba31; jmp qword ptr [rbx]; 
0x00000000004d15ef: add byte ptr [rax + 0x5b], dh; cld; jmp qword ptr [rbp]; 
0x00000000004cbee3: add byte ptr [rax + 0x5d], cl; add byte ptr [rax], al; clc; pushfq; clc; call qword ptr [rdi]; 
0x00000000004d1677: add byte ptr [rax + 0x5e], bh; cld; call qword ptr [rbx]; 
0x00000000004ce03b: add byte ptr [rax + 0x6000007e], ah; ret; 
0x00000000004c8b37: add byte ptr [rax + 0x63], bl; cmc; jmp qword ptr [rcx + 1]; 
0x000000000041bf6d: add byte ptr [rax + 0x63], cl; adc al, 0x97; add rdx, rdi; jmp rdx; 
0x000000000047e1f5: add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000040cc0f: add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; lea rcx, [rip + 0x97182]; jmp rax; 
0x000000000040f93a: add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rdx; ret; 
0x00000000004085de: add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000047e825: add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, rdi; jmp rax; 
0x0000000000458412: add byte ptr [rax + 0x63], cl; add al, 0x9a; add rax, rdx; jmp rax; 
0x0000000000457296: add byte ptr [rax + 0x63], cl; add al, 0xbe; add rax, rsi; jmp rax; 
0x000000000049be33: add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x0000000000468e27: add byte ptr [rax + 0x63], cl; ret; 
0x000000000047ecf3: add byte ptr [rax + 0x63], cl; ror dword ptr [rax - 0x75], 4; ret 0x8548; 
0x000000000046d341: add byte ptr [rax + 0x63], cl; ror dword ptr [rax - 0x7d], cl; ret 0x4820; 
0x00000000004cc70b: add byte ptr [rax + 0x65], dh; add byte ptr [rax], al; and bh, al; clc; jmp qword ptr [rcx]; 
0x000000000048485f: add byte ptr [rax + 0x66], bh; syscall; 
0x000000000048485f: add byte ptr [rax + 0x66], bh; syscall; ret; 
0x000000000048487f: add byte ptr [rax + 0x68], bh; syscall; 
0x000000000048487f: add byte ptr [rax + 0x68], bh; syscall; ret; 
0x00000000004ccbfb: add byte ptr [rax + 0x6a], ah; add byte ptr [rax], al; shl bl, 0xf8; jmp qword ptr [rcx]; 
0x000000000048486f: add byte ptr [rax + 0x6b], bh; syscall; 
0x000000000048486f: add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x00000000004ccd03: add byte ptr [rax + 0x6b], ch; add byte ptr [rax], al; sbb dh, ah; clc; call qword ptr [rdx]; 
0x00000000004ccceb: add byte ptr [rax + 0x6b], dl; add byte ptr [rax], al; and dh, ah; clc; call qword ptr [rax]; 
0x000000000048488f: add byte ptr [rax + 0x6c], bh; syscall; 
0x000000000048488f: add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x00000000004cba4b: add byte ptr [rax + 0x70000058], dh; jg 0xcba49; jmp qword ptr [rbx]; 
0x00000000004ccd3b: add byte ptr [rax + 0x7000006b], ah; out 0xf8, al; call qword ptr [rcx]; 
0x00000000004cbe6f: add byte ptr [rax + 0x71], ah; clc; jmp qword ptr [rbx]; 
0x0000000000498b28: add byte ptr [rax + 0x74], ah; xor ecx, dword ptr [rcx - 0x7d]; ret; 
0x000000000044ff0f: add byte ptr [rax + 0x74c08402], cl; adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x000000000049c468: add byte ptr [rax + 0x75], al; adc al, 0x49; cmp dword ptr [rcx + 0x38], 0; je 0x9c490; add rsp, 0x18; ret; 
0x0000000000496c2f: add byte ptr [rax + 0x75], al; jge 0x96c7c; cmp dword ptr [rip + 0x23f33d], 0; jne 0x96c3f; pop rbx; ret; 
0x00000000004091f4: add byte ptr [rax + 0x75], al; js 0x9241; mov eax, 0x6d2d60; ret; 
0x00000000004cbe87: add byte ptr [rax + 0x77], bh; clc; jmp qword ptr [rdi + 6]; 
0x00000000004ce123: add byte ptr [rax + 0x7800007f], cl; ret; 
0x000000000045394f: add byte ptr [rax + 0x78d4837], cl; ret; 
0x00000000004ce013: add byte ptr [rax + 0x7e], bh; add byte ptr [rax], al; sbb bl, al; stc; call qword ptr [rcx]; 
0x00000000004cdfeb: add byte ptr [rax + 0x7e], dl; add byte ptr [rax], al; add bl, al; stc; call qword ptr [rcx]; 
0x000000000042041e: add byte ptr [rax + 0x7f741], dl; or byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rcx - 0x16000002], esi; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x000000000045987f: add byte ptr [rax + 0xa], bh; syscall; 
0x000000000045987f: add byte ptr [rax + 0xa], bh; syscall; cmp rax, -0xfff; jae 0x59890; ret; 
0x000000000045984f: add byte ptr [rax + 0xb], bh; syscall; 
0x000000000045984f: add byte ptr [rax + 0xb], bh; syscall; cmp rax, -0xfff; jae 0x59860; ret; 
0x000000000045b071: add byte ptr [rax + 0xca], bh; syscall; 
0x000000000045b071: add byte ptr [rax + 0xca], bh; syscall; pop rdx; pop rsi; ret; 
0x000000000045b118: add byte ptr [rax + 0xca], bh; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000049c50f: add byte ptr [rax + 0xd837bc], al; add byte ptr [rax], al; add byte ptr [rbx + rbx*8 - 0xd], dh; ret; 
0x0000000000458474: add byte ptr [rax + 0xe5], bh; syscall; 
0x000000000041c8cf: add byte ptr [rax + 0xe], bh; syscall; 
0x00000000004248af: add byte ptr [rax + 0xf], al; mov dh, 0xc5; pop rbx; pop rbp; pop r12; ret; 
0x000000000045febf: add byte ptr [rax + 0xf], al; mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000040208f: add byte ptr [rax + 0xf], al; mov dh, 0xf6; mov dword ptr [rip + 0x2d4086], esi; ret; 
0x000000000040207f: add byte ptr [rax + 0xf], al; mov dh, 0xf6; mov dword ptr [rip + 0x2d4092], esi; ret; 
0x000000000040206f: add byte ptr [rax + 0xf], al; mov dh, 0xf6; mov dword ptr [rip + 0x2d4096], esi; ret; 
0x000000000040205f: add byte ptr [rax + 0xf], al; mov dh, 0xf6; mov dword ptr [rip + 0x2d40a2], esi; ret; 
0x0000000000401f2f: add byte ptr [rax + 0xf], al; mov dh, 0xf6; mov dword ptr [rip + 0x2d41da], esi; ret; 
0x0000000000401f1f: add byte ptr [rax + 0xf], al; mov dh, 0xf6; mov dword ptr [rip + 0x2d41ee], esi; ret; 
0x0000000000401f0f: add byte ptr [rax + 0xf], al; mov dh, 0xf6; mov dword ptr [rip + 0x2d420a], esi; ret; 
0x0000000000401ccf: add byte ptr [rax + 0xf], al; mov dh, 0xff; mov dword ptr [rip + 0x2d442e], edi; ret; 
0x000000000047f8ca: add byte ptr [rax + 0xf], cl; call 0xffffffffc7500c5c; ror byte ptr [rax], 0x83; insd dword ptr [rdi], dx; add byte ptr [rax - 0x39], cl; ret 0x7c60; 
0x0000000000482575: add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x000000000045ef4f: add byte ptr [rax + 0xf], cl; mov esi, 0x83480147; ret; 
0x0000000000483b4f: add byte ptr [rax + 0xfe580f5], cl; je 0x83b70; add rax, 2; ret; 
0x000000000047f3a6: add byte ptr [rax + 1], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000406a36: add byte ptr [rax + 1], bh; ret; 
0x0000000000458b4f: add byte ptr [rax + 1], bh; syscall; 
0x000000000043a354: add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x0000000000482c81: add byte ptr [rax + 1], cl; clc; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000043a881: add byte ptr [rax + 1], cl; clc; add rax, rcx; vzeroupper; ret; 
0x0000000000492b08: add byte ptr [rax + 1], cl; ret 0x149; 
0x0000000000497520: add byte ptr [rax + 1], cl; ret 0x3a83; 
0x00000000004204b2: add byte ptr [rax + 1], cl; ret; 
0x0000000000493b05: add byte ptr [rax + 2], bh; ret; 
0x0000000000458dff: add byte ptr [rax + 3], bh; syscall; 
0x0000000000486854: add byte ptr [rax + 3], cl; add ecx, dword ptr [rax - 0x77]; and dword ptr [rax - 0x74fffffe], 5; ret; 
0x0000000000458b7f: add byte ptr [rax + 8], bh; syscall; 
0x0000000000458b7e: add byte ptr [rax + 8], dil; syscall; 
0x0000000000490a21: add byte ptr [rax + 9], cl; ret 0x840f; 
0x0000000000485478: add byte ptr [rax + 9], cl; ret 0x850f; 
0x0000000000493aa9: add byte ptr [rax + 9], cl; ror byte ptr [rax - 0x77], 1; or byte ptr [r8 + 2], r15b; ret; 
0x00000000004cac17: add byte ptr [rax + rax + 0x4a800000], bl; add byte ptr [rax], al; shr byte ptr [rdx], 0xf6; jmp rsi; 
0x00000000004b8acb: add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x00000000004d159c: add byte ptr [rax + rax - 0x3a5e000], dh; jmp qword ptr [rax + 1]; 
0x00000000004ca1b7: add byte ptr [rax + rax*2], bl; add byte ptr [rax], al; xor al, 0xd9; cmc; call qword ptr [rdi]; 
0x000000000045f7a3: add byte ptr [rax + rax*8 - 0x76b3178b], al; ret 0x294c; 
0x00000000004c7e3f: add byte ptr [rax + rax], ah; add byte ptr [rax], al; test al, 0x1c; add byte ptr [rax], al; mov byte ptr [rbx - 0xc], bh; jmp qword ptr [rbp + 2]; 
0x00000000004819cf: add byte ptr [rax + rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004335e4: add byte ptr [rax + rax], al; add byte ptr [rsi - 9], dh; ret 0; 
0x00000000004c7f8f: add byte ptr [rax + rax], bh; add byte ptr [rax], al; clc; sbb eax, 0x88280000; hlt; call qword ptr [rbx + 1]; 
0x00000000004d10df: add byte ptr [rax + rax], bh; add byte ptr [rax], al; scasq rax, qword ptr [rdi]; add byte ptr [rax], al; xor rsp, rdi; jmp rdx; 
0x00000000004c9bef: add byte ptr [rax + rax], bl; add byte ptr [rax + 0x3a], bl; add byte ptr [rax], al; pop rax; ret; 
0x00000000004ce06f: add byte ptr [rax + rax], bl; add byte ptr [rax], al; fdivr dword ptr [rsi]; add al, bl; ret; 
0x00000000004d121f: add byte ptr [rax + rax], bl; add byte ptr [rax], al; mov byte ptr [rax + 0x33480000], dh; cld; call qword ptr [rdi]; 
0x00000000004aac43: add byte ptr [rax + rax], bl; add byte ptr [rax], al; ret 0; 
0x00000000004aac3f: add byte ptr [rax + rax], bl; add byte ptr [rax], al; sbb al, 0; add byte ptr [rax], al; ret 0; 
0x00000000004ccd17: add byte ptr [rax + rax], bl; add byte ptr [rax], al; sub byte ptr [rbx], 0; and dh, ah; clc; jmp qword ptr [rcx]; 
0x00000000004cd817: add byte ptr [rax + rax], ch; add byte ptr [rax - 0x1fffff8a], al; pop rcx; stc; jmp qword ptr [rdi + 0x11]; 
0x00000000004ccb97: add byte ptr [rax + rax], ch; add byte ptr [rax], al; add byte ptr [rdx], ch; add byte ptr [rax - 0x1d], ah; clc; call qword ptr [rdx]; 
0x00000000004d12df: add byte ptr [rax + rax], ch; add byte ptr [rax], al; mov cl, 0; add byte ptr [rax + 0x36], bl; cld; call qword ptr [rbx + 1]; 
0x00000000004c735b: add byte ptr [rax + rax], cl; add ah, al; adc dword ptr [rax], eax; add byte ptr [rsp + rcx - 0xc], bl; jmp qword ptr [rax + 9]; 
0x00000000004c8b2f: add byte ptr [rax + rax], cl; add ah, dl; add byte ptr [rax], al; add byte ptr [rax + 0x63], bl; cmc; jmp qword ptr [rcx + 1]; 
0x00000000004cea77: add byte ptr [rax + rax], cl; add al, ah; mov byte ptr [rax], al; add byte ptr [rax - 3], al; cli; jmp qword ptr [rbx + 8]; 
0x00000000004d2457: add byte ptr [rax + rax], cl; add al, al; ret 0; 
0x00000000004c86ef: add byte ptr [rax + rax], cl; add byte ptr [rax + 0x25], bl; add byte ptr [rax], al; cmc; call rsp; 
0x00000000004d002f: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x47ffff62], bl; nop; sti; jmp qword ptr [rcx + 0xe]; 
0x00000000004339d3: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0x1bb12; cmove rax, rdx; ret; 
0x0000000000432cb3: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0x1ce62; cmove rax, rdx; ret; 
0x00000000004339a3: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0x6c52; cmove rax, rdx; ret; 
0x00000000004335b3: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0x6d12; cmove rax, rdx; ret; 
0x0000000000481c13: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0x902; cmove rax, rdx; ret; 
0x0000000000482f33: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0xa22; cmove rax, rdx; ret; 
0x0000000000481be3: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0xdf2; cmove rax, rdx; ret; 
0x0000000000484c61: add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000042d0db: add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov rax, rsi; ret; 
0x0000000000482f87: add byte ptr [rax + rax], cl; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x00000000004d1a67: add byte ptr [rax + rax], dh; add byte ptr [rax], al; sar byte ptr [rax - 0x7bb00000], 1; cld; call qword ptr [rdx]; 
0x00000000004ca3a7: add byte ptr [rax + rax], dl; add byte ptr [rax], al; adc byte ptr [rdx], al; add al, dh; fcomip st(5); call qword ptr [rdx]; 
0x00000000004cc87f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; call 0xffffffffc80cc8ef; iretd; clc; jmp qword ptr [rcx]; 
0x00000000004d1acf: add byte ptr [rax + rax], dl; add byte ptr [rax], al; cmp byte ptr [rcx - 0x78280000], bh; cld; jmp qword ptr [rcx]; 
0x00000000004cdfcf: add byte ptr [rax + rax], dl; add byte ptr [rax], al; cmp byte ptr [rsi], bh; add al, bh; ret 0xfff9; 
0x00000000004cb96f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; fcom dword ptr [rdi]; add byte ptr [rax], ch; jl 0xcb971; jmp qword ptr [rbx]; 
0x00000000004cb86f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; fcom dword ptr [rsi]; add byte ptr [rax], ch; je 0xcb871; jmp qword ptr [rbx]; 
0x00000000004d166f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; fdiv dword ptr [rax + rax - 0x3a18800]; call qword ptr [rbx]; 
0x00000000004cc56f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; fsub dword ptr [rbx]; add byte ptr [rax], cl; ret 0xfff8; 
0x00000000004cccff: add byte ptr [rax + rax], dl; add byte ptr [rax], al; push 0x1800006b; out 0xf8, al; call qword ptr [rdx]; 
0x00000000004ce2e7: add byte ptr [rax + rax], dl; add byte ptr [rax], al; push rax; add dword ptr [rax], 0xf9de6000; call qword ptr [rbx]; 
0x00000000004ce057: add byte ptr [rax + rax], dl; add byte ptr [rax], al; sar byte ptr [rsi], 0; nop; ret; 
0x00000000004d17af: add byte ptr [rax + rax], dl; add byte ptr [rax], al; sbb byte ptr [rsi + 0x62280000], dh; cld; jmp qword ptr [rcx]; 
0x00000000004d0f67: add byte ptr [rax + rax], dl; add byte ptr [rax], al; shr byte ptr [rbp + 0x29400000], 1; cld; call qword ptr [rax]; 
0x00000000004a0346: add byte ptr [rax + rbp*8 + 0x48], dh; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000004288e8: add byte ptr [rax + rbp*8], al; or dword ptr [rsi], 0x83480003; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000428a02: add byte ptr [rax + rbp*8], al; or eax, 0x83480003; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000004aa373: add byte ptr [rax + rbx*8 - 1], cl; jmp qword ptr [rdi]; 
0x000000000046a29d: add byte ptr [rax + rcx - 0xd], dh; ret; 
0x000000000046a38f: add byte ptr [rax + rcx*2 - 0x77], ah; adc dword ptr [rax - 0x39], ecx; ret 0xffe0; 
0x00000000004b9c77: add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x00000000004c724f: add byte ptr [rax + rdx + 0x9ec0000], dh; hlt; call qword ptr [rbx + 1]; 
0x000000000045896d: add byte ptr [rax + rsi - 0x77], dh; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000407867: add byte ptr [rax - 0x11], bh; pop rbx; pop rbp; pop r12; ret; 
0x00000000004734f4: add byte ptr [rax - 0x15343], al; jmp qword ptr [rsi + 0xf]; 
0x000000000048adf4: add byte ptr [rax - 0x168b7f80], 0x89; ret 0xeac1; 
0x00000000004015af: add byte ptr [rax - 0x16], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000400fff: add byte ptr [rax - 0x16], bh; ret; 
0x0000000000407b4e: add byte ptr [rax - 0x16], dil; ret; 
0x000000000042c5df: add byte ptr [rax - 0x17], dl; ret; 
0x00000000004d0637: add byte ptr [rax - 0x18], bl; sti; call qword ptr [rdx + 1]; 
0x00000000004ccd3f: add byte ptr [rax - 0x1a], dh; clc; call qword ptr [rcx]; 
0x00000000004ccb9f: add byte ptr [rax - 0x1d], ah; clc; call qword ptr [rdx]; 
0x00000000004ccb87: add byte ptr [rax - 0x1d], bl; clc; call qword ptr [rcx]; 
0x00000000004cd81b: add byte ptr [rax - 0x1fffff8a], al; pop rcx; stc; jmp qword ptr [rdi + 0x11]; 
0x00000000004095a7: add byte ptr [rax - 0x21], bh; ret; 
0x00000000004095a6: add byte ptr [rax - 0x21], dil; ret; 
0x00000000004ce2ef: add byte ptr [rax - 0x22], ah; stc; call qword ptr [rbx]; 
0x00000000004ce307: add byte ptr [rax - 0x22], ch; stc; call qword ptr [rax]; 
0x00000000004ca1cf: add byte ptr [rax - 0x27], al; cmc; call qword ptr [rsi]; 
0x0000000000482a75: add byte ptr [rax - 0x2d], cl; cli; test rdx, rdx; je 0x82b20; bsf rax, rdx; ret; 
0x00000000004cd153: add byte ptr [rax - 0x30ffff91], bh; xor esi, ebx; jmp qword ptr [rbx]; 
0x00000000004d24af: add byte ptr [rax - 0x38], dh; cld; jmp qword ptr [rcx]; 
0x00000000004939e8: add byte ptr [rax - 0x38ff76b7], al; add al, byte ptr [rdx]; sar bh, 0xff; mov eax, 1; ret; 
0x0000000000480ec8: add byte ptr [rax - 0x39], cl; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000427afa: add byte ptr [rax - 0x39], cl; add eax, 0x2b1272; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004005a3: add byte ptr [rax - 0x39], cl; add eax, 0x2d8b49; add byte ptr [rax], al; add byte ptr [rax], al; pop rax; ret; 
0x000000000045e741: add byte ptr [rax - 0x39], cl; add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004267d3: add byte ptr [rax - 0x39], cl; or byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x000000000042594f: add byte ptr [rax - 0x39], cl; push r8; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000041d758: add byte ptr [rax - 0x39], cl; rcl byte ptr [rax], 0x83; insd dword ptr [rdi], dx; add byte ptr [rax + 0x39], cl; ret; 
0x000000000041e943: add byte ptr [rax - 0x39], cl; ret 0x7c60; 
0x000000000041ed3f: add byte ptr [rax - 0x39], cl; ret 0x8308; 
0x000000000046cbcf: add byte ptr [rax - 0x39], cl; ret 0xffa0; 
0x000000000041c8f7: add byte ptr [rax - 0x39], cl; ret 0xffc0; 
0x00000000004327d5: add byte ptr [rax - 0x39], cl; ret 0xffdf; 
0x0000000000477875: add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x000000000040fe17: add byte ptr [rax - 0x39], cl; ret; 
0x0000000000483baf: add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x0000000000483b8f: add byte ptr [rax - 0x39], cl; rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x0000000000483bef: add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x0000000000483b9f: add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x0000000000483bdf: add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x000000000046a48f: add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x000000000041ed38: add byte ptr [rax - 0x39], cl; shl dword ptr [rax + 0x7c], 0x6d; add byte ptr [rax - 0x39], cl; ret 0x8308; 
0x00000000004ab3d7: add byte ptr [rax - 0x3a000000], ch; add byte ptr [rax], al; add bh, dl; fdivr st(7); call rdi; 
0x000000000049a358: add byte ptr [rax - 0x3f], cl; call 0xffffffff850cec9f; cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x830f; 
0x000000000049a3ed: add byte ptr [rax - 0x3f], cl; call 0xffffffff850ced34; cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x9272; 
0x0000000000467b79: add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x0000000000467b50: add byte ptr [rax - 0x3f], cl; ret 0x6411; 
0x00000000004674b0: add byte ptr [rax - 0x3f], cl; ret 0x8511; 
0x00000000004939aa: add byte ptr [rax - 0x3ffe], bh; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000004cac1b: add byte ptr [rax - 0x3fffffb6], al; sub dh, dh; jmp rsi; 
0x00000000004bd30f: add byte ptr [rax - 0x45fffffc], bh; add al, 0; add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x00000000004d0033: add byte ptr [rax - 0x47ffff62], bl; nop; sti; jmp qword ptr [rcx + 0xe]; 
0x0000000000499e3f: add byte ptr [rax - 0x48], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7ab70000], al; ret 0x840f; 
0x00000000004d15eb: add byte ptr [rax - 0x4c], dl; add byte ptr [rax], al; jo 0xd164d; cld; jmp qword ptr [rbp]; 
0x0000000000470ccf: add byte ptr [rax - 0x4f743], al; jmp qword ptr [rax]; 
0x00000000004d12e3: add byte ptr [rax - 0x4f], cl; add byte ptr [rax], al; pop rax; cld; call qword ptr [rbx + 1]; 
0x00000000004cc177: add byte ptr [rax - 0x51], bl; clc; call qword ptr [rbx]; 
0x00000000004d10e3: add byte ptr [rax - 0x51], cl; add byte ptr [rax], al; xor rsp, rdi; jmp rdx; 
0x00000000004d1eff: add byte ptr [rax - 0x55], ah; cld; call qword ptr [rdx + 1]; 
0x00000000004d08e3: add byte ptr [rax - 0x59], cl; add byte ptr [rax], al; js 0xd08e3; sti; jmp qword ptr [rsi]; 
0x00000000004d0413: add byte ptr [rax - 0x5e], bh; add byte ptr [rax], al; mov al, bl; sti; jmp qword ptr [rsi + 7]; 
0x0000000000402027: add byte ptr [rax - 0x5f], bh; ret; 
0x00000000004d02f3: add byte ptr [rax - 0x5f], bl; add byte ptr [rax], al; sbb bh, cl; sti; jmp qword ptr [rsi + 5]; 
0x00000000004aaf53: add byte ptr [rax - 0x60000000], bl; add dword ptr [rax], eax; add byte ptr [rcx], dl; fdivr st(7); call qword ptr [rcx]; 
0x0000000000409cff: add byte ptr [rax - 0x65], bh; ret; 
0x0000000000409bff: add byte ptr [rax - 0x66], bh; ret; 
0x0000000000409c0f: add byte ptr [rax - 0x67], bh; ret; 
0x0000000000409c4f: add byte ptr [rax - 0x68], bh; ret; 
0x0000000000470578: add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x26301a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000470c1a: add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x262978]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x00000000004705c2: add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x262fd0]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x0000000000470527: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x262f6b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004708d6: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2630bc]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470888: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26310a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004707d9: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2631b9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047077d: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x263215]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004704dd: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2634b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047048f: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x263503]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047002e: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x263664]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004cbecf: add byte ptr [rax - 0x68], dh; clc; call qword ptr [rbx + 4]; 
0x00000000004cf9eb: add byte ptr [rax - 0x68], dl; add byte ptr [rax], al; sti; jmp qword ptr [rcx]; 
0x0000000000409bdf: add byte ptr [rax - 0x69], bh; ret; 
0x0000000000409c2f: add byte ptr [rax - 0x6a], bh; ret; 
0x0000000000409c1f: add byte ptr [rax - 0x6b], bh; ret; 
0x0000000000409d0f: add byte ptr [rax - 0x6c], bh; ret; 
0x00000000004cf5eb: add byte ptr [rax - 0x6c], dl; add byte ptr [rax], al; xor byte ptr [rcx], bh; sti; jmp qword ptr [rbx]; 
0x0000000000409c9f: add byte ptr [rax - 0x6d], bh; ret; 
0x00000000004cf3db: add byte ptr [rax - 0x6e], al; add byte ptr [rax], al; and byte ptr [rax], ch; sti; jmp qword ptr [rbx]; 
0x0000000000409c5f: add byte ptr [rax - 0x6e], bh; ret; 
0x00000000004cf3f3: add byte ptr [rax - 0x6e], bl; add byte ptr [rax], al; cmp byte ptr [rax], ch; sti; jmp qword ptr [rsi]; 
0x0000000000409ccf: add byte ptr [rax - 0x6f], bh; ret; 
0x0000000000409c6f: add byte ptr [rax - 0x70], bh; ret; 
0x0000000000409cef: add byte ptr [rax - 0x71], bh; ret; 
0x00000000004cf0eb: add byte ptr [rax - 0x71], dl; add byte ptr [rax], al; jo 0xcf112; sti; jmp qword ptr [rdx]; 
0x0000000000409cdf: add byte ptr [rax - 0x72], bh; ret; 
0x0000000000409c3f: add byte ptr [rax - 0x73], bh; ret; 
0x000000000047e9a3: add byte ptr [rax - 0x73], cl; adc eax, 0x3fe3d; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000045840b: add byte ptr [rax - 0x73], cl; adc eax, 0x57c09; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000004325dc: add byte ptr [rax - 0x73], cl; adc eax, 0x7c22c; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000482fa2: add byte ptr [rax - 0x73], cl; adc eax, 0xfffd40c6; cmove rax, rdx; ret; 
0x00000000004832a4: add byte ptr [rax - 0x73], cl; add al, 0x4c; lea ecx, [rsp + 0x20]; call rbx; 
0x000000000048aa6b: add byte ptr [rax - 0x73], cl; add al, 0x90; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000044f31a: add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000046444a: add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x00000000004665cd: add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], r9d; ret; 
0x00000000004339d6: add byte ptr [rax - 0x73], cl; add eax, 0x1bb12; cmove rax, rdx; ret; 
0x0000000000432cb6: add byte ptr [rax - 0x73], cl; add eax, 0x1ce62; cmove rax, rdx; ret; 
0x0000000000433916: add byte ptr [rax - 0x73], cl; add eax, 0x22732; cmovne rax, rdx; ret; 
0x00000000004337d6: add byte ptr [rax - 0x73], cl; add eax, 0x22862; cmovne rax, rdx; ret; 
0x0000000000433676: add byte ptr [rax - 0x73], cl; add eax, 0x229d2; cmovne rax, rdx; ret; 
0x000000000043397d: add byte ptr [rax - 0x73], cl; add eax, 0x22a7b; cmovne rax, rdx; ret; 
0x000000000043383d: add byte ptr [rax - 0x73], cl; add eax, 0x22bab; cmovne rax, rdx; ret; 
0x00000000004336dd: add byte ptr [rax - 0x73], cl; add eax, 0x22d1b; cmovne rax, rdx; ret; 
0x000000000043395c: add byte ptr [rax - 0x73], cl; add eax, 0x22ecc; cmovne rax, rdx; ret; 
0x0000000000432c3d: add byte ptr [rax - 0x73], cl; add eax, 0x22f9b; cmovne rax, rdx; ret; 
0x000000000043381c: add byte ptr [rax - 0x73], cl; add eax, 0x22ffc; cmovne rax, rdx; ret; 
0x00000000004336bc: add byte ptr [rax - 0x73], cl; add eax, 0x2316c; cmovne rax, rdx; ret; 
0x000000000043372b: add byte ptr [rax - 0x73], cl; add eax, 0x237dd; cmovne rax, rdx; ret; 
0x000000000043377c: add byte ptr [rax - 0x73], cl; add eax, 0x2390c; cmovne rax, rdx; ret; 
0x0000000000493d8f: add byte ptr [rax - 0x73], cl; add eax, 0x245349; mov qword ptr [rip + 0x24532a], rax; ret; 
0x000000000045c83f: add byte ptr [rax - 0x73], cl; add eax, 0x27aaf9; ret; 
0x000000000040f9c0: add byte ptr [rax - 0x73], cl; add eax, 0x2c89b8; ret; 
0x000000000049450d: add byte ptr [rax - 0x73], cl; add eax, 0x5b; cmovne rax, rdx; ret; 
0x00000000004339a6: add byte ptr [rax - 0x73], cl; add eax, 0x6c52; cmove rax, rdx; ret; 
0x00000000004335b6: add byte ptr [rax - 0x73], cl; add eax, 0x6d12; cmove rax, rdx; ret; 
0x0000000000481c16: add byte ptr [rax - 0x73], cl; add eax, 0x902; cmove rax, rdx; ret; 
0x000000000040c85f: add byte ptr [rax - 0x73], cl; add eax, 0x954a7; ret; 
0x000000000040c84f: add byte ptr [rax - 0x73], cl; add eax, 0x954ac; ret; 
0x000000000040c83f: add byte ptr [rax - 0x73], cl; add eax, 0x954b0; ret; 
0x000000000040c81f: add byte ptr [rax - 0x73], cl; add eax, 0x954bc; ret; 
0x000000000040c80f: add byte ptr [rax - 0x73], cl; add eax, 0x954c7; ret; 
0x000000000040c7ef: add byte ptr [rax - 0x73], cl; add eax, 0x954d8; ret; 
0x000000000040c7ff: add byte ptr [rax - 0x73], cl; add eax, 0x954e4; ret; 
0x000000000040c7df: add byte ptr [rax - 0x73], cl; add eax, 0x954ef; ret; 
0x000000000040c86f: add byte ptr [rax - 0x73], cl; add eax, 0x95528; ret; 
0x000000000040c82f: add byte ptr [rax - 0x73], cl; add eax, 0x9556f; ret; 
0x000000000040bc4f: add byte ptr [rax - 0x73], cl; add eax, 0x960b7; ret; 
0x000000000040bc3f: add byte ptr [rax - 0x73], cl; add eax, 0x960bc; ret; 
0x000000000040bc2f: add byte ptr [rax - 0x73], cl; add eax, 0x960c0; ret; 
0x000000000040bc0f: add byte ptr [rax - 0x73], cl; add eax, 0x960cc; ret; 
0x000000000040bbff: add byte ptr [rax - 0x73], cl; add eax, 0x960d7; ret; 
0x000000000040bbdf: add byte ptr [rax - 0x73], cl; add eax, 0x960e8; ret; 
0x000000000040bbef: add byte ptr [rax - 0x73], cl; add eax, 0x960f4; ret; 
0x000000000040bbcf: add byte ptr [rax - 0x73], cl; add eax, 0x960ff; ret; 
0x000000000040bc5f: add byte ptr [rax - 0x73], cl; add eax, 0x96138; ret; 
0x000000000040bc1f: add byte ptr [rax - 0x73], cl; add eax, 0x9617f; ret; 
0x000000000040b03f: add byte ptr [rax - 0x73], cl; add eax, 0x96cc7; ret; 
0x000000000040b02f: add byte ptr [rax - 0x73], cl; add eax, 0x96ccc; ret; 
0x000000000040b01f: add byte ptr [rax - 0x73], cl; add eax, 0x96cd0; ret; 
0x000000000040afff: add byte ptr [rax - 0x73], cl; add eax, 0x96cdc; ret; 
0x000000000040afef: add byte ptr [rax - 0x73], cl; add eax, 0x96ce7; ret; 
0x000000000040afcf: add byte ptr [rax - 0x73], cl; add eax, 0x96cf8; ret; 
0x000000000040afdf: add byte ptr [rax - 0x73], cl; add eax, 0x96d04; ret; 
0x000000000040afbf: add byte ptr [rax - 0x73], cl; add eax, 0x96d0f; ret; 
0x000000000040b04f: add byte ptr [rax - 0x73], cl; add eax, 0x96d48; ret; 
0x000000000040b00f: add byte ptr [rax - 0x73], cl; add eax, 0x96d8f; ret; 
0x000000000040a32f: add byte ptr [rax - 0x73], cl; add eax, 0x979e3; ret; 
0x000000000040a31f: add byte ptr [rax - 0x73], cl; add eax, 0x979e7; ret; 
0x000000000040a30f: add byte ptr [rax - 0x73], cl; add eax, 0x979ec; ret; 
0x000000000040a2ff: add byte ptr [rax - 0x73], cl; add eax, 0x979f0; ret; 
0x000000000040a2df: add byte ptr [rax - 0x73], cl; add eax, 0x979fc; ret; 
0x000000000040a2cf: add byte ptr [rax - 0x73], cl; add eax, 0x97a07; ret; 
0x000000000040a2af: add byte ptr [rax - 0x73], cl; add eax, 0x97a18; ret; 
0x000000000040a2ef: add byte ptr [rax - 0x73], cl; add eax, 0x97a1e; ret; 
0x000000000040a2bf: add byte ptr [rax - 0x73], cl; add eax, 0x97a24; ret; 
0x000000000040a29f: add byte ptr [rax - 0x73], cl; add eax, 0x97a2f; ret; 
0x0000000000400d7f: add byte ptr [rax - 0x73], cl; add eax, 0xa0b71; ret; 
0x0000000000482f36: add byte ptr [rax - 0x73], cl; add eax, 0xa22; cmove rax, rdx; ret; 
0x0000000000481be6: add byte ptr [rax - 0x73], cl; add eax, 0xdf2; cmove rax, rdx; ret; 
0x0000000000482f95: add byte ptr [rax - 0x73], cl; add eax, 0xfffd3f53; cmp edx, 0x1000; lea rdx, [rip - 0x2bf3a]; cmove rax, rdx; ret; 
0x000000000042eb7f: add byte ptr [rax - 0x73], cl; add eax, 0xffffeb59; mov qword ptr [rip + 0x2a7d1a], rax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2a7d04], rax; ret; 
0x000000000042eb8d: add byte ptr [rax - 0x73], cl; add eax, 0xfffff57b; mov qword ptr [rip + 0x2a7d04], rax; ret; 
0x00000000004665eb: add byte ptr [rax - 0x73], cl; add r9b, byte ptr [rax + 0x39]; ret; 
0x0000000000466609: add byte ptr [rax - 0x73], cl; add r9d, dword ptr [rax + 0x39]; ret; 
0x000000000048be5d: add byte ptr [rax - 0x73], cl; cmp eax, 0x339b3; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000041d8cb: add byte ptr [rax - 0x73], cl; cmp eax, 0x8fdba; mov edx, 0x6c; call 0x10920; xor eax, eax; ret; 
0x000000000041bf66: add byte ptr [rax - 0x73], cl; cmp eax, 0x91272; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000048b535: add byte ptr [rax - 0x73], cl; or eax, 0x34243; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000047e1ee: add byte ptr [rax - 0x73], cl; or eax, 0x403ae; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000004078e8: add byte ptr [rax - 0x73], cl; or eax, 0x9a338; mov esi, esi; movsxd rax, dword ptr [rcx + rsi*4]; add rax, rcx; jmp rax; 
0x000000000043944e: add byte ptr [rax - 0x73], cl; or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000488f22: add byte ptr [rax - 0x73], cl; push 0x48b4901; and al, 0x83; ret; 
0x000000000042b85a: add byte ptr [rax - 0x73], cl; push rax; adc dh, dh; ret 0xf0f; 
0x000000000042ddaf: add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x000000000042a0d8: add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x0000000000480d24: add byte ptr [rax - 0x73], cl; test al, 0x28; add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x000000000047aeeb: add byte ptr [rax - 0x73], cl; xor eax, 0x258dad; jmp rax; 
0x000000000047e134: add byte ptr [rax - 0x73], cl; xor eax, 0x403ac; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000045728f: add byte ptr [rax - 0x73], cl; xor eax, 0x588e9; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x0000000000409caf: add byte ptr [rax - 0x74], bh; ret; 
0x00000000004cee03: add byte ptr [rax - 0x74], ch; add byte ptr [rax], al; or byte ptr [rbx], dl; sti; jmp qword ptr [rdi]; 
0x0000000000409c7f: add byte ptr [rax - 0x75], bh; ret; 
0x000000000048b71c: add byte ptr [rax - 0x75], cl; adc byte ptr [r8 - 0x7d], cl; ret; 
0x0000000000428bcf: add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004952f7: add byte ptr [rax - 0x75], cl; adc cl, byte ptr [rcx + 0x48b48d8]; ret 0x8b48; 
0x000000000040ff31: add byte ptr [rax - 0x75], cl; adc eax, 0x2c8ecf; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000049a064: add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000499d68: add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x00000000004705cf: add byte ptr [rax - 0x75], cl; add al, 0xc6; mov esi, 1; jmp rax; 
0x0000000000470c27: add byte ptr [rax - 0x75], cl; add al, 0xc6; xor esi, esi; jmp rax; 
0x0000000000470585: add byte ptr [rax - 0x75], cl; add al, 0xc7; jmp rax; 
0x000000000047b445: add byte ptr [rax - 0x75], cl; add al, 0xc8; mov ecx, 1; jmp rax; 
0x00000000004688ce: add byte ptr [rax - 0x75], cl; add al, 0xe8; test rax, rax; je 0x688da; call rax; 
0x000000000049c566: add byte ptr [rax - 0x75], cl; add al, 0xf7; cmp byte ptr [rcx + rsi], 8; jne 0x9c575; mov qword ptr [rax], rdx; ret; 
0x000000000047003b: add byte ptr [rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x00000000004011b3: add byte ptr [rax - 0x75], cl; add byte ptr [rbx - 0x171076d8], cl; rol byte ptr [rax - 0x3f7b0000], 0x89; ret; 
0x0000000000452f6f: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x000000000045163f: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000048e81f: add byte ptr [rax - 0x75], cl; add eax, 0x247911; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x24abd7]; mov qword ptr [rsi], rax; ret; 
0x0000000000466ccf: add byte ptr [rax - 0x75], cl; add eax, 0x272201; ret; 
0x000000000045e7ef: add byte ptr [rax - 0x75], cl; add eax, 0x27b191; ret; 
0x00000000004279ff: add byte ptr [rax - 0x75], cl; add eax, 0x2ae759; ret; 
0x000000000041cc1b: add byte ptr [rax - 0x75], cl; and al, 8; call rax; 
0x000000000043ea5f: add byte ptr [rax - 0x75], cl; cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004747c5: add byte ptr [rax - 0x75], cl; cmp byte ptr [rbp - 0x77], cl; dec byte ptr [rcx + rcx*4 - 0x16]; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000045dc2f: add byte ptr [rax - 0x75], cl; cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000043ec3f: add byte ptr [rax - 0x75], cl; hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043f22f: add byte ptr [rax - 0x75], cl; int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431caf: add byte ptr [rax - 0x75], cl; je 0x31cd8; sub byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x000000000048e95f: add byte ptr [rax - 0x75], cl; je 0x8e988; and byte ptr [rcx], dh; fisttp dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x94; ret; 
0x000000000040ff38: add byte ptr [rax - 0x75], cl; je 0xff61; adc byte ptr [rbx + 0x480c247c], cl; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x000000000046862f: add byte ptr [rax - 0x75], cl; jl 0x68658; sbb al, ch; outsb dx, byte ptr ss:[rsi]; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000046ad2b: add byte ptr [rax - 0x75], cl; jl 0x6ad54; or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x000000000041d6b2: add byte ptr [rax - 0x75], cl; js 0x1d6d7; call rdx; 
0x00000000004a0b67: add byte ptr [rax - 0x75], cl; mov ah, 0x24; cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x00000000004812cf: add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + 0x4c]; ret; 
0x000000000043ee2f: add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f02f: add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004a0bb9: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x397bf0ff], bpl; add eax, 0x89490000; ret 0x8349; 
0x000000000048814f: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x7b], r9b; ror byte ptr [rdi], 0x84; ret; 
0x0000000000490edf: add byte ptr [rax - 0x75], cl; or byte ptr [rax + rcx*2 + 0x2b], spl; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000496040: add byte ptr [rax - 0x75], cl; pop rbp; mov eax, 0x89fd8945; ret 0xe283; 
0x000000000040fcdd: add byte ptr [rax - 0x75], cl; push rax; and byte ptr [rax + 1], cl; ret 0xb70f; 
0x0000000000485c7b: add byte ptr [rax - 0x75], cl; push rax; or byte ptr [rax - 0x75], cl; xor al, ch; and byte ptr [rax + 0x3948fff7], ch; ret; 
0x0000000000422181: add byte ptr [rax - 0x75], cl; push rbx; or byte ptr [rax + 0x2b], cl; push rbx; cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x000000000044453f: add byte ptr [rax - 0x75], cl; push rsi; add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000043e4df: add byte ptr [rax - 0x75], cl; push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000443d7f: add byte ptr [rax - 0x75], cl; push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000443cef: add byte ptr [rax - 0x75], cl; push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000443f8f: add byte ptr [rax - 0x75], cl; push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x000000000040963f: add byte ptr [rax - 0x75], cl; sbb byte ptr [r8 - 0x7b], r9b; sal byte ptr [rsp + rax - 0x77], 0xf7; jmp rax; 
0x0000000000478963: add byte ptr [rax - 0x75], cl; test dword ptr [rax], esi; idiv edi; dec dword ptr [rax - 0x39]; ret 0x7c60; 
0x000000000043e69f: add byte ptr [rax - 0x75], cl; test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x0000000000459a8c: add byte ptr [rax - 0x75], cl; xor ecx, dword ptr [rax - 0x75]; jl 0x59ab8; or byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x0000000000409bef: add byte ptr [rax - 0x76], bh; ret; 
0x000000000042165f: add byte ptr [rax - 0x76b80000], al; ret; 
0x0000000000409c8f: add byte ptr [rax - 0x77], bh; ret; 
0x0000000000427a90: add byte ptr [rax - 0x77], cl; adc eax, 0x2b12e0; add dword ptr [rip + 0x2b12d5], 1; ret; 
0x0000000000499d5f: add byte ptr [rax - 0x77], cl; add al, 0x24; call 0x9a0e0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000493d96: add byte ptr [rax - 0x77], cl; add eax, 0x24532a; ret; 
0x0000000000493d7b: add byte ptr [rax - 0x77], cl; add eax, 0x245345; add rsp, 8; ret; 
0x000000000048e77f: add byte ptr [rax - 0x77], cl; add eax, 0x24ac89; add rsp, 8; ret; 
0x000000000042856d: add byte ptr [rax - 0x77], cl; add eax, 0x2ae2b3; ret; 
0x000000000042854d: add byte ptr [rax - 0x77], cl; add eax, 0x2ae2cb; ret; 
0x0000000000401c91: add byte ptr [rax - 0x77], cl; add eax, 0x2d447b; mov qword ptr [rip + 0x2d447c], rax; mov qword ptr [rip + 0x2d447d], rax; add rsp, 8; ret; 
0x0000000000401c98: add byte ptr [rax - 0x77], cl; add eax, 0x2d447c; mov qword ptr [rip + 0x2d447d], rax; add rsp, 8; ret; 
0x0000000000401c9f: add byte ptr [rax - 0x77], cl; add eax, 0x2d447d; add rsp, 8; ret; 
0x000000000048d8df: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x8d210; add rsp, 0xd8; ret; 
0x000000000041fb2d: add byte ptr [rax - 0x77], cl; and al, 8; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x00000000004230c5: add byte ptr [rax - 0x77], cl; call 0x5c438e28; ret; 
0x000000000048d821: add byte ptr [rax - 0x77], cl; call 0x5c4a3584; pop r13; ret; 
0x000000000048efa0: add byte ptr [rax - 0x77], cl; call 0x5c4a4d03; ret; 
0x000000000048efbd: add byte ptr [rax - 0x77], cl; call 0x5c4a4d20; ret; 
0x000000000048effa: add byte ptr [rax - 0x77], cl; call 0x5c4a4d5d; ret; 
0x000000000042290d: add byte ptr [rax - 0x77], cl; call 0xfffffffffffe00fe; jmp qword ptr [rsi + 0x2e]; 
0x0000000000421ce2: add byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000423a43: add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004978d5: add byte ptr [rax - 0x77], cl; fdiv dword ptr [rbp + 0x11]; add rsp, 0x40; pop rbx; ret; 
0x00000000004979bc: add byte ptr [rax - 0x77], cl; fdiv dword ptr [rbp + 0x12]; add rsp, 0x50; pop rbx; ret; 
0x0000000000421867: add byte ptr [rax - 0x77], cl; fiadd word ptr [rcx + rcx*4 - 0x11]; mov eax, r9d; syscall; 
0x00000000004675e5: add byte ptr [rax - 0x77], cl; fild word ptr [rcx + rcx*4 + 0x45]; mov eax, 0xff52bee8; dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x0000000000464656: add byte ptr [rax - 0x77], cl; fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x000000000046dda7: add byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0x12]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000420b34: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004830e4: add byte ptr [rax - 0x77], cl; fucomip st(0); ret; 
0x000000000049a80e: add byte ptr [rax - 0x77], cl; fucomip st(1); ret; 
0x00000000004275eb: add byte ptr [rax - 0x77], cl; imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x00000000004105d1: add byte ptr [rax - 0x77], cl; jbe 0x105e6; syscall; 
0x000000000045b4af: add byte ptr [rax - 0x77], cl; jo 0x5b4d4; ret; 
0x0000000000421e33: add byte ptr [rax - 0x77], cl; mov edx, 0x130; pop rbx; ret; 
0x000000000042d19f: add byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x75], cl; or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x000000000043292f: add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rax; call rcx; 
0x000000000042043e: add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x000000000045860b: add byte ptr [rax - 0x77], cl; ret 0x16e9; 
0x0000000000404289: add byte ptr [rax - 0x77], cl; ret 0x1f0f; 
0x000000000042d087: add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x0000000000420586: add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000042246a: add byte ptr [rax - 0x77], cl; ret 0x294d; 
0x0000000000411b54: add byte ptr [rax - 0x77], cl; ret 0x2fe9; 
0x000000000049dbdc: add byte ptr [rax - 0x77], cl; ret 0x3948; 
0x00000000004586b7: add byte ptr [rax - 0x77], cl; ret 0x6ae9; 
0x000000000046f3f8: add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000042a3fd: add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000404a33: add byte ptr [rax - 0x77], cl; ret 0x84c7; 
0x0000000000411988: add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x000000000041f2a8: add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004067cf: add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000049d32f: add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000004656b8: add byte ptr [rax - 0x77], cl; ret 0xb2eb; 
0x0000000000407f5e: add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x0000000000479a37: add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000041e08d: add byte ptr [rax - 0x77], cl; ret 0xf748; 
0x0000000000423bc8: add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000458622: add byte ptr [rax - 0x77], cl; ret 0xffe9; 
0x0000000000406c9f: add byte ptr [rax - 0x77], cl; ret; 
0x00000000004394bc: add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0x7f10; 
0x000000000044c704: add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0xf10; 
0x0000000000456130: add byte ptr [rax - 0x77], cl; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000491011: add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000049bf4f: add byte ptr [rax - 0x77], cl; shr cl, 1; ret 0xfffe; 
0x000000000049e94d: add byte ptr [rax - 0x77], cl; sub byte ptr [rbx + 0x23aa9005], r9b; add byte ptr [rbp - 0xcfb8b40], al; ret; 
0x000000000049e83d: add byte ptr [rax - 0x77], cl; sub byte ptr [rbx + 0x23aba005], r9b; add byte ptr [rbp - 0xcfb8b40], al; ret; 
0x000000000045e3bd: add byte ptr [rax - 0x77], cl; test dword ptr [rax - 0x77], 0xe6e89075; in al, 0xff; dec dword ptr [rcx + rcx*4 - 1]; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000048aaa3: add byte ptr [rax - 0x77], cl; xchg dword ptr [rax], eax; add eax, dword ptr [rax]; add bl, dh; ret; 
0x000000000049044d: add byte ptr [rax - 0x77], cl; xchg eax, r8d; mov eax, 0x15; syscall; 
0x0000000000463468: add byte ptr [rax - 0x77], cl; xor byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], al; jmp qword ptr [rsi + 0xf]; 
0x00000000004c7e43: add byte ptr [rax - 0x77ffffe4], ch; jnp 0xc7e3f; jmp qword ptr [rbp + 2]; 
0x0000000000409cbf: add byte ptr [rax - 0x78], bh; ret; 
0x0000000000499e46: add byte ptr [rax - 0x7ab70000], al; ret 0x840f; 
0x000000000040a3ff: add byte ptr [rax - 0x7b], al; ror byte ptr [rdi], 0x49; ret 0x8348; 
0x000000000040191f: add byte ptr [rax - 0x7b], cl; call qword ptr [rbx + 0x48]; 
0x00000000004829df: add byte ptr [rax - 0x7b], cl; div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x000000000049f4aa: add byte ptr [rax - 0x7b], cl; fisttp dword ptr [rax - 0x77]; sbb eax, 0x23989b; jne 0x9f498; pop rbx; ret; 
0x0000000000480d2b: add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x000000000045b01f: add byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], cl; sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x0000000000488da7: add byte ptr [rax - 0x7b], cl; ror byte ptr [rax - 0x73], cl; add dword ptr [r15], r9d; xchg eax, ebp; ret 0xc283; 
0x000000000041f21a: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000047c9dd: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x0000000000400aa5: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rcx + 0x5d], 0xbf; adc byte ptr [rbp + rbp*2], bh; jmp rax; 
0x000000000040115d: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rcx - 0x75], 0; add rsp, 8; ret; 
0x000000000045c303: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rbp + 0x48], 0x8b; push rax; or dh, dh; ret 0x8902; 
0x000000000049c5ef: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rcx + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x0000000000400ae7: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rcx + 0x5d], 0xbf; adc byte ptr [rbp + rbp*2], bh; jmp rax; 
0x000000000040040a: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x00000000004960e8: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rcx + 0x49], cl; mov eax, dword ptr [rsp]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000049a2df: add byte ptr [rax - 0x7c], al; push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x9a308; xor eax, eax; ret; 
0x000000000049d47f: add byte ptr [rax - 0x7c], al; push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x9d49e; xor eax, eax; ret; 
0x000000000049e2df: add byte ptr [rax - 0x7c], al; push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x9e2fe; xor eax, eax; ret; 
0x000000000049ed4f: add byte ptr [rax - 0x7c], al; push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x9ed78; xor eax, eax; ret; 
0x00000000004d1a6f: add byte ptr [rax - 0x7c], dl; cld; call qword ptr [rdx]; 
0x000000000049e08e: add byte ptr [rax - 0x7d], cl; and al, 0x10; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000048f07f: add byte ptr [rax - 0x7d], cl; call 0x7c943888; ret; 
0x000000000042ef7c: add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x00000000004108a9: add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000471133: add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000456dcd: add byte ptr [rax - 0x7d], cl; cli; and byte ptr [rdi + 0x64], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000456e1d: add byte ptr [rax - 0x7d], cl; cli; and byte ptr [rdi + 0xb], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000421c2f: add byte ptr [rax - 0x7d], cl; cmp eax, 0x2b4370; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x0000000000412559: add byte ptr [rax - 0x7d], cl; cmp eax, 0x2c39fe; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000432234: add byte ptr [rax - 0x7d], cl; in al, dx; or al, ch; xchg eax, edx; movsxd rdi, edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000499b71: add byte ptr [rax - 0x7d], cl; in al, dx; sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000425e2f: add byte ptr [rax - 0x7d], cl; jg 0x25e6c; add byte ptr [rcx + rcx - 0xd], dh; ret; 
0x000000000046645a: add byte ptr [rax - 0x7d], cl; jl 0x66483; add byte ptr [rdx + rdi*2 - 0xa], sil; ret; 
0x000000000042e3f2: add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x0000000000480ce6: add byte ptr [rax - 0x7d], cl; js 0x80d1b; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x000000000045581f: add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x000000000045b857: add byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x000000000047e837: add byte ptr [rax - 0x7d], cl; ret 0x4404; 
0x000000000041dedf: add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000465314: add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x0000000000494d6f: add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000048d01a: add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000046d324: add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x0000000000409e0c: add byte ptr [rax - 0x7d], cl; ret 0x4820; 
0x00000000004394e9: add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042da47: add byte ptr [rax - 0x7d], cl; ret 0x4c07; 
0x000000000049d30f: add byte ptr [rax - 0x7d], cl; ret 0x8001; 
0x000000000047ea18: add byte ptr [rax - 0x7d], cl; ret 0x8b08; 
0x0000000000433040: add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000044c4a3: add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000439517: add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000048d2d7: add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x0000000000414c5f: add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000434f1f: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x0000000000482b1f: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x00000000004988d2: add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x83; ret 0x3901; 
0x000000000045ec67: add byte ptr [rax - 0x7f], cl; in al, dx; add byte ptr [rax], 0; add al, ch; in al, dx; ret; 
0x000000000045ecc9: add byte ptr [rax - 0x7f], cl; in al, dx; add byte ptr [rax], 0; add al, ch; pop rdx; ret; 
0x0000000000429491: add byte ptr [rax - 0x7f], cl; in al, dx; add byte ptr [rax], 0; add al, ch; ret 0x31b; 
0x000000000046a284: add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x000000000044214b: add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x00000000004cbd2b: add byte ptr [rax - 0x7fffffa5], dl; add edi, eax; call qword ptr [rax]; 
0x000000000049a16f: add byte ptr [rax - 0x80], al; call qword ptr [rax + 0x49]; 
0x000000000049d497: add byte ptr [rax - 0x80], al; call qword ptr [rax + 0x74]; 
0x000000000049d43f: add byte ptr [rax - 0x80], al; inc dword ptr [rsi*2 + 0x8b80f]; add byte ptr [rax], al; ret; 
0x00000000004d0807: add byte ptr [rax - 0xa], ch; sti; jmp qword ptr [rcx]; 
0x0000000000409d1f: add byte ptr [rax - 0xc9], bh; ret; 
0x00000000004c7643: add byte ptr [rax - 0xc], ch; call qword ptr [rdi]; 
0x0000000000409d2f: add byte ptr [rax - 0xca], bh; ret; 
0x0000000000409d3f: add byte ptr [rax - 0xcb], bh; ret; 
0x0000000000409d4f: add byte ptr [rax - 0xcc], bh; ret; 
0x0000000000409d5f: add byte ptr [rax - 0xd3], bh; ret; 
0x0000000000409d6f: add byte ptr [rax - 0xd4], bh; ret; 
0x0000000000409d7f: add byte ptr [rax - 0xd5], bh; ret; 
0x0000000000409d8f: add byte ptr [rax - 0xd6], bh; ret; 
0x0000000000407a1f: add byte ptr [rax - 0xd], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000409d9f: add byte ptr [rax - 0xdd], bh; ret; 
0x0000000000409daf: add byte ptr [rax - 0xde], bh; ret; 
0x0000000000409dbf: add byte ptr [rax - 0xdf], bh; ret; 
0x0000000000409bcf: add byte ptr [rax - 0xe0], bh; ret; 
0x000000000046bf3d: add byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000420fea: add byte ptr [rax - 1], bh; ret; 
0x00000000004cea7f: add byte ptr [rax - 3], al; cli; jmp qword ptr [rbx + 8]; 
0x00000000004afac8: add byte ptr [rax - 6], al; jmp qword ptr [rax]; 
0x00000000004d08e7: add byte ptr [rax - 7], bh; sti; jmp qword ptr [rsi]; 
0x000000000045ec6b: add byte ptr [rax], 0; add al, ch; in al, dx; ret; 
0x000000000045eccd: add byte ptr [rax], 0; add al, ch; pop rdx; ret; 
0x0000000000431395: add byte ptr [rax], 0; add al, ch; ret 0x29c; 
0x0000000000429495: add byte ptr [rax], 0; add al, ch; ret 0x31b; 
0x000000000042ac94: add byte ptr [rax], 0; add al, ch; ret; 
0x0000000000424d7a: add byte ptr [rax], 0; add bl, dh; ret; 
0x000000000045700d: add byte ptr [rax], 0; add byte ptr [rax + 0x39], cl; retf 0xe175; vzeroupper; ret; 
0x00000000004117da: add byte ptr [rax], 0; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000427a8d: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; adc eax, 0x2b12e0; add dword ptr [rip + 0x2b12d5], 1; ret; 
0x000000000042290a: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; call 0xfffffffffffe00fe; jmp qword ptr [rsi + 0x2e]; 
0x0000000000423bc5: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000043a57b: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000043a59b: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000040a29b: add byte ptr [rax], 0; add byte ptr [rax], al; lea rax, [rip + 0x97a2f]; ret; 
0x00000000004097cb: add byte ptr [rax], 0; add byte ptr [rax], al; mov dword ptr [rdi], 0x66; xor eax, eax; ret; 
0x00000000004979db: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0x26; syscall; 
0x0000000000458b4b: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 1; syscall; 
0x000000000044492b: add byte ptr [rax], 0; add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000004094bb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, 0x6d2ca0; pop rbx; ret; 
0x00000000004094cb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, 0x6d2ce0; pop rbx; ret; 
0x00000000004094db: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, 0x6d2d20; pop rbx; ret; 
0x000000000040950b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, 0x6d2d60; pop rbx; ret; 
0x00000000004094fb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, 0x6d2da0; pop rbx; ret; 
0x00000000004094eb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, 0x6d5300; pop rbx; ret; 
0x0000000000466ccb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x272201]; ret; 
0x000000000044476b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000045342b: add byte ptr [rax], 0; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000045731b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx eax, cl; pop rbx; ret; 
0x0000000000444a7b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x0000000000444a0b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000043b1ab: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000458a7b: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; syscall; 
0x000000000041f112: add byte ptr [rax], 0; add byte ptr [rbx + 0x48], bl; mov eax, esi; pop rbp; pop r12; ret; 
0x00000000004c94bc: add byte ptr [rax], 0; add byte ptr [rbx + rsi], ah; add byte ptr [rax], al; or al, 0x99; cmc; call qword ptr [rdi + 2]; 
0x0000000000475679: add byte ptr [rax], 0; add byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x0000000000429c6b: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045b03c: add byte ptr [rax], 0; add byte ptr [rcx], bh; sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x000000000041d991: add byte ptr [rax], 0; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000045710f: add byte ptr [rax], 0; add byte ptr [rdi + 0x12], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000004570af: add byte ptr [rax], 0; add byte ptr [rdi + 0x7b], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000004439d3: add byte ptr [rax], 0; add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x000000000043b711: add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004aebe0: add byte ptr [rax], 0xf9; jmp qword ptr [rax + 2]; 
0x00000000004d174b: add byte ptr [rax], ah; add byte ptr [rax], al; add byte ptr [rbp + rsi*4 + 0x60fc0000], dh; cld; jmp qword ptr [rcx]; 
0x00000000004c9f13: add byte ptr [rax], ah; add byte ptr [rax], al; jl 0xc9f57; add byte ptr [rax], al; sal ebp, 1; jmp qword ptr [rdi + 2]; 
0x00000000004c7f7f: add byte ptr [rax], ah; mov ah, dh; call qword ptr [rcx]; 
0x00000000004cccef: add byte ptr [rax], ah; out 0xf8, al; call qword ptr [rax]; 
0x00000000004ccd1f: add byte ptr [rax], ah; out 0xf8, al; jmp qword ptr [rcx]; 
0x00000000004d159f: add byte ptr [rax], ah; pop rdx; cld; jmp qword ptr [rax + 1]; 
0x00000000004aee30: add byte ptr [rax], ah; stc; push qword ptr [rax - 0x7f0006df]; and edi, ecx; jmp qword ptr [rax + 0x25]; 
0x00000000004cf3df: add byte ptr [rax], ah; sub bl, bh; jmp qword ptr [rbx]; 
0x00000000004d1ace: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; cmp byte ptr [rcx - 0x78280000], bh; cld; jmp qword ptr [rcx]; 
0x00000000004cdfce: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; cmp byte ptr [rsi], bh; add al, bh; ret 0xfff9; 
0x00000000004d166e: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; fdiv dword ptr [rax + rax - 0x3a18800]; call qword ptr [rbx]; 
0x00000000004cc56e: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; fsub dword ptr [rbx]; add byte ptr [rax], cl; ret 0xfff8; 
0x00000000004cccfe: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; push 0x1800006b; out 0xf8, al; call qword ptr [rdx]; 
0x00000000004ce2e6: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; push rax; add dword ptr [rax], 0xf9de6000; call qword ptr [rbx]; 
0x00000000004ce056: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; sar byte ptr [rsi], 0; nop; ret; 
0x00000000004d0f66: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; shr byte ptr [rbp + 0x29400000], 1; cld; call qword ptr [rax]; 
0x00000000004c76ae: add byte ptr [rax], al; adc al, 0x15; add byte ptr [rax], al; sub al, 0x21; hlt; jmp rsi; 
0x00000000004cdc7a: add byte ptr [rax], al; adc al, 0x9e; stc; jmp rax; 
0x00000000004cc0ea: add byte ptr [rax], al; adc al, 0xad; clc; jmp rbx; 
0x00000000004d21aa: add byte ptr [rax], al; adc al, al; add byte ptr [rax], al; nop; mov ch, 0xfc; jmp qword ptr [rbx]; 
0x00000000004d24aa: add byte ptr [rax], al; adc bl, al; add byte ptr [rax], al; jo 0xd247a; cld; jmp qword ptr [rcx]; 
0x00000000004d047e: add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; call 0xffffffffc20d052b; add bl, dh; jmp qword ptr [rcx]; 
0x00000000004a89aa: add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; fdivr st(7); call qword ptr [rax]; 
0x00000000004d1fd6: add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; mov esi, 0xb0100000; cld; call qword ptr [rbx]; 
0x00000000004ce2fe: add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; push 0x68000081; fdivp st(1); call qword ptr [rax]; 
0x00000000004d07fe: add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; push 0x680000a6; idiv bl; jmp qword ptr [rcx]; 
0x00000000004d242a: add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; xchg eax, esp; ret 0; 
0x000000000049390e: add byte ptr [rax], al; adc byte ptr [rax], al; or rsi, rax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x00000000004ca3aa: add byte ptr [rax], al; adc byte ptr [rdx], al; add al, dh; fcomip st(5); call qword ptr [rdx]; 
0x00000000004d037e: add byte ptr [rax], al; adc ch, 0xfb; jmp qword ptr [rdx]; 
0x00000000004c727d: add byte ptr [rax], al; add ah, ah; adc byte ptr [rax], al; add byte ptr [rbx + rcx], bl; hlt; call qword ptr [rax]; 
0x00000000004c735d: add byte ptr [rax], al; add ah, al; adc dword ptr [rax], eax; add byte ptr [rsp + rcx - 0xc], bl; jmp qword ptr [rax + 9]; 
0x00000000004ab30d: add byte ptr [rax], al; add ah, al; add byte ptr [rax], al; add ah, dl; fdivr st(7); call rsp; 
0x00000000004cdc75: add byte ptr [rax], al; add ah, bl; jp 0xcdc7b; add byte ptr [rsi + rbx*4], dl; stc; jmp rax; 
0x00000000004c8885: add byte ptr [rax], al; add ah, ch; add byte ptr es:[rax], al; push rdx; cmc; call qword ptr [rdx]; 
0x00000000004aa2bd: add byte ptr [rax], al; add ah, cl; add byte ptr [rax], al; add bh, ah; fdivr st(7); jmp rdi; 
0x00000000004c8b31: add byte ptr [rax], al; add ah, dl; add byte ptr [rax], al; add byte ptr [rax + 0x63], bl; cmc; jmp qword ptr [rcx + 1]; 
0x00000000004ab31d: add byte ptr [rax], al; add ah, dl; fdivr st(7); call rsi; 
0x00000000004ab311: add byte ptr [rax], al; add ah, dl; fdivr st(7); call rsp; 
0x00000000004c716d: add byte ptr [rax], al; add ah, dl; sldt word ptr [rax]; or al, 7; hlt; call qword ptr [rdi]; 
0x00000000004cbd6a: add byte ptr [rax], al; add al, 0x1f; clc; call qword ptr [rsi + 0x16]; 
0x00000000004288e7: add byte ptr [rax], al; add al, 0xe8; or dword ptr [rsi], 0x83480003; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000428a01: add byte ptr [rax], al; add al, 0xe8; or eax, 0x83480003; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000004a88c5: add byte ptr [rax], al; add al, ah; fdivr st(7); jmp qword ptr [rbx]; 
0x00000000004a8891: add byte ptr [rax], al; add al, ah; fdivr st(7); jmp rax; 
0x00000000004cea79: add byte ptr [rax], al; add al, ah; mov byte ptr [rax], al; add byte ptr [rax - 3], al; cli; jmp qword ptr [rbx + 8]; 
0x00000000004c7f79: add byte ptr [rax], al; add al, ah; sbb eax, 0x88200000; hlt; call qword ptr [rcx]; 
0x00000000004aad35: add byte ptr [rax], al; add al, al; add byte ptr [rax], al; add bl, dl; fdivr st(7); call rbx; 
0x00000000004a663d: add byte ptr [rax], al; add al, al; fdivr st(7); call rcx; 
0x00000000004d2459: add byte ptr [rax], al; add al, al; ret 0; 
0x00000000004cd491: add byte ptr [rax], al; add al, bh; jb 0xcd497; add byte ptr [rax], ch; sub bh, cl; call qword ptr [rax]; 
0x00000000004c7f91: add byte ptr [rax], al; add al, bh; sbb eax, 0x88280000; hlt; call qword ptr [rbx + 1]; 
0x00000000004ce071: add byte ptr [rax], al; add al, bl; jle 0xce077; add al, bl; ret; 
0x00000000004cd771: add byte ptr [rax], al; add al, bl; jne 0xcd777; add byte ptr [rax + 0x4a], ch; stc; call qword ptr [rdi]; 
0x00000000004d1671: add byte ptr [rax], al; add al, bl; mov ah, 0; add byte ptr [rax + 0x5e], bh; cld; call qword ptr [rbx]; 
0x00000000004d1271: add byte ptr [rax], al; add al, bl; mov al, 0; add al, cl; xor al, 0xfc; call qword ptr [rax]; 
0x00000000004cc571: add byte ptr [rax], al; add al, bl; movsxd rax, dword ptr [rax]; add byte ptr [rax], cl; ret 0xfff8; 
0x00000000004ccc71: add byte ptr [rax], al; add al, bl; push 0; add byte ptr [rax], cl; in al, 0xf8; call qword ptr [rsi]; 
0x000000000045dbdc: add byte ptr [rax], al; add al, ch; cmp al, 0x2d; sti; jmp qword ptr [rsi + 0x2e]; 
0x00000000004ab2bd: add byte ptr [rax], al; add al, ch; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004ccb81: add byte ptr [rax], al; add al, ch; imul eax, dword ptr [rax], 0xf8e35800; call qword ptr [rcx]; 
0x000000000045ec6c: add byte ptr [rax], al; add al, ch; in al, dx; ret; 
0x00000000004596c9: add byte ptr [rax], al; add al, ch; jb 0x596cb; jmp qword ptr [rsi + 0x2e]; 
0x000000000048c7f6: add byte ptr [rax], al; add al, ch; mov dl, 0xb9; cld; jmp qword ptr [rsi - 0x70]; 
0x0000000000469cbf: add byte ptr [rax], al; add al, ch; pop rcx; insb byte ptr [rdi], dx; cli; jmp qword ptr [rsi + 0xf]; 
0x000000000045acbe: add byte ptr [rax], al; add al, ch; pop rdx; pop rsp; sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000045ecce: add byte ptr [rax], al; add al, ch; pop rdx; ret; 
0x0000000000431396: add byte ptr [rax], al; add al, ch; ret 0x29c; 
0x0000000000429496: add byte ptr [rax], al; add al, ch; ret 0x31b; 
0x00000000004754b6: add byte ptr [rax], al; add al, ch; ret 0xac; 
0x0000000000427065: add byte ptr [rax], al; add al, ch; ret; 
0x00000000004c7761: add byte ptr [rax], al; add al, cl; adc eax, 0x2ca80000; hlt; call qword ptr [rcx]; 
0x00000000004d1f61: add byte ptr [rax], al; add al, cl; mov ebp, 0xae280000; cld; jmp qword ptr [rdx + 1]; 
0x00000000004c8f61: add byte ptr [rax], al; add al, cl; sub eax, 0x7bf80000; cmc; jmp qword ptr [rdx + 1]; 
0x00000000004cb989: add byte ptr [rax], al; add al, dh; push rdi; add byte ptr [rax], al; jl 0xcb989; call qword ptr [rsi]; 
0x00000000004a8ef1: add byte ptr [rax], al; add al, dl; fdivr st(7); call rax; 
0x00000000004d0f69: add byte ptr [rax], al; add al, dl; lodsd eax, dword ptr [rsi]; add byte ptr [rax], al; sub esp, edi; call qword ptr [rax]; 
0x00000000004d1a69: add byte ptr [rax], al; add al, dl; mov eax, 0x84500000; cld; call qword ptr [rdx]; 
0x00000000004aa2cd: add byte ptr [rax], al; add bh, ah; fdivr st(7); call qword ptr [rcx + 0xe]; 
0x00000000004aa2ad: add byte ptr [rax], al; add bh, ah; fdivr st(7); call rsp; 
0x00000000004aa299: add byte ptr [rax], al; add bh, ah; fdivr st(7); jmp rdi; 
0x000000000045db6d: add byte ptr [rax], al; add bh, al; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000046e25e: add byte ptr [rax], al; add bh, al; test dword ptr [rax], ecx; idiv edi; call qword ptr [rax]; 
0x000000000041d77d: add byte ptr [rax], al; add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000004a41e9: add byte ptr [rax], al; add bh, cl; fdivr st(7); dec edi; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004a41f5: add byte ptr [rax], al; add bh, cl; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004ab411: add byte ptr [rax], al; add bh, dl; fdivr st(7); call qword ptr [rbx + 0x11]; 
0x00000000004ab3dd: add byte ptr [rax], al; add bh, dl; fdivr st(7); call rdi; 
0x00000000004a4271: add byte ptr [rax], al; add bl, ah; fdivr st(7); jmp rbx; 
0x00000000004ce0a9: add byte ptr [rax], al; add bl, ah; ret; 
0x00000000004a664d: add byte ptr [rax], al; add bl, al; fdivr st(7); inc ebx; fdivr st(7); call rdi; 
0x00000000004cdfee: add byte ptr [rax], al; add bl, al; stc; call qword ptr [rcx]; 
0x00000000004a701d: add byte ptr [rax], al; add bl, ch; fdivr st(7); call rsi; 
0x000000000041e056: add byte ptr [rax], al; add bl, ch; ret 0x1f0f; 
0x0000000000494fb7: add byte ptr [rax], al; add bl, ch; ret; 
0x000000000043aa6d: add byte ptr [rax], al; add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000040754c: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rbx + 0xc0]; movups xmmword ptr [rax + 0xc0], xmm0; pop rbx; ret; 
0x0000000000453aad: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000045342d: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000040696d: add byte ptr [rax], al; add bl, dh; ret; 
0x00000000004aad39: add byte ptr [rax], al; add bl, dl; fdivr st(7); call rbx; 
0x00000000004aad45: add byte ptr [rax], al; add bl, dl; fdivr st(7); call rdx; 
0x0000000000484a99: add byte ptr [rax], al; add byte ptr [r9 + rbp - 0x48], sil; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000004aaf55: add byte ptr [rax], al; add byte ptr [rax + 0x11000001], ah; fdivr st(7); call qword ptr [rcx]; 
0x00000000004c75f9: add byte ptr [rax], al; add byte ptr [rax + 0x14], ah; add byte ptr [rax], al; and spl, sil; call qword ptr [rax]; 
0x00000000004cc121: add byte ptr [rax], al; add byte ptr [rax + 0x1800005f], cl; scasb al, byte ptr [rdi]; clc; call qword ptr [rbx]; 
0x00000000004ccd19: add byte ptr [rax], al; add byte ptr [rax + 0x2000006b], al; out 0xf8, al; jmp qword ptr [rcx]; 
0x00000000004c8449: add byte ptr [rax], al; add byte ptr [rax + 0x22], dh; leave; hlt; jmp qword ptr [rax]; 
0x00000000004c86f1: add byte ptr [rax], al; add byte ptr [rax + 0x25], bl; add byte ptr [rax], al; cmc; call rsp; 
0x00000000004979dd: add byte ptr [rax], al; add byte ptr [rax + 0x26], bh; syscall; 
0x00000000004979dd: add byte ptr [rax], al; add byte ptr [rax + 0x26], bh; syscall; cmp rax, -0xfff; jae 0x979f0; ret; 
0x0000000000475546: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8349; 
0x0000000000486036: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x000000000040359e: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8d48; 
0x00000000004047e3: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0xc148; 
0x0000000000478258: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x00000000004c8bd9: add byte ptr [rax], al; add byte ptr [rax + 0x2a], al; add byte ptr [rax], al; shl byte ptr [rbp - 0xb], 1; call qword ptr [rax]; 
0x00000000004d1141: add byte ptr [rax], al; add byte ptr [rax + 0x380000af], ch; xor bh, ah; jmp qword ptr [rbp]; 
0x000000000049a361: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x830f; 
0x000000000042942d: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000042251d: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x000000000049a3f6: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x9272; 
0x0000000000408c73: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0xed75; 
0x000000000042e5df: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000045700e: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; retf 0xe175; vzeroupper; ret; 
0x00000000004c9bf1: add byte ptr [rax], al; add byte ptr [rax + 0x3a], bl; add byte ptr [rax], al; pop rax; ret; 
0x00000000004ca301: add byte ptr [rax], al; add byte ptr [rax + 0x41], ch; add byte ptr [rax], al; fcomp st(6); cmc; call qword ptr [rsi]; 
0x00000000004d1221: add byte ptr [rax], al; add byte ptr [rax + 0x480000b0], cl; xor edi, esp; call qword ptr [rdi]; 
0x0000000000458c34: add byte ptr [rax], al; add byte ptr [rax + 0x48], bh; syscall; 
0x00000000004ce039: add byte ptr [rax], al; add byte ptr [rax + 0x6000007e], ah; ret; 
0x00000000004c8b35: add byte ptr [rax], al; add byte ptr [rax + 0x63], bl; cmc; jmp qword ptr [rcx + 1]; 
0x000000000047e823: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, rdi; jmp rax; 
0x000000000047a974: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x00000000004cc709: add byte ptr [rax], al; add byte ptr [rax + 0x65], dh; add byte ptr [rax], al; and bh, al; clc; jmp qword ptr [rcx]; 
0x000000000048487d: add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x000000000048487d: add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; ret; 
0x00000000004ccbf9: add byte ptr [rax], al; add byte ptr [rax + 0x6a], ah; add byte ptr [rax], al; shl bl, 0xf8; jmp qword ptr [rcx]; 
0x000000000048486d: add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x000000000048486d: add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x00000000004ccd01: add byte ptr [rax], al; add byte ptr [rax + 0x6b], ch; add byte ptr [rax], al; sbb dh, ah; clc; call qword ptr [rdx]; 
0x00000000004ccce9: add byte ptr [rax], al; add byte ptr [rax + 0x6b], dl; add byte ptr [rax], al; and dh, ah; clc; call qword ptr [rax]; 
0x000000000048488d: add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x000000000048488d: add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x00000000004cba49: add byte ptr [rax], al; add byte ptr [rax + 0x70000058], dh; jg 0xcba49; jmp qword ptr [rbx]; 
0x00000000004ccd39: add byte ptr [rax], al; add byte ptr [rax + 0x7000006b], ah; out 0xf8, al; call qword ptr [rcx]; 
0x00000000004ce121: add byte ptr [rax], al; add byte ptr [rax + 0x7800007f], cl; ret; 
0x000000000045394d: add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x00000000004ce011: add byte ptr [rax], al; add byte ptr [rax + 0x7e], bh; add byte ptr [rax], al; sbb bl, al; stc; call qword ptr [rcx]; 
0x00000000004cdfe9: add byte ptr [rax], al; add byte ptr [rax + 0x7e], dl; add byte ptr [rax], al; add bl, al; stc; call qword ptr [rcx]; 
0x000000000045984d: add byte ptr [rax], al; add byte ptr [rax + 0xb], bh; syscall; 
0x000000000045984d: add byte ptr [rax], al; add byte ptr [rax + 0xb], bh; syscall; cmp rax, -0xfff; jae 0x59860; ret; 
0x000000000045b06f: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x000000000045b06f: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; pop rdx; pop rsi; ret; 
0x000000000045b116: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000049c50d: add byte ptr [rax], al; add byte ptr [rax + 0xd837bc], al; add byte ptr [rax], al; add byte ptr [rbx + rbx*8 - 0xd], dh; ret; 
0x0000000000458472: add byte ptr [rax], al; add byte ptr [rax + 0xe5], bh; syscall; 
0x000000000041c8cd: add byte ptr [rax], al; add byte ptr [rax + 0xe], bh; syscall; 
0x0000000000401ccd: add byte ptr [rax], al; add byte ptr [rax + 0xf], al; mov dh, 0xff; mov dword ptr [rip + 0x2d442e], edi; ret; 
0x000000000045ef4d: add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x83480147; ret; 
0x0000000000483b4d: add byte ptr [rax], al; add byte ptr [rax + 0xfe580f5], cl; je 0x83b70; add rax, 2; ret; 
0x0000000000406a34: add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x0000000000458b4d: add byte ptr [rax], al; add byte ptr [rax + 1], bh; syscall; 
0x0000000000492b06: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x149; 
0x0000000000492439: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret; 
0x0000000000493b03: add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x00000000004b8ac9: add byte ptr [rax], al; add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x00000000004d159a: add byte ptr [rax], al; add byte ptr [rax + rax - 0x3a5e000], dh; jmp qword ptr [rax + 1]; 
0x00000000004ca1b5: add byte ptr [rax], al; add byte ptr [rax + rax*2], bl; add byte ptr [rax], al; xor al, 0xd9; cmc; call qword ptr [rdi]; 
0x00000000004ce06d: add byte ptr [rax], al; add byte ptr [rax + rax], bl; add byte ptr [rax], al; fdivr dword ptr [rsi]; add al, bl; ret; 
0x00000000004d121d: add byte ptr [rax], al; add byte ptr [rax + rax], bl; add byte ptr [rax], al; mov byte ptr [rax + 0x33480000], dh; cld; call qword ptr [rdi]; 
0x00000000004aac41: add byte ptr [rax], al; add byte ptr [rax + rax], bl; add byte ptr [rax], al; ret 0; 
0x00000000004c86ed: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rax + 0x25], bl; add byte ptr [rax], al; cmc; call rsp; 
0x00000000004d002d: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rax - 0x47ffff62], bl; nop; sti; jmp qword ptr [rcx + 0xe]; 
0x00000000004d1a65: add byte ptr [rax], al; add byte ptr [rax + rax], dh; add byte ptr [rax], al; sar byte ptr [rax - 0x7bb00000], 1; cld; call qword ptr [rdx]; 
0x00000000004cdfcd: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; cmp byte ptr [rsi], bh; add al, bh; ret 0xfff9; 
0x00000000004d166d: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; fdiv dword ptr [rax + rax - 0x3a18800]; call qword ptr [rbx]; 
0x00000000004cc56d: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; fsub dword ptr [rbx]; add byte ptr [rax], cl; ret 0xfff8; 
0x00000000004cccfd: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; push 0x1800006b; out 0xf8, al; call qword ptr [rdx]; 
0x00000000004ce2e5: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; push rax; add dword ptr [rax], 0xf9de6000; call qword ptr [rbx]; 
0x00000000004ce055: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; sar byte ptr [rsi], 0; nop; ret; 
0x00000000004d0f65: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; shr byte ptr [rbp + 0x29400000], 1; cld; call qword ptr [rax]; 
0x00000000004288e6: add byte ptr [rax], al; add byte ptr [rax + rbp*8], al; or dword ptr [rsi], 0x83480003; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000428a00: add byte ptr [rax], al; add byte ptr [rax + rbp*8], al; or eax, 0x83480003; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000004aa371: add byte ptr [rax], al; add byte ptr [rax + rbx*8 - 1], cl; jmp qword ptr [rdi]; 
0x00000000004c724d: add byte ptr [rax], al; add byte ptr [rax + rdx + 0x9ec0000], dh; hlt; call qword ptr [rbx + 1]; 
0x0000000000407865: add byte ptr [rax], al; add byte ptr [rax - 0x11], bh; pop rbx; pop rbp; pop r12; ret; 
0x00000000004015ad: add byte ptr [rax], al; add byte ptr [rax - 0x16], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000400ffd: add byte ptr [rax], al; add byte ptr [rax - 0x16], bh; ret; 
0x00000000004cd819: add byte ptr [rax], al; add byte ptr [rax - 0x1fffff8a], al; pop rcx; stc; jmp qword ptr [rdi + 0x11]; 
0x00000000004cd151: add byte ptr [rax], al; add byte ptr [rax - 0x30ffff91], bh; xor esi, ebx; jmp qword ptr [rbx]; 
0x00000000004939e6: add byte ptr [rax], al; add byte ptr [rax - 0x38ff76b7], al; add al, byte ptr [rdx]; sar bh, 0xff; mov eax, 1; ret; 
0x0000000000480ec6: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000427af8: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add eax, 0x2b1272; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004267d1: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; or byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x000000000041e941: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0x7c60; 
0x000000000046cbcd: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffa0; 
0x0000000000458a4d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffc0; 
0x00000000004117db: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000483bad: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x0000000000483b8d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x0000000000483bed: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x0000000000483b9d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x0000000000483bdd: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x000000000046a48d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x000000000041ed36: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; shl dword ptr [rax + 0x7c], 0x6d; add byte ptr [rax - 0x39], cl; ret 0x8308; 
0x0000000000467b77: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x0000000000467b4e: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x6411; 
0x00000000004674ae: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x8511; 
0x00000000004cac19: add byte ptr [rax], al; add byte ptr [rax - 0x3fffffb6], al; sub dh, dh; jmp rsi; 
0x00000000004d0031: add byte ptr [rax], al; add byte ptr [rax - 0x47ffff62], bl; nop; sti; jmp qword ptr [rcx + 0xe]; 
0x00000000004d15e9: add byte ptr [rax], al; add byte ptr [rax - 0x4c], dl; add byte ptr [rax], al; jo 0xd164d; cld; jmp qword ptr [rbp]; 
0x00000000004d12e1: add byte ptr [rax], al; add byte ptr [rax - 0x4f], cl; add byte ptr [rax], al; pop rax; cld; call qword ptr [rbx + 1]; 
0x00000000004d10e1: add byte ptr [rax], al; add byte ptr [rax - 0x51], cl; add byte ptr [rax], al; xor rsp, rdi; jmp rdx; 
0x00000000004d08e1: add byte ptr [rax], al; add byte ptr [rax - 0x59], cl; add byte ptr [rax], al; js 0xd08e3; sti; jmp qword ptr [rsi]; 
0x00000000004d0411: add byte ptr [rax], al; add byte ptr [rax - 0x5e], bh; add byte ptr [rax], al; mov al, bl; sti; jmp qword ptr [rsi + 7]; 
0x000000000040247d: add byte ptr [rax], al; add byte ptr [rax - 0x5f], bh; ret; 
0x00000000004d02f1: add byte ptr [rax], al; add byte ptr [rax - 0x5f], bl; add byte ptr [rax], al; sbb bh, cl; sti; jmp qword ptr [rsi + 5]; 
0x0000000000409cfd: add byte ptr [rax], al; add byte ptr [rax - 0x65], bh; ret; 
0x0000000000409bfd: add byte ptr [rax], al; add byte ptr [rax - 0x66], bh; ret; 
0x0000000000409c0d: add byte ptr [rax], al; add byte ptr [rax - 0x67], bh; ret; 
0x0000000000409c4d: add byte ptr [rax], al; add byte ptr [rax - 0x68], bh; ret; 
0x0000000000470576: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x26301a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000470525: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x262f6b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004708d4: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2630bc]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470886: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26310a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004707d7: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2631b9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047077b: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x263215]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004704db: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2634b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047048d: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x263503]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047002c: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x263664]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004cf9e9: add byte ptr [rax], al; add byte ptr [rax - 0x68], dl; add byte ptr [rax], al; sti; jmp qword ptr [rcx]; 
0x0000000000409bdd: add byte ptr [rax], al; add byte ptr [rax - 0x69], bh; ret; 
0x0000000000409c2d: add byte ptr [rax], al; add byte ptr [rax - 0x6a], bh; ret; 
0x0000000000409c1d: add byte ptr [rax], al; add byte ptr [rax - 0x6b], bh; ret; 
0x0000000000409d0d: add byte ptr [rax], al; add byte ptr [rax - 0x6c], bh; ret; 
0x0000000000409c9d: add byte ptr [rax], al; add byte ptr [rax - 0x6d], bh; ret; 
0x00000000004cf3d9: add byte ptr [rax], al; add byte ptr [rax - 0x6e], al; add byte ptr [rax], al; and byte ptr [rax], ch; sti; jmp qword ptr [rbx]; 
0x0000000000409c5d: add byte ptr [rax], al; add byte ptr [rax - 0x6e], bh; ret; 
0x0000000000409ccd: add byte ptr [rax], al; add byte ptr [rax - 0x6f], bh; ret; 
0x0000000000409c6d: add byte ptr [rax], al; add byte ptr [rax - 0x70], bh; ret; 
0x0000000000409ced: add byte ptr [rax], al; add byte ptr [rax - 0x71], bh; ret; 
0x00000000004cf0e9: add byte ptr [rax], al; add byte ptr [rax - 0x71], dl; add byte ptr [rax], al; jo 0xcf112; sti; jmp qword ptr [rdx]; 
0x0000000000409cdd: add byte ptr [rax], al; add byte ptr [rax - 0x72], bh; ret; 
0x0000000000409c3d: add byte ptr [rax], al; add byte ptr [rax - 0x73], bh; ret; 
0x000000000044f318: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004665cb: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], r9d; ret; 
0x0000000000493d8d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x245349; mov qword ptr [rip + 0x24532a], rax; ret; 
0x000000000045c83d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x27aaf9; ret; 
0x000000000040c85d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x954a7; ret; 
0x000000000040c84d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x954ac; ret; 
0x000000000040c83d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x954b0; ret; 
0x000000000040c81d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x954bc; ret; 
0x000000000040c80d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x954c7; ret; 
0x000000000040c7ed: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x954d8; ret; 
0x000000000040c7fd: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x954e4; ret; 
0x000000000040c86d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x95528; ret; 
0x000000000040c82d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x9556f; ret; 
0x000000000040bc4d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x960b7; ret; 
0x000000000040bc3d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x960bc; ret; 
0x000000000040bc2d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x960c0; ret; 
0x000000000040bc0d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x960cc; ret; 
0x000000000040bbfd: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x960d7; ret; 
0x000000000040bbdd: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x960e8; ret; 
0x000000000040bbed: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x960f4; ret; 
0x000000000040bc5d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x96138; ret; 
0x000000000040bc1d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x9617f; ret; 
0x000000000040b03d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x96cc7; ret; 
0x000000000040b02d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x96ccc; ret; 
0x000000000040b01d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x96cd0; ret; 
0x000000000040affd: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x96cdc; ret; 
0x000000000040afed: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x96ce7; ret; 
0x000000000040afcd: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x96cf8; ret; 
0x000000000040afdd: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x96d04; ret; 
0x000000000040b04d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x96d48; ret; 
0x000000000040b00d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x96d8f; ret; 
0x000000000040a32d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x979e3; ret; 
0x000000000040a31d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x979e7; ret; 
0x000000000040a30d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x979ec; ret; 
0x000000000040a2fd: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x979f0; ret; 
0x000000000040a2dd: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x979fc; ret; 
0x000000000040a2cd: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x97a07; ret; 
0x000000000040a2ad: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x97a18; ret; 
0x000000000040a2ed: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x97a1e; ret; 
0x000000000040a2bd: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x97a24; ret; 
0x000000000040a29d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x97a2f; ret; 
0x00000000004665e9: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9b, byte ptr [rax + 0x39]; ret; 
0x0000000000466607: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9d, dword ptr [rax + 0x39]; ret; 
0x000000000047aee9: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0x258dad; jmp rax; 
0x0000000000409cad: add byte ptr [rax], al; add byte ptr [rax - 0x74], bh; ret; 
0x00000000004cee01: add byte ptr [rax], al; add byte ptr [rax - 0x74], ch; add byte ptr [rax], al; or byte ptr [rbx], dl; sti; jmp qword ptr [rdi]; 
0x0000000000409c7d: add byte ptr [rax], al; add byte ptr [rax - 0x75], bh; ret; 
0x0000000000428bcd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000045163d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000466ccd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x272201; ret; 
0x000000000045e7fd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x27b191; ret; 
0x00000000004279fd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x2ae759; ret; 
0x000000000041d6b0: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; js 0x1d6d7; call rdx; 
0x00000000004812cd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + 0x4c]; ret; 
0x000000000043ee2d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f02d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e4dd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000443f8d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x000000000040963d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; sbb byte ptr [r8 - 0x7b], r9b; sal byte ptr [rsp + rax - 0x77], 0xf7; jmp rax; 
0x000000000043e69d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x0000000000409bed: add byte ptr [rax], al; add byte ptr [rax - 0x76], bh; ret; 
0x0000000000409c8d: add byte ptr [rax], al; add byte ptr [rax - 0x77], bh; ret; 
0x0000000000427a8e: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; adc eax, 0x2b12e0; add dword ptr [rip + 0x2b12d5], 1; ret; 
0x000000000042856b: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x2ae2b3; ret; 
0x000000000042854b: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x2ae2cb; ret; 
0x000000000048d8dd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x8d210; add rsp, 0xd8; ret; 
0x000000000041fb2b: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 8; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x00000000004230c3: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c438e28; ret; 
0x000000000042290b: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0xfffffffffffe00fe; jmp qword ptr [rsi + 0x2e]; 
0x0000000000427a2d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000004978d3: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fdiv dword ptr [rbp + 0x11]; add rsp, 0x40; pop rbx; ret; 
0x00000000004979ba: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fdiv dword ptr [rbp + 0x12]; add rsp, 0x50; pop rbx; ret; 
0x0000000000421865: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fiadd word ptr [rcx + rcx*4 - 0x11]; mov eax, r9d; syscall; 
0x0000000000420b32: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004830e2: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fucomip st(0); ret; 
0x000000000049a80c: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fucomip st(1); ret; 
0x00000000004105cf: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; jbe 0x105e6; syscall; 
0x000000000045b4ad: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; jo 0x5b4d4; ret; 
0x0000000000421e31: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov edx, 0x130; pop rbx; ret; 
0x000000000042d19d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x75], cl; or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x000000000043292d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rax; call rcx; 
0x000000000042043c: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x0000000000404287: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1f0f; 
0x0000000000420584: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000046f854: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000042acbd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000404a31: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x84c7; 
0x000000000049d32d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000479cd5: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000041e08b: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xf748; 
0x0000000000423bc6: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000041f221: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000049bf4d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; shr cl, 1; ret 0xfffe; 
0x0000000000463466: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; xor byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], al; jmp qword ptr [rsi + 0xf]; 
0x00000000004c7e41: add byte ptr [rax], al; add byte ptr [rax - 0x77ffffe4], ch; jnp 0xc7e3f; jmp qword ptr [rbp + 2]; 
0x0000000000409cbd: add byte ptr [rax], al; add byte ptr [rax - 0x78], bh; ret; 
0x0000000000499e44: add byte ptr [rax], al; add byte ptr [rax - 0x7ab70000], al; ret 0x840f; 
0x000000000040a3fd: add byte ptr [rax], al; add byte ptr [rax - 0x7b], al; ror byte ptr [rdi], 0x49; ret 0x8348; 
0x000000000040191d: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; call qword ptr [rbx + 0x48]; 
0x00000000004829dd: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x000000000047c9db: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x0000000000400aa3: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rcx + 0x5d], 0xbf; adc byte ptr [rbp + rbp*2], bh; jmp rax; 
0x0000000000400ae5: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rcx + 0x5d], 0xbf; adc byte ptr [rbp + rbp*2], bh; jmp rax; 
0x0000000000400408: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x00000000004960e6: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rcx + 0x49], cl; mov eax, dword ptr [rsp]; add rax, qword ptr [rdx + 8]; call rax; 
0x0000000000466458: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; jl 0x66483; add byte ptr [rdx + rdi*2 - 0xa], sil; ret; 
0x0000000000480ce4: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; js 0x80d1b; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x000000000045581d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x000000000041dedd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000494d6d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000048d018: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000043a203: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000049d30d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8001; 
0x0000000000481f8e: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000044db61: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043a22d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000414c5d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000434f1d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x00000000004988d0: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x83; ret 0x3901; 
0x0000000000443944: add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x00000000004cbd29: add byte ptr [rax], al; add byte ptr [rax - 0x7fffffa5], dl; add edi, eax; call qword ptr [rax]; 
0x000000000049ed8d: add byte ptr [rax], al; add byte ptr [rax - 0x80], al; call qword ptr [rax + 0x49]; 
0x000000000049d43d: add byte ptr [rax], al; add byte ptr [rax - 0x80], al; inc dword ptr [rsi*2 + 0x8b80f]; add byte ptr [rax], al; ret; 
0x0000000000409d1d: add byte ptr [rax], al; add byte ptr [rax - 0xc9], bh; ret; 
0x0000000000409d2d: add byte ptr [rax], al; add byte ptr [rax - 0xca], bh; ret; 
0x0000000000409d3d: add byte ptr [rax], al; add byte ptr [rax - 0xcb], bh; ret; 
0x0000000000409d4d: add byte ptr [rax], al; add byte ptr [rax - 0xcc], bh; ret; 
0x0000000000409d5d: add byte ptr [rax], al; add byte ptr [rax - 0xd3], bh; ret; 
0x0000000000409d6d: add byte ptr [rax], al; add byte ptr [rax - 0xd4], bh; ret; 
0x0000000000409d7d: add byte ptr [rax], al; add byte ptr [rax - 0xd5], bh; ret; 
0x0000000000409d8d: add byte ptr [rax], al; add byte ptr [rax - 0xd6], bh; ret; 
0x0000000000407a1d: add byte ptr [rax], al; add byte ptr [rax - 0xd], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000409d9d: add byte ptr [rax], al; add byte ptr [rax - 0xdd], bh; ret; 
0x0000000000409dad: add byte ptr [rax], al; add byte ptr [rax - 0xde], bh; ret; 
0x0000000000409dbd: add byte ptr [rax], al; add byte ptr [rax - 0xdf], bh; ret; 
0x0000000000409bcd: add byte ptr [rax], al; add byte ptr [rax - 0xe0], bh; ret; 
0x000000000046bf3b: add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000420fe8: add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000004d1749: add byte ptr [rax], al; add byte ptr [rax], ah; add byte ptr [rax], al; add byte ptr [rbp + rsi*4 + 0x60fc0000], dh; cld; jmp qword ptr [rcx]; 
0x00000000004d166c: add byte ptr [rax], al; add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; fdiv dword ptr [rax + rax - 0x3a18800]; call qword ptr [rbx]; 
0x000000000041d77b: add byte ptr [rax], al; add byte ptr [rax], al; add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000040696b: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x000000000042251b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x000000000048487b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x000000000048487b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; ret; 
0x000000000048486b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x000000000048486b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x000000000048488b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x000000000048488b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x000000000045394b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x000000000045984b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xb], bh; syscall; 
0x000000000049c50b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xd837bc], al; add byte ptr [rax], al; add byte ptr [rbx + rbx*8 - 0xd], dh; ret; 
0x0000000000401ccb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xf], al; mov dh, 0xff; mov dword ptr [rip + 0x2d442e], edi; ret; 
0x000000000045ef4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x83480147; ret; 
0x000000000049d42b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x0000000000400ffb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x16], bh; ret; 
0x000000000046cbcb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffa0; 
0x0000000000458a4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffc0; 
0x0000000000483bab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x0000000000483b8b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x0000000000483beb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x0000000000483b9b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x0000000000483bdb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x000000000046a48b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x000000000040247b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x5f], bh; ret; 
0x0000000000409cfb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x65], bh; ret; 
0x0000000000409bfb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x66], bh; ret; 
0x0000000000409c0b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x67], bh; ret; 
0x0000000000409c4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x68], bh; ret; 
0x0000000000409bdb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x69], bh; ret; 
0x0000000000409c2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x6a], bh; ret; 
0x0000000000409c1b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x6b], bh; ret; 
0x0000000000409d0b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x6c], bh; ret; 
0x0000000000409c9b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x6d], bh; ret; 
0x0000000000409c5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x6e], bh; ret; 
0x0000000000409ccb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x6f], bh; ret; 
0x0000000000409c6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x70], bh; ret; 
0x0000000000409ceb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x71], bh; ret; 
0x0000000000409cdb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x72], bh; ret; 
0x0000000000409c3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], bh; ret; 
0x0000000000493d8b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x245349; mov qword ptr [rip + 0x24532a], rax; ret; 
0x000000000045c83b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x27aaf9; ret; 
0x000000000040c85b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x954a7; ret; 
0x000000000040c84b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x954ac; ret; 
0x000000000040c83b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x954b0; ret; 
0x000000000040c81b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x954bc; ret; 
0x000000000040c80b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x954c7; ret; 
0x000000000040c7eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x954d8; ret; 
0x000000000040c7fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x954e4; ret; 
0x000000000040c86b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x95528; ret; 
0x000000000040c82b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x9556f; ret; 
0x000000000040bc4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x960b7; ret; 
0x000000000040bc3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x960bc; ret; 
0x000000000040bc2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x960c0; ret; 
0x000000000040bc0b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x960cc; ret; 
0x000000000040bbfb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x960d7; ret; 
0x000000000040bbdb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x960e8; ret; 
0x000000000040bbeb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x960f4; ret; 
0x000000000040bc5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x96138; ret; 
0x000000000040bc1b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x9617f; ret; 
0x000000000040b03b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x96cc7; ret; 
0x000000000040b02b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x96ccc; ret; 
0x000000000040b01b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x96cd0; ret; 
0x000000000040affb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x96cdc; ret; 
0x000000000040afeb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x96ce7; ret; 
0x000000000040afcb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x96cf8; ret; 
0x000000000040afdb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x96d04; ret; 
0x000000000040b04b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x96d48; ret; 
0x000000000040b00b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x96d8f; ret; 
0x000000000040a32b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x979e3; ret; 
0x000000000040a31b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x979e7; ret; 
0x000000000040a30b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x979ec; ret; 
0x000000000040a2fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x979f0; ret; 
0x000000000040a2db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x979fc; ret; 
0x000000000040a2cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x97a07; ret; 
0x000000000040a2ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x97a18; ret; 
0x000000000040a2eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x97a1e; ret; 
0x000000000040a2bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x97a24; ret; 
0x0000000000409cab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x74], bh; ret; 
0x0000000000409c7b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], bh; ret; 
0x0000000000428bcb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000045e7fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x27b191; ret; 
0x00000000004279fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x2ae759; ret; 
0x00000000004812cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + 0x4c]; ret; 
0x0000000000409beb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x76], bh; ret; 
0x0000000000409c8b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], bh; ret; 
0x0000000000427a2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000045b4ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; jo 0x5b4d4; ret; 
0x000000000043292b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rax; call rcx; 
0x000000000042acbb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000404a2f: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x84c7; 
0x000000000049d32b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000049bf4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; shr cl, 1; ret 0xfffe; 
0x0000000000409cbb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x78], bh; ret; 
0x0000000000499e42: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7ab70000], al; ret 0x840f; 
0x00000000004829db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x000000000045581b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x000000000041dedb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000049d30b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8001; 
0x0000000000414c5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000434f1b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000049ed8b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x80], al; call qword ptr [rax + 0x49]; 
0x000000000049d43b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x80], al; inc dword ptr [rsi*2 + 0x8b80f]; add byte ptr [rax], al; ret; 
0x0000000000409d1b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0xc9], bh; ret; 
0x0000000000409d2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0xca], bh; ret; 
0x0000000000409d3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0xcb], bh; ret; 
0x0000000000409d4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0xcc], bh; ret; 
0x0000000000409d5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0xd3], bh; ret; 
0x0000000000409d6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0xd4], bh; ret; 
0x0000000000409d7b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0xd5], bh; ret; 
0x0000000000409d8b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0xd6], bh; ret; 
0x0000000000409d9b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0xdd], bh; ret; 
0x0000000000409dab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0xde], bh; ret; 
0x0000000000409dbb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0xdf], bh; ret; 
0x0000000000409bcb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0xe0], bh; ret; 
0x00000000004279ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000004b1d78: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor byte ptr [rcx - 5], bh; jmp qword ptr [rax]; 
0x00000000004b1d79: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], dh; jns 0xb1d7e; jmp qword ptr [rax]; 
0x00000000004ba952: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x00000000004bae42: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x33; 
0x0000000000426616: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004b1d7a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor byte ptr [rcx - 5], bh; jmp qword ptr [rax]; 
0x00000000004b1d7b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], dh; jns 0xb1d7e; jmp qword ptr [rax]; 
0x00000000004095fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbp + 0x14f504], cl; add byte ptr [rax], al; ret; 
0x000000000045c84b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x27d11a05], cl; add byte ptr [rbp - 0xcf98b40], al; ret; 
0x000000000040790b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x2890447], cl; xor eax, eax; ret; 
0x000000000040791b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x2890847], cl; xor eax, eax; ret; 
0x000000000040792b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x2890c47], cl; xor eax, eax; ret; 
0x000000000040793b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x2891047], cl; xor eax, eax; ret; 
0x000000000040794b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x2891447], cl; xor eax, eax; ret; 
0x000000000040795b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x2891847], cl; xor eax, eax; ret; 
0x000000000040796b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x2891c47], cl; xor eax, eax; ret; 
0x000000000040797b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x2892047], cl; xor eax, eax; ret; 
0x0000000000400d8b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x2d75da05], cl; add byte ptr [rbp - 0xcf98b40], al; ret; 
0x000000000045336b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x0000000000452e9b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret; 
0x000000000044420b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x000000000042837b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000049eacb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x75c08507], cl; or dh, bl; ret; 
0x000000000042c28b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0x1ba41ca], cl; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000407c5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0x3c8b48d8], cl; ret 0x8548; 
0x0000000000455a5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x0000000000482e6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; vzeroupper; ret; 
0x000000000043526b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x0000000000433b7b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x0000000000401e16: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx], dh; fucomi st(1); imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000041f14b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0xf0; ret; 
0x0000000000421f9b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 2; ret; 
0x000000000043a7bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000043a58b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000452e5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; lea eax, [rdx]; ret; 
0x00000000004516ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x000000000042912b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x8348; 
0x0000000000494729: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x27; syscall; 
0x0000000000494729: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x27; syscall; ret; 
0x000000000045afb9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x63; syscall; 
0x00000000004840f9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc9; syscall; 
0x00000000004840f9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc9; syscall; ret; 
0x000000000045af89: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x9d; syscall; 
0x000000000046a6a9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000431adb: add byte ptr [rax], al; add byte ptr [rax], al; add dh, dh; ret 0x4804; 
0x00000000004597eb: add byte ptr [rax], al; add byte ptr [rax], al; add dh, dh; ret 0x7404; 
0x00000000004a4bd5: add byte ptr [rax], al; add byte ptr [rax], al; add dword ptr [rax], eax; add cl, dl; fdivr st(7); call rcx; 
0x0000000000483b6c: add byte ptr [rax], al; add byte ptr [rax], al; add rax, 3; ret; 
0x000000000045e855: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000490ebf: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000457364: add byte ptr [rax], al; add byte ptr [rax], al; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x000000000043a57c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000043a58c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000043a59c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000043a7bc: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000041d77c: add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rbx]; 
0x000000000042909c: add byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x00000000004bc97c: add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x00000000004bbb2c: add byte ptr [rax], al; add byte ptr [rax], al; call rsp; 
0x00000000004572d7: add byte ptr [rax], al; add byte ptr [rax], al; cmove rax, rdx; pop rbx; ret; 
0x000000000040ccdd: add byte ptr [rax], al; add byte ptr [rax], al; cmovne rbx, rax; mov rax, rbx; pop rbx; ret; 
0x000000000049c47c: add byte ptr [rax], al; add byte ptr [rax], al; cmp byte ptr [r9 + 0xdf], 0; je 0x9c46c; add rsp, 0x18; ret; 
0x000000000049d43c: add byte ptr [rax], al; add byte ptr [rax], al; cmp dil, 4; jne 0x9d455; mov eax, 8; ret; 
0x00000000004091bc: add byte ptr [rax], al; add byte ptr [rax], al; cmp edi, 8; jne 0x9270; mov rax, 0x6d2da0; ret; 
0x0000000000432b7a: add byte ptr [rax], al; add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000048ed4a: add byte ptr [rax], al; add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000049c484: add byte ptr [rax], al; add byte ptr [rax], al; je 0x9c46c; add rsp, 0x18; ret; 
0x000000000049c555: add byte ptr [rax], al; add byte ptr [rax], al; je 0x9c560; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x000000000046f68d: add byte ptr [rax], al; add byte ptr [rax], al; jmp rax; 
0x00000000004095fc: add byte ptr [rax], al; add byte ptr [rax], al; lea eax, [rsi*8 + 0x14]; ret; 
0x0000000000453f7c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x0000000000453f8c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x0000000000453f9c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x0000000000453fac: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x0000000000453fbc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x0000000000453efc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 1]; ret; 
0x0000000000453f0c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x0000000000453f1c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x0000000000453f2c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x0000000000453f3c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x0000000000453f4c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x0000000000453f5c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x0000000000453f6c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x000000000044f317: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000453eec: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi]; ret; 
0x0000000000493d8c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x245349]; mov qword ptr [rip + 0x24532a], rax; ret; 
0x000000000045c83c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x27aaf9]; ret; 
0x000000000040c85c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x954a7]; ret; 
0x000000000040c84c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x954ac]; ret; 
0x000000000040c83c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x954b0]; ret; 
0x000000000040c81c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x954bc]; ret; 
0x000000000040c80c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x954c7]; ret; 
0x000000000040c7ec: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x954d8]; ret; 
0x000000000040c7fc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x954e4]; ret; 
0x000000000040c86c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x95528]; ret; 
0x000000000040c82c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x9556f]; ret; 
0x000000000040bc4c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x960b7]; ret; 
0x000000000040bc3c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x960bc]; ret; 
0x000000000040bc2c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x960c0]; ret; 
0x000000000040bc0c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x960cc]; ret; 
0x000000000040bbfc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x960d7]; ret; 
0x000000000040bbdc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x960e8]; ret; 
0x000000000040bbec: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x960f4]; ret; 
0x000000000040bc5c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x96138]; ret; 
0x000000000040bc1c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x9617f]; ret; 
0x000000000040b03c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x96cc7]; ret; 
0x000000000040b02c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x96ccc]; ret; 
0x000000000040b01c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x96cd0]; ret; 
0x000000000040affc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x96cdc]; ret; 
0x000000000040afec: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x96ce7]; ret; 
0x000000000040afcc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x96cf8]; ret; 
0x000000000040afdc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x96d04]; ret; 
0x000000000040b04c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x96d48]; ret; 
0x000000000040b00c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x96d8f]; ret; 
0x000000000040a32c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x979e3]; ret; 
0x000000000040a31c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x979e7]; ret; 
0x000000000040a30c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x979ec]; ret; 
0x000000000040a2fc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x979f0]; ret; 
0x000000000040a2dc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x979fc]; ret; 
0x000000000040a2cc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x97a07]; ret; 
0x000000000040a2ac: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x97a18]; ret; 
0x000000000040a2ec: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x97a1e]; ret; 
0x000000000040a2bc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x97a24]; ret; 
0x000000000040a29c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x97a2f]; ret; 
0x000000000047aee8: add byte ptr [rax], al; add byte ptr [rax], al; lea rsi, [rip + 0x258dad]; jmp rax; 
0x0000000000400c65: add byte ptr [rax], al; add byte ptr [rax], al; leave; ret; 
0x0000000000452e5c: add byte ptr [rax], al; add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x00000000004516ac: add byte ptr [rax], al; add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x0000000000452e6c: add byte ptr [rax], al; add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x00000000004516bc: add byte ptr [rax], al; add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x0000000000421cdc: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x000000000045394c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000045332c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000045334c: add byte ptr [rax], al; add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000004097cc: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], 0x66; xor eax, eax; ret; 
0x000000000045395c: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000045333c: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004979dc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x26; syscall; 
0x000000000048487c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x000000000048487c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x000000000048486c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x000000000048486c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x000000000048488c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x000000000048488c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x000000000045984c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xb; syscall; 
0x0000000000409bcc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff20; ret; 
0x0000000000409dbc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff21; ret; 
0x0000000000409dac: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff22; ret; 
0x0000000000409d9c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff23; ret; 
0x0000000000409d8c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff2a; ret; 
0x0000000000409d7c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff2b; ret; 
0x0000000000409d6c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff2c; ret; 
0x0000000000409d5c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff2d; ret; 
0x0000000000409d4c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff34; ret; 
0x0000000000409d3c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff35; ret; 
0x0000000000409d2c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff36; ret; 
0x0000000000409d1c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff37; ret; 
0x0000000000409cbc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff88; ret; 
0x0000000000409c8c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff89; ret; 
0x0000000000409bec: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff8a; ret; 
0x0000000000409c7c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff8b; ret; 
0x0000000000409cac: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff8c; ret; 
0x0000000000409c3c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff8d; ret; 
0x0000000000409cdc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff8e; ret; 
0x0000000000409cec: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff8f; ret; 
0x0000000000409c6c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff90; ret; 
0x0000000000409ccc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff91; ret; 
0x0000000000409c5c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff92; ret; 
0x0000000000409c9c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff93; ret; 
0x0000000000409d0c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff94; ret; 
0x0000000000409c1c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff95; ret; 
0x0000000000409c2c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff96; ret; 
0x0000000000409bdc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff97; ret; 
0x0000000000409c4c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff98; ret; 
0x0000000000409c0c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff99; ret; 
0x0000000000409bfc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff9a; ret; 
0x0000000000409cfc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff9b; ret; 
0x000000000040247c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffa1; ret; 
0x0000000000400ffc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffea; ret; 
0x00000000004279ac: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000004938f9: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; ret; 
0x0000000000458b4c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; syscall; 
0x0000000000493b02: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 2; ret; 
0x0000000000452e9c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x000000000040793c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x10]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000040794c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x14]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000040795c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x18]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000040796c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x1c]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000040797c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x20]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000040792c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0xc]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000040790c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 4]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000040791c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 8]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000040234c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rip + 0x2d3dae]; ret; 
0x00000000004ca1de: add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, ds; cmc; call qword ptr [rdi + 1]; 
0x000000000045336c: add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x00000000004581cc: add byte ptr [rax], al; add byte ptr [rax], al; mov edi, edx; mov eax, esi; syscall; 
0x000000000044420c: add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000044492c: add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000045b064: add byte ptr [rax], al; add byte ptr [rax], al; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000045b4ac: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x20], rsi; ret; 
0x0000000000480ec5: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000490278: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000490270: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000004268f0: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000049c5ac: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0x98], rsi; ret; 
0x000000000042690c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa0], -1; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000427af7: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rip + 0x2b1272], 0; ret; 
0x000000000046a2ec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x000000000046a30c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000046a32c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x00000000004597cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x40; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000048f14c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x40; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x000000000042799c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -1; ret; 
0x00000000004094bc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d2ca0; pop rbx; ret; 
0x000000000040922c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d2ca0; ret; 
0x00000000004094cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d2ce0; pop rbx; ret; 
0x00000000004094dc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d2d20; pop rbx; ret; 
0x000000000040950c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d2d60; pop rbx; ret; 
0x00000000004094fc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d2da0; pop rbx; ret; 
0x000000000040921c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d2ea0; ret; 
0x00000000004091ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d2fa0; ret; 
0x00000000004094ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d52c0; pop rbx; ret; 
0x00000000004094ec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d5300; pop rbx; ret; 
0x000000000040919c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d5300; ret; 
0x000000000040918c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d5340; ret; 
0x000000000040923c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d5380; ret; 
0x000000000040924c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d53c0; ret; 
0x000000000040925c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d5400; ret; 
0x000000000040118c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d6130; mov rax, qword ptr [rax]; mov eax, dword ptr [rax]; ret; 
0x000000000046a48c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xf; syscall; 
0x0000000000483b8c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 1; ret; 
0x0000000000483b9c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 2; ret; 
0x0000000000483bac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 3; ret; 
0x0000000000483bbc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 4; ret; 
0x0000000000483bcc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 5; ret; 
0x0000000000483bdc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 6; ret; 
0x0000000000483bec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 7; ret; 
0x0000000000490ecc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; ret; 
0x000000000048b85c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000452dec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000045163c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x00000000004812cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000427a1c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049c52c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000049c5bc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000049c61c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000049c60c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000049c5cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x00000000004285bc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2b082a], eax; ret; 
0x000000000042843c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2ae43d], rax; ret; 
0x0000000000466ccc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x272201]; ret; 
0x000000000045e7fc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x27b191]; ret; 
0x00000000004279fc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2ae759]; ret; 
0x000000000049a2fc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsi + 0xa8]; ret; 
0x0000000000482e6c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x0000000000427a2c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; ret; 
0x00000000004533ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000004942df: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000043e4dc: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000044476c: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000043292c: add byte ptr [rax], al; add byte ptr [rax], al; mov rsi, rbp; mov rdi, rax; call rcx; 
0x0000000000453aac: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000045342c: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000049036c: add byte ptr [rax], al; add byte ptr [rax], al; movsx eax, dl; sub eax, ecx; ret; 
0x00000000004551ec: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000043b41c: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000421f9c: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdx]; ret; 
0x000000000045731c: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, cl; pop rbx; ret; 
0x0000000000434e1c: add byte ptr [rax], al; add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000401ccc: add byte ptr [rax], al; add byte ptr [rax], al; movzx edi, dil; mov dword ptr [rip + 0x2d442e], edi; ret; 
0x000000000044439c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000444a7c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000044431c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000444a0c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004598a7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x0000000000484857: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x0000000000484857: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; ret; 
0x0000000000459877: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x0000000000410797: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov rax, -0x40; add rax, qword ptr fs:[0]; ret; 
0x000000000045af58: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov r10, rcx; mov eax, 0x19; syscall; 
0x000000000049472a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x27; syscall; 
0x000000000049472a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x27; syscall; ret; 
0x000000000045afba: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x63; syscall; 
0x00000000004840fa: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc9; syscall; 
0x00000000004840fa: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc9; syscall; ret; 
0x000000000045af8a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0x9d; syscall; 
0x000000000046a6aa: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10d, 8; mov eax, 0xe; syscall; 
0x00000000004939e5: add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rcx - 0x77], 0; mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x00000000004221ac: add byte ptr [rax], al; add byte ptr [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000048f132: add byte ptr [rax], al; add byte ptr [rax], al; or dword ptr [rip + 0x2480eb], 1; pop rbx; ret; 
0x00000000004005ab: add byte ptr [rax], al; add byte ptr [rax], al; pop rax; ret; 
0x000000000042837c: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000401bcc: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004ccb99: add byte ptr [rax], al; add byte ptr [rax], al; push 0; add byte ptr [rax - 0x1d], ah; clc; call qword ptr [rdx]; 
0x00000000004bb94c: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d4; 
0x00000000004bc0e4: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d5; 
0x00000000004ba954: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x00000000004bae44: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x33; 
0x00000000004107ac: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004ba94c: add byte ptr [rax], al; add byte ptr [rax], al; shl dword ptr [rax + rax], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x0000000000400407: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x412; call rax; 
0x00000000004829dc: add byte ptr [rax], al; add byte ptr [rax], al; test rsi, rsi; jne 0x829e9; xor rax, rax; ret; 
0x000000000043aa6c: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000043aa5c: add byte ptr [rax], al; add byte ptr [rax], al; vzeroupper; xor eax, eax; ret; 
0x00000000004b1d7c: add byte ptr [rax], al; add byte ptr [rax], al; xor byte ptr [rcx - 5], bh; jmp qword ptr [rax]; 
0x000000000040117c: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000458a7c: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; syscall; 
0x00000000004829cc: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x000000000041f14c: add byte ptr [rax], al; add byte ptr [rax], al; xor esi, esi; mov rax, rsi; ret; 
0x0000000000453d2c: add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x00000000004d17e1: add byte ptr [rax], al; add byte ptr [rax], bh; add byte ptr [rax], al; add byte ptr [rsi + rsi*4], cl; add byte ptr [rdx - 4], ah; jmp rsp; 
0x00000000004a789d: add byte ptr [rax], al; add byte ptr [rax], bh; add byte ptr [rax], al; add dl, dl; fdivr st(7); call rdx; 
0x00000000004cdfd1: add byte ptr [rax], al; add byte ptr [rax], bh; jle 0xcdfd7; add al, bh; ret 0xfff9; 
0x00000000004d1ad1: add byte ptr [rax], al; add byte ptr [rax], bh; mov ecx, 0x87d80000; cld; jmp qword ptr [rcx]; 
0x00000000004c71b1: add byte ptr [rax], al; add byte ptr [rax], bl; adc byte ptr [rax], al; add byte ptr [rax], bh; or ah, dh; jmp qword ptr [rsi + 1]; 
0x00000000004ce0a5: add byte ptr [rax], al; add byte ptr [rax], bl; add byte ptr [rax], al; add bl, ah; ret; 
0x00000000004c87b1: add byte ptr [rax], al; add byte ptr [rax], bl; add byte ptr es:[rax], al; or byte ptr [rax - 0xb], dl; jmp qword ptr [rax]; 
0x00000000004c9bb1: add byte ptr [rax], al; add byte ptr [rax], bl; cmp al, byte ptr [rax]; add byte ptr [rax], ch; ret; 
0x00000000004cc7c1: add byte ptr [rax], al; add byte ptr [rax], ch; add byte ptr [rax], al; test al, 0xce; clc; jmp qword ptr [rcx]; 
0x00000000004d23c1: add byte ptr [rax], al; add byte ptr [rax], ch; ret 0; 
0x00000000004d24c1: add byte ptr [rax], al; add byte ptr [rax], ch; ret; 
0x00000000004c74a1: add byte ptr [rax], al; add byte ptr [rax], cl; adc eax, dword ptr [rax]; add byte ptr [rax], bh; sbb esp, esi; jmp qword ptr [rcx + 2]; 
0x00000000004ca1c9: add byte ptr [rax], al; add byte ptr [rax], dh; add byte ptr [rax], al; fprem1; call qword ptr [rsi]; 
0x00000000004b1d7d: add byte ptr [rax], al; add byte ptr [rax], dh; jns 0xb1d7e; jmp qword ptr [rax]; 
0x00000000004ca039: add byte ptr [rax], al; add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rsi + rdi - 0x29340000], ah; cmc; call qword ptr [rdi]; 
0x00000000004ce021: add byte ptr [rax], al; add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rsi + rdi*2 - 0x3cdc0000], cl; stc; call qword ptr [rax]; 
0x00000000004d24a9: add byte ptr [rax], al; add byte ptr [rax], dl; ret; 
0x00000000004d21a9: add byte ptr [rax], al; add byte ptr [rax], dl; rol byte ptr [rax], 0; nop; mov ch, 0xfc; jmp qword ptr [rbx]; 
0x00000000004c86ee: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rax + 0x25], bl; add byte ptr [rax], al; cmc; call rsp; 
0x00000000004d002e: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rax - 0x47ffff62], bl; nop; sti; jmp qword ptr [rcx + 0xe]; 
0x0000000000458764: add byte ptr [rax], al; add byte ptr [rbp + 0x10], dh; add rsp, 0x28; ret; 
0x000000000049444d: add byte ptr [rax], al; add byte ptr [rbp + 0x12], dh; add rsp, 0x38; ret; 
0x00000000004095fd: add byte ptr [rax], al; add byte ptr [rbp + 0x14f504], cl; add byte ptr [rax], al; ret; 
0x0000000000484beb: add byte ptr [rax], al; add byte ptr [rbp + 0x1b], dh; add rsp, 0x38; ret; 
0x0000000000403ad3: add byte ptr [rax], al; add byte ptr [rbp + 0x1d], dh; add rsp, 0x48; ret; 
0x0000000000403e76: add byte ptr [rax], al; add byte ptr [rbp + 0x22], dh; add rsp, 0x10; pop rbx; ret; 
0x00000000004579ac: add byte ptr [rax], al; add byte ptr [rbp + 0x23], dh; add rsp, 0x20; pop rbx; ret; 
0x000000000040151b: add byte ptr [rax], al; add byte ptr [rbp + 0x27], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000491252: add byte ptr [rax], al; add byte ptr [rbp + 0x27], dh; add rsp, 0x68; ret; 
0x0000000000491192: add byte ptr [rax], al; add byte ptr [rbp + 0x2c], dh; add rsp, 0x38; ret; 
0x000000000047c4f5: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rdi], 0xb6; add al, 7; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004913b3: add byte ptr [rax], al; add byte ptr [rbp + 0x36], dh; add rsp, 0x78; ret; 
0x00000000004847ed: add byte ptr [rax], al; add byte ptr [rbp + 0x38], dh; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x00000000004936be: add byte ptr [rax], al; add byte ptr [rbp + 0x3b], dh; leave; ret; 
0x000000000045993d: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; jmp rax; 
0x0000000000458994: add byte ptr [rax], al; add byte ptr [rbp + 0x42], dh; add rsp, 0x58; ret; 
0x0000000000484ab9: add byte ptr [rax], al; add byte ptr [rbp + 0x45], dh; add rsp, 0x58; ret; 
0x000000000046a624: add byte ptr [rax], al; add byte ptr [rbp + 0x4a], dh; add rsp, 0x148; ret; 
0x0000000000425785: add byte ptr [rax], al; add byte ptr [rbp + 0x4a], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000458d24: add byte ptr [rax], al; add byte ptr [rbp + 0x4a], dh; add rsp, 0x68; ret; 
0x000000000045ae37: add byte ptr [rax], al; add byte ptr [rbp + 0xa], dh; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000459713: add byte ptr [rax], al; add byte ptr [rbp + 0xf], dh; add rsp, 0x28; ret; 
0x00000000004977c8: add byte ptr [rax], al; add byte ptr [rbp + 0xf], dh; add rsp, 0x38; ret; 
0x000000000046a3dc: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x18; ret; 
0x000000000049436a: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x000000000042930d: add byte ptr [rax], al; add byte ptr [rbp + 6], dh; add rsp, 0x20; pop rbx; ret; 
0x000000000041e45f: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; add rsp, 0xd8; ret; 
0x0000000000484b3c: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x58; ret; 
0x000000000049c556: add byte ptr [rax], al; add byte ptr [rbp + rax + 0x48], dh; mov dword ptr [rdi + rsi*8], edx; ret; 
0x00000000004c6705: add byte ptr [rax], al; add byte ptr [rbp + rax], ch; add ah, dh; mov dl, 0xf3; call qword ptr [rcx]; 
0x0000000000478250: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x2c], cl; test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000042e379: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x46], cl; dec dword ptr [rax - 0x77]; ret 0x2948; 
0x000000000042d997: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x46], cl; jmp qword ptr [rsi - 0x70]; 
0x000000000048143c: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x10; mov rdi, r12; call rbx; 
0x0000000000481536: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x0000000000408342: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x7e], cl; adc al, ch; ret 0xffa1; 
0x00000000004a9cf9: add byte ptr [rax], al; add byte ptr [rbp + rcx], bl; add byte ptr [rip - 0x16000000], dh; fdivr st(7); call rdi; 
0x00000000004c9f15: add byte ptr [rax], al; add byte ptr [rbp + rdi], bh; add byte ptr [rcx + rdx*8 - 0xb], ah; jmp qword ptr [rdi + 2]; 
0x00000000004cd6dd: add byte ptr [rax], al; add byte ptr [rbp + rsi*2], al; add byte ptr [rcx + rax*2], bl; stc; call rcx; 
0x00000000004d174d: add byte ptr [rax], al; add byte ptr [rbp + rsi*4 + 0x60fc0000], dh; cld; jmp qword ptr [rcx]; 
0x000000000045aee8: add byte ptr [rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x00000000004b8ac1: add byte ptr [rax], al; add byte ptr [rbp - 0x48000000], dh; add byte ptr [rax], al; add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x00000000004a77d5: add byte ptr [rax], al; add byte ptr [rbp - 0x4b000000], dh; add byte ptr [rax], al; add byte ptr [rbx - 0x6c000028], dl; fdivr st(7); call rax; 
0x00000000004a7461: add byte ptr [rax], al; add byte ptr [rbp - 0x53000000], ch; add byte ptr [rax], al; add byte ptr [rdx - 0x6d000028], dl; fdivr st(7); jmp qword ptr [rbp]; 
0x0000000000458468: add byte ptr [rax], al; add byte ptr [rbp - 0x6d], dh; mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x00000000004a7a85: add byte ptr [rax], al; add byte ptr [rbp - 0x72000028], cl; fdivr st(7); call rcx; 
0x000000000047e735: add byte ptr [rax], al; add byte ptr [rbp - 0x76ba7fec], cl; call 0x2001083; ror byte ptr [rbp + 0x39441704], cl; ret 0xf49; 
0x00000000004a9791: add byte ptr [rax], al; add byte ptr [rbp], ah; add byte ptr [rax], al; ret; 
0x00000000004a7489: add byte ptr [rax], al; add byte ptr [rbp], ah; add byte ptr [rax], al; xchg eax, edx; fdivr st(7); jmp qword ptr [rbp]; 
0x00000000004a7561: add byte ptr [rax], al; add byte ptr [rbp], bl; add byte ptr [rax], al; sbb al, byte ptr [rdi]; add byte ptr [rax], al; ret; 
0x00000000004a9515: add byte ptr [rax], al; add byte ptr [rbp], dl; add byte ptr [rax], al; fdivr st(7); call qword ptr [rbp]; 
0x000000000048f133: add byte ptr [rax], al; add byte ptr [rbx + 0x2480eb0d], al; add byte ptr [rcx], al; pop rbx; ret; 
0x000000000045c84d: add byte ptr [rax], al; add byte ptr [rbx + 0x27d11a05], cl; add byte ptr [rbp - 0xcf98b40], al; ret; 
0x0000000000458d7d: add byte ptr [rax], al; add byte ptr [rbx + 0x280ae605], cl; add byte ptr [rbp - 0x47e98a40], al; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000040790d: add byte ptr [rax], al; add byte ptr [rbx + 0x2890447], cl; xor eax, eax; ret; 
0x000000000040791d: add byte ptr [rax], al; add byte ptr [rbx + 0x2890847], cl; xor eax, eax; ret; 
0x000000000040792d: add byte ptr [rax], al; add byte ptr [rbx + 0x2890c47], cl; xor eax, eax; ret; 
0x000000000040793d: add byte ptr [rax], al; add byte ptr [rbx + 0x2891047], cl; xor eax, eax; ret; 
0x000000000040794d: add byte ptr [rax], al; add byte ptr [rbx + 0x2891447], cl; xor eax, eax; ret; 
0x000000000040795d: add byte ptr [rax], al; add byte ptr [rbx + 0x2891847], cl; xor eax, eax; ret; 
0x000000000040796d: add byte ptr [rax], al; add byte ptr [rbx + 0x2891c47], cl; xor eax, eax; ret; 
0x000000000040797d: add byte ptr [rax], al; add byte ptr [rbx + 0x2892047], cl; xor eax, eax; ret; 
0x0000000000400d8d: add byte ptr [rax], al; add byte ptr [rbx + 0x2d75da05], cl; add byte ptr [rbp - 0xcf98b40], al; ret; 
0x0000000000466e29: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsp; ret; 
0x000000000041ea11: add byte ptr [rax], al; add byte ptr [rbx + 0x42894c03], cl; or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x000000000045398d: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000045336d: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x0000000000452e9d: add byte ptr [rax], al; add byte ptr [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret; 
0x000000000041f113: add byte ptr [rax], al; add byte ptr [rbx + 0x48], bl; mov eax, esi; pop rbp; pop r12; ret; 
0x000000000043f24d: add byte ptr [rax], al; add byte ptr [rbx + 0x4e8bf956], cl; cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043f04d: add byte ptr [rax], al; add byte ptr [rbx + 0x4e8bfa56], cl; cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043ee4d: add byte ptr [rax], al; add byte ptr [rbx + 0x4e8bfb56], cl; cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000044420d: add byte ptr [rax], al; add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x0000000000423572: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000426534: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000041e8e9: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004695cd: add byte ptr [rax], al; add byte ptr [rbx + 0x63], cl; xor al, 0x88; add rsi, r8; jmp rsi; 
0x00000000004079d1: add byte ptr [rax], al; add byte ptr [rbx + 0x75042444], cl; add eax, 0x18c48348; ret; 
0x000000000049e89d: add byte ptr [rax], al; add byte ptr [rbx + 0x75c08507], cl; or dh, bl; ret; 
0x00000000004097ad: add byte ptr [rax], al; add byte ptr [rbx + 0xb7618fa], al; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x00000000004448bd: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0156], cl; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000044484d: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0256], cl; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004447dd: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0356], cl; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004ab1b9: add byte ptr [rax], al; add byte ptr [rbx + 0xf000001], ah; fdivr st(7); dec dword ptr [rdi]; fdivr st(7); jmp qword ptr [rbx + 0xf000001]; 
0x000000000049c515: add byte ptr [rax], al; add byte ptr [rbx + rbx*8 - 0xd], dh; ret; 
0x0000000000466b17: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 - 0x5c], cl; and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004c94bd: add byte ptr [rax], al; add byte ptr [rbx + rsi], ah; add byte ptr [rax], al; or al, 0x99; cmc; call qword ptr [rdi + 2]; 
0x00000000004942ae: add byte ptr [rax], al; add byte ptr [rbx - 0x17], bl; or dword ptr [rax - 1], ecx; jmp qword ptr [rsi + 0xf]; 
0x000000000047c66d: add byte ptr [rax], al; add byte ptr [rbx - 0x4f743], al; jmp qword ptr [rax]; 
0x00000000004a77dd: add byte ptr [rax], al; add byte ptr [rbx - 0x6c000028], dl; fdivr st(7); call rax; 
0x000000000049423f: add byte ptr [rax], al; add byte ptr [rbx - 0x72b7efbd], cl; adc eax, 0x30fe0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000047567a: add byte ptr [rax], al; add byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x00000000004cbd2e: add byte ptr [rax], al; add byte ptr [rbx], 0xf8; call qword ptr [rax]; 
0x00000000004a426d: add byte ptr [rax], al; add byte ptr [rbx], ah; add byte ptr [rax], al; add bl, ah; fdivr st(7); jmp rbx; 
0x00000000004aa7f1: add byte ptr [rax], al; add byte ptr [rbx], dl; add byte ptr [rax], al; fdivr st(7); call qword ptr [rbx]; 
0x000000000042c28d: add byte ptr [rax], al; add byte ptr [rcx + 0x1ba41ca], cl; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000405b41: add byte ptr [rax], al; add byte ptr [rcx + 0x29e2d3d9], cl; ret 0x5489; 
0x0000000000420874: add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x0000000000407c5d: add byte ptr [rax], al; add byte ptr [rcx + 0x3c8b48d8], cl; ret 0x8548; 
0x000000000042852e: add byte ptr [rax], al; add byte ptr [rcx + 0x4789246f], cl; adc byte ptr [rbx + 0x5d], bl; ret; 
0x000000000041e74f: add byte ptr [rax], al; add byte ptr [rcx + 0x480975f0], cl; add esp, 0xd0; pop rbx; ret; 
0x0000000000491a30: add byte ptr [rax], al; add byte ptr [rcx + 0x481e75d8], cl; add esp, 0x110; pop rbx; ret; 
0x0000000000480dca: add byte ptr [rax], al; add byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x000000000047017f: add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8944; 
0x000000000047bf38: add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8948; 
0x00000000004572e5: add byte ptr [rax], al; add byte ptr [rcx + 0xee8c1c8], cl; and eax, 0x3fc00; pop rbx; ret; 
0x0000000000425fae: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x36; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000478c46: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x46; or al, 0x83; ret; 
0x00000000004880ea: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x87; adc eax, 0x89000003; ret 0xe8c0; 
0x000000000041ce03: add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret 0x149; 
0x0000000000455a5d: add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x000000000049c4b8: add byte ptr [rax], al; add byte ptr [rcx + 3], cl; adc al, 0; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000004a83ed: add byte ptr [rax], al; add byte ptr [rcx + rax + 0x18c0000], cl; add byte ptr [rax], al; ret; 
0x00000000004ce315: add byte ptr [rax], al; add byte ptr [rcx + rax*4], bh; add byte ptr [rsi + rbx*8 - 7], ah; call qword ptr [rdx]; 
0x00000000004a83d1: add byte ptr [rax], al; add byte ptr [rcx + rax], dh; add byte ptr [rax], al; ret; 
0x00000000004a145d: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x0000000000422e98: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000421abd: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x36], cl; mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x000000000042335c: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x3e], cl; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000041c8e5: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; jne 0x1c90c; add rsp, 0x118; ret; 
0x0000000000429c6c: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000483f70: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper; ret; 
0x0000000000482dad: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; vzeroupper; ret; 
0x00000000004268f1: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x7f], cl; xor byte ptr [rcx], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000047f78a: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xa], cl; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000004a0b6d: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x00000000004c72bd: add byte ptr [rax], al; add byte ptr [rcx + rdx], ah; add byte ptr [rax], al; cmp al, 0xb; hlt; call qword ptr [rdi]; 
0x000000000048de3c: add byte ptr [rax], al; add byte ptr [rcx - 0x26b7b], cl; jmp qword ptr [rsi + 0x41]; 
0x000000000046a550: add byte ptr [rax], al; add byte ptr [rcx - 0x46], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x00000000004046bc: add byte ptr [rax], al; add byte ptr [rcx - 0x75], al; and byte ptr [r9 + 0x63], r9b; test dword ptr [rax], r8d; add rax, r13; jmp rax; 
0x0000000000498d69: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; xchg eax, edi; mov eax, 0x89000003; fmul dword ptr [rbx + rcx*4 + 0x34]; ret 0xf41; 
0x00000000004134ee: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x0000000000489122: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x848b; 
0x0000000000432db9: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x8d48; 
0x0000000000432d72: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000043526d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x0000000000433b7d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x000000000042c295: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000049c47d: add byte ptr [rax], al; add byte ptr [rcx - 0x80], al; mov ecx, 0xdf; add byte ptr [rdx + 0x48], dh; add esp, 0x18; ret; 
0x0000000000423bbf: add byte ptr [rax], al; add byte ptr [rcx - 1], al; xchg eax, edi; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000043ac30: add byte ptr [rax], al; add byte ptr [rcx - 9], cl; ret 1; 
0x000000000043ac56: add byte ptr [rax], al; add byte ptr [rcx - 9], cl; ret 2; 
0x0000000000493aa5: add byte ptr [rax], al; add byte ptr [rcx], al; add byte ptr [rax + 9], cl; ror byte ptr [rax - 0x77], 1; or byte ptr [r8 + 2], r15b; ret; 
0x000000000045b03d: add byte ptr [rax], al; add byte ptr [rcx], bh; sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x000000000040a120: add byte ptr [rax], al; add byte ptr [rcx], ch; ret; 
0x0000000000401e18: add byte ptr [rax], al; add byte ptr [rcx], dh; fucomi st(1); imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000047b402: add byte ptr [rax], al; add byte ptr [rcx], dh; leave; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000041d992: add byte ptr [rax], al; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000043a53a: add byte ptr [rax], al; add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6620; 
0x000000000041c8c3: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 - 0x32], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000041f14d: add byte ptr [rax], al; add byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0xf0; ret; 
0x0000000000457110: add byte ptr [rax], al; add byte ptr [rdi + 0x12], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000004570b0: add byte ptr [rax], al; add byte ptr [rdi + 0x7b], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x000000000049c2ab: add byte ptr [rax], al; add byte ptr [rdi + 1], bh; call rax; 
0x0000000000472ab3: add byte ptr [rax], al; add byte ptr [rdi + rcx - 0x4a], al; or al, 0x89; ret 0xc689; 
0x00000000004c70fd: add byte ptr [rax], al; add byte ptr [rdi + rcx], ah; add byte ptr [rsi + rax], cl; hlt; call qword ptr [rdi]; 
0x00000000004c70d5: add byte ptr [rax], al; add byte ptr [rdi + rcx], bh; add byte ptr [rax], al; in al, 5; hlt; call qword ptr [rdx]; 
0x00000000004cc92d: add byte ptr [rax], al; add byte ptr [rdi - 0x2f040000], dl; clc; call rsi; 
0x00000000004a61c9: add byte ptr [rax], al; add byte ptr [rdi - 0x40000028], bh; fdivr st(7); call rdx; 
0x00000000004aa6ed: add byte ptr [rax], al; add byte ptr [rdi - 0x60000028], bl; fdivr st(7); call qword ptr [rsi]; 
0x00000000004cc89a: add byte ptr [rax], al; add byte ptr [rdi], ah; add al, ah; iretd; clc; jmp qword ptr [rcx]; 
0x00000000004aa36d: add byte ptr [rax], al; add byte ptr [rdi], ah; add byte ptr [rax], al; add byte ptr [rax + rbx*8 - 1], cl; jmp qword ptr [rdi]; 
0x00000000004c889a: add byte ptr [rax], al; add byte ptr [rdi], ah; add byte ptr [rax], al; jo 0xc88f4; cmc; jmp qword ptr [rax]; 
0x00000000004c88fd: add byte ptr [rax], al; add byte ptr [rdi], ah; add byte ptr [rsi + rdx*2], ch; cmc; jmp qword ptr [rcx + 2]; 
0x00000000004a83cd: add byte ptr [rax], al; add byte ptr [rdi], bl; add byte ptr [rax], al; add byte ptr [rcx + rax], dh; add byte ptr [rax], al; ret; 
0x0000000000407554: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rax + 0xc0], eax; pop rbx; ret; 
0x000000000041c8a4: add byte ptr [rax], al; add byte ptr [rdi], cl; add eax, 0x8944c689; ret 0xeab8; 
0x0000000000490454: add byte ptr [rax], al; add byte ptr [rdi], cl; add eax, 0x940fc085; ret 0x3d; 
0x00000000004439d4: add byte ptr [rax], al; add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x0000000000457265: add byte ptr [rax], al; add byte ptr [rdi], cl; lahf; ret 0xea81; 
0x0000000000444a0d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x0000000000444a7d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x000000000045731d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0xc1; pop rbx; ret; 
0x0000000000434e1d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000421f9d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 2; ret; 
0x000000000043b41d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000043a7bd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000043a59d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000043a58d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000043a5ad: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x3a5f0; add rax, rdi; ret; 
0x000000000043a57d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x000000000047bf32: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ss, word ptr [rax + rax + 0x63490000]; ret 0x8948; 
0x000000000041c879: add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xd0], eax; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000041c881: add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000041c889: add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xf0], eax; syscall; 
0x0000000000458c15: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000000], ebp; add esp, 0x78; ret; 
0x00000000004849a7: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], edi; add esp, 0x78; ret; 
0x00000000004016a2: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rdx + 0x48000000], eax; add esp, 0xc8; ret; 
0x0000000000458882: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], ebp; add esp, 0x68; ret; 
0x0000000000493c85: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], esi; add esp, 0x30; pop rbx; ret; 
0x0000000000485b60: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret 0xc283; 
0x00000000004c76ad: add byte ptr [rax], al; add byte ptr [rdx + 0x212c0000], dl; hlt; jmp rsi; 
0x0000000000452e5d: add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; lea eax, [rdx]; ret; 
0x00000000004516ad: add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x000000000049c485: add byte ptr [rax], al; add byte ptr [rdx + 0x48], dh; add esp, 0x18; ret; 
0x00000000004aa97d: add byte ptr [rax], al; add byte ptr [rdx + 0xe000001], ah; fdivr st(7); dec dword ptr [rsi]; fdivr st(7); jmp qword ptr [rdx + 0xe000001]; 
0x000000000045b06a: add byte ptr [rax], al; add byte ptr [rdx + 1], bh; mov eax, 0xca; syscall; 
0x00000000004ca3fd: add byte ptr [rax], al; add byte ptr [rdx + rax*2], ah; add byte ptr [rax], bl; cmc; call qword ptr [rbx]; 
0x00000000004c8c3d: add byte ptr [rax], al; add byte ptr [rdx + rbp + 0x66cc0000], ah; cmc; call qword ptr [rdi]; 
0x00000000004d0bc5: add byte ptr [rax], al; add byte ptr [rdx + rbp*4], ch; add byte ptr [rax], al; hlt; or bh, ah; call qword ptr [rdi + 1]; 
0x000000000045c871: add byte ptr [rax], al; add byte ptr [rdx + rcx - 0x77], dh; adc eax, 0x27923c; pop rbx; ret; 
0x00000000004c9bc5: add byte ptr [rax], al; add byte ptr [rdx + rdi], ch; add byte ptr [rax], al; and al, 0xc3; cmc; call qword ptr [rdi]; 
0x00000000004d13cd: add byte ptr [rax], al; add byte ptr [rdx + rsi*4], dh; add byte ptr [rax], al; in al, dx; cmp edi, esp; call qword ptr [rax]; 
0x00000000004a977d: add byte ptr [rax], al; add byte ptr [rdx - 0x2a000028], dh; add byte ptr [rax], al; add byte ptr [rdx - 0x4d000028], dh; fdivr st(7); jmp qword ptr [rbp]; 
0x00000000004a9785: add byte ptr [rax], al; add byte ptr [rdx - 0x4d000028], dh; fdivr st(7); jmp qword ptr [rbp]; 
0x00000000004a7131: add byte ptr [rax], al; add byte ptr [rdx - 0x55000028], ch; fdivr st(7); ljmp [rdx - 0x55000028]; fdivr st(7); call qword ptr [rsi]; 
0x00000000004a7475: add byte ptr [rax], al; add byte ptr [rdx - 0x6d000028], dl; fdivr st(7); call qword ptr [rdx - 0x6d000028]; fdivr st(7); jmp qword ptr [rbp]; 
0x00000000004a7469: add byte ptr [rax], al; add byte ptr [rdx - 0x6d000028], dl; fdivr st(7); jmp qword ptr [rbp]; 
0x00000000004a4211: add byte ptr [rax], al; add byte ptr [rdx], ah; add byte ptr [rax], al; add bh, cl; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004ccb9a: add byte ptr [rax], al; add byte ptr [rdx], ch; add byte ptr [rax - 0x1d], ah; clc; call qword ptr [rdx]; 
0x0000000000484a94: add byte ptr [rax], al; add byte ptr [rip + 0x410000], dil; je 0x84ac8; mov eax, 0x101; syscall; 
0x00000000004ab351: add byte ptr [rax], al; add byte ptr [rip - 0x1bffffff], cl; fdivr st(7); jmp rsp; 
0x00000000004a40bd: add byte ptr [rax], al; add byte ptr [rip - 0x7c000000], cl; fdivr st(7); dec dword ptr [rip - 0x7c000000]; fdivr st(7); call qword ptr [rbx]; 
0x00000000004aab9d: add byte ptr [rax], al; add byte ptr [rsi + 0x12000001], ah; fdivr st(7); call qword ptr [rdx]; 
0x000000000048a9c2: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; 
0x000000000045b065: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000043b712: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000040398f: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; add byte ptr [r8 + 0x29], r9b; ret 0x8d48; 
0x000000000042912d: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x8348; 
0x000000000043a4a2: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x00000000004d102d: add byte ptr [rax], al; add byte ptr [rsi + rbp*4 + 0x2fac0000], dl; cld; jmp qword ptr [rdx]; 
0x00000000004cc01d: add byte ptr [rax], al; add byte ptr [rsi + rbx*2 - 0x5be40000], al; clc; call rsp; 
0x00000000004d076e: add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x1370303; ret; 
0x00000000004d0706: add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x00000000004d073a: add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x00000000004ca03d: add byte ptr [rax], al; add byte ptr [rsi + rdi - 0x29340000], ah; cmc; call qword ptr [rdi]; 
0x00000000004ce025: add byte ptr [rax], al; add byte ptr [rsi + rdi*2 - 0x3cdc0000], cl; stc; call qword ptr [rax]; 
0x00000000004cdffd: add byte ptr [rax], al; add byte ptr [rsi + rdi*2], ah; add byte ptr [rbx + rax*8], cl; stc; call qword ptr [rcx]; 
0x00000000004d17e5: add byte ptr [rax], al; add byte ptr [rsi + rsi*4], cl; add byte ptr [rdx - 4], ah; jmp rsp; 
0x00000000004a8eed: add byte ptr [rax], al; add byte ptr [rsi - 0x30000000], cl; fdivr st(7); call rax; 
0x00000000004a6251: add byte ptr [rax], al; add byte ptr [rsi - 0x41000028], bh; fdivr st(7); call rax; 
0x00000000004a7a7d: add byte ptr [rax], al; add byte ptr [rsi - 0x4a000000], dh; add byte ptr [rax], al; add byte ptr [rbp - 0x72000028], cl; fdivr st(7); call rcx; 
0x00000000004aa6d9: add byte ptr [rax], al; add byte ptr [rsi - 0x61000000], al; fdivr st(7); call qword ptr [rsi]; 
0x000000000049472b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x27; syscall; 
0x000000000049472b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x27; syscall; ret; 
0x000000000045afbb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x63; syscall; 
0x00000000004840fb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc9; syscall; 
0x00000000004840fb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc9; syscall; ret; 
0x000000000045af8b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x9d; syscall; 
0x000000000046a6ab: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10d, 8; mov eax, 0xe; syscall; 
0x00000000004516bd: add byte ptr [rax], al; add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000425afe: add byte ptr [rax], al; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004a82f1: add byte ptr [rax], al; add byte ptr [rsi], ah; or dword ptr [rax], eax; add byte ptr [rcx + 0x21000001], dl; fdivr st(7); jmp qword ptr [rcx]; 
0x00000000004d0cce: add byte ptr [rax], al; add byte ptr [rsi], cl; cld; call qword ptr [rdx]; 
0x00000000004aa701: add byte ptr [rax], al; add byte ptr [rsi], dl; add byte ptr [rax], al; lahf; fdivr st(7); call qword ptr [rsi]; 
0x00000000004697a1: add byte ptr [rax], al; add byte ptr [rsp + rax*2 - 0x75], ah; xor al, ch; ret; 
0x00000000004c763d: add byte ptr [rax], al; add byte ptr [rsp + rdx + 0x206c0000], ah; hlt; call qword ptr [rdi]; 
0x00000000004c760d: add byte ptr [rax], al; add byte ptr [rsp + rdx], dh; add byte ptr [rax], bh; hlt; jmp qword ptr [rax]; 
0x00000000004cc5bd: add byte ptr [rax], al; add byte ptr [rsp], ah; add byte ptr [rax], al; jl 0xcc589; clc; jmp qword ptr [rax]; 
0x00000000004ca3fe: add byte ptr [rax], al; add byte ptr fs:[rax], al; sbb al, 0xe0; cmc; call qword ptr [rbx]; 
0x00000000004ab1fd: add byte ptr [rax], al; add ch, al; add byte ptr [rax], al; add dh, ah; fdivr st(7); jmp rsi; 
0x00000000004a7671: add byte ptr [rax], al; add ch, al; fdivr st(7); call qword ptr [rbp + 7]; 
0x00000000004aa295: add byte ptr [rax], al; add ch, bl; add byte ptr [rax], al; add bh, ah; fdivr st(7); jmp rdi; 
0x00000000004a884d: add byte ptr [rax], al; add cl, ah; fdivr st(7); jmp rcx; 
0x000000000046e498: add byte ptr [rax], al; add cl, ch; ret 0xfffa; 
0x0000000000463ec6: add byte ptr [rax], al; add cl, ch; ret 0xfffd; 
0x0000000000400fe6: add byte ptr [rax], al; add cl, ch; ret; 
0x0000000000499e8e: add byte ptr [rax], al; add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0x2e]; 
0x00000000004a888d: add byte ptr [rax], al; add cl, cl; add byte ptr [rax], al; add al, ah; fdivr st(7); jmp rax; 
0x00000000004c844e: add byte ptr [rax], al; add cl, cl; hlt; jmp qword ptr [rax]; 
0x0000000000400c66: add byte ptr [rax], al; add cl, cl; ret; 
0x00000000004ab20d: add byte ptr [rax], al; add dh, ah; fdivr st(7); call rdi; 
0x00000000004ab201: add byte ptr [rax], al; add dh, ah; fdivr st(7); jmp rsi; 
0x00000000004ab3d9: add byte ptr [rax], al; add dh, al; add byte ptr [rax], al; add bh, dl; fdivr st(7); call rdi; 
0x0000000000479756: add byte ptr [rax], al; add dh, al; test eax, ebp; idiv bh; jmp qword ptr [rax]; 
0x000000000046dfa0: add byte ptr [rax], al; add dh, al; test esp, eax; idiv bh; jmp qword ptr [rax]; 
0x000000000046039d: add byte ptr [rax], al; add dh, dh; ret 0x4801; 
0x0000000000431add: add byte ptr [rax], al; add dh, dh; ret 0x4804; 
0x00000000004597ed: add byte ptr [rax], al; add dh, dh; ret 0x7404; 
0x00000000004551b1: add byte ptr [rax], al; add dh, dh; ret 0x7501; 
0x00000000004a8c05: add byte ptr [rax], al; add dh, dl; fdivr st(7); call rsi; 
0x00000000004a9d55: add byte ptr [rax], al; add dl, ah; fdivr st(7); call rsp; 
0x00000000004a9d49: add byte ptr [rax], al; add dl, ah; fdivr st(7); jmp rdx; 
0x00000000004a9d45: add byte ptr [rax], al; add dl, al; add byte ptr [rax], al; add dl, ah; fdivr st(7); jmp rdx; 
0x00000000004aaf9d: add byte ptr [rax], al; add dl, al; fdivr st(7); inc edx; fdivr st(7); call rsi; 
0x00000000004a9d01: add byte ptr [rax], al; add dl, ch; fdivr st(7); call rdi; 
0x00000000004a8849: add byte ptr [rax], al; add dl, cl; add byte ptr [rax], al; add cl, ah; fdivr st(7); jmp rcx; 
0x00000000004a78a1: add byte ptr [rax], al; add dl, dl; fdivr st(7); call rdx; 
0x00000000004a4bd7: add byte ptr [rax], al; add dword ptr [rax], eax; add cl, dl; fdivr st(7); call rcx; 
0x0000000000493aa6: add byte ptr [rax], al; add dword ptr [rax], eax; or rax, rdx; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x00000000004a6c9a: add byte ptr [rax], al; add dword ptr [rcx], eax; add byte ptr [rax], al; add dword ptr [rcx], eax; add byte ptr [rax], al; ret; 
0x00000000004a6c9e: add byte ptr [rax], al; add dword ptr [rcx], eax; add byte ptr [rax], al; ret; 
0x00000000004a8326: add byte ptr [rax], al; add dword ptr ss:[rax], eax; add byte ptr [rcx], ah; fdivr st(7); jmp qword ptr [rcx]; 
0x00000000004aacaa: add byte ptr [rax], al; add dword ptr ss:[rax], eax; add byte ptr [rdx], ah; fdivr st(7); jmp qword ptr [rdx]; 
0x000000000041d877: add byte ptr [rax], al; add qword ptr [rip + 0x2bbfd7], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000483b6e: add byte ptr [rax], al; add rax, 3; ret; 
0x000000000049c4b9: add byte ptr [rax], al; add rax, qword ptr [r8 + 0xd0]; add rsp, 0x18; ret; 
0x000000000043a353: add byte ptr [rax], al; add rax, rdi; add rax, rcx; ret; 
0x0000000000482c80: add byte ptr [rax], al; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000043a880: add byte ptr [rax], al; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x0000000000498ed6: add byte ptr [rax], al; add rbx, 8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x0000000000401af0: add byte ptr [rax], al; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000042e758: add byte ptr [rax], al; add rsp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000420c12: add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000049c4c0: add byte ptr [rax], al; add rsp, 0x18; ret; 
0x0000000000401da1: add byte ptr [rax], al; add rsp, 0x20; pop rbx; ret; 
0x000000000045e8d5: add byte ptr [rax], al; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000493c8c: add byte ptr [rax], al; add rsp, 0x30; pop rbx; ret; 
0x0000000000499f83: add byte ptr [rax], al; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000004254ab: add byte ptr [rax], al; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000403b56: add byte ptr [rax], al; add rsp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x0000000000458889: add byte ptr [rax], al; add rsp, 0x68; ret; 
0x0000000000483051: add byte ptr [rax], al; add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x0000000000458c1c: add byte ptr [rax], al; add rsp, 0x78; ret; 
0x000000000041031c: add byte ptr [rax], al; add rsp, 0x98; ret; 
0x000000000047f134: add byte ptr [rax], al; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000466e23: add byte ptr [rax], al; add rsp, 0xb8; pop rbx; pop r12; ret; 
0x00000000004016a9: add byte ptr [rax], al; add rsp, 0xc8; ret; 
0x0000000000407c0e: add byte ptr [rax], al; add rsp, 8; mov eax, 0xffffffef; pop rbx; pop rbp; ret; 
0x0000000000472735: add byte ptr [rax], al; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000041ef7b: add byte ptr [rax], al; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000494547: add byte ptr [rax], al; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000406be0: add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000401f6c: add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000432c86: add byte ptr [rax], al; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000004c72be: add byte ptr [rax], al; and al, 0x11; add byte ptr [rax], al; cmp al, 0xb; hlt; call qword ptr [rdi]; 
0x00000000004c94be: add byte ptr [rax], al; and al, 0x33; add byte ptr [rax], al; or al, 0x99; cmc; call qword ptr [rdi + 2]; 
0x00000000004cc5be: add byte ptr [rax], al; and al, 0x64; add byte ptr [rax], al; jl 0xcc589; clc; jmp qword ptr [rax]; 
0x00000000004c9bca: add byte ptr [rax], al; and al, 0xc3; cmc; call qword ptr [rdi]; 
0x00000000004ce02a: add byte ptr [rax], al; and al, 0xc3; stc; call qword ptr [rax]; 
0x00000000004a4212: add byte ptr [rax], al; and al, byte ptr [rax]; add byte ptr [rax], al; iretd; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004cc70e: add byte ptr [rax], al; and bh, al; clc; jmp qword ptr [rcx]; 
0x00000000004cf3de: add byte ptr [rax], al; and byte ptr [rax], ch; sti; jmp qword ptr [rbx]; 
0x00000000004d159e: add byte ptr [rax], al; and byte ptr [rdx - 4], bl; jmp qword ptr [rax + 1]; 
0x0000000000457366: add byte ptr [rax], al; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x00000000004cccee: add byte ptr [rax], al; and dh, ah; clc; call qword ptr [rax]; 
0x00000000004ccd1e: add byte ptr [rax], al; and dh, ah; clc; jmp qword ptr [rcx]; 
0x00000000004a4e2a: add byte ptr [rax], al; and dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; fdivr st(7); jmp qword ptr [rcx]; 
0x000000000043399b: add byte ptr [rax], al; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x00000000004335ab: add byte ptr [rax], al; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x0000000000481c0b: add byte ptr [rax], al; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x902]; cmove rax, rdx; ret; 
0x0000000000482f2b: add byte ptr [rax], al; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000481bdb: add byte ptr [rax], al; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xdf2]; cmove rax, rdx; ret; 
0x000000000043c151: add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000043ca23: add byte ptr [rax], al; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000043c156: add byte ptr [rax], al; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000004c75fe: add byte ptr [rax], al; and spl, sil; call qword ptr [rax]; 
0x000000000043a57e: add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000043a58e: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000043a59e: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000043a7be: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000043a5ae: add byte ptr [rax], al; bsf eax, eax; sub rdx, rax; jbe 0x3a5f0; add rax, rdi; ret; 
0x000000000044fba0: add byte ptr [rax], al; bsf rax, rdx; ret; 
0x0000000000483744: add byte ptr [rax], al; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000434dfe: add byte ptr [rax], al; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000482574: add byte ptr [rax], al; bsr rax, rax; add rax, rdi; ret; 
0x0000000000482602: add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000041d8d6: add byte ptr [rax], al; call 0x10920; xor eax, eax; ret; 
0x0000000000400be8: add byte ptr [rax], al; call 0x1d7a0; nop; leave; ret; 
0x0000000000427a83: add byte ptr [rax], al; call 0x5b030; add rsp, 0x80; mov qword ptr [rip + 0x2b12e0], rdx; add dword ptr [rip + 0x2b12d5], 1; ret; 
0x0000000000477f26: add byte ptr [rax], al; call 0x5b060; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x00000000004846cb: add byte ptr [rax], al; call 0x5b060; add rsp, 0x80; pop rbx; ret; 
0x000000000046c11b: add byte ptr [rax], al; call 0x5b060; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x00000000004cbe82: add byte ptr [rax], al; call 0x780cbee5; ja 0xcbe83; jmp qword ptr [rdi + 6]; 
0x00000000004ca182: add byte ptr [rax], al; call 0xffffffffb80ca1c8; fdiv st(5); jmp qword ptr [rax]; 
0x00000000004d0482: add byte ptr [rax], al; call 0xffffffffc20d052b; add bl, dh; jmp qword ptr [rcx]; 
0x00000000004cc882: add byte ptr [rax], al; call 0xffffffffc80cc8ef; iretd; clc; jmp qword ptr [rcx]; 
0x0000000000480d01: add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x000000000040fe2c: add byte ptr [rax], al; call qword ptr [rbx + 0x10]; 
0x000000000041d77e: add byte ptr [rax], al; call qword ptr [rbx]; 
0x000000000041d68b: add byte ptr [rax], al; call rax; 
0x00000000004bc97e: add byte ptr [rax], al; call rdi; 
0x000000000041d5c5: add byte ptr [rax], al; call rdx; 
0x00000000004bbb2e: add byte ptr [rax], al; call rsp; 
0x00000000004a57ae: add byte ptr [rax], al; cdq; fdivr st(7); lcall [rcx - 0x66000028]; fdivr st(7); call qword ptr [rax]; 
0x0000000000470577: add byte ptr [rax], al; cdqe; movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x26301a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000470526: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x262f6b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004708d5: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2630bc]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470887: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26310a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004707d8: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2631b9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047077c: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x263215]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004704dc: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2634b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047048e: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x263503]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047002d: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x263664]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004cc8b6: add byte ptr [rax], al; clc; iretd; clc; jmp qword ptr [rcx]; 
0x00000000004cd492: add byte ptr [rax], al; clc; jb 0xcd497; add byte ptr [rax], ch; sub bh, cl; call qword ptr [rax]; 
0x00000000004573e4: add byte ptr [rax], al; clc; jg 0x573e0; int1; mov eax, eax; ret; 
0x00000000004c8f66: add byte ptr [rax], al; clc; jnp 0xc8f60; jmp qword ptr [rdx + 1]; 
0x00000000004cbee6: add byte ptr [rax], al; clc; pushfq; clc; call qword ptr [rdi]; 
0x00000000004cdfd6: add byte ptr [rax], al; clc; ret 0xfff9; 
0x00000000004c7f92: add byte ptr [rax], al; clc; sbb eax, 0x88280000; hlt; call qword ptr [rbx + 1]; 
0x00000000004cc932: add byte ptr [rax], al; cld; sar al, 1; call rsi; 
0x00000000004c86f6: add byte ptr [rax], al; cmc; call rsp; 
0x0000000000497a38: add byte ptr [rax], al; cmove edx, eax; call 0x88080; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000457311: add byte ptr [rax], al; cmove rax, rcx; pop rbx; ret; 
0x00000000004572d9: add byte ptr [rax], al; cmove rax, rdx; pop rbx; ret; 
0x00000000004335bc: add byte ptr [rax], al; cmove rax, rdx; ret; 
0x0000000000494513: add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000040ccdf: add byte ptr [rax], al; cmovne rbx, rax; mov rax, rbx; pop rbx; ret; 
0x00000000004c7612: add byte ptr [rax], al; cmp al, 0x20; hlt; jmp qword ptr [rax]; 
0x00000000004c72c2: add byte ptr [rax], al; cmp al, 0xb; hlt; call qword ptr [rdi]; 
0x00000000004c70d6: add byte ptr [rax], al; cmp al, 0xf; add byte ptr [rax], al; in al, 5; hlt; call qword ptr [rdx]; 
0x000000000049c47e: add byte ptr [rax], al; cmp byte ptr [r9 + 0xdf], 0; je 0x9c46c; add rsp, 0x18; ret; 
0x00000000004cf5d2: add byte ptr [rax], al; cmp byte ptr [rax + rax - 0x4c9d800], dl; jmp qword ptr [rax]; 
0x00000000004d17e2: add byte ptr [rax], al; cmp byte ptr [rax], al; add byte ptr [rax], al; mov sil, 0; add byte ptr [rdx - 4], ah; jmp rsp; 
0x00000000004d23ee: add byte ptr [rax], al; cmp byte ptr [rax], al; add byte ptr [rax], al; pop rax; ret 0; 
0x00000000004cf3f6: add byte ptr [rax], al; cmp byte ptr [rax], ch; sti; jmp qword ptr [rsi]; 
0x00000000004c71b6: add byte ptr [rax], al; cmp byte ptr [rax], cl; hlt; jmp qword ptr [rsi + 1]; 
0x00000000004d1ad2: add byte ptr [rax], al; cmp byte ptr [rcx - 0x78280000], bh; cld; jmp qword ptr [rcx]; 
0x00000000004c74a6: add byte ptr [rax], al; cmp byte ptr [rcx], bl; hlt; jmp qword ptr [rcx + 2]; 
0x00000000004cc0d2: add byte ptr [rax], al; cmp byte ptr [rdi], bl; add byte ptr [rax], bl; lodsd eax, dword ptr [rsi]; clc; call qword ptr [rax]; 
0x00000000004d1146: add byte ptr [rax], al; cmp byte ptr [rdx], dh; cld; jmp qword ptr [rbp]; 
0x000000000048e7ae: add byte ptr [rax], al; cmp byte ptr [rip + 0x24b071], 0; jne 0x8e7c8; mov rax, qword ptr [rip + 0x24ac50]; ret; 
0x00000000004cdfd2: add byte ptr [rax], al; cmp byte ptr [rsi], bh; add al, bh; ret 0xfff9; 
0x000000000049d43e: add byte ptr [rax], al; cmp dil, 4; jne 0x9d455; mov eax, 8; ret; 
0x0000000000425a66: add byte ptr [rax], al; cmp eax, -1; je 0x259e8; mov eax, 0xffffffff; ret; 
0x0000000000425c56: add byte ptr [rax], al; cmp eax, -1; je 0x25bd8; mov eax, 0xffffffff; ret; 
0x0000000000455668: add byte ptr [rax], al; cmp eax, ecx; jne 0x55725; xor eax, eax; ret; 
0x000000000045b03e: add byte ptr [rax], al; cmp eax, edx; jne 0x5b04c; nop; mov eax, 0xca; syscall; 
0x000000000040910c: add byte ptr [rax], al; cmp edi, 0x16; jne 0x9270; mov rax, 0x6d2f60; ret; 
0x00000000004090cc: add byte ptr [rax], al; cmp edi, 0xc0000008; jne 0x9270; mov rax, 0x6d2de0; ret; 
0x00000000004091d6: add byte ptr [rax], al; cmp edi, 0xc000003e; jne 0x9270; mov rax, 0x6d52c0; ret; 
0x0000000000409164: add byte ptr [rax], al; cmp edi, 0xe0000008; jne 0x9270; mov rax, 0x6d2e60; ret; 
0x00000000004091be: add byte ptr [rax], al; cmp edi, 8; jne 0x9270; mov rax, 0x6d2da0; ret; 
0x00000000004097ae: add byte ptr [rax], al; cmp edx, 0x18; jbe 0x97c0; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x000000000040a51e: add byte ptr [rax], al; cmp edx, 0x18; jbe 0xa530; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x000000000040b10e: add byte ptr [rax], al; cmp edx, 0x18; jbe 0xb120; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x000000000040bd1e: add byte ptr [rax], al; cmp edx, 0x18; jbe 0xbd30; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x0000000000432b7c: add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000048ed4c: add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; ret; 
0x0000000000456e1c: add byte ptr [rax], al; cmp rdx, 0x20; ja 0x56e2f; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000456dcc: add byte ptr [rax], al; cmp rdx, 0x20; ja 0x56e38; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000045700f: add byte ptr [rax], al; cmp rdx, rcx; jne 0x56ff7; vzeroupper; ret; 
0x00000000004571d2: add byte ptr [rax], al; cmp rdx, rcx; jne 0x571b2; vzeroupper; ret; 
0x00000000004aab9e: add byte ptr [rax], al; cmpsb byte ptr [rsi], byte ptr [rdi]; add dword ptr [rax], eax; add byte ptr [rdx], dl; fdivr st(7); call qword ptr [rdx]; 
0x00000000004aaf32: add byte ptr [rax], al; cmpsd dword ptr [rsi], dword ptr [rdi]; add dword ptr [rax], eax; add byte ptr [rsi], al; fdivr st(7); jmp qword ptr [rdi + 0x6000001]; 
0x00000000004d08e2: add byte ptr [rax], al; cmpsq qword ptr [rsi], qword ptr [rdi]; add byte ptr [rax], al; js 0xd08e3; sti; jmp qword ptr [rsi]; 
0x00000000004aaf52: add byte ptr [rax], al; cwde; add byte ptr [rax], al; add byte ptr [rax + 0x11000001], ah; fdivr st(7); call qword ptr [rcx]; 
0x00000000004a57f2: add byte ptr [rax], al; cwde; fdivr st(7); lcall [rax - 0x67000028]; fdivr st(7); call qword ptr [rcx]; 
0x00000000004cf772: add byte ptr [rax], al; fcom dword ptr [rbp + 0x3f080000]; sti; jmp qword ptr [rax]; 
0x00000000004cf372: add byte ptr [rax], al; fcom dword ptr [rcx + 0x26b80000]; sti; call qword ptr [rsi + 1]; 
0x00000000004cb972: add byte ptr [rax], al; fcom dword ptr [rdi]; add byte ptr [rax], ch; jl 0xcb971; jmp qword ptr [rbx]; 
0x00000000004cb872: add byte ptr [rax], al; fcom dword ptr [rsi]; add byte ptr [rax], ch; je 0xcb871; jmp qword ptr [rbx]; 
0x00000000004ca306: add byte ptr [rax], al; fcomp st(6); cmc; call qword ptr [rsi]; 
0x00000000004d1272: add byte ptr [rax], al; fdiv dword ptr [rax + 0x34c80000]; cld; call qword ptr [rax]; 
0x00000000004d1672: add byte ptr [rax], al; fdiv dword ptr [rax + rax - 0x3a18800]; call qword ptr [rbx]; 
0x00000000004cd772: add byte ptr [rax], al; fdiv dword ptr [rbp]; add byte ptr [rax + 0x4a], ch; stc; call qword ptr [rdi]; 
0x00000000004ce31a: add byte ptr [rax], al; fdivp st(1); call qword ptr [rdx]; 
0x00000000004ce072: add byte ptr [rax], al; fdivr dword ptr [rsi]; add al, bl; ret; 
0x00000000004cdc76: add byte ptr [rax], al; fdivr qword ptr [rdx]; add byte ptr [rsi + rbx*4], dl; stc; jmp rax; 
0x00000000004a89ae: add byte ptr [rax], al; fdivr st(7); call qword ptr [rax]; 
0x00000000004a951a: add byte ptr [rax], al; fdivr st(7); call qword ptr [rbp]; 
0x00000000004aa7f6: add byte ptr [rax], al; fdivr st(7); call qword ptr [rbx]; 
0x00000000004aa372: add byte ptr [rax], al; fdivr st(7); jmp qword ptr [rdi]; 
0x00000000004a91ea: add byte ptr [rax], al; fdivr st(7); jmp qword ptr [rsi]; 
0x00000000004ca1ce: add byte ptr [rax], al; fprem1; call qword ptr [rsi]; 
0x00000000004cc572: add byte ptr [rax], al; fsub dword ptr [rbx]; add byte ptr [rax], cl; ret 0xfff8; 
0x00000000004ccc72: add byte ptr [rax], al; fsubr dword ptr [rdx]; add byte ptr [rax], cl; in al, 0xf8; call qword ptr [rsi]; 
0x00000000004cc09a: add byte ptr [rax], al; hlt; lodsb al, byte ptr [rsi]; clc; call qword ptr [rdx]; 
0x00000000004c670a: add byte ptr [rax], al; hlt; mov dl, 0xf3; call qword ptr [rcx]; 
0x00000000004d0bca: add byte ptr [rax], al; hlt; or bh, ah; call qword ptr [rdi + 1]; 
0x00000000004c727e: add byte ptr [rax], al; in al, 0x10; add byte ptr [rax], al; sbb al, 0xb; hlt; call qword ptr [rax]; 
0x00000000004d171a: add byte ptr [rax], al; in al, 0x60; cld; jmp qword ptr [rdx]; 
0x00000000004cdbfa: add byte ptr [rax], al; in al, 0x9d; stc; call qword ptr [rdx]; 
0x00000000004c70da: add byte ptr [rax], al; in al, 5; hlt; call qword ptr [rdx]; 
0x00000000004c8886: add byte ptr [rax], al; in al, dx; add byte ptr es:[rax], al; push rdx; cmc; call qword ptr [rdx]; 
0x00000000004d13d2: add byte ptr [rax], al; in al, dx; cmp edi, esp; call qword ptr [rax]; 
0x00000000004c7252: add byte ptr [rax], al; in al, dx; or esp, esi; call qword ptr [rbx + 1]; 
0x00000000004c7642: add byte ptr [rax], al; insb byte ptr [rdi], dx; and ah, dh; call qword ptr [rdi]; 
0x00000000004a41ea: add byte ptr [rax], al; iretd; fdivr st(7); dec edi; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004a41f6: add byte ptr [rax], al; iretd; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004cd156: add byte ptr [rax], al; iretd; xor esi, ebx; jmp qword ptr [rbx]; 
0x0000000000457111: add byte ptr [rax], al; ja 0x57127; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000004570b1: add byte ptr [rax], al; ja 0x57130; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000458404: add byte ptr [rax], al; ja 0x586c0; lea rdx, [rip + 0x57c09]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000040cc8f: add byte ptr [rax], al; ja 0xcca8; lea rdx, [rip + 0x957de]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000444ab3: add byte ptr [rax], al; jae 0x44b50; lea r11, [rip + 0x6a90e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000045c872: add byte ptr [rax], al; je 0x5c880; mov dword ptr [rip + 0x27923c], edx; pop rbx; ret; 
0x000000000049c486: add byte ptr [rax], al; je 0x9c46c; add rsp, 0x18; ret; 
0x000000000049c557: add byte ptr [rax], al; je 0x9c560; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x00000000004c760e: add byte ptr [rax], al; je 0xc7626; add byte ptr [rax], al; cmp al, 0x20; hlt; jmp qword ptr [rax]; 
0x00000000004c9f16: add byte ptr [rax], al; jl 0xc9f57; add byte ptr [rax], al; sal ebp, 1; jmp qword ptr [rdi + 2]; 
0x00000000004cb98e: add byte ptr [rax], al; jl 0xcb989; call qword ptr [rsi]; 
0x00000000004cc5c2: add byte ptr [rax], al; jl 0xcc589; clc; jmp qword ptr [rax]; 
0x00000000004ce316: add byte ptr [rax], al; jl 0xce29b; add byte ptr [rax], al; fdivp st(1); call qword ptr [rdx]; 
0x00000000004d0816: add byte ptr [rax], al; jl 0xd07c0; add byte ptr [rax], al; test dh, dh; sti; call rdx; 
0x00000000004d1716: add byte ptr [rax], al; jl 0xd16cf; add byte ptr [rax], al; in al, 0x60; cld; jmp qword ptr [rdx]; 
0x00000000004cdffe: add byte ptr [rax], al; jle 0xce003; add byte ptr [rbx + rax*8], cl; stc; call qword ptr [rcx]; 
0x000000000045992b: add byte ptr [rax], al; jmp rax; 
0x000000000040151c: add byte ptr [rax], al; jne 0x1547; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004016a3: add byte ptr [rax], al; jne 0x172d; add rsp, 0xc8; ret; 
0x0000000000401833: add byte ptr [rax], al; jne 0x18bd; add rsp, 0xc8; ret; 
0x000000000041e460: add byte ptr [rax], al; jne 0x1e46c; add rsp, 0xd8; ret; 
0x0000000000420c0c: add byte ptr [rax], al; jne 0x20cbd; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004254a5: add byte ptr [rax], al; jne 0x25566; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000425786: add byte ptr [rax], al; jne 0x257d4; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000004269a7: add byte ptr [rax], al; jne 0x26c56; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000042930e: add byte ptr [rax], al; jne 0x29318; add rsp, 0x20; pop rbx; ret; 
0x0000000000403ad4: add byte ptr [rax], al; jne 0x3af5; add rsp, 0x48; ret; 
0x000000000043b212: add byte ptr [rax], al; jne 0x3b120; ret; 
0x0000000000403e77: add byte ptr [rax], al; jne 0x3e9d; add rsp, 0x10; pop rbx; ret; 
0x00000000004579ad: add byte ptr [rax], al; jne 0x579d4; add rsp, 0x20; pop rbx; ret; 
0x0000000000458469: add byte ptr [rax], al; jne 0x58400; mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000458765: add byte ptr [rax], al; jne 0x58779; add rsp, 0x28; ret; 
0x0000000000458883: add byte ptr [rax], al; jne 0x58939; add rsp, 0x68; ret; 
0x0000000000458995: add byte ptr [rax], al; jne 0x589db; add rsp, 0x58; ret; 
0x0000000000458c16: add byte ptr [rax], al; jne 0x58cc9; add rsp, 0x78; ret; 
0x0000000000458d25: add byte ptr [rax], al; jne 0x58d73; add rsp, 0x68; ret; 
0x0000000000459714: add byte ptr [rax], al; jne 0x59727; add rsp, 0x28; ret; 
0x000000000045ae38: add byte ptr [rax], al; jne 0x5ae46; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000045aec8: add byte ptr [rax], al; jne 0x5aed6; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000045b09d: add byte ptr [rax], al; jne 0x5b088; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x5b0ac; ret; 
0x0000000000466e1d: add byte ptr [rax], al; jne 0x66edf; add rsp, 0xb8; pop rbx; pop r12; ret; 
0x000000000046a3dd: add byte ptr [rax], al; jne 0x6a3e6; add rsp, 0x18; ret; 
0x000000000046a625: add byte ptr [rax], al; jne 0x6a673; add rsp, 0x148; ret; 
0x0000000000478020: add byte ptr [rax], al; jne 0x7802c; add rsp, 0xd8; ret; 
0x00000000004847ee: add byte ptr [rax], al; jne 0x8482a; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x00000000004849a8: add byte ptr [rax], al; jne 0x84a69; add rsp, 0x78; ret; 
0x0000000000484aba: add byte ptr [rax], al; jne 0x84b03; add rsp, 0x58; ret; 
0x0000000000484b3d: add byte ptr [rax], al; jne 0x84b49; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000484bec: add byte ptr [rax], al; jne 0x84c0b; add rsp, 0x38; ret; 
0x000000000048e7b5: add byte ptr [rax], al; jne 0x8e7c8; mov rax, qword ptr [rip + 0x24ac50]; ret; 
0x0000000000491098: add byte ptr [rax], al; jne 0x910a2; add rsp, 0x20; pop rbx; ret; 
0x0000000000491193: add byte ptr [rax], al; jne 0x911c3; add rsp, 0x38; ret; 
0x0000000000491253: add byte ptr [rax], al; jne 0x9127e; add rsp, 0x68; ret; 
0x00000000004913b4: add byte ptr [rax], al; jne 0x913ee; add rsp, 0x78; ret; 
0x0000000000491683: add byte ptr [rax], al; jne 0x916ae; add rsp, 0x68; ret; 
0x00000000004091f3: add byte ptr [rax], al; jne 0x9270; mov rax, 0x6d2d60; ret; 
0x00000000004936bf: add byte ptr [rax], al; jne 0x936fe; leave; ret; 
0x0000000000493c86: add byte ptr [rax], al; jne 0x93d44; add rsp, 0x30; pop rbx; ret; 
0x0000000000493e47: add byte ptr [rax], al; jne 0x93fd5; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000494260: add byte ptr [rax], al; jne 0x94308; mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x000000000049436b: add byte ptr [rax], al; jne 0x94374; add rsp, 0x38; ret; 
0x000000000049444e: add byte ptr [rax], al; jne 0x94464; add rsp, 0x38; ret; 
0x0000000000496c39: add byte ptr [rax], al; jne 0x96c3f; pop rbx; ret; 
0x00000000004977c9: add byte ptr [rax], al; jne 0x977dc; add rsp, 0x38; ret; 
0x000000000049c467: add byte ptr [rax], al; jne 0x9c480; cmp qword ptr [r9 + 0x38], 0; je 0x9c490; add rsp, 0x18; ret; 
0x00000000004cd6de: add byte ptr [rax], al; jne 0xcd6e3; add byte ptr [rcx + rax*2], bl; stc; call rcx; 
0x00000000004c889e: add byte ptr [rax], al; jo 0xc88f4; cmc; jmp qword ptr [rax]; 
0x00000000004cbece: add byte ptr [rax], al; jo 0xcbe6a; clc; call qword ptr [rbx + 4]; 
0x00000000004cc70a: add byte ptr [rax], al; jo 0xcc773; add byte ptr [rax], al; and bh, al; clc; jmp qword ptr [rcx]; 
0x00000000004ccd3e: add byte ptr [rax], al; jo 0xccd28; clc; call qword ptr [rcx]; 
0x00000000004cf0ee: add byte ptr [rax], al; jo 0xcf112; sti; jmp qword ptr [rdx]; 
0x00000000004d15ee: add byte ptr [rax], al; jo 0xd164d; cld; jmp qword ptr [rbp]; 
0x00000000004d24ae: add byte ptr [rax], al; jo 0xd247a; cld; jmp qword ptr [rcx]; 
0x00000000004a9766: add byte ptr [rax], al; jp 0xa9776; add byte ptr [rax], al; mov eax, dword ptr [rcx]; add byte ptr [rax], al; ret; 
0x00000000004cbe86: add byte ptr [rax], al; js 0xcbf01; clc; jmp qword ptr [rdi + 6]; 
0x00000000004ce012: add byte ptr [rax], al; js 0xce094; add byte ptr [rax], al; sbb bl, al; stc; call qword ptr [rcx]; 
0x00000000004d0412: add byte ptr [rax], al; js 0xd03b8; add byte ptr [rax], al; mov al, bl; sti; jmp qword ptr [rsi + 7]; 
0x00000000004d08e6: add byte ptr [rax], al; js 0xd08e3; sti; jmp qword ptr [rsi]; 
0x00000000004d1676: add byte ptr [rax], al; js 0xd16d8; cld; call qword ptr [rbx]; 
0x00000000004aa6de: add byte ptr [rax], al; lahf; fdivr st(7); call qword ptr [rsi]; 
0x00000000004095fe: add byte ptr [rax], al; lea eax, [rsi*8 + 0x14]; ret; 
0x000000000040a457: add byte ptr [rax], al; lea edx, [rax + 0xfa0]; test eax, eax; cmovns eax, edx; add rsp, 8; ret; 
0x000000000041c24b: add byte ptr [rax], al; lea r10, [rip + 0x90fc4]; movzx edi, dl; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x0000000000444ab9: add byte ptr [rax], al; lea r11, [rip + 0x6a90e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048143d: add byte ptr [rax], al; lea r9, [rsp + 0x10]; mov rdi, r12; call rbx; 
0x0000000000481537: add byte ptr [rax], al; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000048aa6a: add byte ptr [rax], al; lea rax, [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x0000000000453f7e: add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x0000000000453f8e: add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x0000000000453f9e: add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x0000000000453fae: add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x0000000000453fbe: add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x0000000000453edd: add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x0000000000453efe: add byte ptr [rax], al; lea rax, [rdi + 1]; ret; 
0x0000000000453f0e: add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x0000000000453f1e: add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x0000000000453f2e: add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x0000000000453f3e: add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x0000000000453f4e: add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x0000000000453e8a: add byte ptr [rax], al; lea rax, [rdi + 7]; ret; 
0x0000000000453f5e: add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x0000000000453f6e: add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x000000000044f319: add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000453eee: add byte ptr [rax], al; lea rax, [rdi]; ret; 
0x00000000004339d5: add byte ptr [rax], al; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x0000000000432cb5: add byte ptr [rax], al; lea rax, [rip + 0x1ce62]; cmove rax, rdx; ret; 
0x0000000000493d8e: add byte ptr [rax], al; lea rax, [rip + 0x245349]; mov qword ptr [rip + 0x24532a], rax; ret; 
0x000000000045c83e: add byte ptr [rax], al; lea rax, [rip + 0x27aaf9]; ret; 
0x000000000049450c: add byte ptr [rax], al; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x00000000004339a5: add byte ptr [rax], al; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x00000000004335b5: add byte ptr [rax], al; lea rax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x0000000000481c15: add byte ptr [rax], al; lea rax, [rip + 0x902]; cmove rax, rdx; ret; 
0x000000000040c85e: add byte ptr [rax], al; lea rax, [rip + 0x954a7]; ret; 
0x000000000040c84e: add byte ptr [rax], al; lea rax, [rip + 0x954ac]; ret; 
0x000000000040c83e: add byte ptr [rax], al; lea rax, [rip + 0x954b0]; ret; 
0x000000000040c81e: add byte ptr [rax], al; lea rax, [rip + 0x954bc]; ret; 
0x000000000040c80e: add byte ptr [rax], al; lea rax, [rip + 0x954c7]; ret; 
0x000000000040c7ee: add byte ptr [rax], al; lea rax, [rip + 0x954d8]; ret; 
0x000000000040c7fe: add byte ptr [rax], al; lea rax, [rip + 0x954e4]; ret; 
0x000000000040c86e: add byte ptr [rax], al; lea rax, [rip + 0x95528]; ret; 
0x000000000040c82e: add byte ptr [rax], al; lea rax, [rip + 0x9556f]; ret; 
0x000000000040bc4e: add byte ptr [rax], al; lea rax, [rip + 0x960b7]; ret; 
0x000000000040bc3e: add byte ptr [rax], al; lea rax, [rip + 0x960bc]; ret; 
0x000000000040bc2e: add byte ptr [rax], al; lea rax, [rip + 0x960c0]; ret; 
0x000000000040bc0e: add byte ptr [rax], al; lea rax, [rip + 0x960cc]; ret; 
0x000000000040bbfe: add byte ptr [rax], al; lea rax, [rip + 0x960d7]; ret; 
0x000000000040bbde: add byte ptr [rax], al; lea rax, [rip + 0x960e8]; ret; 
0x000000000040bbee: add byte ptr [rax], al; lea rax, [rip + 0x960f4]; ret; 
0x000000000040bc5e: add byte ptr [rax], al; lea rax, [rip + 0x96138]; ret; 
0x000000000040bc1e: add byte ptr [rax], al; lea rax, [rip + 0x9617f]; ret; 
0x000000000040b03e: add byte ptr [rax], al; lea rax, [rip + 0x96cc7]; ret; 
0x000000000040b02e: add byte ptr [rax], al; lea rax, [rip + 0x96ccc]; ret; 
0x000000000040b01e: add byte ptr [rax], al; lea rax, [rip + 0x96cd0]; ret; 
0x000000000040affe: add byte ptr [rax], al; lea rax, [rip + 0x96cdc]; ret; 
0x000000000040afee: add byte ptr [rax], al; lea rax, [rip + 0x96ce7]; ret; 
0x000000000040afce: add byte ptr [rax], al; lea rax, [rip + 0x96cf8]; ret; 
0x000000000040afde: add byte ptr [rax], al; lea rax, [rip + 0x96d04]; ret; 
0x000000000040b04e: add byte ptr [rax], al; lea rax, [rip + 0x96d48]; ret; 
0x000000000040b00e: add byte ptr [rax], al; lea rax, [rip + 0x96d8f]; ret; 
0x000000000040a32e: add byte ptr [rax], al; lea rax, [rip + 0x979e3]; ret; 
0x000000000040a31e: add byte ptr [rax], al; lea rax, [rip + 0x979e7]; ret; 
0x000000000040a30e: add byte ptr [rax], al; lea rax, [rip + 0x979ec]; ret; 
0x000000000040a2fe: add byte ptr [rax], al; lea rax, [rip + 0x979f0]; ret; 
0x000000000040a2de: add byte ptr [rax], al; lea rax, [rip + 0x979fc]; ret; 
0x000000000040a2ce: add byte ptr [rax], al; lea rax, [rip + 0x97a07]; ret; 
0x000000000040a2ae: add byte ptr [rax], al; lea rax, [rip + 0x97a18]; ret; 
0x000000000040a2ee: add byte ptr [rax], al; lea rax, [rip + 0x97a1e]; ret; 
0x000000000040a2be: add byte ptr [rax], al; lea rax, [rip + 0x97a24]; ret; 
0x000000000040a29e: add byte ptr [rax], al; lea rax, [rip + 0x97a2f]; ret; 
0x0000000000482f35: add byte ptr [rax], al; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000481be5: add byte ptr [rax], al; lea rax, [rip + 0xdf2]; cmove rax, rdx; ret; 
0x000000000043944d: add byte ptr [rax], al; lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000048b534: add byte ptr [rax], al; lea rcx, [rip + 0x34243]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000047e1ed: add byte ptr [rax], al; lea rcx, [rip + 0x403ae]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000004078e7: add byte ptr [rax], al; lea rcx, [rip + 0x9a338]; mov esi, esi; movsxd rax, dword ptr [rcx + rsi*4]; add rax, rcx; jmp rax; 
0x000000000048be5c: add byte ptr [rax], al; lea rdi, [rip + 0x339b3]; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000041bf65: add byte ptr [rax], al; lea rdi, [rip + 0x91272]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000004276be: add byte ptr [rax], al; lea rdx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000047e9a2: add byte ptr [rax], al; lea rdx, [rip + 0x3fe3d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000045840a: add byte ptr [rax], al; lea rdx, [rip + 0x57c09]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000004325db: add byte ptr [rax], al; lea rdx, [rip + 0x7c22c]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000482fa1: add byte ptr [rax], al; lea rdx, [rip - 0x2bf3a]; cmove rax, rdx; ret; 
0x000000000047aeea: add byte ptr [rax], al; lea rsi, [rip + 0x258dad]; jmp rax; 
0x000000000047e133: add byte ptr [rax], al; lea rsi, [rip + 0x403ac]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000045728e: add byte ptr [rax], al; lea rsi, [rip + 0x588e9]; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x00000000004a888e: add byte ptr [rax], al; leave; add byte ptr [rax], al; add al, ah; fdivr st(7); jmp rax; 
0x00000000004c844f: add byte ptr [rax], al; leave; hlt; jmp qword ptr [rax]; 
0x0000000000400c67: add byte ptr [rax], al; leave; ret; 
0x00000000004a7466: add byte ptr [rax], al; lodsd eax, dword ptr [rsi]; add byte ptr [rax], al; add byte ptr [rdx - 0x6d000028], dl; fdivr st(7); jmp qword ptr [rbp]; 
0x00000000004d159b: add byte ptr [rax], al; mov ah, 0; add byte ptr [rax], ah; pop rdx; cld; jmp qword ptr [rax + 1]; 
0x00000000004c724e: add byte ptr [rax], al; mov ah, 0x10; add byte ptr [rax], al; in al, dx; or esp, esi; call qword ptr [rbx + 1]; 
0x00000000004c844a: add byte ptr [rax], al; mov al, 0x22; add byte ptr [rax], al; add cl, cl; hlt; jmp qword ptr [rax]; 
0x00000000004d0416: add byte ptr [rax], al; mov al, bl; sti; jmp qword ptr [rsi + 7]; 
0x0000000000452e5e: add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x00000000004516ae: add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x0000000000452e6e: add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x00000000004516be: add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000004d1222: add byte ptr [rax], al; mov byte ptr [rax + 0x33480000], dh; cld; call qword ptr [rdi]; 
0x00000000004ab3da: add byte ptr [rax], al; mov byte ptr [rax], 0; add bh, dl; fdivr st(7); call rdi; 
0x000000000046f671: add byte ptr [rax], al; mov byte ptr [rbp - 0x4f8], 0x20; mov ecx, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x00000000004c7e46: add byte ptr [rax], al; mov byte ptr [rbx - 0xc], bh; jmp qword ptr [rbp + 2]; 
0x0000000000421cde: add byte ptr [rax], al; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x00000000004cc122: add byte ptr [rax], al; mov byte ptr [rdi], bl; add byte ptr [rax], bl; scasb al, byte ptr [rdi]; clc; call qword ptr [rbx]; 
0x000000000045394e: add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000045332e: add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x00000000004cf022: add byte ptr [rax], al; mov byte ptr [rsi + 0x1e480000], cl; sti; jmp qword ptr [rbx]; 
0x0000000000483b4e: add byte ptr [rax], al; mov ch, dh; and ch, 0xf; je 0x83b70; add rax, 2; ret; 
0x00000000004d12e2: add byte ptr [rax], al; mov cl, 0; add byte ptr [rax + 0x36], bl; cld; call qword ptr [rbx + 1]; 
0x000000000045396e: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000045334e: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000047c310: add byte ptr [rax], al; mov dword ptr [rbp - 0x4e0], r9d; mov rdx, r14; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000047c48d: add byte ptr [rax], al; mov dword ptr [rbp - 0x4e0], r9d; mov rdx, r14; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000047be1a: add byte ptr [rax], al; mov dword ptr [rbp - 0x4f8], 0x20; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x25826f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000423970: add byte ptr [rax], al; mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000480dcb: add byte ptr [rax], al; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000042852f: add byte ptr [rax], al; mov dword ptr [rdi + 0x24], ebp; mov dword ptr [rdi + 0x10], eax; pop rbx; pop rbp; ret; 
0x00000000004097ce: add byte ptr [rax], al; mov dword ptr [rdi], 0x66; xor eax, eax; ret; 
0x00000000004285ac: add byte ptr [rax], al; mov dword ptr [rip + 0x2ae298], eax; ret; 
0x0000000000401beb: add byte ptr [rax], al; mov dword ptr [rip + 0x2d4511], 1; pop rbx; ret; 
0x0000000000400e50: add byte ptr [rax], al; mov dword ptr [rip + 0x2d7518], ebx; xor eax, eax; pop rbx; ret; 
0x0000000000400cd0: add byte ptr [rax], al; mov dword ptr [rip + 0x2d7698], eax; add rsp, 8; ret; 
0x000000000044499e: add byte ptr [rax], al; mov dx, word ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000045395e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000045333e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000432b4e: add byte ptr [rax], al; mov eax, 0x16; ret; 
0x00000000004598ae: add byte ptr [rax], al; mov eax, 0x1c; syscall; 
0x00000000004598ae: add byte ptr [rax], al; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x598c0; ret; 
0x0000000000458e2e: add byte ptr [rax], al; mov eax, 0x20; syscall; 
0x0000000000458e2e: add byte ptr [rax], al; mov eax, 0x20; syscall; cmp rax, -0xfff; jae 0x58e40; ret; 
0x00000000004979de: add byte ptr [rax], al; mov eax, 0x26; syscall; 
0x00000000004979de: add byte ptr [rax], al; mov eax, 0x26; syscall; cmp rax, -0xfff; jae 0x979f0; ret; 
0x0000000000458c35: add byte ptr [rax], al; mov eax, 0x48; syscall; 
0x000000000048485e: add byte ptr [rax], al; mov eax, 0x66; syscall; 
0x000000000048485e: add byte ptr [rax], al; mov eax, 0x66; syscall; ret; 
0x000000000048487e: add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x000000000048487e: add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x000000000048486e: add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x000000000048486e: add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x000000000048488e: add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x000000000048488e: add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x000000000045987e: add byte ptr [rax], al; mov eax, 0xa; syscall; 
0x000000000045987e: add byte ptr [rax], al; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x59890; ret; 
0x000000000045984e: add byte ptr [rax], al; mov eax, 0xb; syscall; 
0x000000000045984e: add byte ptr [rax], al; mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x59860; ret; 
0x000000000045b070: add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x000000000045b070: add byte ptr [rax], al; mov eax, 0xca; syscall; pop rdx; pop rsi; ret; 
0x000000000045b117: add byte ptr [rax], al; mov eax, 0xca; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x00000000004cd152: add byte ptr [rax], al; mov eax, 0xcf00006f; xor esi, ebx; jmp qword ptr [rbx]; 
0x0000000000458473: add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x000000000041c8ce: add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x0000000000409bce: add byte ptr [rax], al; mov eax, 0xffffff20; ret; 
0x0000000000409dbe: add byte ptr [rax], al; mov eax, 0xffffff21; ret; 
0x0000000000409dae: add byte ptr [rax], al; mov eax, 0xffffff22; ret; 
0x0000000000409d9e: add byte ptr [rax], al; mov eax, 0xffffff23; ret; 
0x0000000000409d8e: add byte ptr [rax], al; mov eax, 0xffffff2a; ret; 
0x0000000000409d7e: add byte ptr [rax], al; mov eax, 0xffffff2b; ret; 
0x0000000000409d6e: add byte ptr [rax], al; mov eax, 0xffffff2c; ret; 
0x0000000000409d5e: add byte ptr [rax], al; mov eax, 0xffffff2d; ret; 
0x0000000000409d4e: add byte ptr [rax], al; mov eax, 0xffffff34; ret; 
0x0000000000409d3e: add byte ptr [rax], al; mov eax, 0xffffff35; ret; 
0x0000000000409d2e: add byte ptr [rax], al; mov eax, 0xffffff36; ret; 
0x0000000000409d1e: add byte ptr [rax], al; mov eax, 0xffffff37; ret; 
0x0000000000409cbe: add byte ptr [rax], al; mov eax, 0xffffff88; ret; 
0x0000000000409c8e: add byte ptr [rax], al; mov eax, 0xffffff89; ret; 
0x0000000000409bee: add byte ptr [rax], al; mov eax, 0xffffff8a; ret; 
0x0000000000409c7e: add byte ptr [rax], al; mov eax, 0xffffff8b; ret; 
0x0000000000409cae: add byte ptr [rax], al; mov eax, 0xffffff8c; ret; 
0x0000000000409c3e: add byte ptr [rax], al; mov eax, 0xffffff8d; ret; 
0x0000000000409cde: add byte ptr [rax], al; mov eax, 0xffffff8e; ret; 
0x0000000000409cee: add byte ptr [rax], al; mov eax, 0xffffff8f; ret; 
0x0000000000409c6e: add byte ptr [rax], al; mov eax, 0xffffff90; ret; 
0x0000000000409cce: add byte ptr [rax], al; mov eax, 0xffffff91; ret; 
0x0000000000409c5e: add byte ptr [rax], al; mov eax, 0xffffff92; ret; 
0x0000000000409c9e: add byte ptr [rax], al; mov eax, 0xffffff93; ret; 
0x0000000000409d0e: add byte ptr [rax], al; mov eax, 0xffffff94; ret; 
0x0000000000409c1e: add byte ptr [rax], al; mov eax, 0xffffff95; ret; 
0x0000000000409c2e: add byte ptr [rax], al; mov eax, 0xffffff96; ret; 
0x0000000000409bde: add byte ptr [rax], al; mov eax, 0xffffff97; ret; 
0x0000000000409c4e: add byte ptr [rax], al; mov eax, 0xffffff98; ret; 
0x0000000000409c0e: add byte ptr [rax], al; mov eax, 0xffffff99; ret; 
0x0000000000409bfe: add byte ptr [rax], al; mov eax, 0xffffff9a; ret; 
0x0000000000409cfe: add byte ptr [rax], al; mov eax, 0xffffff9b; ret; 
0x000000000040247e: add byte ptr [rax], al; mov eax, 0xffffffa1; ret; 
0x00000000004095ee: add byte ptr [rax], al; mov eax, 0xffffffdf; ret; 
0x00000000004015ae: add byte ptr [rax], al; mov eax, 0xffffffea; pop rbx; pop rbp; pop r12; ret; 
0x0000000000400ffe: add byte ptr [rax], al; mov eax, 0xffffffea; ret; 
0x0000000000407866: add byte ptr [rax], al; mov eax, 0xffffffef; pop rbx; pop rbp; pop r12; ret; 
0x0000000000407a1e: add byte ptr [rax], al; mov eax, 0xfffffff3; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046bf3c: add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x0000000000420fe9: add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000047f3a5: add byte ptr [rax], al; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000406a35: add byte ptr [rax], al; mov eax, 1; ret; 
0x0000000000458b4e: add byte ptr [rax], al; mov eax, 1; syscall; 
0x0000000000493b04: add byte ptr [rax], al; mov eax, 2; ret; 
0x00000000004046bd: add byte ptr [rax], al; mov eax, dword ptr [r15 + 0x20]; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x0000000000494240: add byte ptr [rax], al; mov eax, dword ptr [rbx + 0x10]; lea rdx, [rip + 0x30fe0]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004aac4e: add byte ptr [rax], al; mov eax, dword ptr [rcx]; add byte ptr [rax], al; mov eax, dword ptr [rcx]; add byte ptr [rax], al; ret 0; 
0x00000000004aac52: add byte ptr [rax], al; mov eax, dword ptr [rcx]; add byte ptr [rax], al; ret 0; 
0x00000000004a976a: add byte ptr [rax], al; mov eax, dword ptr [rcx]; add byte ptr [rax], al; ret; 
0x0000000000452e9e: add byte ptr [rax], al; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x000000000040793e: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x10]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x00000000004276ce: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000040794e: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x14]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000040795e: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x18]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000040796e: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x1c]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000040797e: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x20]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x00000000004078fe: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x24]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000040792e: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0xc]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000040790e: add byte ptr [rax], al; mov eax, dword ptr [rdi + 4]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000040791e: add byte ptr [rax], al; mov eax, dword ptr [rdi + 8]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000045aede: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x27ea3a]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000458d7e: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x280ae6]; test eax, eax; jne 0x58da0; mov eax, 3; syscall; 
0x00000000004589de: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x280e86]; test eax, eax; jne 0x58a00; xor eax, eax; syscall; 
0x000000000040234e: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x2d3dae]; ret; 
0x0000000000458dc8: add byte ptr [rax], al; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x00000000004079d2: add byte ptr [rax], al; mov eax, dword ptr [rsp + 4]; jne 0x79df; add rsp, 0x18; ret; 
0x0000000000401d99: add byte ptr [rax], al; mov eax, ebx; jne 0x1ee3; add rsp, 0x20; pop rbx; ret; 
0x0000000000491a31: add byte ptr [rax], al; mov eax, ebx; jne 0x91a55; add rsp, 0x110; pop rbx; ret; 
0x00000000004572e6: add byte ptr [rax], al; mov eax, ecx; shr eax, 0xe; and eax, 0x3fc00; pop rbx; ret; 
0x000000000041c899: add byte ptr [rax], al; mov eax, ecx; syscall; 
0x000000000048daaf: add byte ptr [rax], al; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000477f32: add byte ptr [rax], al; mov eax, edx; pop rbx; ret; 
0x00000000004756d1: add byte ptr [rax], al; mov eax, edx; ret; 
0x000000000041e750: add byte ptr [rax], al; mov eax, esi; jne 0x1e75f; add rsp, 0xd0; pop rbx; ret; 
0x000000000041c8e6: add byte ptr [rax], al; mov eax, r8d; jne 0x1c90c; add rsp, 0x118; ret; 
0x00000000004b9b22: add byte ptr [rax], al; mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x00000000004d1cda: add byte ptr [rax], al; mov ebx, 0xa4c00000; cld; jmp qword ptr [rsi]; 
0x00000000004b9872: add byte ptr [rax], al; mov ecx, 0xbc00000d; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x00000000004ca1e2: add byte ptr [rax], al; mov ecx, ds; cmc; call qword ptr [rdi + 1]; 
0x000000000045398e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000045336e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000045337e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000004a61ca: add byte ptr [rax], al; mov edi, 0xbfffffd8; fdivr st(7); call rdx; 
0x000000000049c2ac: add byte ptr [rax], al; mov edi, 1; call rax; 
0x0000000000458c6f: add byte ptr [rax], al; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x0000000000458daa: add byte ptr [rax], al; mov edi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x00000000004581ce: add byte ptr [rax], al; mov edi, edx; mov eax, esi; syscall; 
0x000000000047fa66: add byte ptr [rax], al; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000041002d: add byte ptr [rax], al; mov edx, 0x3c; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000045b06b: add byte ptr [rax], al; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000404672: add byte ptr [rax], al; mov edx, dword ptr [r15 + 0x10]; movsxd rdx, dword ptr [r14 + rdx*4]; add rdx, r14; jmp rdx; 
0x00000000004448be: add byte ptr [rax], al; mov edx, dword ptr [rsi + 1]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000044484e: add byte ptr [rax], al; mov edx, dword ptr [rsi + 2]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004447de: add byte ptr [rax], al; mov edx, dword ptr [rsi + 3]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000044420e: add byte ptr [rax], al; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ee4e: add byte ptr [rax], al; mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043f04e: add byte ptr [rax], al; mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043f24e: add byte ptr [rax], al; mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000044492e: add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000004588e0: add byte ptr [rax], al; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000045b126: add byte ptr [rax], al; mov esi, 0x80; syscall; 
0x000000000048a9c3: add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000045b066: add byte ptr [rax], al; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x00000000004d1fda: add byte ptr [rax], al; mov esi, 0xb0100000; cld; call qword ptr [rbx]; 
0x00000000004a6252: add byte ptr [rax], al; mov esi, 0xbeffffd8; fdivr st(7); call rax; 
0x0000000000480e0a: add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000423220: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000425aff: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004bd516: add byte ptr [rax], al; mov esp, 0xbe000005; add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x00000000004caa56: add byte ptr [rax], al; mov esp, 0xc4000048; adc al, 0xf6; call qword ptr [rdx]; 
0x000000000045b4ae: add byte ptr [rax], al; mov qword ptr [rax + 0x20], rsi; ret; 
0x0000000000480ec7: add byte ptr [rax], al; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x00000000004942e8: add byte ptr [rax], al; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000406bfc: add byte ptr [rax], al; mov qword ptr [rbp + 0x18], rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049027a: add byte ptr [rax], al; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000491010: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000497842: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000497916: add byte ptr [rax], al; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000042594e: add byte ptr [rax], al; mov qword ptr [rbx + 0x50], 0; pop rbx; ret; 
0x0000000000490272: add byte ptr [rax], al; mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000045e850: add byte ptr [rax], al; mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004268f2: add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000048aa74: add byte ptr [rax], al; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000049c5ae: add byte ptr [rax], al; mov qword ptr [rdi + 0x98], rsi; ret; 
0x000000000042690e: add byte ptr [rax], al; mov qword ptr [rdi + 0xa0], -1; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000004268f9: add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000493918: add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x0000000000421e32: add byte ptr [rax], al; mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x0000000000406bd9: add byte ptr [rax], al; mov qword ptr [rdx + 0xd0], rcx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040372e: add byte ptr [rax], al; mov qword ptr [rdx + 8], rax; call 0x2f470; mov rax, rbx; pop rbx; ret; 
0x000000000048e77e: add byte ptr [rax], al; mov qword ptr [rip + 0x24ac89], rax; add rsp, 8; ret; 
0x000000000042856c: add byte ptr [rax], al; mov qword ptr [rip + 0x2ae2b3], rax; ret; 
0x000000000042854c: add byte ptr [rax], al; mov qword ptr [rip + 0x2ae2cb], rax; ret; 
0x0000000000427af9: add byte ptr [rax], al; mov qword ptr [rip + 0x2b1272], 0; ret; 
0x0000000000427a8f: add byte ptr [rax], al; mov qword ptr [rip + 0x2b12e0], rdx; add dword ptr [rip + 0x2b12d5], 1; ret; 
0x00000000004105d0: add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000487c8e: add byte ptr [rax], al; mov qword ptr [rsi], -1; xor eax, eax; ret; 
0x000000000048d8de: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x8d210; add rsp, 0xd8; ret; 
0x000000000041fb2c: add byte ptr [rax], al; mov qword ptr [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000499d5e: add byte ptr [rax], al; mov qword ptr [rsp], rax; call 0x9a0e0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000429afe: add byte ptr [rax], al; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000046a38e: add byte ptr [rax], al; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000046a551: add byte ptr [rax], al; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000048ba36: add byte ptr [rax], al; mov r11, qword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x000000000043e4be: add byte ptr [rax], al; mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000047aed2: add byte ptr [rax], al; mov r11d, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x258dad]; jmp rax; 
0x00000000004795e5: add byte ptr [rax], al; mov r13, qword ptr [rbp - 0x8f8]; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000047bacb: add byte ptr [rax], al; mov r8d, 1; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000046a2ee: add byte ptr [rax], al; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x000000000046a30e: add byte ptr [rax], al; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000046a32e: add byte ptr [rax], al; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x000000000041079e: add byte ptr [rax], al; mov rax, -0x40; add rax, qword ptr fs:[0]; ret; 
0x00000000004587b6: add byte ptr [rax], al; mov rax, -0x40; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004597ce: add byte ptr [rax], al; mov rax, -0x40; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000484c56: add byte ptr [rax], al; mov rax, -0x40; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000004756be: add byte ptr [rax], al; mov rax, -0x40; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x000000000048f14e: add byte ptr [rax], al; mov rax, -0x40; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x000000000046a2ce: add byte ptr [rax], al; mov rax, -0x58; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000426c5e: add byte ptr [rax], al; mov rax, -1; ret; 
0x00000000004094be: add byte ptr [rax], al; mov rax, 0x6d2ca0; pop rbx; ret; 
0x000000000040922e: add byte ptr [rax], al; mov rax, 0x6d2ca0; ret; 
0x00000000004094ce: add byte ptr [rax], al; mov rax, 0x6d2ce0; pop rbx; ret; 
0x00000000004094de: add byte ptr [rax], al; mov rax, 0x6d2d20; pop rbx; ret; 
0x000000000040917e: add byte ptr [rax], al; mov rax, 0x6d2d20; ret; 
0x000000000040950e: add byte ptr [rax], al; mov rax, 0x6d2d60; pop rbx; ret; 
0x00000000004094fe: add byte ptr [rax], al; mov rax, 0x6d2da0; pop rbx; ret; 
0x00000000004091c7: add byte ptr [rax], al; mov rax, 0x6d2da0; ret; 
0x00000000004090d8: add byte ptr [rax], al; mov rax, 0x6d2de0; ret; 
0x0000000000409144: add byte ptr [rax], al; mov rax, 0x6d2e20; ret; 
0x0000000000409170: add byte ptr [rax], al; mov rax, 0x6d2e60; ret; 
0x000000000040921e: add byte ptr [rax], al; mov rax, 0x6d2ea0; ret; 
0x0000000000409276: add byte ptr [rax], al; mov rax, 0x6d2ee0; ret; 
0x0000000000409115: add byte ptr [rax], al; mov rax, 0x6d2f60; ret; 
0x00000000004091ae: add byte ptr [rax], al; mov rax, 0x6d2fa0; ret; 
0x00000000004094ae: add byte ptr [rax], al; mov rax, 0x6d52c0; pop rbx; ret; 
0x00000000004091e2: add byte ptr [rax], al; mov rax, 0x6d52c0; ret; 
0x00000000004094ee: add byte ptr [rax], al; mov rax, 0x6d5300; pop rbx; ret; 
0x000000000040919e: add byte ptr [rax], al; mov rax, 0x6d5300; ret; 
0x000000000040918e: add byte ptr [rax], al; mov rax, 0x6d5340; ret; 
0x000000000040923e: add byte ptr [rax], al; mov rax, 0x6d5380; ret; 
0x000000000040924e: add byte ptr [rax], al; mov rax, 0x6d53c0; ret; 
0x000000000040949b: add byte ptr [rax], al; mov rax, 0x6d5400; pop rbx; ret; 
0x000000000040925e: add byte ptr [rax], al; mov rax, 0x6d5400; ret; 
0x000000000040118e: add byte ptr [rax], al; mov rax, 0x6d6130; mov rax, qword ptr [rax]; mov eax, dword ptr [rax]; ret; 
0x000000000046a48e: add byte ptr [rax], al; mov rax, 0xf; syscall; 
0x0000000000483b8e: add byte ptr [rax], al; mov rax, 1; ret; 
0x0000000000483b9e: add byte ptr [rax], al; mov rax, 2; ret; 
0x0000000000483bae: add byte ptr [rax], al; mov rax, 3; ret; 
0x0000000000483bbe: add byte ptr [rax], al; mov rax, 4; ret; 
0x0000000000483bce: add byte ptr [rax], al; mov rax, 5; ret; 
0x0000000000483bde: add byte ptr [rax], al; mov rax, 6; ret; 
0x0000000000483bee: add byte ptr [rax], al; mov rax, 7; ret; 
0x000000000048c043: add byte ptr [rax], al; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000420b3e: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000490ece: add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; ret; 
0x0000000000490ede: add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x000000000048c6a2: add byte ptr [rax], al; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x000000000048b85e: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000048b71b: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x0000000000494276: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x18]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000452dee: add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000045163e: add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000040961e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x10]; test rax, rax; je 0x962e; mov rdi, rsi; jmp rax; 
0x000000000040963e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x18]; test rax, rax; je 0x964d; mov edi, esi; jmp rax; 
0x000000000042839e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000004812ce: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000427a1e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049c52e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000049c5be: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000049c61e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000049c60e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000049c5ce: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000042855e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2ae2e6], 1; mov qword ptr [rip + 0x2ae2b3], rax; ret; 
0x000000000042853e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2ae306], 1; mov qword ptr [rip + 0x2ae2cb], rax; ret; 
0x00000000004285be: add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2b082a], eax; ret; 
0x000000000042843e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2ae43d], rax; ret; 
0x000000000048e81e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x247911]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x24abd7]; mov qword ptr [rsi], rax; ret; 
0x0000000000466cce: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x272201]; ret; 
0x000000000045e7fe: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x27b191]; ret; 
0x00000000004279fe: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2ae759]; ret; 
0x000000000049a2fe: add byte ptr [rax], al; mov rax, qword ptr [rsi + 0xa8]; ret; 
0x000000000049a063: add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000499d67: add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000429c6d: add byte ptr [rax], al; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000483f71: add byte ptr [rax], al; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000482dae: add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x00000000004230c4: add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000049c728: add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; ret; 
0x00000000004978d4: add byte ptr [rax], al; mov rax, rbx; jne 0x978ec; add rsp, 0x40; pop rbx; ret; 
0x00000000004979bb: add byte ptr [rax], al; mov rax, rbx; jne 0x979d4; add rsp, 0x50; pop rbx; ret; 
0x0000000000423a42: add byte ptr [rax], al; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000427a2e: add byte ptr [rax], al; mov rax, rdi; ret; 
0x000000000042d0de: add byte ptr [rax], al; mov rax, rsi; ret; 
0x000000000048eeaa: add byte ptr [rax], al; mov rbx, rsp; mov rsi, rbx; syscall; 
0x000000000043e87e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ea5e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ec3e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ee2e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f02e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f22e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e69e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004539de: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000004533ae: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000004533be: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000045612f: add byte ptr [rax], al; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000041d6b1: add byte ptr [rax], al; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x00000000004a145e: add byte ptr [rax], al; mov rdi, r13; call rax; 
0x000000000046ff0c: add byte ptr [rax], al; mov rdi, r14; mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x00000000004a0b6e: add byte ptr [rax], al; mov rdi, r15; call rax; 
0x0000000000400c5a: add byte ptr [rax], al; mov rdi, rax; call 0x1f000; mov eax, 0; leave; ret; 
0x000000000042043d: add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000047e66f: add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x00000000004675e4: add byte ptr [rax], al; mov rdi, rbx; mov dword ptr [rbp - 0x48], r8d; call 0x5c8b0; mov rdi, r14; call rbx; 
0x0000000000420b33: add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000458e16: add byte ptr [rax], al; mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000458a4e: add byte ptr [rax], al; mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000494266: add byte ptr [rax], al; mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x00000000004942e1: add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000040ff30: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x2c8ecf]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004446fe: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044468e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044461e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044453e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004444ce: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044445e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000443f0e: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000443d7e: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000443cee: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043e4de: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000443f8e: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000044476e: add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000046dbd1: add byte ptr [rax], al; mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000047991e: add byte ptr [rax], al; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000046d62b: add byte ptr [rax], al; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000042335d: add byte ptr [rax], al; mov rdx, r8; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000421abe: add byte ptr [rax], al; mov rdx, r9; mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x000000000047f919: add byte ptr [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000046dda6: add byte ptr [rax], al; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000046d476: add byte ptr [rax], al; mov rsi, qword ptr [r15 + 0x18]; mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000459a8b: add byte ptr [rax], al; mov rsi, qword ptr [rbx]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000042f66e: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x68]; call rax; 
0x00000000004a0b66: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x98]; mov rdi, r15; call rax; 
0x0000000000422e99: add byte ptr [rax], al; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000047f78b: add byte ptr [rax], al; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000043292e: add byte ptr [rax], al; mov rsi, rbp; mov rdi, rax; call rcx; 
0x0000000000421866: add byte ptr [rax], al; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000046a549: add byte ptr [rax], al; mov rsi, rcx; mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000045885f: add byte ptr [rax], al; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x00000000004d17e6: add byte ptr [rax], al; mov sil, 0; add byte ptr [rdx - 4], ah; jmp rsp; 
0x00000000004a83ee: add byte ptr [rax], al; mov word ptr [rcx], es; add byte ptr [rax], al; mov word ptr [rcx], es; add byte ptr [rax], al; ret; 
0x00000000004a83f2: add byte ptr [rax], al; mov word ptr [rcx], es; add byte ptr [rax], al; ret; 
0x00000000004aa97e: add byte ptr [rax], al; movabs byte ptr [0xeffffd80e000001], al; fdivr st(7); jmp qword ptr [rdx + 0xe000001]; 
0x00000000004ab1ba: add byte ptr [rax], al; movabs dword ptr [0xfffffd80f000001], eax; fdivr st(7); jmp qword ptr [rbx + 0xf000001]; 
0x00000000004ab9b2: add byte ptr [rax], al; movabs eax, dword ptr [0x8ffffd808000001]; fdivr st(7); jmp qword ptr [rcx + 0x8000001]; 
0x000000000041c87a: add byte ptr [rax], al; movaps xmmword ptr [rsp + 0xd0], xmm0; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000041c882: add byte ptr [rax], al; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000041c88a: add byte ptr [rax], al; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040754d: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rbx + 0xc0]; movups xmmword ptr [rax + 0xc0], xmm0; pop rbx; ret; 
0x000000000045345e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000004534de: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000045349e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000004534be: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004535de: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000045357e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000045359e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004535be: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000453aae: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000045342e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000004c763e: add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; adc al, 0; add byte ptr [rax - 0xc], ch; call qword ptr [rdi]; 
0x00000000004c66aa: add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; mov dl, 0xf3; jmp qword ptr [rbx]; 
0x00000000004c9b8a: add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; ret 0xfff5; 
0x00000000004c8c3e: add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; sub al, byte ptr [rax]; add ah, cl; cmc; call qword ptr [rdi]; 
0x000000000049036e: add byte ptr [rax], al; movsx eax, dl; sub eax, ecx; ret; 
0x000000000049a3b5: add byte ptr [rax], al; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x000000000047e824: add byte ptr [rax], al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000469acd: add byte ptr [rax], al; movsxd rdi, dword ptr [r11 + rsi*4]; add rdi, r11; jmp rdi; 
0x00000000004695ce: add byte ptr [rax], al; movsxd rsi, dword ptr [r8 + r9*4]; add rsi, r8; jmp rsi; 
0x0000000000456065: add byte ptr [rax], al; movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000407555: add byte ptr [rax], al; movups xmmword ptr [rax + 0xc0], xmm0; pop rbx; ret; 
0x000000000049b403: add byte ptr [rax], al; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x00000000004248ae: add byte ptr [rax], al; movzx eax, bpl; pop rbx; pop rbp; pop r12; ret; 
0x000000000047bad1: add byte ptr [rax], al; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004551ee: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000045524e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000045523e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000045522e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000045521e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000045520e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x00000000004551fe: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x00000000004555a8: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x55725; xor eax, eax; ret; 
0x000000000043c2be: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000043c071: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000043b19e: add byte ptr [rax], al; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000425abe: add byte ptr [rax], al; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000421f9e: add byte ptr [rax], al; movzx eax, byte ptr [rdx]; ret; 
0x000000000045731e: add byte ptr [rax], al; movzx eax, cl; pop rbx; ret; 
0x000000000045febe: add byte ptr [rax], al; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000434e1e: add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000047c08f: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x258004]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047c03c: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x258057]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047bb0f: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x258084]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047beae: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2581e5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047be69: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x25822a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047be24: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x25826f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047bdd5: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2582be]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000401cce: add byte ptr [rax], al; movzx edi, dil; mov dword ptr [rip + 0x2d442e], edi; ret; 
0x000000000044439e: add byte ptr [rax], al; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000444a7e: add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000044431e: add byte ptr [rax], al; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000044752e: add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000425faf: add byte ptr [rax], al; movzx esi, byte ptr [r14]; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x000000000040208e: add byte ptr [rax], al; movzx esi, sil; mov dword ptr [rip + 0x2d4086], esi; ret; 
0x000000000040207e: add byte ptr [rax], al; movzx esi, sil; mov dword ptr [rip + 0x2d4092], esi; ret; 
0x000000000040206e: add byte ptr [rax], al; movzx esi, sil; mov dword ptr [rip + 0x2d4096], esi; ret; 
0x0000000000401f2e: add byte ptr [rax], al; movzx esi, sil; mov dword ptr [rip + 0x2d41da], esi; ret; 
0x0000000000401f1e: add byte ptr [rax], al; movzx esi, sil; mov dword ptr [rip + 0x2d41ee], esi; ret; 
0x0000000000401f0e: add byte ptr [rax], al; movzx esi, sil; mov dword ptr [rip + 0x2d420a], esi; ret; 
0x00000000004598a9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x0000000000484859: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x0000000000484859: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; ret; 
0x0000000000459879: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000040a916: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xffffff94; ret; 
0x0000000000410799: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov rax, -0x40; add rax, qword ptr fs:[0]; ret; 
0x000000000048c091: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000040c7db: add byte ptr [rax], al; nop dword ptr [rax]; lea rax, [rip + 0x954ef]; ret; 
0x000000000040bbcb: add byte ptr [rax], al; nop dword ptr [rax]; lea rax, [rip + 0x960ff]; ret; 
0x000000000040afbb: add byte ptr [rax], al; nop dword ptr [rax]; lea rax, [rip + 0x96d0f]; ret; 
0x000000000040a297: add byte ptr [rax], al; nop dword ptr [rax]; lea rax, [rip + 0x97a2f]; ret; 
0x000000000045af5a: add byte ptr [rax], al; nop dword ptr [rax]; mov r10, rcx; mov eax, 0x19; syscall; 
0x00000000004283ba: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2ae475], rax; ret; 
0x0000000000410032: add byte ptr [rax], al; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000409bc5: add byte ptr [rax], al; nop word ptr [rax + rax]; mov eax, 0xffffff20; ret; 
0x0000000000402344: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov eax, dword ptr [rip + 0x2d3dae]; ret; 
0x0000000000444204: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000046a304: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000046a324: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x000000000046a484: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x0000000000444394: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000444314: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000004d21ae: add byte ptr [rax], al; nop; mov ch, 0xfc; jmp qword ptr [rbx]; 
0x000000000049472c: add byte ptr [rax], al; nop; mov eax, 0x27; syscall; 
0x000000000049472c: add byte ptr [rax], al; nop; mov eax, 0x27; syscall; ret; 
0x000000000045afbc: add byte ptr [rax], al; nop; mov eax, 0x63; syscall; 
0x00000000004840fc: add byte ptr [rax], al; nop; mov eax, 0xc9; syscall; 
0x00000000004840fc: add byte ptr [rax], al; nop; mov eax, 0xc9; syscall; ret; 
0x000000000045af8c: add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0x9d; syscall; 
0x000000000046a6ac: add byte ptr [rax], al; nop; mov r10d, 8; mov eax, 0xe; syscall; 
0x00000000004cbd2a: add byte ptr [rax], al; nop; pop rbx; add byte ptr [rax], al; add byte ptr [rbx], 0xf8; call qword ptr [rax]; 
0x00000000004cdfbe: add byte ptr [rax], al; nop; ret 0xfff9; 
0x00000000004ce05e: add byte ptr [rax], al; nop; ret; 
0x00000000004ccc76: add byte ptr [rax], al; or ah, ah; clc; call qword ptr [rsi]; 
0x00000000004c9c56: add byte ptr [rax], al; or ah, al; cmc; jmp qword ptr [rsi]; 
0x00000000004d2546: add byte ptr [rax], al; or ah, cl; cld; jmp qword ptr [rax]; 
0x00000000004c94c2: add byte ptr [rax], al; or al, 0x99; cmc; call qword ptr [rdi + 2]; 
0x00000000004ce002: add byte ptr [rax], al; or al, 0xc3; stc; call qword ptr [rcx]; 
0x00000000004c66a6: add byte ptr [rax], al; or al, 5; add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; mov dl, 0xf3; jmp qword ptr [rbx]; 
0x00000000004c7102: add byte ptr [rax], al; or al, 6; hlt; call qword ptr [rdi]; 
0x00000000004c7172: add byte ptr [rax], al; or al, 7; hlt; call qword ptr [rdi]; 
0x00000000004c87b6: add byte ptr [rax], al; or byte ptr [rax - 0xb], dl; jmp qword ptr [rax]; 
0x00000000004cf3c6: add byte ptr [rax], al; or byte ptr [rax], ch; sti; jmp qword ptr [rbx]; 
0x00000000004c74a2: add byte ptr [rax], al; or byte ptr [rbx], dl; add byte ptr [rax], al; cmp byte ptr [rcx], bl; hlt; jmp qword ptr [rcx + 2]; 
0x00000000004cee06: add byte ptr [rax], al; or byte ptr [rbx], dl; sti; jmp qword ptr [rdi]; 
0x00000000004939e7: add byte ptr [rax], al; or byte ptr [rcx - 0x77], 0; mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x000000000048af3e: add byte ptr [rax], al; or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x000000000040913d: add byte ptr [rax], al; or byte ptr [rdi], 0x85; sub al, byte ptr [rcx]; add byte ptr [rax], al; mov rax, 0x6d2e20; ret; 
0x00000000004cf776: add byte ptr [rax], al; or byte ptr [rdi], bh; sti; jmp qword ptr [rax]; 
0x00000000004cbd56: add byte ptr [rax], al; or byte ptr [rdi], bl; clc; call qword ptr [rax]; 
0x00000000004cac1a: add byte ptr [rax], al; or byte ptr [rdx], 0; shr byte ptr [rdx], 0xf6; jmp rsi; 
0x00000000004221ae: add byte ptr [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000048f134: add byte ptr [rax], al; or dword ptr [rip + 0x2480eb], 1; pop rbx; ret; 
0x00000000004a82f2: add byte ptr [rax], al; or dword ptr es:[rax], eax; add byte ptr [rcx + 0x21000001], dl; fdivr st(7); jmp qword ptr [rcx]; 
0x00000000004a40be: add byte ptr [rax], al; or eax, 0x84000000; fdivr st(7); dec dword ptr [rip - 0x7c000000]; fdivr st(7); call qword ptr [rbx]; 
0x00000000004ab352: add byte ptr [rax], al; or eax, 0xe4000001; fdivr st(7); jmp rsp; 
0x000000000043a4c9: add byte ptr [rax], al; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004c86f2: add byte ptr [rax], al; pop rax; and eax, 0x4d480000; cmc; call rsp; 
0x00000000004d12e6: add byte ptr [rax], al; pop rax; cld; call qword ptr [rbx + 1]; 
0x00000000004cba36: add byte ptr [rax], al; pop rax; jg 0xcba31; jmp qword ptr [rbx]; 
0x00000000004c8b36: add byte ptr [rax], al; pop rax; movsxd rsi, ebp; jmp qword ptr [rcx + 1]; 
0x00000000004d23f2: add byte ptr [rax], al; pop rax; ret 0; 
0x00000000004005ad: add byte ptr [rax], al; pop rax; ret; 
0x00000000004cc176: add byte ptr [rax], al; pop rax; scasd eax, dword ptr [rdi]; clc; call qword ptr [rbx]; 
0x00000000004a4e2e: add byte ptr [rax], al; pop rbp; fdivr st(7); jmp qword ptr [rcx]; 
0x000000000045993e: add byte ptr [rax], al; pop rbp; pop r12; jmp rax; 
0x0000000000400ab6: add byte ptr [rax], al; pop rbp; ret; 
0x00000000004ab34e: add byte ptr [rax], al; pop rbx; add byte ptr [rax], al; add byte ptr [rip - 0x1bffffff], cl; fdivr st(7); jmp rsp; 
0x0000000000401266: add byte ptr [rax], al; pop rbx; mov eax, 0xffffffea; pop rbp; pop r12; ret; 
0x000000000047567b: add byte ptr [rax], al; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x000000000041f114: add byte ptr [rax], al; pop rbx; mov rax, rsi; pop rbp; pop r12; ret; 
0x0000000000466e2a: add byte ptr [rax], al; pop rbx; pop r12; ret; 
0x0000000000423573: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000426535: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000041e8ea: add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000401bce: add byte ptr [rax], al; pop rbx; ret; 
0x00000000004cc0e6: add byte ptr [rax], al; pop rdi; add byte ptr [rax], al; adc al, 0xad; clc; jmp rbx; 
0x00000000004c7362: add byte ptr [rax], al; pop rsp; or al, 0xf4; jmp qword ptr [rax + 9]; 
0x00000000004ab1be: add byte ptr [rax], al; psubusb mm7, mm7; dec dword ptr [rdi]; fdivr st(7); jmp qword ptr [rbx + 0xf000001]; 
0x00000000004ab1ca: add byte ptr [rax], al; psubusb mm7, mm7; jmp qword ptr [rbx + 0xf000001]; 
0x00000000004ca302: add byte ptr [rax], al; push -0x27ffffbf; fdivrp st(5); call qword ptr [rsi]; 
0x00000000004a8846: add byte ptr [rax], al; push -0x36000000; add byte ptr [rax], al; add cl, ah; fdivr st(7); jmp rcx; 
0x00000000004ccb9b: add byte ptr [rax], al; push 0; add byte ptr [rax - 0x1d], ah; clc; call qword ptr [rdx]; 
0x00000000004ccd02: add byte ptr [rax], al; push 0x1800006b; out 0xf8, al; call qword ptr [rdx]; 
0x00000000004ce302: add byte ptr [rax], al; push 0x68000081; fdivp st(1); call qword ptr [rax]; 
0x00000000004d0802: add byte ptr [rax], al; push 0x680000a6; idiv bl; jmp qword ptr [rcx]; 
0x00000000004cee02: add byte ptr [rax], al; push 0x800008c; adc edi, ebx; jmp qword ptr [rdi]; 
0x00000000004ce2ea: add byte ptr [rax], al; push rax; add dword ptr [rax], 0xf9de6000; call qword ptr [rbx]; 
0x00000000004cf9ea: add byte ptr [rax], al; push rax; cwde; add byte ptr [rax], al; sti; jmp qword ptr [rcx]; 
0x00000000004cccea: add byte ptr [rax], al; push rax; imul eax, dword ptr [rax], 0; and dh, ah; clc; call qword ptr [rax]; 
0x00000000004cdfea: add byte ptr [rax], al; push rax; jle 0xcdfef; add byte ptr [rax], al; ret; 
0x00000000004d15ea: add byte ptr [rax], al; push rax; mov ah, 0; add byte ptr [rax + 0x5b], dh; cld; jmp qword ptr [rbp]; 
0x00000000004d1aea: add byte ptr [rax], al; push rax; mov ecx, 0x88300000; cld; jmp qword ptr [rcx + 9]; 
0x00000000004cf0ea: add byte ptr [rax], al; push rax; pop qword ptr [rax]; add byte ptr [rax + 0x20], dh; sti; jmp qword ptr [rdx]; 
0x00000000004d1a6e: add byte ptr [rax], al; push rax; test ah, bh; call qword ptr [rdx]; 
0x00000000004c888a: add byte ptr [rax], al; push rdx; cmc; call qword ptr [rdx]; 
0x00000000004cc272: add byte ptr [rax], al; pushfq; mov ah, 0xf8; call qword ptr [rbp + 1]; 
0x00000000004c9422: add byte ptr [rax], al; pushfq; xchg eax, ebp; cmc; call qword ptr [rax]; 
0x00000000004a663e: add byte ptr [rax], al; rcr al, 0xff; call rcx; 
0x00000000004a650a: add byte ptr [rax], al; ret 0; 
0x00000000004b9c7e: add byte ptr [rax], al; ret 0x10; 
0x00000000004bb94e: add byte ptr [rax], al; ret 0x1d4; 
0x00000000004bc0e6: add byte ptr [rax], al; ret 0x1d5; 
0x00000000004ba956: add byte ptr [rax], al; ret 0x24; 
0x00000000004bae46: add byte ptr [rax], al; ret 0x33; 
0x00000000004b947e: add byte ptr [rax], al; ret 0xa; 
0x00000000004a9942: add byte ptr [rax], al; ret 0xc; 
0x00000000004b987e: add byte ptr [rax], al; ret 0xd; 
0x00000000004d0486: add byte ptr [rax], al; ret 0xf300; 
0x00000000004aaf9e: add byte ptr [rax], al; ret 0xffd8; 
0x00000000004a4b2e: add byte ptr [rax], al; ret 1; 
0x00000000004bcf22: add byte ptr [rax], al; ret 2; 
0x00000000004bd122: add byte ptr [rax], al; ret 3; 
0x00000000004bd322: add byte ptr [rax], al; ret 4; 
0x00000000004bd522: add byte ptr [rax], al; ret 5; 
0x00000000004b9026: add byte ptr [rax], al; ret 6; 
0x00000000004bd922: add byte ptr [rax], al; ret 7; 
0x00000000004bdb22: add byte ptr [rax], al; ret 8; 
0x00000000004bdd22: add byte ptr [rax], al; ret 9; 
0x00000000004016b0: add byte ptr [rax], al; ret; 
0x00000000004a884a: add byte ptr [rax], al; retf 0; add cl, ah; fdivr st(7); jmp rcx; 
0x00000000004bd31e: add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x00000000004aad36: add byte ptr [rax], al; rol byte ptr [rax], 0; add bl, dl; fdivr st(7); call rbx; 
0x00000000004a624e: add byte ptr [rax], al; rol byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xbeffffd8; fdivr st(7); call rax; 
0x00000000004a61c6: add byte ptr [rax], al; rol byte ptr [rax], cl; add byte ptr [rax], al; mov edi, 0xbfffffd8; fdivr st(7); call rdx; 
0x00000000004cc53e: add byte ptr [rax], al; rol cl, 0xf8; jmp qword ptr [rcx]; 
0x00000000004b9726: add byte ptr [rax], al; ror byte ptr [rax + rax], 0; ret; 
0x00000000004091db: add byte ptr [rax], al; ror byte ptr [rdi], 0x85; mov word ptr [rax], es; add byte ptr [rax], al; mov rax, 0x6d52c0; ret; 
0x00000000004c9f1a: add byte ptr [rax], al; sal ebp, 1; jmp qword ptr [rdi + 2]; 
0x00000000004d1a6a: add byte ptr [rax], al; sar byte ptr [rax - 0x7bb00000], 1; cld; call qword ptr [rdx]; 
0x00000000004ce05a: add byte ptr [rax], al; sar byte ptr [rsi], 0; nop; ret; 
0x000000000049c595: add byte ptr [rax], al; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000482a74: add byte ptr [rax], al; sar rdx, cl; test rdx, rdx; je 0x82b20; bsf rax, rdx; ret; 
0x00000000004ce06e: add byte ptr [rax], al; sbb al, 0; add byte ptr [rax], al; fdivr dword ptr [rsi]; add al, bl; ret; 
0x00000000004d121e: add byte ptr [rax], al; sbb al, 0; add byte ptr [rax], al; mov byte ptr [rax + 0x33480000], dh; cld; call qword ptr [rdi]; 
0x00000000004aac42: add byte ptr [rax], al; sbb al, 0; add byte ptr [rax], al; ret 0; 
0x00000000004aac3e: add byte ptr [rax], al; sbb al, 0; add byte ptr [rax], al; sbb al, 0; add byte ptr [rax], al; ret 0; 
0x00000000004ca1b6: add byte ptr [rax], al; sbb al, 0x40; add byte ptr [rax], al; xor al, 0xd9; cmc; call qword ptr [rdi]; 
0x00000000004cd6e2: add byte ptr [rax], al; sbb al, 0x41; stc; call rcx; 
0x00000000004cc022: add byte ptr [rax], al; sbb al, 0xa4; clc; call rsp; 
0x00000000004c7282: add byte ptr [rax], al; sbb al, 0xb; hlt; call qword ptr [rax]; 
0x00000000004ca402: add byte ptr [rax], al; sbb al, 0xe0; cmc; call qword ptr [rbx]; 
0x00000000004ab9ae: add byte ptr [rax], al; sbb al, 1; add byte ptr [rax], al; movabs eax, dword ptr [0x8ffffd808000001]; fdivr st(7); jmp qword ptr [rcx + 0x8000001]; 
0x00000000004a7566: add byte ptr [rax], al; sbb al, byte ptr [rdi]; add byte ptr [rax], al; ret; 
0x00000000004d02f6: add byte ptr [rax], al; sbb bh, cl; sti; jmp qword ptr [rsi + 5]; 
0x00000000004ce016: add byte ptr [rax], al; sbb bl, al; stc; call qword ptr [rcx]; 
0x00000000004ca17e: add byte ptr [rax], al; sbb byte ptr [rax], al; add byte ptr [rax], al; call 0xffffffffb80ca1c8; fdiv st(5); jmp qword ptr [rax]; 
0x00000000004cf01e: add byte ptr [rax], al; sbb byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rsi + 0x1e480000], cl; sti; jmp qword ptr [rbx]; 
0x00000000004c71b2: add byte ptr [rax], al; sbb byte ptr [rax], dl; add byte ptr [rax], al; cmp byte ptr [rax], cl; hlt; jmp qword ptr [rsi + 1]; 
0x00000000004d04b2: add byte ptr [rax], al; sbb byte ptr [rbx - 0x1d080000], ah; sti; jmp qword ptr [rdx]; 
0x00000000004cc8b2: add byte ptr [rax], al; sbb byte ptr [rdi], ah; add al, bh; iretd; clc; jmp qword ptr [rcx]; 
0x00000000004d03b2: add byte ptr [rax], al; sbb byte ptr [rdx - 0x29680000], ah; sti; jmp qword ptr [rsi]; 
0x00000000004d17b2: add byte ptr [rax], al; sbb byte ptr [rsi + 0x62280000], dh; cld; jmp qword ptr [rcx]; 
0x00000000004c87b2: add byte ptr [rax], al; sbb byte ptr [rsi], ah; add byte ptr [rax], al; or byte ptr [rax - 0xb], dl; jmp qword ptr [rax]; 
0x00000000004ccd06: add byte ptr [rax], al; sbb dh, ah; clc; call qword ptr [rdx]; 
0x00000000004a97c2: add byte ptr [rax], al; scasb al, byte ptr [rdi]; fdivr st(7); call rbx; 
0x00000000004cc18a: add byte ptr [rax], al; scasd eax, dword ptr [rdi]; clc; call qword ptr [rcx + 1]; 
0x00000000004d10e2: add byte ptr [rax], al; scasq rax, qword ptr [rdi]; add byte ptr [rax], al; xor rsp, rdi; jmp rdx; 
0x00000000004ccbfe: add byte ptr [rax], al; shl bl, 0xf8; jmp qword ptr [rcx]; 
0x00000000004c8bde: add byte ptr [rax], al; shl byte ptr [rbp - 0xb], 1; call qword ptr [rax]; 
0x00000000004ba94e: add byte ptr [rax], al; shl dword ptr [rax + rax], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x00000000004d0f6a: add byte ptr [rax], al; shr byte ptr [rbp + 0x29400000], 1; cld; call qword ptr [rax]; 
0x00000000004cac1e: add byte ptr [rax], al; shr byte ptr [rdx], 0xf6; jmp rsi; 
0x000000000042e08c: add byte ptr [rax], al; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x00000000004c70fe: add byte ptr [rax], al; sldt word ptr fs:[rax]; or al, 6; hlt; call qword ptr [rdi]; 
0x00000000004cea7e: add byte ptr [rax], al; std; cli; jmp qword ptr [rbx + 8]; 
0x00000000004cf9ee: add byte ptr [rax], al; sti; jmp qword ptr [rcx]; 
0x00000000004a715e: add byte ptr [rax], al; stosb byte ptr [rdi], al; fdivr st(7); call qword ptr [rsi]; 
0x00000000004d0e32: add byte ptr [rax], al; sub al, 0x1c; cld; jmp qword ptr [rdx + 5]; 
0x00000000004c76b2: add byte ptr [rax], al; sub al, 0x21; hlt; jmp rsi; 
0x00000000004c9bc6: add byte ptr [rax], al; sub al, 0x3a; add byte ptr [rax], al; and al, 0xc3; cmc; call qword ptr [rdi]; 
0x00000000004c8902: add byte ptr [rax], al; sub al, 0x56; cmc; jmp qword ptr [rcx + 2]; 
0x00000000004d0bc6: add byte ptr [rax], al; sub al, 0xaa; add byte ptr [rax], al; hlt; or bh, ah; call qword ptr [rdi + 1]; 
0x00000000004c8bda: add byte ptr [rax], al; sub al, byte ptr [rax]; add al, dl; cmc; call qword ptr [rax]; 
0x00000000004ce1c2: add byte ptr [rax], al; sub byte ptr [rax + 0x1fe80000], al; std; call rdx; 
0x00000000004ce1be: add byte ptr [rax], al; sub byte ptr [rax], al; add byte ptr [rax], al; sub byte ptr [rax + 0x1fe80000], al; std; call rdx; 
0x00000000004ccd1a: add byte ptr [rax], al; sub byte ptr [rbx], 0; and dh, ah; clc; jmp qword ptr [rcx]; 
0x00000000004cf3c2: add byte ptr [rax], al; sub byte ptr [rdx + 0x28080000], dl; sti; jmp qword ptr [rbx]; 
0x00000000004d17b6: add byte ptr [rax], al; sub byte ptr [rdx - 4], ah; jmp qword ptr [rcx]; 
0x00000000004cd496: add byte ptr [rax], al; sub byte ptr [rdx], ch; stc; call qword ptr [rax]; 
0x00000000004cf5d6: add byte ptr [rax], al; sub byte ptr [rsi], dh; sti; jmp qword ptr [rax]; 
0x000000000043c15c: add byte ptr [rax], al; sub eax, ecx; ret; 
0x00000000004d0f6e: add byte ptr [rax], al; sub esp, edi; call qword ptr [rax]; 
0x0000000000422b98: add byte ptr [rax], al; sub r12, r14; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000426da6: add byte ptr [rax], al; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x0000000000481026: add byte ptr [rax], al; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x0000000000455c71: add byte ptr [rax], al; sub rax, rdx; ret; 
0x000000000048113e: add byte ptr [rax], al; sub rdx, qword ptr [rcx + 8]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000499b70: add byte ptr [rax], al; sub rsp, -0x80; pop rbx; pop rbp; pop r12; ret; 
0x000000000041c892: add byte ptr [rax], al; syscall; 
0x0000000000458703: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x58710; ret; 
0x0000000000458e33: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x58e40; ret; 
0x0000000000459673: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x59680; ret; 
0x0000000000459853: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x59860; ret; 
0x0000000000459883: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x59890; ret; 
0x00000000004598b3: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x598c0; ret; 
0x000000000045af66: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x5af73; ret; 
0x000000000045af96: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x5afa3; ret; 
0x000000000045afc3: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x5afd0; ret; 
0x0000000000484833: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x84840; ret; 
0x00000000004979e3: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x979f0; ret; 
0x000000000045b075: add byte ptr [rax], al; syscall; pop rdx; pop rsi; ret; 
0x0000000000484103: add byte ptr [rax], al; syscall; ret; 
0x0000000000453ed4: add byte ptr [rax], al; test ah, 0x40; jne 0x53fc0; lea rax, [rdi + 0xf]; ret; 
0x00000000004c7e42: add byte ptr [rax], al; test al, 0x1c; add byte ptr [rax], al; mov byte ptr [rbx - 0xc], bh; jmp qword ptr [rbp + 2]; 
0x00000000004c7766: add byte ptr [rax], al; test al, 0x2c; hlt; call qword ptr [rcx]; 
0x0000000000453e82: add byte ptr [rax], al; test al, 0x40; jne 0x53f50; lea rax, [rdi + 7]; ret; 
0x00000000004d1142: add byte ptr [rax], al; test al, 0xaf; add byte ptr [rax], al; cmp byte ptr [rdx], dh; cld; jmp qword ptr [rbp]; 
0x00000000004d2542: add byte ptr [rax], al; test al, 0xc3; add byte ptr [rax], al; or ah, cl; cld; jmp qword ptr [rax]; 
0x00000000004cc7c6: add byte ptr [rax], al; test al, 0xce; clc; jmp qword ptr [rcx]; 
0x00000000004321ae: add byte ptr [rax], al; test byte ptr [rdi + rdx - 8], 1; lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x00000000004cc01e: add byte ptr [rax], al; test byte ptr [rsi], bl; add byte ptr [rsp], bl; clc; call rsp; 
0x0000000000453df5: add byte ptr [rax], al; test dh, 0x40; jne 0x53d30; lea rax, [rdi + 0xf]; ret; 
0x0000000000453e3b: add byte ptr [rax], al; test dh, 4; jne 0x53d30; lea rax, [rdi + 0xb]; ret; 
0x00000000004d081a: add byte ptr [rax], al; test dh, dh; sti; call rdx; 
0x0000000000453d72: add byte ptr [rax], al; test dl, 0x40; jne 0x53d30; lea rax, [rdi + 7]; ret; 
0x0000000000453da0: add byte ptr [rax], al; test dl, 4; jne 0x53d30; lea rax, [rdi + 3]; ret; 
0x000000000045aee9: add byte ptr [rax], al; test eax, eax; cmove eax, edx; ret; 
0x000000000040a3fe: add byte ptr [rax], al; test eax, eax; cmovns eax, edx; add rsp, 8; ret; 
0x0000000000401044: add byte ptr [rax], al; test eax, eax; jns 0x102a; xor eax, eax; pop rbx; ret; 
0x00000000004018e1: add byte ptr [rax], al; test eax, eax; js 0x18f0; add rsp, 0x18; ret; 
0x0000000000401957: add byte ptr [rax], al; test eax, eax; js 0x1968; add rsp, 8; ret; 
0x0000000000401987: add byte ptr [rax], al; test eax, eax; js 0x1998; add rsp, 8; ret; 
0x00000000004019c1: add byte ptr [rax], al; test eax, eax; js 0x19d0; add rsp, 0x18; ret; 
0x000000000040115c: add byte ptr [rax], al; test rax, rax; je 0x1170; mov eax, dword ptr [rax]; add rsp, 8; ret; 
0x0000000000400409: add byte ptr [rax], al; test rax, rax; je 0x412; call rax; 
0x0000000000400409: add byte ptr [rax], al; test rax, rax; je 0x412; call rax; add rsp, 8; ret; 
0x000000000049c5ee: add byte ptr [rax], al; test rax, rax; je 0x9c600; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000400aa4: add byte ptr [rax], al; test rax, rax; je 0xab8; pop rbp; mov edi, 0x6d7c10; jmp rax; 
0x0000000000400ae6: add byte ptr [rax], al; test rax, rax; je 0xaf8; pop rbp; mov edi, 0x6d7c10; jmp rax; 
0x000000000049f4a9: add byte ptr [rax], al; test rbx, rbx; mov qword ptr [rip + 0x23989b], rbx; jne 0x9f498; pop rbx; ret; 
0x00000000004960e7: add byte ptr [rax], al; test rdx, rdx; je 0x960f8; mov rax, qword ptr [r12]; add rax, qword ptr [rdx + 8]; call rax; 
0x00000000004829de: add byte ptr [rax], al; test rsi, rsi; jne 0x829e9; xor rax, rax; ret; 
0x000000000043aa7e: add byte ptr [rax], al; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000044fdbe: add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa6e: add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000043aa5e: add byte ptr [rax], al; vzeroupper; xor eax, eax; ret; 
0x00000000004aa6da: add byte ptr [rax], al; xchg byte ptr [rax], al; add byte ptr [rax], al; lahf; fdivr st(7); call qword ptr [rsi]; 
0x00000000004a6506: add byte ptr [rax], al; xchg byte ptr [rax], al; add byte ptr [rax], al; ret 0; 
0x00000000004a94d6: add byte ptr [rax], al; xchg dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000004a82f6: add byte ptr [rax], al; xchg eax, ecx; add dword ptr [rax], eax; add byte ptr [rcx], ah; fdivr st(7); jmp qword ptr [rcx]; 
0x00000000004a535a: add byte ptr [rax], al; xchg eax, ecx; fdivr st(7); call qword ptr [rcx - 0x6e000028]; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004cf3da: add byte ptr [rax], al; xchg eax, edx; add byte ptr [rax], al; and byte ptr [rax], ch; sti; jmp qword ptr [rbx]; 
0x00000000004a748e: add byte ptr [rax], al; xchg eax, edx; fdivr st(7); jmp qword ptr [rbp]; 
0x00000000004cc92e: add byte ptr [rax], al; xchg eax, esp; add byte ptr [eax], al; cld; sar al, 1; call rsi; 
0x00000000004c668a: add byte ptr [rax], al; xchg eax, esp; mov dl, 0xf3; jmp qword ptr [rdx]; 
0x00000000004d242e: add byte ptr [rax], al; xchg eax, esp; ret 0; 
0x00000000004c918a: add byte ptr [rax], al; xchg eax, esp; xchg ebp, esi; jmp rdi; 
0x00000000004ab412: add byte ptr [rax], al; xlatb; fdivr st(7); call qword ptr [rbx + 0x11]; 
0x00000000004ab3de: add byte ptr [rax], al; xlatb; fdivr st(7); call rdi; 
0x00000000004d1a66: add byte ptr [rax], al; xor al, 0; add byte ptr [rax], al; sar byte ptr [rax - 0x7bb00000], 1; cld; call qword ptr [rdx]; 
0x00000000004d13ce: add byte ptr [rax], al; xor al, 0xb2; add byte ptr [rax], al; in al, dx; cmp edi, esp; call qword ptr [rax]; 
0x00000000004ca1ba: add byte ptr [rax], al; xor al, 0xd9; cmc; call qword ptr [rdi]; 
0x00000000004a83d2: add byte ptr [rax], al; xor al, 1; add byte ptr [rax], al; ret; 
0x00000000004ca1ca: add byte ptr [rax], al; xor byte ptr [rax], al; add byte ptr [rax - 0x27], al; cmc; call qword ptr [rsi]; 
0x00000000004d03ae: add byte ptr [rax], al; xor byte ptr [rax], al; add byte ptr [rax], al; sbb byte ptr [rdx - 0x29680000], ah; sti; jmp qword ptr [rsi]; 
0x0000000000409203: add byte ptr [rax], al; xor byte ptr [rbp + 0x68], 0x48; mov eax, 0x6d2f20; ret; 
0x00000000004cbeca: add byte ptr [rax], al; xor byte ptr [rbp], bl; add byte ptr [rax - 0x68], dh; clc; call qword ptr [rbx + 4]; 
0x00000000004d0cca: add byte ptr [rax], al; xor byte ptr [rbx + 0xe000000], ch; cld; call qword ptr [rdx]; 
0x00000000004b1d7e: add byte ptr [rax], al; xor byte ptr [rcx - 5], bh; jmp qword ptr [rax]; 
0x00000000004cf5ee: add byte ptr [rax], al; xor byte ptr [rcx], bh; sti; jmp qword ptr [rbx]; 
0x00000000004d10ce: add byte ptr [rax], al; xor byte ptr [rcx], dh; cld; jmp qword ptr [rdx]; 
0x00000000004d10ca: add byte ptr [rax], al; xor byte ptr [rdi + 0x31300000], ch; cld; jmp qword ptr [rdx]; 
0x00000000004a9cfe: add byte ptr [rax], al; xor eax, 0xea000000; fdivr st(7); call rdi; 
0x00000000004aac32: add byte ptr [rax], al; xor eax, dword ptr [rcx]; add byte ptr [rax], al; ret 0; 
0x000000000040116e: add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x000000000048500e: add byte ptr [rax], al; xor eax, eax; leave; ret; 
0x000000000041d993: add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000049c735: add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000040117e: add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000458a7e: add byte ptr [rax], al; xor eax, eax; syscall; 
0x000000000043a9aa: add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x000000000040cca6: add byte ptr [rax], al; xor ebx, ebx; mov rax, rbx; pop rbx; ret; 
0x000000000047b403: add byte ptr [rax], al; xor ecx, ecx; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000459804: add byte ptr [rax], al; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x00000000004595aa: add byte ptr [rax], al; xor edi, edi; syscall; 
0x000000000041c8c4: add byte ptr [rax], al; xor edx, edx; mov rsi, r9; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000041f14e: add byte ptr [rax], al; xor esi, esi; mov rax, rsi; ret; 
0x000000000045b11c: add byte ptr [rax], al; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000047c4f6: add byte ptr [rax], al; xor r8d, r8d; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000453d2e: add byte ptr [rax], al; xor rax, rax; ret; 
0x00000000004d1226: add byte ptr [rax], al; xor rdi, rsp; call qword ptr [rdi]; 
0x00000000004d10e6: add byte ptr [rax], al; xor rsp, rdi; jmp rdx; 
0x00000000004d17e3: add byte ptr [rax], bh; add byte ptr [rax], al; add byte ptr [rsi + rsi*4], cl; add byte ptr [rdx - 4], ah; jmp rsp; 
0x00000000004a789f: add byte ptr [rax], bh; add byte ptr [rax], al; add dl, dl; fdivr st(7); call rdx; 
0x00000000004c7613: add byte ptr [rax], bh; hlt; jmp qword ptr [rax]; 
0x00000000004cdfd3: add byte ptr [rax], bh; jle 0xcdfd7; add al, bh; ret 0xfff9; 
0x0000000000400c63: add byte ptr [rax], bh; leave; ret; 
0x00000000004d1ad3: add byte ptr [rax], bh; mov ecx, 0x87d80000; cld; jmp qword ptr [rcx]; 
0x00000000004c71b7: add byte ptr [rax], bh; or ah, dh; jmp qword ptr [rsi + 1]; 
0x00000000004c74a7: add byte ptr [rax], bh; sbb esp, esi; jmp qword ptr [rcx + 2]; 
0x00000000004cf3f7: add byte ptr [rax], bh; sub bl, bh; jmp qword ptr [rsi]; 
0x00000000004cf5d3: add byte ptr [rax], bh; xchg eax, esp; add byte ptr [rax], al; sub byte ptr [rsi], dh; sti; jmp qword ptr [rax]; 
0x00000000004d1147: add byte ptr [rax], bh; xor bh, ah; jmp qword ptr [rbp]; 
0x00000000004c71b3: add byte ptr [rax], bl; adc byte ptr [rax], al; add byte ptr [rax], bh; or ah, dh; jmp qword ptr [rsi + 1]; 
0x00000000004cc8b3: add byte ptr [rax], bl; add byte ptr [eax], al; clc; iretd; clc; jmp qword ptr [rcx]; 
0x00000000004ce0a7: add byte ptr [rax], bl; add byte ptr [rax], al; add bl, ah; ret; 
0x00000000004c87b3: add byte ptr [rax], bl; add byte ptr es:[rax], al; or byte ptr [rax - 0xb], dl; jmp qword ptr [rax]; 
0x00000000004ca403: add byte ptr [rax], bl; cmc; call qword ptr [rbx]; 
0x00000000004c9bb3: add byte ptr [rax], bl; cmp al, byte ptr [rax]; add byte ptr [rax], ch; ret; 
0x00000000004a18d7: add byte ptr [rax], bl; div ebp; dec dword ptr [rax - 0x7000a0b]; cmc; cmc; call qword ptr [rax]; 
0x00000000004d02f7: add byte ptr [rax], bl; iretd; sti; jmp qword ptr [rsi + 5]; 
0x00000000004cc0d7: add byte ptr [rax], bl; lodsd eax, dword ptr [rsi]; clc; call qword ptr [rax]; 
0x00000000004ccd07: add byte ptr [rax], bl; out 0xf8, al; call qword ptr [rdx]; 
0x00000000004ce017: add byte ptr [rax], bl; ret; 
0x00000000004cc127: add byte ptr [rax], bl; scasb al, byte ptr [rdi]; clc; call qword ptr [rbx]; 
0x00000000004c70fb: add byte ptr [rax], ch; add byte ptr [rax], al; add byte ptr [rdi + rcx], ah; add byte ptr [rsi + rax], cl; hlt; call qword ptr [rdi]; 
0x00000000004c763b: add byte ptr [rax], ch; add byte ptr [rax], al; add byte ptr [rsp + rdx + 0x206c0000], ah; hlt; call qword ptr [rdi]; 
0x00000000004a8847: add byte ptr [rax], ch; add byte ptr [rax], al; retf 0; add cl, ah; fdivr st(7); jmp rcx; 
0x00000000004cc7c3: add byte ptr [rax], ch; add byte ptr [rax], al; test al, 0xce; clc; jmp qword ptr [rcx]; 
0x00000000004cb877: add byte ptr [rax], ch; je 0xcb871; jmp qword ptr [rbx]; 
0x00000000004cb977: add byte ptr [rax], ch; jl 0xcb971; jmp qword ptr [rbx]; 
0x00000000004c7f97: add byte ptr [rax], ch; mov ah, dh; call qword ptr [rbx + 1]; 
0x00000000004d23c3: add byte ptr [rax], ch; ret 0; 
0x00000000004c9bb7: add byte ptr [rax], ch; ret; 
0x00000000004d1f67: add byte ptr [rax], ch; scasb al, byte ptr [rdi]; cld; jmp qword ptr [rdx + 1]; 
0x00000000004cf5d7: add byte ptr [rax], ch; sti; jmp qword ptr [rax]; 
0x00000000004cd497: add byte ptr [rax], ch; sub bh, cl; call qword ptr [rax]; 
0x00000000004cf3c3: add byte ptr [rax], ch; xchg eax, edx; add byte ptr [rax], al; or byte ptr [rax], ch; sti; jmp qword ptr [rbx]; 
0x00000000004c74a3: add byte ptr [rax], cl; adc eax, dword ptr [rax]; add byte ptr [rax], bh; sbb esp, esi; jmp qword ptr [rcx + 2]; 
0x00000000004cee07: add byte ptr [rax], cl; adc edi, ebx; jmp qword ptr [rdi]; 
0x00000000004ca1db: add byte ptr [rax], cl; add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, ds; cmc; call qword ptr [rdi + 1]; 
0x00000000004d1ae7: add byte ptr [rax], cl; add byte ptr [rax], al; push rax; mov ecx, 0x88300000; cld; jmp qword ptr [rcx + 9]; 
0x00000000004ab9b7: add byte ptr [rax], cl; fdivr st(7); dec dword ptr [rax]; fdivr st(7); jmp qword ptr [rcx + 0x8000001]; 
0x00000000004ab9c3: add byte ptr [rax], cl; fdivr st(7); jmp qword ptr [rcx + 0x8000001]; 
0x00000000004ccc77: add byte ptr [rax], cl; in al, 0xf8; call qword ptr [rsi]; 
0x000000000049acfe: add byte ptr [rax], cl; mov byte ptr [rip + 0x23e509], 8; ret; 
0x000000000049acf7: add byte ptr [rax], cl; mov byte ptr [rip + 0x23e50f], 8; mov byte ptr [rip + 0x23e509], 8; ret; 
0x000000000049acf0: add byte ptr [rax], cl; mov byte ptr [rip + 0x23e515], 8; mov byte ptr [rip + 0x23e50f], 8; mov byte ptr [rip + 0x23e509], 8; ret; 
0x000000000049ace9: add byte ptr [rax], cl; mov byte ptr [rip + 0x23e51b], 8; mov byte ptr [rip + 0x23e515], 8; mov byte ptr [rip + 0x23e50f], 8; mov byte ptr [rip + 0x23e509], 8; ret; 
0x00000000004c87b7: add byte ptr [rax], cl; push rax; cmc; jmp qword ptr [rax]; 
0x00000000004cc577: add byte ptr [rax], cl; ret 0xfff8; 
0x000000000049ad05: add byte ptr [rax], cl; ret; 
0x00000000004cf3c7: add byte ptr [rax], cl; sub bl, bh; jmp qword ptr [rbx]; 
0x00000000004ca1cb: add byte ptr [rax], dh; add byte ptr [rax], al; fprem1; call qword ptr [rsi]; 
0x00000000004cf5ef: add byte ptr [rax], dh; cmp ebx, edi; jmp qword ptr [rbx]; 
0x00000000004b1d7f: add byte ptr [rax], dh; jns 0xb1d7e; jmp qword ptr [rax]; 
0x00000000004d1aef: add byte ptr [rax], dh; mov ah, bh; jmp qword ptr [rcx + 9]; 
0x00000000004cbecb: add byte ptr [rax], dh; pop rbp; add byte ptr [rax], al; jo 0xcbe6a; clc; call qword ptr [rbx + 4]; 
0x00000000004d10cb: add byte ptr [rax], dh; scasd eax, dword ptr [rdi]; add byte ptr [rax], al; xor byte ptr [rcx], dh; cld; jmp qword ptr [rdx]; 
0x00000000004d0ccb: add byte ptr [rax], dh; stosd dword ptr [rdi], eax; add byte ptr [rax], al; add byte ptr [rsi], cl; cld; call qword ptr [rdx]; 
0x00000000004d10cf: add byte ptr [rax], dh; xor esp, edi; jmp qword ptr [rdx]; 
0x00000000004c75f7: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax + 0x14], ah; add byte ptr [rax], al; and spl, sil; call qword ptr [rax]; 
0x00000000004c8bd7: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax + 0x2a], al; add byte ptr [rax], al; shl byte ptr [rbp - 0xb], 1; call qword ptr [rax]; 
0x00000000004cd14f: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax - 0x30ffff91], bh; xor esi, ebx; jmp qword ptr [rbx]; 
0x00000000004d23bf: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax], ch; ret 0; 
0x00000000004ca1c7: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax], dh; add byte ptr [rax], al; fprem1; call qword ptr [rsi]; 
0x00000000004ce313: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rcx + rax*4], bh; add byte ptr [rsi + rbx*8 - 7], ah; call qword ptr [rdx]; 
0x00000000004ca3fb: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rdx + rax*2], ah; add byte ptr [rax], bl; cmc; call qword ptr [rbx]; 
0x00000000004cc01b: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rsi + rbx*2 - 0x5be40000], al; clc; call rsp; 
0x00000000004ca03b: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rsi + rdi - 0x29340000], ah; cmc; call qword ptr [rdi]; 
0x00000000004ce023: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rsi + rdi*2 - 0x3cdc0000], cl; stc; call qword ptr [rax]; 
0x00000000004cdffb: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rsi + rdi*2], ah; add byte ptr [rbx + rax*8], cl; stc; call qword ptr [rcx]; 
0x0000000000482f9f: add byte ptr [rax], dl; add byte ptr [rax], al; lea rdx, [rip - 0x2bf3a]; cmove rax, rdx; ret; 
0x000000000048eea8: add byte ptr [rax], dl; add byte ptr [rax], al; mov rbx, rsp; mov rsi, rbx; syscall; 
0x0000000000494505: add byte ptr [rax], dl; lea rdx, [rip + 0x102]; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x0000000000432c35: add byte ptr [rax], dl; lea rdx, [rip + 0x23042]; lea rax, [rip + 0x22f9b]; cmovne rax, rdx; ret; 
0x0000000000433585: add byte ptr [rax], dl; lea rdx, [rip - 0x36e]; lea rax, [rip + 0x221ab]; cmove rax, rdx; ret; 
0x00000000004d1fdf: add byte ptr [rax], dl; mov al, 0xfc; call qword ptr [rbx]; 
0x00000000004d24ab: add byte ptr [rax], dl; ret; 
0x00000000004d21ab: add byte ptr [rax], dl; rol byte ptr [rax], 0; nop; mov ch, 0xfc; jmp qword ptr [rbx]; 
0x00000000004c735c: add byte ptr [rax], r8b; add ah, al; adc dword ptr [rax], eax; add byte ptr [rsp + rcx - 0xc], bl; jmp qword ptr [rax + 9]; 
0x00000000004c8b30: add byte ptr [rax], r8b; add ah, dl; add byte ptr [rax], al; add byte ptr [rax + 0x63], bl; cmc; jmp qword ptr [rcx + 1]; 
0x00000000004cea78: add byte ptr [rax], r8b; add al, ah; mov byte ptr [rax], al; add byte ptr [rax - 3], al; cli; jmp qword ptr [rbx + 8]; 
0x00000000004d2458: add byte ptr [rax], r8b; add al, al; ret 0; 
0x00000000004c86f0: add byte ptr [rax], r8b; add byte ptr [rax + 0x25], bl; add byte ptr [rax], al; cmc; call rsp; 
0x00000000004d0030: add byte ptr [rax], r8b; add byte ptr [rax - 0x47ffff62], bl; nop; sti; jmp qword ptr [rcx + 0xe]; 
0x00000000004c74a0: add byte ptr [rax], r8b; add byte ptr [rax], cl; adc eax, dword ptr [rax]; add byte ptr [rax], bh; sbb esp, esi; jmp qword ptr [rcx + 2]; 
0x000000000045a47d: add byte ptr [rax], r8b; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000432c85: add byte ptr [rax], r8b; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000048e7ad: add byte ptr [rax], r8b; cmp byte ptr [rip + 0x24b071], 0; jne 0x8e7c8; mov rax, qword ptr [rip + 0x24ac50]; ret; 
0x0000000000425a65: add byte ptr [rax], r8b; cmp eax, -1; je 0x259e8; mov eax, 0xffffffff; ret; 
0x0000000000425c55: add byte ptr [rax], r8b; cmp eax, -1; je 0x25bd8; mov eax, 0xffffffff; ret; 
0x00000000004276bd: add byte ptr [rax], r8b; lea rdx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000045396d: add byte ptr [rax], r8b; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000432b4d: add byte ptr [rax], r8b; mov eax, 0x16; ret; 
0x00000000004598ad: add byte ptr [rax], r8b; mov eax, 0x1c; syscall; 
0x00000000004598ad: add byte ptr [rax], r8b; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x598c0; ret; 
0x0000000000458e2d: add byte ptr [rax], r8b; mov eax, 0x20; syscall; 
0x0000000000458e2d: add byte ptr [rax], r8b; mov eax, 0x20; syscall; cmp rax, -0xfff; jae 0x58e40; ret; 
0x000000000048485d: add byte ptr [rax], r8b; mov eax, 0x66; syscall; 
0x000000000048485d: add byte ptr [rax], r8b; mov eax, 0x66; syscall; ret; 
0x000000000045987d: add byte ptr [rax], r8b; mov eax, 0xa; syscall; 
0x000000000045987d: add byte ptr [rax], r8b; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x59890; ret; 
0x00000000004095ed: add byte ptr [rax], r8b; mov eax, 0xffffffdf; ret; 
0x0000000000427b5d: add byte ptr [rax], r8b; mov eax, 0xffffffff; ret; 
0x00000000004276cd: add byte ptr [rax], r8b; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x00000000004078fd: add byte ptr [rax], r8b; mov eax, dword ptr [rdi + 0x24]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000045aedd: add byte ptr [rax], r8b; mov eax, dword ptr [rip + 0x27ea3a]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x000000000047fa65: add byte ptr [rax], r8b; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000045335d: add byte ptr [rax], r8b; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000487c8d: add byte ptr [rax], r8b; mov qword ptr [rsi], -1; xor eax, eax; ret; 
0x000000000041079d: add byte ptr [rax], r8b; mov rax, -0x40; add rax, qword ptr fs:[0]; ret; 
0x00000000004587b5: add byte ptr [rax], r8b; mov rax, -0x40; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000484c55: add byte ptr [rax], r8b; mov rax, -0x40; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000046a2cd: add byte ptr [rax], r8b; mov rax, -0x58; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000426c5d: add byte ptr [rax], r8b; mov rax, -1; ret; 
0x000000000040917d: add byte ptr [rax], r8b; mov rax, 0x6d2d20; ret; 
0x0000000000409275: add byte ptr [rax], r8b; mov rax, 0x6d2ee0; ret; 
0x000000000048c095: add byte ptr [rax], r8b; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000042839d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000042853d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2ae306], 1; mov qword ptr [rip + 0x2ae2cb], rax; ret; 
0x000000000048402d: add byte ptr [rax], r8b; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x00000000004539dd: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000004533bd: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000004595bd: add byte ptr [rax], r8b; mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000458b1d: add byte ptr [rax], r8b; mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000045339d: add byte ptr [rax], r8b; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000042f66d: add byte ptr [rax], r8b; mov rsi, qword ptr [rsp + 0x68]; call rax; 
0x000000000045524d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000045523d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000045522d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000045521d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000045520d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x00000000004551fd: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000043b19d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000425abd: add byte ptr [rax], r8b; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045febd: add byte ptr [rax], r8b; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000040208d: add byte ptr [rax], r8b; movzx esi, sil; mov dword ptr [rip + 0x2d4086], esi; ret; 
0x000000000040207d: add byte ptr [rax], r8b; movzx esi, sil; mov dword ptr [rip + 0x2d4092], esi; ret; 
0x000000000040206d: add byte ptr [rax], r8b; movzx esi, sil; mov dword ptr [rip + 0x2d4096], esi; ret; 
0x0000000000401f2d: add byte ptr [rax], r8b; movzx esi, sil; mov dword ptr [rip + 0x2d41da], esi; ret; 
0x0000000000401f1d: add byte ptr [rax], r8b; movzx esi, sil; mov dword ptr [rip + 0x2d41ee], esi; ret; 
0x0000000000401f0d: add byte ptr [rax], r8b; movzx esi, sil; mov dword ptr [rip + 0x2d420a], esi; ret; 
0x0000000000402343: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov eax, dword ptr [rip + 0x2d3dae]; ret; 
0x0000000000444203: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000046a303: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000046a323: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x000000000046a483: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x0000000000444393: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000444313: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000048af3d: add byte ptr [rax], r8b; or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x0000000000400ab5: add byte ptr [rax], r8b; pop rbp; ret; 
0x0000000000401265: add byte ptr [rax], r8b; pop rbx; mov eax, 0xffffffea; pop rbp; pop r12; ret; 
0x000000000049403d: add byte ptr [rax], r8b; pop rbx; ret; 
0x0000000000426da5: add byte ptr [rax], r8b; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x0000000000481025: add byte ptr [rax], r8b; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x00000000004321ad: add byte ptr [rax], r8b; test byte ptr [rdi + rdx - 8], 1; lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x000000000043aa7d: add byte ptr [rax], r8b; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000040116d: add byte ptr [rax], r8b; xor eax, eax; add rsp, 8; ret; 
0x000000000040f945: add byte ptr [rax], r8b; xor eax, eax; ret; 
0x000000000040cca5: add byte ptr [rax], r8b; xor ebx, ebx; mov rax, rbx; pop rbx; ret; 
0x0000000000458766: add byte ptr [rbp + 0x10], dh; add rsp, 0x28; ret; 
0x000000000048e6bd: add byte ptr [rbp + 0x10], dh; lea rax, [rsi + 1]; mov qword ptr [rip + 0x24ad45], rax; ret; 
0x000000000049444f: add byte ptr [rbp + 0x12], dh; add rsp, 0x38; ret; 
0x00000000004095ff: add byte ptr [rbp + 0x14f504], cl; add byte ptr [rax], al; ret; 
0x0000000000484bed: add byte ptr [rbp + 0x1b], dh; add rsp, 0x38; ret; 
0x0000000000403ad5: add byte ptr [rbp + 0x1d], dh; add rsp, 0x48; ret; 
0x0000000000403e78: add byte ptr [rbp + 0x22], dh; add rsp, 0x10; pop rbx; ret; 
0x00000000004579ae: add byte ptr [rbp + 0x23], dh; add rsp, 0x20; pop rbx; ret; 
0x000000000040151d: add byte ptr [rbp + 0x27], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000491254: add byte ptr [rbp + 0x27], dh; add rsp, 0x68; ret; 
0x0000000000422b99: add byte ptr [rbp + 0x29], cl; hlt; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000491194: add byte ptr [rbp + 0x2c], dh; add rsp, 0x38; ret; 
0x000000000045b4f6: add byte ptr [rbp + 0x312574d2], al; test byte ptr [rax - 0x73], 0x3d; rcl dword ptr [rax + 5], 0; mov eax, 0x15; syscall; 
0x000000000042241a: add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0x860f; 
0x00000000004830fa: add byte ptr [rbp + 0x31], al; ror byte ptr [rax - 0x77], 0xee; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000048134f: add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + rcx*4 - 7], 0x48; lea esi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000048152b: add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + rcx*4 - 7], 0x48; lea esi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000047c4f7: add byte ptr [rbp + 0x31], al; ror byte ptr [rdi], 0xb6; add al, 7; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004913b5: add byte ptr [rbp + 0x36], dh; add rsp, 0x78; ret; 
0x00000000004847ef: add byte ptr [rbp + 0x38], dh; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x00000000004936c0: add byte ptr [rbp + 0x3b], dh; leave; ret; 
0x000000000045993f: add byte ptr [rbp + 0x41], bl; pop rsp; jmp rax; 
0x0000000000487c80: add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000000458996: add byte ptr [rbp + 0x42], dh; add rsp, 0x58; ret; 
0x0000000000484abb: add byte ptr [rbp + 0x45], dh; add rsp, 0x58; ret; 
0x0000000000494a4d: add byte ptr [rbp + 0x480375d2], al; mov dword ptr [rbx], eax; add rsp, 0x10; pop rbx; ret; 
0x00000000004018e2: add byte ptr [rbp + 0x480978c0], al; add esp, 0x18; ret; 
0x0000000000401958: add byte ptr [rbp + 0x480b78c0], al; add esp, 8; ret; 
0x000000000046a626: add byte ptr [rbp + 0x4a], dh; add rsp, 0x148; ret; 
0x0000000000425787: add byte ptr [rbp + 0x4a], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000458d26: add byte ptr [rbp + 0x4a], dh; add rsp, 0x68; ret; 
0x00000000004624a1: add byte ptr [rbp + 0x6d880fd2], al; add al, 0; add bh, dh; ret 0xf800; 
0x000000000041fb7d: add byte ptr [rbp + 0x76], dh; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000045ae39: add byte ptr [rbp + 0xa], dh; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000495024: add byte ptr [rbp + 0xa], dh; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000004922ef: add byte ptr [rbp + 0xf], cl; lodsd eax, dword ptr [rsi]; ret; 
0x00000000004921df: add byte ptr [rbp + 0xf], cl; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x0000000000459715: add byte ptr [rbp + 0xf], dh; add rsp, 0x28; ret; 
0x00000000004977ca: add byte ptr [rbp + 0xf], dh; add rsp, 0x38; ret; 
0x000000000048e7b6: add byte ptr [rbp + 0xf], dh; mov rax, qword ptr [rip + 0x24ac50]; ret; 
0x000000000040a458: add byte ptr [rbp + 0xfa090], cl; add byte ptr [rbp - 0x3db6f040], al; add rsp, 8; ret; 
0x0000000000496c3a: add byte ptr [rbp + 2], dh; pop rbx; ret; 
0x000000000046a3de: add byte ptr [rbp + 5], dh; add rsp, 0x18; ret; 
0x000000000049436c: add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x000000000042930f: add byte ptr [rbp + 6], dh; add rsp, 0x20; pop rbx; ret; 
0x000000000041e461: add byte ptr [rbp + 8], dh; add rsp, 0xd8; ret; 
0x0000000000484b3e: add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000406767: add byte ptr [rbp + 9], dh; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000491ab5: add byte ptr [rbp + 9], dh; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000049c558: add byte ptr [rbp + rax + 0x48], dh; mov dword ptr [rdi + rsi*8], edx; ret; 
0x00000000004c6707: add byte ptr [rbp + rax], ch; add ah, dh; mov dl, 0xf3; call qword ptr [rcx]; 
0x00000000004094a0: add byte ptr [rbp + rbp*2], dl; pop rbx; ret; 
0x0000000000409263: add byte ptr [rbp + rbp*2], dl; ret; 
0x000000000049c470: add byte ptr [rbp + rbx + 0x48], dh; add esp, 0x18; ret; 
0x00000000004b9877: add byte ptr [rbp + rcx + 0xdbf0000], bh; add byte ptr [rax], al; ret 0xd; 
0x000000000043d956: add byte ptr [rbp + rcx*4 + 0x1d], cl; adc dword ptr [rdi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d5ff: add byte ptr [rbp + rcx*4 + 0x1d], cl; adc rax, 0x63490007; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dddf: add byte ptr [rbp + rcx*4 + 0x1d], cl; imul ecx, dword ptr [rip + 0x63490007], 0x8d499314; adc al, 0x13; jmp rdx; 
0x0000000000440b9f: add byte ptr [rbp + rcx*4 + 0x1d], cl; imul esp, ecx, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440a4f: add byte ptr [rbp + rcx*4 + 0x1d], cl; mov ecx, 0x490006e2; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dc8f: add byte ptr [rbp + rcx*4 + 0x1d], cl; mov ecx, 0x4900070e; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043df2f: add byte ptr [rbp + rcx*4 + 0x1d], cl; sbb dword ptr [rdi + rax], ecx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044065f: add byte ptr [rbp + rcx*4 + 0x1d], cl; test eax, 0x490006e6; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d89f: add byte ptr [rbp + rcx*4 + 0x1d], cl; test eax, 0x49000712; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042a32c: add byte ptr [rbp + rcx*4 + 0x24], cl; sub ecx, dword ptr [rax + 0x39]; ret; 
0x0000000000478252: add byte ptr [rbp + rcx*4 + 0x2c], cl; test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000042e37b: add byte ptr [rbp + rcx*4 + 0x46], cl; dec dword ptr [rax - 0x77]; ret 0x2948; 
0x000000000042d999: add byte ptr [rbp + rcx*4 + 0x46], cl; jmp qword ptr [rsi - 0x70]; 
0x000000000048143e: add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x10; mov rdi, r12; call rbx; 
0x0000000000481538: add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x0000000000481632: add byte ptr [rbp + rcx*4 + 0x4d], cl; ror byte ptr [rcx + rcx*4 - 1], 0x41; call rsp; 
0x0000000000408344: add byte ptr [rbp + rcx*4 + 0x7e], cl; adc al, ch; ret 0xffa1; 
0x000000000042b14a: add byte ptr [rbp + rcx*4 + 5], cl; ret 0x826; 
0x00000000004a9cfb: add byte ptr [rbp + rcx], bl; add byte ptr [rip - 0x16000000], dh; fdivr st(7); call rdi; 
0x00000000004c9f17: add byte ptr [rbp + rdi], bh; add byte ptr [rcx + rdx*8 - 0xb], ah; jmp qword ptr [rdi + 2]; 
0x00000000004c73b3: add byte ptr [rbp + rdx - 0xc], ch; jmp qword ptr [rbx]; 
0x00000000004cd6df: add byte ptr [rbp + rsi*2], al; add byte ptr [rcx + rax*2], bl; stc; call rcx; 
0x00000000004d174f: add byte ptr [rbp + rsi*4 + 0x60fc0000], dh; cld; jmp qword ptr [rcx]; 
0x000000000045b101: add byte ptr [rbp - 0x14], dh; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x5b110; ret; 
0x000000000045b09e: add byte ptr [rbp - 0x19], dh; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x5b0ac; ret; 
0x000000000049f4b4: add byte ptr [rbp - 0x1f], dh; pop rbx; ret; 
0x00000000004755bf: add byte ptr [rbp - 0x2dce00b9], cl; div r8d; add r9d, eax; mov eax, r9d; ret; 
0x0000000000428a4b: add byte ptr [rbp - 0x38ef8b40], al; add eax, 0x2b0376; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000040a45e: add byte ptr [rbp - 0x3db6f040], al; add rsp, 8; ret; 
0x000000000045aeea: add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x00000000004b9b23: add byte ptr [rbp - 0x3ffffff1], bh; sldt word ptr [rax]; ret; 
0x0000000000484984: add byte ptr [rbp - 0x47a28a40], al; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000458ab5: add byte ptr [rbp - 0x47e98a40], al; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000458d85: add byte ptr [rbp - 0x47e98a40], al; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000400cc8: add byte ptr [rbp - 0x47ec8a40], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x2d7698], eax; add rsp, 8; ret; 
0x00000000004b8ac3: add byte ptr [rbp - 0x48000000], dh; add byte ptr [rax], al; add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x00000000004a77d7: add byte ptr [rbp - 0x4b000000], dh; add byte ptr [rax], al; add byte ptr [rbx - 0x6c000028], dl; fdivr st(7); call rax; 
0x00000000004a7463: add byte ptr [rbp - 0x53000000], ch; add byte ptr [rax], al; add byte ptr [rdx - 0x6d000028], dl; fdivr st(7); jmp qword ptr [rbp]; 
0x0000000000458007: add byte ptr [rbp - 0x57c03b0], cl; add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xd284; 
0x000000000045846a: add byte ptr [rbp - 0x6d], dh; mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x00000000004a7a87: add byte ptr [rbp - 0x72000028], cl; fdivr st(7); call rcx; 
0x00000000004783f9: add byte ptr [rbp - 0x75], cl; je 0x78422; and byte ptr [rax + 1], cl; ret; 
0x000000000042c24e: add byte ptr [rbp - 0x75], cl; or byte ptr [rbp - 0x75], cl; push rax; or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x000000000047e737: add byte ptr [rbp - 0x76ba7fec], cl; call 0x2001083; ror byte ptr [rbp + 0x39441704], cl; ret 0xf49; 
0x0000000000407faf: add byte ptr [rbp - 0x781400be], cl; mov eax, 0xffffffea; ret; 
0x0000000000467a5f: add byte ptr [rbp - 0x7cf78140], al; call 0x84a036b; pop rbx; ret; 
0x0000000000401cb5: add byte ptr [rbp - 0xcf98740], al; ret; 
0x0000000000400d95: add byte ptr [rbp - 0xcf98b40], al; ret; 
0x000000000049e847: add byte ptr [rbp - 0xcfb8b40], al; ret; 
0x00000000004af140: add byte ptr [rbp - 7], cl; push qword ptr [rax + 0x4c]; stc; jmp rax; 
0x00000000004a9793: add byte ptr [rbp], ah; add byte ptr [rax], al; ret; 
0x00000000004a748b: add byte ptr [rbp], ah; add byte ptr [rax], al; xchg eax, edx; fdivr st(7); jmp qword ptr [rbp]; 
0x00000000004a7563: add byte ptr [rbp], bl; add byte ptr [rax], al; sbb al, byte ptr [rdi]; add byte ptr [rax], al; ret; 
0x00000000004a9517: add byte ptr [rbp], dl; add byte ptr [rax], al; fdivr st(7); call qword ptr [rbp]; 
0x000000000044c329: add byte ptr [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret; 
0x0000000000457875: add byte ptr [rbx + 0x157401f8], al; cmp eax, 2; je 0x57888; xor eax, eax; ret; 
0x00000000004a0843: add byte ptr [rbx + 0x23600a3d], cl; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000049474d: add byte ptr [rbx + 0x244a6c0d], cl; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000048f135: add byte ptr [rbx + 0x2480eb0d], al; add byte ptr [rcx], al; pop rbx; ret; 
0x000000000048e552: add byte ptr [rbx + 0x24ab3705], cl; add byte ptr [rcx - 0x75], al; adc edi, dword ptr [rcx]; ret 0xc74; 
0x000000000048e4b5: add byte ptr [rbx + 0x24abd405], cl; add byte ptr [rcx - 0x75], al; adc edi, dword ptr [rcx]; ret 0x840f; 
0x000000000045c84f: add byte ptr [rbx + 0x27d11a05], cl; add byte ptr [rbp - 0xcf98b40], al; ret; 
0x000000000045aedf: add byte ptr [rbx + 0x27ea3a05], cl; add byte ptr [rdx + 0x64], bh; test eax, eax; cmove eax, edx; ret; 
0x0000000000458d7f: add byte ptr [rbx + 0x280ae605], cl; add byte ptr [rbp - 0x47e98a40], al; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000040790f: add byte ptr [rbx + 0x2890447], cl; xor eax, eax; ret; 
0x000000000040791f: add byte ptr [rbx + 0x2890847], cl; xor eax, eax; ret; 
0x000000000040792f: add byte ptr [rbx + 0x2890c47], cl; xor eax, eax; ret; 
0x000000000040793f: add byte ptr [rbx + 0x2891047], cl; xor eax, eax; ret; 
0x000000000040794f: add byte ptr [rbx + 0x2891447], cl; xor eax, eax; ret; 
0x000000000040795f: add byte ptr [rbx + 0x2891847], cl; xor eax, eax; ret; 
0x000000000040796f: add byte ptr [rbx + 0x2891c47], cl; xor eax, eax; ret; 
0x000000000040797f: add byte ptr [rbx + 0x2892047], cl; xor eax, eax; ret; 
0x00000000004078ff: add byte ptr [rbx + 0x2892447], cl; xor eax, eax; ret; 
0x0000000000432ccf: add byte ptr [rbx + 0x2a617a15], cl; add bh, dh; ret 0; 
0x000000000042f5e7: add byte ptr [rbx + 0x2a72663d], cl; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000427a97: add byte ptr [rbx + 0x2b12d505], al; add byte ptr [rcx], al; ret; 
0x0000000000401caf: add byte ptr [rbx + 0x2d445205], cl; add byte ptr [rbp - 0xcf98740], al; ret; 
0x0000000000400d8f: add byte ptr [rbx + 0x2d75da05], cl; add byte ptr [rbp - 0xcf98b40], al; ret; 
0x000000000042908f: add byte ptr [rbx + 0x31], bl; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000004539bf: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x000000000045338f: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000466e2b: add byte ptr [rbx + 0x41], bl; pop rsp; ret; 
0x000000000041ea13: add byte ptr [rbx + 0x42894c03], cl; or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x000000000045398f: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000045336f: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000043bfe0: add byte ptr [rbx + 0x478bfc4e], cl; cld; cmp ecx, eax; jne 0x3c9ff; xor eax, eax; ret; 
0x0000000000452e9f: add byte ptr [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret; 
0x0000000000458dc9: add byte ptr [rbx + 0x480c2444], cl; add esp, 0x10; pop rbx; ret; 
0x000000000041f115: add byte ptr [rbx + 0x48], bl; mov eax, esi; pop rbp; pop r12; ret; 
0x0000000000469ccf: add byte ptr [rbx + 0x48], dl; mov eax, dword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x69cdf; call rax; 
0x000000000043f24f: add byte ptr [rbx + 0x4e8bf956], cl; cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043f04f: add byte ptr [rbx + 0x4e8bfa56], cl; cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043ee4f: add byte ptr [rbx + 0x4e8bfb56], cl; cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004554fb: add byte ptr [rbx + 0x4e8bfc47], cl; cld; cmp eax, ecx; jne 0x55710; xor eax, eax; ret; 
0x000000000043c242: add byte ptr [rbx + 0x4e8bfc47], cl; cld; cmp ecx, eax; jne 0x3c9ff; xor eax, eax; ret; 
0x000000000044420f: add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x0000000000430dcf: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; jmp rax; 
0x0000000000421728: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000423574: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000414ab1: add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000041e8eb: add byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004695cf: add byte ptr [rbx + 0x63], cl; xor al, 0x88; add rsi, r8; jmp rsi; 
0x00000000004079d3: add byte ptr [rbx + 0x75042444], cl; add eax, 0x18c48348; ret; 
0x000000000048bc27: add byte ptr [rbx + 0x7525087b], al; adc cl, byte ptr [rbx + rcx*4 + 0x3b]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000049e89f: add byte ptr [rbx + 0x75c08507], cl; or dh, bl; ret; 
0x00000000004097af: add byte ptr [rbx + 0xb7618fa], al; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x0000000000494780: add byte ptr [rbx + 0xc], dh; mov rdx, qword ptr [rip + 0x244a4e]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000004448bf: add byte ptr [rbx + 0xe8b0156], cl; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000044484f: add byte ptr [rbx + 0xe8b0256], cl; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004447df: add byte ptr [rbx + 0xe8b0356], cl; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004ab1bb: add byte ptr [rbx + 0xf000001], ah; fdivr st(7); dec dword ptr [rdi]; fdivr st(7); jmp qword ptr [rbx + 0xf000001]; 
0x00000000004ab1db: add byte ptr [rbx + 0xf000001], ah; fdivr st(7); jmp qword ptr [rbx + 0xf000001]; 
0x0000000000482f8a: add byte ptr [rbx + rax - 0xd], dh; ret; 
0x00000000004cc5c3: add byte ptr [rbx + rax*8 - 8], bh; jmp qword ptr [rax]; 
0x00000000004c9bcb: add byte ptr [rbx + rax*8], ah; cmc; call qword ptr [rdi]; 
0x00000000004ce02b: add byte ptr [rbx + rax*8], ah; stc; call qword ptr [rax]; 
0x00000000004ce003: add byte ptr [rbx + rax*8], cl; stc; call qword ptr [rcx]; 
0x00000000004101f1: add byte ptr [rbx + rbp*8], al; mov byte ptr [rcx], bh; ret 0x860f; 
0x000000000049c517: add byte ptr [rbx + rbx*8 - 0xd], dh; ret; 
0x000000000042c3ef: add byte ptr [rbx + rcx*4 + 0x40], cl; adc byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004623cb: add byte ptr [rbx + rcx*4 + 0x4c], cl; and al, 0x38; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000493897: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x00000000004976d7: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000466b19: add byte ptr [rbx + rcx*4 - 0x5c], cl; and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004c72c3: add byte ptr [rbx + rcx], bh; hlt; call qword ptr [rdi]; 
0x00000000004c7283: add byte ptr [rbx + rcx], bl; hlt; call qword ptr [rax]; 
0x00000000004c94bf: add byte ptr [rbx + rsi], ah; add byte ptr [rax], al; or al, 0x99; cmc; call qword ptr [rdi + 2]; 
0x0000000000401087: add byte ptr [rbx - 0x16], bh; add rsp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x0000000000401086: add byte ptr [rbx - 0x16], dil; add rsp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x00000000004011b6: add byte ptr [rbx - 0x171076d8], cl; rol byte ptr [rax - 0x3f7b0000], 0x89; ret; 
0x000000000040306b: add byte ptr [rbx - 0x173fcef8], cl; retf; add byte ptr [rip - 0x3ea1700], 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004942b0: add byte ptr [rbx - 0x17], bl; or dword ptr [rax - 1], ecx; jmp qword ptr [rsi + 0xf]; 
0x000000000040f977: add byte ptr [rbx - 0x2ac2fe40], al; add dword ptr [rax], eax; add byte ptr [rdi + rdi - 0x75], dh; or cl, byte ptr [rax - 0x7d]; ret 0x3944; 
0x0000000000458c27: add byte ptr [rbx - 0x358af602], al; lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000004ae9f4: add byte ptr [rbx - 0x4c0f0008], dh; clc; jmp rax; 
0x000000000047c66f: add byte ptr [rbx - 0x4f743], al; jmp qword ptr [rax]; 
0x000000000045760e: add byte ptr [rbx - 0x50f0fe40], al; ret 0xf8e9; 
0x0000000000476c12: add byte ptr [rbx - 0x6bf00008], al; shr cl, 0xfd; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x00000000004a77df: add byte ptr [rbx - 0x6c000028], dl; fdivr st(7); call rax; 
0x0000000000494241: add byte ptr [rbx - 0x72b7efbd], cl; adc eax, 0x30fe0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000452eaf: add byte ptr [rbx - 0x75fd76ff], cl; add al, 0x88; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x00000000004516ef: add byte ptr [rbx - 0x75fd76ff], cl; add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x000000000047567c: add byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x000000000047beeb: add byte ptr [rbx - 0x78f0d008], al; mov eax, 0x8900001d; ret 0x349; 
0x000000000047b59d: add byte ptr [rbx - 0x78f0d008], al; mov ebx, 0x89000025; ret 0x349; 
0x000000000047174b: add byte ptr [rbx - 0x78f0d008], al; mov esi, 0x8900000b; ret 0x349; 
0x000000000047b04f: add byte ptr [rbx - 0x78f0d008], al; mov esi, 0x8900002b; ret 0x349; 
0x0000000000410314: add byte ptr [rbx - 0x7bf00008], al; int 0; add byte ptr [rax], al; add rsp, 0x98; ret; 
0x0000000000455356: add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x0000000000415bf5: add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000418bd9: add byte ptr [rbx - 0x7bf0fc08], al; insd dword ptr [rdi], dx; add al, 0; add byte ptr [rbx - 0x7bf0fe08], al; ret 4; 
0x0000000000419926: add byte ptr [rbx - 0x7bf0fc08], al; ret; 
0x000000000041ff18: add byte ptr [rbx - 0x7bf0fd08], al; ret; 
0x000000000041696c: add byte ptr [rbx - 0x7bf0fe02], al; ret 0x1b; 
0x0000000000418be2: add byte ptr [rbx - 0x7bf0fe08], al; ret 4; 
0x0000000000418b3f: add byte ptr [rbx - 0x7bf0fe08], al; ret; 
0x000000000049e2bf: add byte ptr [rbx - 0x7fbf8f19], al; jmp qword ptr [rax]; 
0x0000000000479033: add byte ptr [rbx - 0x8bf43], al; call qword ptr [rbx + 0xf]; 
0x00000000004af5d0: add byte ptr [rbx - 7], bh; push qword ptr [rax - 0x7f]; stc; inc dword ptr [rax]; cmp ecx, 0xf98090ff; jmp qword ptr [rax]; 
0x00000000004cbd30: add byte ptr [rbx], 0xf8; call qword ptr [rax]; 
0x00000000004a426f: add byte ptr [rbx], ah; add byte ptr [rax], al; add bl, ah; fdivr st(7); jmp rbx; 
0x00000000004a7173: add byte ptr [rbx], ah; fdivr st(7); jmp qword ptr [rbx]; 
0x000000000048aa68: add byte ptr [rbx], al; add byte ptr [rax], al; lea rax, [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x00000000004a93ef: add byte ptr [rbx], al; fdivr st(7); jmp rdx; 
0x00000000004ab34f: add byte ptr [rbx], bl; add byte ptr [rax], al; or eax, 0xe4000001; fdivr st(7); jmp rsp; 
0x00000000004aa313: add byte ptr [rbx], bl; fdivr st(7); jmp qword ptr [rbp + 0xe]; 
0x00000000004aa7f3: add byte ptr [rbx], dl; add byte ptr [rax], al; fdivr st(7); call qword ptr [rbx]; 
0x000000000042c28f: add byte ptr [rcx + 0x1ba41ca], cl; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000004a82f7: add byte ptr [rcx + 0x21000001], dl; fdivr st(7); jmp qword ptr [rcx]; 
0x0000000000476935: add byte ptr [rcx + 0x29], cl; ret; 
0x0000000000405b43: add byte ptr [rcx + 0x29e2d3d9], cl; ret 0x5489; 
0x000000000042090f: add byte ptr [rcx + 0x2b], cl; adc byte ptr [r8 + 1], r9b; ret; 
0x0000000000420876: add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x0000000000498d72: add byte ptr [rcx + 0x348b4cd8], cl; ret 0xf41; 
0x0000000000482b4f: add byte ptr [rcx + 0x39], cl; ret; 
0x0000000000406b3f: add byte ptr [rcx + 0x3c8b48d8], cl; ret 0x8548; 
0x0000000000406c4f: add byte ptr [rcx + 0x3c8b48e8], cl; ret 0x8548; 
0x00000000004091d7: add byte ptr [rcx + 0x3eff], al; ror byte ptr [rdi], 0x85; mov word ptr [rax], es; add byte ptr [rax], al; mov rax, 0x6d52c0; ret; 
0x0000000000409760: add byte ptr [rcx + 0x415d5be8], cl; pop rsp; ret; 
0x00000000004078ef: add byte ptr [rcx + 0x46348f6], cl; mov cl, 0x48; add eax, ecx; jmp rax; 
0x0000000000428530: add byte ptr [rcx + 0x4789246f], cl; adc byte ptr [rbx + 0x5d], bl; ret; 
0x000000000041e751: add byte ptr [rcx + 0x480975f0], cl; add esp, 0xd0; pop rbx; ret; 
0x000000000041e8e0: add byte ptr [rcx + 0x480a75f0], cl; add esp, 0xd8; pop rbx; pop rbp; ret; 
0x0000000000491a32: add byte ptr [rcx + 0x481e75d8], cl; add esp, 0x110; pop rbx; ret; 
0x0000000000421f90: add byte ptr [rcx + 0x5c], al; pop r13; pop r14; ret; 
0x0000000000480dcc: add byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x000000000043cbae: add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000049a3b6: add byte ptr [rcx + 0x63], cl; add al, 0x87; add rax, r15; jmp rax; 
0x0000000000469ace: add byte ptr [rcx + 0x63], cl; cmp al, 0xb3; add rdi, r11; jmp rdi; 
0x000000000043b40c: add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x00000000004531e8: add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000470181: add byte ptr [rcx + 0x63], cl; ret 0x8944; 
0x000000000047bf3a: add byte ptr [rcx + 0x63], cl; ret 0x8948; 
0x0000000000499d34: add byte ptr [rcx + 0x7fffe1], al; add byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x00000000004ab9b3: add byte ptr [rcx + 0x8000001], ah; fdivr st(7); dec dword ptr [rax]; fdivr st(7); jmp qword ptr [rcx + 0x8000001]; 
0x00000000004ab9d3: add byte ptr [rcx + 0x8000001], ah; fdivr st(7); jmp qword ptr [rcx + 0x8000001]; 
0x00000000004091ef: add byte ptr [rcx + 0x8ff], al; jne 0x9270; mov rax, 0x6d2d60; ret; 
0x0000000000482f84: add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x0000000000494e26: add byte ptr [rcx + 0xc8b48d8], cl; ret 0xb60f; 
0x000000000040a3f8: add byte ptr [rcx + 0xca81c2], cl; add byte ptr [rax], al; test eax, eax; cmovns eax, edx; add rsp, 8; ret; 
0x00000000004572e7: add byte ptr [rcx + 0xee8c1c8], cl; and eax, 0x3fc00; pop rbx; ret; 
0x0000000000425fb0: add byte ptr [rcx + 0xf], al; mov dh, 0x36; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x000000000043340d: add byte ptr [rcx + 0xf], al; mov dh, 0x44; add eax, 0xe0c148ff; add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x0000000000478c48: add byte ptr [rcx + 0xf], al; mov dh, 0x46; or al, 0x83; ret; 
0x0000000000433407: add byte ptr [rcx + 0xf], al; mov dh, 0x54; add eax, 0xb60f4100; add eax, 0xe0c148ff; add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x00000000004880ec: add byte ptr [rcx + 0xf], al; mov dh, 0x87; adc eax, 0x89000003; ret 0xe8c0; 
0x00000000004764e7: add byte ptr [rcx + 0xf], al; xchg eax, esp; ret; 
0x000000000047b4fe: add byte ptr [rcx + 1], al; ret 0x8b48; 
0x000000000041ce05: add byte ptr [rcx + 1], cl; ret 0x149; 
0x000000000049b605: add byte ptr [rcx + 1], cl; ret 0xef89; 
0x0000000000455a5f: add byte ptr [rcx + 1], cl; ret; 
0x000000000049c4ba: add byte ptr [rcx + 3], cl; adc al, 0; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000004a83ef: add byte ptr [rcx + rax + 0x18c0000], cl; add byte ptr [rax], al; ret; 
0x000000000042850d: add byte ptr [rcx + rax + 0x57], al; sbb byte ptr [rax + 0x39], cl; ret; 
0x000000000048e614: add byte ptr [rcx + rax - 0x10], dh; inc dword ptr [r9 + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x00000000004046c7: add byte ptr [rcx + rax - 0x18], cl; jmp rax; 
0x00000000004cd6e3: add byte ptr [rcx + rax*2], bl; stc; call rcx; 
0x00000000004ce317: add byte ptr [rcx + rax*4], bh; add byte ptr [rsi + rbx*8 - 7], ah; call qword ptr [rdx]; 
0x00000000004a61c3: add byte ptr [rcx + rax], ah; add dl, dl; add byte ptr [rax], al; add byte ptr [rdi - 0x40000028], bh; fdivr st(7); call rdx; 
0x00000000004ab9af: add byte ptr [rcx + rax], bl; add byte ptr [rax], al; movabs eax, dword ptr [0x8ffffd808000001]; fdivr st(7); jmp qword ptr [rcx + 0x8000001]; 
0x00000000004a83d3: add byte ptr [rcx + rax], dh; add byte ptr [rax], al; ret; 
0x0000000000484a9c: add byte ptr [rcx + rbp - 0x48], dh; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000004c94c3: add byte ptr [rcx + rbx*4], cl; cmc; call qword ptr [rdi + 2]; 
0x00000000004ca1bb: add byte ptr [rcx + rbx*8], dh; cmc; call qword ptr [rdi]; 
0x0000000000425e34: add byte ptr [rcx + rcx - 0xd], dh; ret; 
0x00000000004819c7: add byte ptr [rcx + rcx*4 + 0x23], cl; mov qword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x000000000049fbde: add byte ptr [rcx + rcx*4 + 0x2d], cl; ret 0x237e; 
0x00000000004a145f: add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x0000000000422e9a: add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000048c699: add byte ptr [rcx + rcx*4 - 0x12], cl; xor eax, eax; call 0x8d9b0; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x000000000046dbd2: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000047991f: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000046d62c: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x0000000000483411: add byte ptr [rcx + rcx*4 - 0x17], cl; xor r8d, r8d; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x0000000000458ae4: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov r8d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x0000000000458a14: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov r8d, eax; mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x000000000045dacc: add byte ptr [rcx + rcx*4 - 0x1f], cl; push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x0000000000409698: add byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000421abf: add byte ptr [rcx + rcx*4 - 0x36], cl; mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x000000000042335e: add byte ptr [rcx + rcx*4 - 0x3e], cl; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000041c8e7: add byte ptr [rcx + rcx*4 - 0x40], al; jne 0x1c90c; add rsp, 0x118; ret; 
0x0000000000429c6e: add byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000483f72: add byte ptr [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper; ret; 
0x0000000000482daf: add byte ptr [rcx + rcx*4 - 0x40], cl; vzeroupper; ret; 
0x00000000004268f3: add byte ptr [rcx + rcx*4 - 0x7f], cl; xor byte ptr [rcx], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000047f78c: add byte ptr [rcx + rcx*4 - 0xa], cl; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000004a0b6f: add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x0000000000483563: add byte ptr [rcx + rcx*4 - 7], cl; mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000046ff0d: add byte ptr [rcx + rcx*4 - 9], cl; mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000048497c: add byte ptr [rcx + rdi - 0x75], dh; add eax, 0x254ee7; test eax, eax; jne 0x849e6; mov eax, 0x101; syscall; 
0x00000000004af344: add byte ptr [rcx + rdi*8 - 1], cl; jo 0xaf395; stc; jmp rax; 
0x00000000004c9f1b: add byte ptr [rcx + rdx*8 - 0xb], ah; jmp qword ptr [rdi + 2]; 
0x00000000004c72bf: add byte ptr [rcx + rdx], ah; add byte ptr [rax], al; cmp al, 0xb; hlt; call qword ptr [rdi]; 
0x0000000000401f4f: add byte ptr [rcx - 0x137cb701], cl; or byte ptr [rax + 0x63], cl; add al, 0xba; add rax, rdx; jmp rax; 
0x00000000004588e1: add byte ptr [rcx - 0x176b70e], cl; mov edi, 0xffffff9c; syscall; 
0x0000000000480f4f: add byte ptr [rcx - 0x17f3db8c], cl; xlatb; or al, 0xfa; dec dword ptr [rbx - 0x14f3db8c]; ret 0x5590; 
0x000000000048de3e: add byte ptr [rcx - 0x26b7b], cl; jmp qword ptr [rsi + 0x41]; 
0x0000000000407a03: add byte ptr [rcx - 0x276b70a], cl; sub rsp, 8; movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x00000000004b9873: add byte ptr [rcx - 0x43fffff3], bh; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x000000000046470f: add byte ptr [rcx - 0x46], al; add eax, 0xe9000000; ret; 
0x000000000046a552: add byte ptr [rcx - 0x46], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x0000000000458dab: add byte ptr [rcx - 0x473d7621], cl; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000047bacc: add byte ptr [rcx - 0x48], al; add dword ptr [rax], eax; add byte ptr [rax], al; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000047f4f4: add byte ptr [rcx - 0x73], cl; add dword ptr [r8 - 0x75], r9d; adc dword ptr [rax + 0x39], ecx; ret 0x3873; 
0x000000000048e4bb: add byte ptr [rcx - 0x75], al; adc edi, dword ptr [rcx]; ret 0x840f; 
0x000000000048e558: add byte ptr [rcx - 0x75], al; adc edi, dword ptr [rcx]; ret 0xc74; 
0x000000000047bee7: add byte ptr [rcx - 0x75], al; add byte ptr [r11 - 0x78f0d008], r8b; mov eax, 0x8900001d; ret 0x349; 
0x000000000047b04b: add byte ptr [rcx - 0x75], al; add byte ptr [r11 - 0x78f0d008], r8b; mov esi, 0x8900002b; ret 0x349; 
0x00000000004046be: add byte ptr [rcx - 0x75], al; and byte ptr [r9 + 0x63], r9b; test dword ptr [rax], r8d; add rax, r13; jmp rax; 
0x0000000000404673: add byte ptr [rcx - 0x75], al; push rdi; adc byte ptr [rcx + 0x63], cl; adc al, 0x96; add rdx, r14; jmp rdx; 
0x000000000041ce77: add byte ptr [rcx - 0x75], cl; add byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000046d477: add byte ptr [rcx - 0x75], cl; ja 0x6d494; mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x00000000004a154a: add byte ptr [rcx - 0x75], cl; pop rax; or byte ptr [rbp - 0x77], cl; ret; 
0x0000000000408c3e: add byte ptr [rcx - 0x75], cl; sbb byte ptr [rbx + r9*4 + 0x2c], r9b; ret 0x8548; 
0x000000000046f84f: add byte ptr [rcx - 0x75], cl; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000042057f: add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000047b114: add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000498d6b: add byte ptr [rcx - 0x75], cl; xchg eax, edi; mov eax, 0x89000003; fmul dword ptr [rbx + rcx*4 + 0x34]; ret 0xf41; 
0x0000000000400dbf: add byte ptr [rcx - 0x76b7ac08], cl; ret; 
0x000000000047b8fe: add byte ptr [rcx - 0x77], al; ret 0x1674; 
0x000000000045b087: add byte ptr [rcx - 0x77], al; ret; 
0x00000000004134f0: add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x00000000004a0bc5: add byte ptr [rcx - 0x77], cl; ret 0x8349; 
0x0000000000489124: add byte ptr [rcx - 0x77], cl; ret 0x848b; 
0x0000000000485672: add byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x0000000000432dbb: add byte ptr [rcx - 0x77], cl; ret 0x8d48; 
0x0000000000432d74: add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000499d3a: add byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x000000000045959f: add byte ptr [rcx - 0x77], cl; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x0000000000499e49: add byte ptr [rcx - 0x7b], cl; ret 0x840f; 
0x000000000048088b: add byte ptr [rcx - 0x7cb7e8f4], cl; ret 0x4804; 
0x000000000046dfe1: add byte ptr [rcx - 0x7d], al; in al, dx; add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x00000000004794c5: add byte ptr [rcx - 0x7d], al; in eax, dx; add dword ptr [rax - 0x91743], eax; jmp qword ptr [rax]; 
0x000000000046a927: add byte ptr [rcx - 0x7d], cl; call qword ptr [rbx]; 
0x000000000042874f: add byte ptr [rcx - 0x7d], cl; ret 0x4908; 
0x000000000046ab9e: add byte ptr [rcx - 0x7d], cl; ret 0x6601; 
0x000000000043526f: add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x0000000000433b7f: add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x000000000042c297: add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000004af5d8: add byte ptr [rcx - 0x7f6f0007], al; stc; jmp qword ptr [rax]; 
0x000000000046faad: add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x000000000049c47f: add byte ptr [rcx - 0x80], al; mov ecx, 0xdf; add byte ptr [rdx + 0x48], dh; add esp, 0x18; ret; 
0x000000000048294b: add byte ptr [rcx - 0x876b730], cl; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000406a3f: add byte ptr [rcx - 0xa], al; ret 0x7560; 
0x0000000000423bc1: add byte ptr [rcx - 1], al; xchg eax, edi; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x00000000004afaec: add byte ptr [rcx - 6], al; jmp qword ptr [rax]; 
0x00000000004af84c: add byte ptr [rcx - 7], dh; jmp qword ptr [rax + 0x53]; 
0x00000000004ae910: add byte ptr [rcx - 8], ch; jmp qword ptr [rax]; 
0x000000000043ac32: add byte ptr [rcx - 9], cl; ret 1; 
0x000000000043ac58: add byte ptr [rcx - 9], cl; ret 2; 
0x00000000004a82fb: add byte ptr [rcx], ah; fdivr st(7); jmp qword ptr [rcx]; 
0x0000000000493aa7: add byte ptr [rcx], al; add byte ptr [rax + 9], cl; ror byte ptr [rax - 0x77], 1; or byte ptr [r8 + 2], r15b; ret; 
0x0000000000428569: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x2ae2b3; ret; 
0x0000000000428549: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x2ae2cb; ret; 
0x000000000049a80a: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fucomip st(1); ret; 
0x000000000042930b: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rbp + 6], dh; add rsp, 0x20; pop rbx; ret; 
0x00000000004571d0: add byte ptr [rcx], al; add byte ptr [rax], al; cmp rdx, rcx; jne 0x571b2; vzeroupper; ret; 
0x0000000000455c6f: add byte ptr [rcx], al; add byte ptr [rax], al; sub rax, rdx; ret; 
0x000000000041d87f: add byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000484a95: add byte ptr [rcx], al; cmp eax, 0x410000; je 0x84ac8; mov eax, 0x101; syscall; 
0x000000000043219c: add byte ptr [rcx], al; je 0x321c8; test rax, rax; je 0x321b0; lea rax, [rdx - 0x10]; ret; 
0x0000000000484a9a: add byte ptr [rcx], al; je 0x84ac8; mov eax, 0x101; syscall; 
0x0000000000400b2b: add byte ptr [rcx], al; pop rbp; ret; 
0x000000000048f13b: add byte ptr [rcx], al; pop rbx; ret; 
0x0000000000427a9d: add byte ptr [rcx], al; ret; 
0x000000000045c86c: add byte ptr [rcx], bh; ret; 
0x000000000045b03f: add byte ptr [rcx], bh; sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x00000000004c76b3: add byte ptr [rcx], ch; hlt; jmp rsi; 
0x000000000040a122: add byte ptr [rcx], ch; ret; 
0x0000000000420fe6: add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000429b5b: add byte ptr [rcx], dh; call qword ptr [rax + 0x31]; 
0x0000000000481c8b: add byte ptr [rcx], dh; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000401e1a: add byte ptr [rcx], dh; fucomi st(1); imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000047b404: add byte ptr [rcx], dh; leave; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000482431: add byte ptr [rcx], dh; rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x000000000041d994: add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000043a53c: add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6620; 
0x0000000000406477: add byte ptr [rcx], dh; rol byte ptr [rcx + 0xf], 0xb6; adc dword ptr [rcx], esi; ret 0xd269; 
0x000000000041c8c5: add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 - 0x32], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000045c88b: add byte ptr [rcx], dh; sar byte ptr [rcx], cl; ret; 
0x0000000000484825: add byte ptr [rcx], dh; shr bl, 0xb5; call 0x5b320; nop; mov eax, 0x3f; syscall; 
0x000000000041f14f: add byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0xf0; ret; 
0x00000000004aaf5b: add byte ptr [rcx], dl; fdivr st(7); call qword ptr [rcx]; 
0x0000000000457112: add byte ptr [rdi + 0x12], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x000000000040cc90: add byte ptr [rdi + 0x15], dh; lea rdx, [rip + 0x957de]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004aaf33: add byte ptr [rdi + 0x6000001], ah; fdivr st(7); jmp qword ptr [rdi + 0x6000001]; 
0x00000000004570b2: add byte ptr [rdi + 0x7b], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x000000000049c2ad: add byte ptr [rdi + 1], bh; call rax; 
0x00000000004c7173: add byte ptr [rdi + rax], cl; hlt; call qword ptr [rdi]; 
0x00000000004c64db: add byte ptr [rdi + rbp*4 - 0xd], ah; jmp qword ptr [rax]; 
0x00000000004cc18b: add byte ptr [rdi + rbp*4 - 8], ah; call qword ptr [rcx + 1]; 
0x00000000004cbd6b: add byte ptr [rdi + rbx], al; clc; call qword ptr [rsi + 0x16]; 
0x000000000045bb26: add byte ptr [rdi + rcx + 0x48], dh; test edx, edx; je 0x5bb38; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x0000000000472ab5: add byte ptr [rdi + rcx - 0x4a], al; or al, 0x89; ret 0xc689; 
0x00000000004c70ff: add byte ptr [rdi + rcx], ah; add byte ptr [rsi + rax], cl; hlt; call qword ptr [rdi]; 
0x00000000004c70d7: add byte ptr [rdi + rcx], bh; add byte ptr [rax], al; in al, 5; hlt; call qword ptr [rdx]; 
0x000000000040f97f: add byte ptr [rdi + rdi - 0x75], dh; or cl, byte ptr [rax - 0x7d]; ret 0x3944; 
0x00000000004cc92f: add byte ptr [rdi - 0x2f040000], dl; clc; call rsi; 
0x00000000004a61cb: add byte ptr [rdi - 0x40000028], bh; fdivr st(7); call rdx; 
0x00000000004b9b1b: add byte ptr [rdi - 0x45fffff1], dh; sldt word ptr [rax]; mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x00000000004ae9b0: add byte ptr [rdi - 0x5f8f0008], bl; clc; jmp rax; 
0x00000000004aa6ef: add byte ptr [rdi - 0x60000028], bl; fdivr st(7); call qword ptr [rsi]; 
0x00000000004af910: add byte ptr [rdi - 0x6eef0007], cl; stc; jmp qword ptr [rax]; 
0x00000000004a8bff: add byte ptr [rdi - 0x74000000], ch; add byte ptr [rax], al; add dh, dl; fdivr st(7); call rsi; 
0x00000000004cc89c: add byte ptr [rdi], ah; add al, ah; iretd; clc; jmp qword ptr [rcx]; 
0x00000000004aa36f: add byte ptr [rdi], ah; add byte ptr [rax], al; add byte ptr [rax + rbx*8 - 1], cl; jmp qword ptr [rdi]; 
0x00000000004aa38b: add byte ptr [rdi], ah; add byte ptr [rax], al; add byte ptr [rdi], ah; add byte ptr [rax], al; add byte ptr [rax + rbx*8 - 1], cl; jmp qword ptr [rdi]; 
0x00000000004c889c: add byte ptr [rdi], ah; add byte ptr [rax], al; jo 0xc88f4; cmc; jmp qword ptr [rax]; 
0x00000000004c88ff: add byte ptr [rdi], ah; add byte ptr [rsi + rdx*2], ch; cmc; jmp qword ptr [rcx + 2]; 
0x00000000004aed5c: add byte ptr [rdi], ah; stc; jmp rax; 
0x00000000004afaa0: add byte ptr [rdi], bh; cli; call qword ptr [rax]; 
0x00000000004a83cf: add byte ptr [rdi], bl; add byte ptr [rax], al; add byte ptr [rcx + rax], dh; add byte ptr [rax], al; ret; 
0x00000000004a9d43: add byte ptr [rdi], bl; add byte ptr [rax], al; ret 0; 
0x0000000000456066: add byte ptr [rdi], cl; adc byte ptr [rsi], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000407556: add byte ptr [rdi], cl; adc dword ptr [rax + 0xc0], eax; pop rbx; ret; 
0x0000000000444ab4: add byte ptr [rdi], cl; adc dword ptr [rbp + 0x4c000000], -0x73; sbb eax, 0x6a90e; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000041c8a6: add byte ptr [rdi], cl; add eax, 0x8944c689; ret 0xeab8; 
0x0000000000490456: add byte ptr [rdi], cl; add eax, 0x940fc085; ret 0x3d; 
0x00000000004439d6: add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x00000000004ab1bf: add byte ptr [rdi], cl; fdivr st(7); dec dword ptr [rdi]; fdivr st(7); jmp qword ptr [rbx + 0xf000001]; 
0x00000000004ab1cb: add byte ptr [rdi], cl; fdivr st(7); jmp qword ptr [rbx + 0xf000001]; 
0x0000000000457267: add byte ptr [rdi], cl; lahf; ret 0xea81; 
0x0000000000444a0f: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x0000000000444a7f: add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x000000000045523f: add byte ptr [rdi], cl; mov dh, 0x47; cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000045522f: add byte ptr [rdi], cl; mov dh, 0x47; hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000004551ff: add byte ptr [rdi], cl; mov dh, 0x47; int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000045521f: add byte ptr [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000045520f: add byte ptr [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000049b404: add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000047e13b: add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000045731f: add byte ptr [rdi], cl; mov dh, 0xc1; pop rbx; ret; 
0x000000000049a18d: add byte ptr [rdi], cl; mov dh, 0xc9; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x0000000000434e1f: add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000041c253: add byte ptr [rdi], cl; mov dh, 0xfa; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x0000000000425abf: add byte ptr [rdi], cl; mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000421f9f: add byte ptr [rdi], cl; mov dh, 2; ret; 
0x000000000043b19f: add byte ptr [rdi], cl; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000043acdf: add byte ptr [rdi], cl; mov dh, 7; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000471c93: add byte ptr [rdi], cl; mov ds, word ptr [rax + rax + 0x63490000]; ret 0x8944; 
0x000000000043a56f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000043a59f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000043a58f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000043a5af: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x3a5f0; add rax, rdi; ret; 
0x000000000043a5bf: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x3a5f0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000043a57f: add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x000000000047bf34: add byte ptr [rdi], cl; mov ss, word ptr [rax + rax + 0x63490000]; ret 0x8948; 
0x00000000004aee60: add byte ptr [rdi], cl; stc; call qword ptr [rax + 0x10]; 
0x000000000041c87b: add byte ptr [rdi], cl; sub dword ptr [rsp + 0xd0], eax; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000041c883: add byte ptr [rdi], cl; sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000041c88b: add byte ptr [rdi], cl; sub dword ptr [rsp + 0xf0], eax; syscall; 
0x0000000000410377: add byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000497bbb: add byte ptr [rdi], cl; test byte ptr [rsi - 0x7cfffff5], bl; ret 0x4101; 
0x0000000000494261: add byte ptr [rdi], cl; test dword ptr [rax + 0x48000000], esp; mov edx, dword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000458c17: add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000000], ebp; add esp, 0x78; ret; 
0x0000000000420c0d: add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], ebp; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004254a6: add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], edi; add esp, 0x38; pop rbx; pop rbp; ret; 
0x00000000004849a9: add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], edi; add esp, 0x78; ret; 
0x0000000000420426: add byte ptr [rdi], cl; test dword ptr [rcx - 0x16000002], esi; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x00000000004269a8: add byte ptr [rdi], cl; test dword ptr [rdi + 0x48000002], esp; add esp, 0x38; pop rbx; pop rbp; ret; 
0x00000000004016a4: add byte ptr [rdi], cl; test dword ptr [rdx + 0x48000000], eax; add esp, 0xc8; ret; 
0x0000000000466e1e: add byte ptr [rdi], cl; test dword ptr [rdx + 0x48000000], edi; add esp, 0xb8; pop rbx; pop r12; ret; 
0x0000000000458884: add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], ebp; add esp, 0x68; ret; 
0x0000000000493c87: add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], esi; add esp, 0x30; pop rbx; ret; 
0x0000000000493e48: add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000001], eax; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004988cc: add byte ptr [rdi], cl; test ebp, edi; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x83; ret 0x3901; 
0x0000000000430fde: add byte ptr [rdi], cl; test ebx, edi; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x00000000004090a9: add byte ptr [rdi], cl; xchg dword ptr [rax - 0x7f000000], esp; call qword ptr [rsi]; 
0x0000000000458405: add byte ptr [rdi], cl; xchg dword ptr [rdx + rax - 0x72b80000], esi; adc eax, 0x57c09; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000004790a8: add byte ptr [rdi], cl; xchg dword ptr [rdx + rbx], esp; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042f9fe: add byte ptr [rdi], cl; xchg eax, ebx; ret 0x3d83; 
0x0000000000485b63: add byte ptr [rdi], cl; xchg eax, esp; ret 0xc283; 
0x000000000045eb84: add byte ptr [rdi], cl; xchg eax, esp; ret 0xd5e9; 
0x000000000047f787: add byte ptr [rdx + 0x10], bh; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000004c76af: add byte ptr [rdx + 0x212c0000], dl; hlt; jmp rsi; 
0x000000000041002e: add byte ptr [rdx + 0x3c], bh; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000452e5f: add byte ptr [rdx + 0x48028801], cl; lea eax, [rdx]; ret; 
0x00000000004516af: add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x000000000049c487: add byte ptr [rdx + 0x48], dh; add esp, 0x18; ret; 
0x000000000048b53c: add byte ptr [rdx + 0x63], cl; add al, 0xa1; add rax, rcx; jmp rax; 
0x000000000048be64: add byte ptr [rdx + 0x63], cl; add al, 0xa7; add rax, rdi; jmp rax; 
0x000000000045aee5: add byte ptr [rdx + 0x64], bh; test eax, eax; cmove eax, edx; ret; 
0x000000000041d8d2: add byte ptr [rdx + 0x6c], bh; call 0x10920; xor eax, eax; ret; 
0x00000000004a9767: add byte ptr [rdx + 0xc], bh; add byte ptr [rax], al; mov eax, dword ptr [rcx]; add byte ptr [rax], al; ret; 
0x00000000004aa97f: add byte ptr [rdx + 0xe000001], ah; fdivr st(7); dec dword ptr [rsi]; fdivr st(7); jmp qword ptr [rdx + 0xe000001]; 
0x00000000004aa99f: add byte ptr [rdx + 0xe000001], ah; fdivr st(7); jmp qword ptr [rdx + 0xe000001]; 
0x000000000045b06c: add byte ptr [rdx + 1], bh; mov eax, 0xca; syscall; 
0x0000000000421c37: add byte ptr [rdx + rax - 0xd], dh; ret; 
0x00000000004ca3ff: add byte ptr [rdx + rax*2], ah; add byte ptr [rax], bl; cmc; call qword ptr [rbx]; 
0x0000000000482f81: add byte ptr [rdx + rax], cl; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x00000000004339ce: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x0000000000432cae: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1ce62]; cmove rax, rdx; ret; 
0x000000000043399e: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x00000000004335ae: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x0000000000481c0e: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x902]; cmove rax, rdx; ret; 
0x0000000000482f2e: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000481bde: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xdf2]; cmove rax, rdx; ret; 
0x00000000004023bb: add byte ptr [rdx + rbp + 0x31], dh; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004c8c3f: add byte ptr [rdx + rbp + 0x66cc0000], ah; cmc; call qword ptr [rdi]; 
0x00000000004d0bc7: add byte ptr [rdx + rbp*4], ch; add byte ptr [rax], al; hlt; or bh, ah; call qword ptr [rdi + 1]; 
0x00000000004b9477: add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x000000000045c873: add byte ptr [rdx + rcx - 0x77], dh; adc eax, 0x27923c; pop rbx; ret; 
0x0000000000466460: add byte ptr [rdx + rdi*2 - 0xa], dh; ret; 
0x000000000046645f: add byte ptr [rdx + rdi*2 - 0xa], sil; ret; 
0x00000000004cdbf7: add byte ptr [rdx + rdi*2], bl; add ah, ah; popfq; stc; call qword ptr [rdx]; 
0x00000000004c9bc7: add byte ptr [rdx + rdi], ch; add byte ptr [rax], al; and al, 0xc3; cmc; call qword ptr [rdi]; 
0x0000000000427b33: add byte ptr [rdx + rdx + 0x48], dh; mov eax, dword ptr [rdi + 8]; cmp rax, rdx; jae 0x27b60; movzx eax, byte ptr [rax]; ret; 
0x00000000004c888b: add byte ptr [rdx + rdx*2 - 0xb], ah; call qword ptr [rdx]; 
0x00000000004c941f: add byte ptr [rdx + rsi - 0x6a640000], al; cmc; call qword ptr [rax]; 
0x00000000004d13cf: add byte ptr [rdx + rsi*4], dh; add byte ptr [rax], al; in al, dx; cmp edi, esp; call qword ptr [rax]; 
0x00000000004a977f: add byte ptr [rdx - 0x2a000028], dh; add byte ptr [rax], al; add byte ptr [rdx - 0x4d000028], dh; fdivr st(7); jmp qword ptr [rbp]; 
0x00000000004a9787: add byte ptr [rdx - 0x4d000028], dh; fdivr st(7); jmp qword ptr [rbp]; 
0x00000000004a7133: add byte ptr [rdx - 0x55000028], ch; fdivr st(7); ljmp [rdx - 0x55000028]; fdivr st(7); call qword ptr [rsi]; 
0x00000000004a7477: add byte ptr [rdx - 0x6d000028], dl; fdivr st(7); call qword ptr [rdx - 0x6d000028]; fdivr st(7); jmp qword ptr [rbp]; 
0x00000000004a746b: add byte ptr [rdx - 0x6d000028], dl; fdivr st(7); jmp qword ptr [rbp]; 
0x00000000004687ce: add byte ptr [rdx - 0x77], cl; xor al, 0xf3; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x687de; call rsi; 
0x00000000004d17eb: add byte ptr [rdx - 4], ah; jmp rsp; 
0x00000000004af648: add byte ptr [rdx - 7], dh; push qword ptr [rax + 0x71]; stc; jmp rsi; 
0x00000000004ae930: add byte ptr [rdx - 8], dh; jmp qword ptr [rax]; 
0x00000000004a4213: add byte ptr [rdx], ah; add byte ptr [rax], al; add bh, cl; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004aacaf: add byte ptr [rdx], ah; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004aee14: add byte ptr [rdx], ah; stc; call rax; 
0x000000000046a38c: add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004a94bb: add byte ptr [rdx], al; fdivr st(7); call qword ptr [rsi]; 
0x000000000043390e: add byte ptr [rdx], al; lea rdx, [rip + 0x227d9]; lea rax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x00000000004337ce: add byte ptr [rdx], al; lea rdx, [rip + 0x22909]; lea rax, [rip + 0x22862]; cmovne rax, rdx; ret; 
0x000000000043366e: add byte ptr [rdx], al; lea rdx, [rip + 0x22a79]; lea rax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x0000000000433975: add byte ptr [rdx], al; lea rdx, [rip + 0x22ac2]; lea rax, [rip + 0x22a7b]; cmovne rax, rdx; ret; 
0x0000000000433835: add byte ptr [rdx], al; lea rdx, [rip + 0x22bf2]; lea rax, [rip + 0x22bab]; cmovne rax, rdx; ret; 
0x00000000004336d5: add byte ptr [rdx], al; lea rdx, [rip + 0x22d62]; lea rax, [rip + 0x22d1b]; cmovne rax, rdx; ret; 
0x0000000000433954: add byte ptr [rdx], al; lea rdx, [rip + 0x22f23]; lea rax, [rip + 0x22ecc]; cmovne rax, rdx; ret; 
0x0000000000433814: add byte ptr [rdx], al; lea rdx, [rip + 0x23053]; lea rax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x0000000000433774: add byte ptr [rdx], al; lea rdx, [rip + 0x23973]; lea rax, [rip + 0x2390c]; cmovne rax, rdx; ret; 
0x00000000004afa48: add byte ptr [rdx], bh; cli; call qword ptr [rax]; 
0x00000000004afa48: add byte ptr [rdx], bh; cli; call qword ptr [rax]; cmp bh, dl; jmp qword ptr [rax]; 
0x0000000000432b78: add byte ptr [rdx], bh; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x00000000004ccb9c: add byte ptr [rdx], ch; add byte ptr [rax - 0x1d], ah; clc; call qword ptr [rdx]; 
0x00000000004a9ba3: add byte ptr [rdx], cl; fdivr st(7); jmp qword ptr [rcx]; 
0x00000000004a701b: add byte ptr [rdx], dh; add byte ptr [rax], al; add bl, ch; fdivr st(7); call rsi; 
0x00000000004a716f: add byte ptr [rdx], dh; add dword ptr [rax], eax; add byte ptr [rbx], ah; fdivr st(7); jmp qword ptr [rbx]; 
0x00000000004aaba3: add byte ptr [rdx], dl; fdivr st(7); call qword ptr [rdx]; 
0x00000000004aabd7: add byte ptr [rdx], dl; fdivr st(7); call rbx; 
0x00000000004339cc: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x0000000000432cac: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x1ce62]; cmove rax, rdx; ret; 
0x000000000043399c: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x00000000004335ac: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x0000000000481c0c: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x902]; cmove rax, rdx; ret; 
0x0000000000482f2c: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000481bdc: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0xdf2]; cmove rax, rdx; ret; 
0x00000000004a9cf3: add byte ptr [rip + 0x2d000000], ch; add byte ptr [rax], al; add byte ptr [rbp + rcx], bl; add byte ptr [rip - 0x16000000], dh; fdivr st(7); call rdi; 
0x0000000000484a97: add byte ptr [rip + 0x410000], bh; je 0x84ac8; mov eax, 0x101; syscall; 
0x0000000000484a96: add byte ptr [rip + 0x410000], dil; je 0x84ac8; mov eax, 0x101; syscall; 
0x00000000004339d1: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x0000000000432cb1: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1ce62]; cmove rax, rdx; ret; 
0x00000000004339a1: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x00000000004335b1: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x0000000000481c11: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x902]; cmove rax, rdx; ret; 
0x0000000000482f31: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000481be1: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xdf2]; cmove rax, rdx; ret; 
0x000000000043ca1f: add byte ptr [rip + 0xff], ah; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000043ca1e: add byte ptr [rip + 0xff], spl; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000043c152: add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000004771ff: add byte ptr [rip - 0x11ac17], ch; jmp qword ptr [rsi + 0x2e]; 
0x00000000004a9cff: add byte ptr [rip - 0x16000000], dh; fdivr st(7); call rdi; 
0x00000000004ab353: add byte ptr [rip - 0x1bffffff], cl; fdivr st(7); jmp rsp; 
0x0000000000403072: add byte ptr [rip - 0x3ea1700], 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004a40bf: add byte ptr [rip - 0x7c000000], cl; fdivr st(7); dec dword ptr [rip - 0x7c000000]; fdivr st(7); call qword ptr [rbx]; 
0x00000000004aab9f: add byte ptr [rsi + 0x12000001], ah; fdivr st(7); call qword ptr [rdx]; 
0x000000000043a7b5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000453335: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004279d5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000402345: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov eax, dword ptr [rip + 0x2d3dae]; ret; 
0x0000000000444205: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000046a305: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000046a325: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x000000000046a485: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, 0xf; syscall; 
0x00000000004812c5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000427a15: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000004279f5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2ae759]; ret; 
0x0000000000444395: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000444315: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000455bc5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x00000000004829c5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; xor eax, eax; vzeroupper; ret; 
0x000000000043a7b4: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x00000000004279f4: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2ae759]; ret; 
0x0000000000455bc4: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x00000000004829c4: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; xor eax, eax; vzeroupper; ret; 
0x000000000045b03a: add byte ptr [rsi + 0x80], bh; cmp eax, edx; jne 0x5b04c; nop; mov eax, 0xca; syscall; 
0x000000000045b127: add byte ptr [rsi + 0x80], bh; syscall; 
0x000000000048a9c4: add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; 
0x000000000045b067: add byte ptr [rsi + 0x81], bh; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000049c2a8: add byte ptr [rsi + 0xa], bh; mov edi, 1; call rax; 
0x0000000000455d55: add byte ptr [rsi + 0xf], ah; cmp ah, byte ptr [rbx - 0x27]; add cl, byte ptr [rdi]; xchg eax, edx; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x000000000043b714: add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043a55b: add byte ptr [rsi + 0xf], ah; je 0x3a5af; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000403991: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; add byte ptr [r8 + 0x29], r9b; ret 0x8d48; 
0x0000000000472b5a: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x0000000000472b83: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x33e8; 
0x00000000004296f7: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x4466; 
0x000000000042912f: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x8348; 
0x00000000004758da: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xdce8; 
0x0000000000472b21: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; sbb ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x000000000043a4a4: add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x00000000004296f6: add byte ptr [rsi + 0xf], spl; outsd dx, dword ptr [rsi]; ret 0x4466; 
0x0000000000433621: add byte ptr [rsi + rax*8 - 0xd], dh; ret; 
0x00000000004c7103: add byte ptr [rsi + rax], cl; hlt; call qword ptr [rdi]; 
0x00000000004a716b: add byte ptr [rsi + rax], dl; add byte ptr [rdx], dh; add dword ptr [rax], eax; add byte ptr [rbx], ah; fdivr st(7); jmp qword ptr [rbx]; 
0x00000000004d102f: add byte ptr [rsi + rbp*4 + 0x2fac0000], dl; cld; jmp qword ptr [rdx]; 
0x00000000004cc01f: add byte ptr [rsi + rbx*2 - 0x5be40000], al; clc; call rsp; 
0x00000000004cdc7b: add byte ptr [rsi + rbx*4], dl; stc; jmp rax; 
0x00000000004ce31b: add byte ptr [rsi + rbx*8 - 7], ah; call qword ptr [rdx]; 
0x00000000004d0770: add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x1370303; ret; 
0x00000000004d0708: add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x00000000004d073c: add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x00000000004ca03f: add byte ptr [rsi + rdi - 0x29340000], ah; cmc; call qword ptr [rdi]; 
0x00000000004ce027: add byte ptr [rsi + rdi*2 - 0x3cdc0000], cl; stc; call qword ptr [rax]; 
0x00000000004cdfff: add byte ptr [rsi + rdi*2], ah; add byte ptr [rbx + rax*8], cl; stc; call qword ptr [rcx]; 
0x00000000004c8903: add byte ptr [rsi + rdx*2], ch; cmc; jmp qword ptr [rcx + 2]; 
0x0000000000465220: add byte ptr [rsi + rsi*2 - 0xa], dh; ret; 
0x000000000046521f: add byte ptr [rsi + rsi*2 - 0xa], sil; ret; 
0x00000000004d17e7: add byte ptr [rsi + rsi*4], cl; add byte ptr [rdx - 4], ah; jmp rsp; 
0x00000000004a8eef: add byte ptr [rsi - 0x30000000], cl; fdivr st(7); call rax; 
0x00000000004ab30b: add byte ptr [rsi - 0x3c000000], dh; add byte ptr [rax], al; add ah, dl; fdivr st(7); call rsp; 
0x00000000004a6253: add byte ptr [rsi - 0x41000028], bh; fdivr st(7); call rax; 
0x00000000004b9c6f: add byte ptr [rsi - 0x46fffff0], dh; adc byte ptr [rax], al; add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x00000000004b946f: add byte ptr [rsi - 0x46fffff6], dh; or al, byte ptr [rax]; add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x00000000004a7a7f: add byte ptr [rsi - 0x4a000000], dh; add byte ptr [rax], al; add byte ptr [rbp - 0x72000028], cl; fdivr st(7); call rcx; 
0x00000000004aa6db: add byte ptr [rsi - 0x61000000], al; fdivr st(7); call qword ptr [rsi]; 
0x000000000040142d: add byte ptr [rsi - 0x70], ah; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000049472d: add byte ptr [rsi - 0x70], ah; mov eax, 0x27; syscall; 
0x000000000049472d: add byte ptr [rsi - 0x70], ah; mov eax, 0x27; syscall; ret; 
0x000000000045afbd: add byte ptr [rsi - 0x70], ah; mov eax, 0x63; syscall; 
0x000000000045afbd: add byte ptr [rsi - 0x70], ah; mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x5afd0; ret; 
0x00000000004840fd: add byte ptr [rsi - 0x70], ah; mov eax, 0xc9; syscall; 
0x00000000004840fd: add byte ptr [rsi - 0x70], ah; mov eax, 0xc9; syscall; ret; 
0x0000000000458aad: add byte ptr [rsi - 0x70], ah; mov eax, dword ptr [rip + 0x280db6]; test eax, eax; jne 0x58ad0; mov eax, 1; syscall; 
0x000000000045af8d: add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x9d; syscall; 
0x000000000046a6ad: add byte ptr [rsi - 0x70], ah; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000046a47d: add byte ptr [rsi - 0x70], ah; nop; nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x00000000004004cd: add byte ptr [rsi - 0x70], ah; ret; 
0x00000000004516bf: add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000004516cf: add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000480e0b: add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x0000000000423221: add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000425b00: add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004af138: add byte ptr [rsi - 7], cl; inc dword ptr [rax + 0xfff94d]; stc; push qword ptr [rax + 0x4c]; stc; jmp rax; 
0x00000000004335e7: add byte ptr [rsi - 9], dh; ret 0; 
0x00000000004a82f3: add byte ptr [rsi], ah; or dword ptr [rax], eax; add byte ptr [rcx + 0x21000001], dl; fdivr st(7); jmp qword ptr [rcx]; 
0x00000000004aedfc: add byte ptr [rsi], ah; stc; jmp rax; 
0x00000000004aaf17: add byte ptr [rsi], al; fdivr st(7); inc dword ptr [rsi]; fdivr st(7); jmp qword ptr [rdi + 0x6000001]; 
0x00000000004aaf23: add byte ptr [rsi], al; fdivr st(7); jmp qword ptr [rdi + 0x6000001]; 
0x00000000004a89a7: add byte ptr [rsi], bl; add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; fdivr st(7); call qword ptr [rax]; 
0x00000000004d0cd0: add byte ptr [rsi], cl; cld; call qword ptr [rdx]; 
0x00000000004aa983: add byte ptr [rsi], cl; fdivr st(7); dec dword ptr [rsi]; fdivr st(7); jmp qword ptr [rdx + 0xe000001]; 
0x00000000004aa98f: add byte ptr [rsi], cl; fdivr st(7); jmp qword ptr [rdx + 0xe000001]; 
0x00000000004a8327: add byte ptr [rsi], dh; add dword ptr [rax], eax; add byte ptr [rcx], ah; fdivr st(7); jmp qword ptr [rcx]; 
0x00000000004aacab: add byte ptr [rsi], dh; add dword ptr [rax], eax; add byte ptr [rdx], ah; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004587c1: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000004aa703: add byte ptr [rsi], dl; add byte ptr [rax], al; lahf; fdivr st(7); call qword ptr [rsi]; 
0x00000000004aeeb4: add byte ptr [rsi], dl; stc; call qword ptr [rax + 0x17]; 
0x00000000004bd317: add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x0000000000457cf4: add byte ptr [rsp + rax - 0x7d], dh; adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004697a3: add byte ptr [rsp + rax*2 - 0x75], ah; xor al, ch; ret; 
0x00000000004d0e2f: add byte ptr [rsp + rbp*4 + 0x1c2c0000], dl; cld; jmp qword ptr [rdx + 5]; 
0x00000000004d0e33: add byte ptr [rsp + rbx], ch; cld; jmp qword ptr [rdx + 5]; 
0x00000000004c7363: add byte ptr [rsp + rcx - 0xc], bl; jmp qword ptr [rax + 9]; 
0x00000000004c763f: add byte ptr [rsp + rdx + 0x206c0000], ah; hlt; call qword ptr [rdi]; 
0x00000000004c760f: add byte ptr [rsp + rdx], dh; add byte ptr [rax], bh; hlt; jmp qword ptr [rax]; 
0x0000000000461edc: add byte ptr [rsp + rsi - 0xa], dh; ret; 
0x000000000048afe2: add byte ptr [rsp + rsi*2], al; or bh, bh; and eax, 0x24c274; nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x000000000045ed42: add byte ptr [rsp - 0x18], dh; fst qword ptr [rdi]; cli; jmp qword ptr [rsi + 0xf]; 
0x000000000045ed41: add byte ptr [rsp - 0x18], sil; fst qword ptr [rdi]; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000004cc5bf: add byte ptr [rsp], ah; add byte ptr [rax], al; jl 0xcc589; clc; jmp qword ptr [rax]; 
0x00000000004cc023: add byte ptr [rsp], bl; clc; call rsp; 
0x000000000049100e: add byte ptr ds:[rax], al; mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x00000000004091da: add byte ptr ds:[rax], al; ror byte ptr [rdi], 0x85; mov word ptr [rax], es; add byte ptr [rax], al; mov rax, 0x6d52c0; ret; 
0x000000000046a29c: add byte ptr es:[rax + rcx - 0xd], dh; ret; 
0x00000000004705ce: add byte ptr es:[rax - 0x75], cl; add al, 0xc6; mov esi, 1; jmp rax; 
0x0000000000470c26: add byte ptr es:[rax - 0x75], cl; add al, 0xc6; xor esi, esi; jmp rax; 
0x0000000000470584: add byte ptr es:[rax - 0x75], cl; add al, 0xc7; jmp rax; 
0x00000000004688cd: add byte ptr es:[rax - 0x75], cl; add al, 0xe8; test rax, rax; je 0x688da; call rax; 
0x000000000047003a: add byte ptr es:[rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x00000000004c87b5: add byte ptr es:[rax], al; or byte ptr [rax - 0xb], dl; jmp qword ptr [rax]; 
0x00000000004c8889: add byte ptr es:[rax], al; push rdx; cmc; call qword ptr [rdx]; 
0x00000000004687cd: add byte ptr es:[rdx - 0x77], cl; xor al, 0xf3; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x687de; call rsi; 
0x000000000045aee7: add byte ptr fs:[rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x00000000004cc5c1: add byte ptr fs:[rax], al; jl 0xcc589; clc; jmp qword ptr [rax]; 
0x00000000004ca400: add byte ptr fs:[rax], al; sbb al, 0xe0; cmc; call qword ptr [rbx]; 
0x00000000004a7460: add byte ptr gs:[rax], al; add byte ptr [rbp - 0x53000000], ch; add byte ptr [rax], al; add byte ptr [rdx - 0x6d000028], dl; fdivr st(7); jmp qword ptr [rbp]; 
0x00000000004a9790: add byte ptr gs:[rax], al; add byte ptr [rbp], ah; add byte ptr [rax], al; ret; 
0x00000000004a7488: add byte ptr gs:[rax], al; add byte ptr [rbp], ah; add byte ptr [rax], al; xchg eax, edx; fdivr st(7); jmp qword ptr [rbp]; 
0x00000000004a7474: add byte ptr gs:[rax], al; add byte ptr [rdx - 0x6d000028], dl; fdivr st(7); call qword ptr [rdx - 0x6d000028]; fdivr st(7); jmp qword ptr [rbp]; 
0x00000000004cc70d: add byte ptr gs:[rax], al; and bh, al; clc; jmp qword ptr [rcx]; 
0x00000000004ab49b: add ch, ah; fdivr st(7); jmp qword ptr [rbx + 0x11]; 
0x00000000004ab1ff: add ch, al; add byte ptr [rax], al; add dh, ah; fdivr st(7); jmp rsi; 
0x00000000004a7673: add ch, al; fdivr st(7); call qword ptr [rbp + 7]; 
0x000000000044f8ef: add ch, al; std; xlatb; rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x00000000004aa297: add ch, bl; add byte ptr [rax], al; add bh, ah; fdivr st(7); jmp rdi; 
0x00000000004c435c: add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x00000000004c661e: add ch, byte ptr [rax + 0xa]; ret; 
0x00000000004c435d: add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x0000000000478c44: add ch, byte ptr [rbx]; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x46; or al, 0x83; ret; 
0x0000000000478c83: add ch, byte ptr [rip - 0x7d000000]; ret; 
0x00000000004c930f: add ch, byte ptr [rsi + rcx + 8]; ret; 
0x00000000004a8eeb: add cl, ah; add byte ptr [rax], al; add byte ptr [rsi - 0x30000000], cl; fdivr st(7); call rax; 
0x00000000004a884f: add cl, ah; fdivr st(7); jmp rcx; 
0x00000000004572b8: add cl, al; call 0xfe5f5cb; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000004aebe1: add cl, bh; jmp qword ptr [rax + 2]; 
0x00000000004aec01: add cl, bh; jmp qword ptr [rax]; 
0x00000000004aeb81: add cl, bh; jmp rax; 
0x00000000004516d7: add cl, byte ptr [r8 - 0x76b7fdbe]; clc; ret; 
0x0000000000479462: add cl, byte ptr [rax + 0x29]; ret 0xb8; 
0x00000000004789b6: add cl, byte ptr [rax + 0x39]; ret 0x850f; 
0x000000000046444e: add cl, byte ptr [rax + 0x39]; ret; 
0x0000000000457034: add cl, byte ptr [rax + 0x77f8c50f]; ret; 
0x0000000000420933: add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x0000000000420a14: add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x000000000046006c: add cl, byte ptr [rax + 1]; fimul word ptr [rax + 1]; ret; 
0x000000000043390f: add cl, byte ptr [rax - 0x73]; adc eax, 0x227d9; lea rax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x00000000004337cf: add cl, byte ptr [rax - 0x73]; adc eax, 0x22909; lea rax, [rip + 0x22862]; cmovne rax, rdx; ret; 
0x000000000043366f: add cl, byte ptr [rax - 0x73]; adc eax, 0x22a79; lea rax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x0000000000433976: add cl, byte ptr [rax - 0x73]; adc eax, 0x22ac2; lea rax, [rip + 0x22a7b]; cmovne rax, rdx; ret; 
0x0000000000433836: add cl, byte ptr [rax - 0x73]; adc eax, 0x22bf2; lea rax, [rip + 0x22bab]; cmovne rax, rdx; ret; 
0x00000000004336d6: add cl, byte ptr [rax - 0x73]; adc eax, 0x22d62; lea rax, [rip + 0x22d1b]; cmovne rax, rdx; ret; 
0x0000000000433955: add cl, byte ptr [rax - 0x73]; adc eax, 0x22f23; lea rax, [rip + 0x22ecc]; cmovne rax, rdx; ret; 
0x0000000000433815: add cl, byte ptr [rax - 0x73]; adc eax, 0x23053; lea rax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x0000000000433775: add cl, byte ptr [rax - 0x73]; adc eax, 0x23973; lea rax, [rip + 0x2390c]; cmovne rax, rdx; ret; 
0x0000000000452f75: add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x0000000000451765: add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x0000000000451695: add cl, byte ptr [rax - 0x75]; or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000004516d8: add cl, byte ptr [rax - 0x76b7fdbe]; clc; ret; 
0x0000000000451645: add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000494985: add cl, byte ptr [rax - 0x77]; je 0x949ae; or byte ptr [rax + 1], cl; ret; 
0x000000000048dad4: add cl, byte ptr [rax - 0x77]; ret 0xc148; 
0x000000000046051d: add cl, byte ptr [rax - 0x77]; ret; 
0x0000000000480cf6: add cl, byte ptr [rax - 0x77]; sti; jne 0x80d68; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x00000000004276b2: add cl, byte ptr [rax - 0x7b]; sal byte ptr [rbp - 0x10], 0xf3; ret; 
0x000000000044fea0: add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x000000000044ff03: add cl, byte ptr [rax - 0x7d]; ret 0xe908; 
0x000000000049345d: add cl, byte ptr [rax - 0x7d]; ret 0xf01; 
0x0000000000461151: add cl, byte ptr [rax - 0x7d]; ret; 
0x000000000046faa4: add cl, byte ptr [rbp - 0x7b]; ror byte ptr [rdi], 0x84; rcl byte ptr [rax + rax], 1; add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x0000000000444852: add cl, byte ptr [rbx + 0x257890e]; mov dword ptr [rdi], ecx; ret; 
0x0000000000451713: add cl, byte ptr [rbx + 0x42890341]; add ecx, dword ptr [rax - 0x77]; clc; ret; 
0x0000000000452ef5: add cl, byte ptr [rbx + 0x42890541]; add eax, 0x8428d48; ret; 
0x0000000000451755: add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000047ac93: add cl, byte ptr [rcx + rcx*4 - 0xe]; call qword ptr [rax + 0x38]; 
0x000000000049c1d7: add cl, byte ptr [rcx - 0x75]; adc al, 0x24; mov edi, 1; call rax; 
0x000000000041ce17: add cl, byte ptr [rcx - 0x77]; add dword ptr [rcx - 0x73], ecx; or byte ptr [r8 + 0x39], cl; ret; 
0x0000000000481c1a: add cl, byte ptr [rcx]; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000004a083d: add cl, byte ptr [rdi]; test ah, dl; add dword ptr [rax], eax; add byte ptr [rbx + 0x23600a3d], cl; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000415bef: add cl, byte ptr [rdi]; test bh, bl; sbb al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000419236: add cl, byte ptr [rdi]; test bh, bl; sbb byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000419920: add cl, byte ptr [rdi]; test ch, dl; add al, 0; add byte ptr [rbx - 0x7bf0fc08], al; ret; 
0x0000000000455d5b: add cl, byte ptr [rdi]; xchg eax, edx; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x00000000004516d5: add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000452eb3: add cl, byte ptr [rdx + 0x42880441]; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x00000000004516f3: add cl, byte ptr [rdx + 0x42880441]; add al, 0x48; mov eax, edi; ret; 
0x0000000000402519: add cl, ch; add ebp, esi; add al, byte ptr [rax]; nop; xor eax, eax; ret; 
0x000000000040c7d7: add cl, ch; movsxd rax, dword ptr [rbx]; add byte ptr [rax], al; nop dword ptr [rax]; lea rax, [rip + 0x954ef]; ret; 
0x000000000040f600: add cl, ch; ret 0xffd6; 
0x000000000040f300: add cl, ch; ret 0xffd9; 
0x000000000040f000: add cl, ch; ret 0xffdc; 
0x000000000040ed00: add cl, ch; ret 0xffdf; 
0x000000000040ea00: add cl, ch; ret 0xffe2; 
0x000000000040e700: add cl, ch; ret 0xffe5; 
0x000000000040e400: add cl, ch; ret 0xffe8; 
0x000000000040e100: add cl, ch; ret 0xffeb; 
0x000000000040de00: add cl, ch; ret 0xffee; 
0x000000000040db00: add cl, ch; ret 0xfff1; 
0x000000000040d800: add cl, ch; ret 0xfff4; 
0x000000000040d500: add cl, ch; ret 0xfff7; 
0x000000000040d200: add cl, ch; ret 0xfffa; 
0x000000000040cf00: add cl, ch; ret 0xfffd; 
0x0000000000400fe8: add cl, ch; ret; 
0x0000000000499e90: add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0x2e]; 
0x000000000044a3da: add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x000000000040bbc7: add cl, ch; sldt word ptr [r8]; nop dword ptr [rax]; lea rax, [rip + 0x960ff]; ret; 
0x00000000004a888f: add cl, cl; add byte ptr [rax], al; add al, ah; fdivr st(7); jmp rax; 
0x00000000004c8450: add cl, cl; hlt; jmp qword ptr [rax]; 
0x0000000000400c68: add cl, cl; ret; 
0x00000000004a4bdb: add cl, dl; fdivr st(7); call rcx; 
0x00000000004ab20f: add dh, ah; fdivr st(7); call rdi; 
0x00000000004ab203: add dh, ah; fdivr st(7); jmp rsi; 
0x00000000004ab3db: add dh, al; add byte ptr [rax], al; add bh, dl; fdivr st(7); call rdi; 
0x0000000000408b67: add dh, al; or al, 0; xor eax, eax; ret; 
0x0000000000479758: add dh, al; test eax, ebp; idiv bh; jmp qword ptr [rax]; 
0x000000000046dfa2: add dh, al; test esp, eax; idiv bh; jmp qword ptr [rax]; 
0x00000000004901a8: add dh, bh; dec dword ptr [rax - 0x77]; ret; 
0x00000000004bc977: add dh, bh; xlatb; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x0000000000444a03: add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000421c39: add dh, bl; ret; 
0x000000000043365e: add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x0000000000455827: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x55820; ret; 
0x00000000004558d7: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x558d0; ret; 
0x0000000000409599: add dh, byte ptr [rbp + 0xc]; lea eax, [rsi*8 + 0x14]; ret; 
0x00000000004095df: add dh, byte ptr [rbp + 0xe]; lea eax, [rsi*8 + 0x10]; ret; 
0x00000000004c9841: add dh, byte ptr [rbx + 0xa]; ret; 
0x0000000000447738: add dh, byte ptr [rdx + 0x10]; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000455eaf: add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000046039f: add dh, dh; ret 0x4801; 
0x0000000000431adf: add dh, dh; ret 0x4804; 
0x000000000048b9e8: add dh, dh; ret 0x7403; 
0x00000000004597ef: add dh, dh; ret 0x7404; 
0x0000000000453d87: add dh, dh; ret 0x7501; 
0x0000000000453d94: add dh, dh; ret 0x7502; 
0x0000000000453da1: add dh, dh; ret 0x7504; 
0x0000000000453d59: add dh, dh; ret 0x7510; 
0x0000000000453d66: add dh, dh; ret 0x7520; 
0x000000000043388c: add dh, dh; ret 0x7540; 
0x0000000000431e03: add dh, dh; ret 0xf02; 
0x0000000000469a28: add dh, dh; ret 0xf04; 
0x000000000042a059: add dh, dh; ret 0xf08; 
0x0000000000476341: add dh, dh; ret 0xf40; 
0x0000000000476327: add dh, dh; ret 0xf50; 
0x000000000042a126: add dh, dh; ret; 
0x00000000004aaca7: add dh, dh; sldt word ptr [rax]; add dword ptr ss:[rax], eax; add byte ptr [rdx], ah; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004a8c07: add dh, dl; fdivr st(7); call rsi; 
0x00000000004a9d57: add dl, ah; fdivr st(7); call rsp; 
0x00000000004a9d4b: add dl, ah; fdivr st(7); jmp rdx; 
0x00000000004d0487: add dl, al; add bl, dh; jmp qword ptr [rcx]; 
0x00000000004a9d47: add dl, al; add byte ptr [rax], al; add dl, ah; fdivr st(7); jmp rdx; 
0x00000000004aaf9f: add dl, al; fdivr st(7); inc edx; fdivr st(7); call rsi; 
0x00000000004c273a: add dl, byte ptr [rax + 0x38]; xor esi, dword ptr [rcx]; xchg eax, edi; call qword ptr [rbx + 0x7c]; 
0x000000000049b51a: add dl, byte ptr [rax + rdi*8]; jmp qword ptr [rsi - 0x70]; 
0x00000000004c65ae: add dl, byte ptr [rdi + 0xa]; ret; 
0x00000000004aece8: add dl, ch; clc; call qword ptr [rax - 0x15]; 
0x00000000004a9d03: add dl, ch; fdivr st(7); call rdi; 
0x00000000004a884b: add dl, cl; add byte ptr [rax], al; add cl, ah; fdivr st(7); jmp rcx; 
0x00000000004a61c7: add dl, dl; add byte ptr [rax], al; add byte ptr [rdi - 0x40000028], bh; fdivr st(7); call rdx; 
0x00000000004a78a3: add dl, dl; fdivr st(7); call rdx; 
0x0000000000488dad: add dword ptr [r15], r9d; xchg eax, ebp; ret 0xc283; 
0x000000000047f4f7: add dword ptr [r8 - 0x75], r9d; adc dword ptr [rax + 0x39], ecx; ret 0x3873; 
0x000000000047e515: add dword ptr [r8 - 0x7d], ecx; ret 0x8502; 
0x000000000045ef53: add dword ptr [r8 - 0x7d], r9d; ret; 
0x0000000000469acb: add dword ptr [r8], eax; add byte ptr [rcx + 0x63], cl; cmp al, 0xb3; add rdi, r11; jmp rdi; 
0x0000000000457cf7: add dword ptr [rax + 0x10], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000452e61: add dword ptr [rax + 0x28d4802], ecx; ret; 
0x0000000000474f3a: add dword ptr [rax + 0x29], ecx; fimul dword ptr [rax + 0x39]; ret 0xe57f; 
0x000000000048ef79: add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x0000000000404ad1: add dword ptr [rax + 0x39], ecx; ret 0x1e74; 
0x000000000048ef8b: add dword ptr [rax + 0x39], ecx; ret 0x674; 
0x000000000046abef: add dword ptr [rax + 0x39], ecx; ret 0x8841; 
0x000000000047431a: add dword ptr [rax + 0x39], ecx; ret 0x8c0f; 
0x000000000046c5e3: add dword ptr [rax + 0x39], ecx; ret 0xd774; 
0x0000000000404aef: add dword ptr [rax + 0x39], ecx; ret 0xe275; 
0x000000000046c56d: add dword ptr [rax + 0x39], ecx; ret 0xed75; 
0x000000000042602d: add dword ptr [rax + 0x39], ecx; ret; 
0x000000000048e773: add dword ptr [rax + 0x39], ecx; sal byte ptr [rbp + 0x13], 1; mov byte ptr [rip + 0x24b0a8], 0; mov qword ptr [rip + 0x24ac89], rax; add rsp, 8; ret; 
0x00000000004665d0: add dword ptr [rax + 0x39], r9d; ret; 
0x000000000048e772: add dword ptr [rax + 0x39], r9d; sal byte ptr [rbp + 0x13], 1; mov byte ptr [rip + 0x24b0a8], 0; mov qword ptr [rip + 0x24ac89], rax; add rsp, 8; ret; 
0x00000000004cd6db: add dword ptr [rax + 0x44000000], edx; jne 0xcd6e3; add byte ptr [rcx + rax*2], bl; stc; call rcx; 
0x000000000049d313: add dword ptr [rax + 0x7900ff7a], eax; sbb dword ptr [rax - 0x7d], ecx; ret 0x8001; 
0x0000000000426d93: add dword ptr [rax + 0xf740a39], eax; cmp rsi, rcx; jne 0x26d90; lea eax, [rdx + rdi]; ret; 
0x0000000000491327: add dword ptr [rax + 1], ecx; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x000000000041c7da: add dword ptr [rax + 1], ecx; ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x00000000004885a5: add dword ptr [rax + 9], ecx; ret 0x1475; 
0x000000000042d23e: add dword ptr [rax + 9], ecx; ret 0x8949; 
0x0000000000488577: add dword ptr [rax + 9], ecx; ret 0xe75; 
0x0000000000484b70: add dword ptr [rax + rax], edx; mov eax, ecx; syscall; 
0x000000000043219d: add dword ptr [rax + rbp + 0x48], esi; test eax, eax; je 0x321b0; lea rax, [rdx - 0x10]; ret; 
0x0000000000432223: add dword ptr [rax + rdi - 0x3e], eax; jne 0x32210; sub rax, 0x10; ret; 
0x000000000048d013: add dword ptr [rax - 0x39], ecx; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000048ed92: add dword ptr [rax - 0x3f], ecx; out 4, al; cmp rcx, qword ptr [rdi + rsi]; jae 0x8ed41; xor eax, eax; ret; 
0x00000000004709bb: add dword ptr [rax - 0x4f743], eax; jmp qword ptr [rax]; 
0x00000000004321b4: add dword ptr [rax - 0x73], ecx; clc; cmovne rax, rcx; ret; 
0x000000000047f4f8: add dword ptr [rax - 0x75], ecx; adc dword ptr [rax + 0x39], ecx; ret 0x3873; 
0x00000000004516b1: add dword ptr [rax - 0x776b7fe], ecx; ret; 
0x0000000000481c73: add dword ptr [rax - 0x77], ecx; add byte ptr [r8 - 0x77], r9b; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000452f72: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x0000000000451762: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x0000000000451692: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000451642: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000452ef2: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890541]; add eax, 0x8428d48; ret; 
0x0000000000451752: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000048e6c3: add dword ptr [rax - 0x77], ecx; add eax, 0x24ad45; ret; 
0x000000000046d8a0: add dword ptr [rax - 0x77], ecx; push rsi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000045f4b7: add dword ptr [rax - 0x77], ecx; ret 0x2b48; 
0x00000000004233e6: add dword ptr [rax - 0x77], ecx; ret 0x3c75; 
0x0000000000414c4c: add dword ptr [rax - 0x77], ecx; ret; 
0x000000000048e6c2: add dword ptr [rax - 0x77], r9d; add eax, 0x24ad45; ret; 
0x00000000004902c2: add dword ptr [rax - 0x7d], ecx; mov byte ptr [rcx], 0x84; sal byte ptr [rbp - 0x31], cl; movsx eax, cl; neg eax; ret; 
0x0000000000490933: add dword ptr [rax - 0x7d], ecx; ret 0x4118; 
0x0000000000490cb3: add dword ptr [rax - 0x7d], ecx; ret 0x4418; 
0x000000000046b059: add dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x000000000047e516: add dword ptr [rax - 0x7d], ecx; ret 0x8502; 
0x000000000041217f: add dword ptr [rax - 0x7d], ecx; ret 0x8801; 
0x000000000045faa6: add dword ptr [rax - 0x7d], ecx; ret 0x8b01; 
0x000000000047eb67: add dword ptr [rax - 0x7d], ecx; ret 0x8b04; 
0x000000000041d0db: add dword ptr [rax - 0x7d], ecx; ret 0xf10; 
0x000000000041dbb6: add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000004794c9: add dword ptr [rax - 0x91743], eax; jmp qword ptr [rax]; 
0x000000000046dfe5: add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x0000000000414680: add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x000000000045b069: add dword ptr [rax], 0x1ba0000; add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x000000000040115b: add dword ptr [rax], 0xc0854800; je 0x1170; mov eax, dword ptr [rax]; add rsp, 8; ret; 
0x00000000004ce2ed: add dword ptr [rax], 0xf9de6000; call qword ptr [rbx]; 
0x00000000004ce319: add dword ptr [rax], 0xf9de6400; call qword ptr [rdx]; 
0x00000000004ce305: add dword ptr [rax], 0xf9de6800; call qword ptr [rax]; 
0x00000000004ab355: add dword ptr [rax], eax; add ah, ah; fdivr st(7); jmp rsp; 
0x00000000004613e2: add dword ptr [rax], eax; add al, ch; cmc; cli; jmp qword ptr [rsi + 0xf]; 
0x000000000046a23a: add dword ptr [rax], eax; add al, ch; fisub word ptr [rsi - 6]; jmp qword ptr [rsi + 0x2e]; 
0x000000000048896e: add dword ptr [rax], eax; add al, ch; stosb byte ptr [rdi], al; jg 0x8896d; jmp qword ptr [rsi + 0x2e]; 
0x00000000004631ef: add dword ptr [rax], eax; add al, ch; sub edi, edx; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000004617e7: add dword ptr [rax], eax; add al, ch; xor ecx, esi; cli; inc dword ptr [rcx - 0x77]; ret; 
0x00000000004a624d: add dword ptr [rax], eax; add al, dl; add byte ptr [rax], al; add byte ptr [rsi - 0x41000028], bh; fdivr st(7); call rax; 
0x000000000041f1e4: add dword ptr [rax], eax; add bl, dh; ret; 
0x00000000004571d1: add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; retf 0xd975; vzeroupper; ret; 
0x0000000000482573: add dword ptr [rax], eax; add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x000000000043a87f: add dword ptr [rax], eax; add byte ptr [rax + 1], cl; clc; add rax, rcx; vzeroupper; ret; 
0x0000000000428cda: add dword ptr [rax], eax; add byte ptr [rax + 1], cl; ret; 
0x00000000004aac3d: add dword ptr [rax], eax; add byte ptr [rax + rax], bl; add byte ptr [rax], al; sbb al, 0; add byte ptr [rax], al; ret 0; 
0x0000000000477873: add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x00000000004325da: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; adc eax, 0x7c22c; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000464448: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000049450b: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0x5b; cmovne rax, rdx; ret; 
0x000000000042ddad: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x000000000042a0d6: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x000000000045728d: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; xor eax, 0x588e9; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x00000000004675e3: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; fild word ptr [rcx + rcx*4 + 0x45]; mov eax, 0xff52bee8; dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x0000000000458609: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x16e9; 
0x000000000049dbda: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x3948; 
0x00000000004656b6: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xb2eb; 
0x000000000049c125: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000484d7d: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000045612e: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000480d29: add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x000000000045c301: add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rbp + 0x48], 0x8b; push rax; or dh, dh; ret 0x8902; 
0x0000000000499b6f: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; in al, dx; sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000042e3f0: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x000000000045a9ac: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000465312: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x000000000043a117: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042da45: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4c07; 
0x000000000043303e: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000044f08f: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043a145: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000477b48: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000045db71: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000404a2d: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x84c7; 
0x00000000004bc97a: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x00000000004bbb2a: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rsp; 
0x00000000004bb94a: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d4; 
0x00000000004bc0e2: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d5; 
0x00000000004bb952: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000047f3a8: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049c1dd: add dword ptr [rax], eax; add byte ptr [rax], al; call rax; 
0x000000000045c870: add dword ptr [rax], eax; add byte ptr [rax], al; je 0x5c880; mov dword ptr [rip + 0x27923c], edx; pop rbx; ret; 
0x00000000004705d5: add dword ptr [rax], eax; add byte ptr [rax], al; jmp rax; 
0x000000000042930c: add dword ptr [rax], eax; add byte ptr [rax], al; jne 0x29318; add rsp, 0x20; pop rbx; ret; 
0x000000000048509a: add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x00000000004285aa: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x2ae298], eax; ret; 
0x0000000000400cce: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x2d7698], eax; add rsp, 8; ret; 
0x000000000045b06e: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x0000000000458471: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x000000000048daad: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000049c890: add dword ptr [rax], eax; add byte ptr [rax], al; mov edi, 1; call rax; 
0x000000000048a9c1: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000493916: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x000000000042856a: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x2ae2b3], rax; ret; 
0x000000000042854a: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x2ae2cb], rax; ret; 
0x000000000047e66d: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x0000000000421864: add dword ptr [rax], eax; add byte ptr [rax], al; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000047bacf: add dword ptr [rax], eax; add byte ptr [rax], al; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000047c08d: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x258004]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047c03a: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x258057]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047bb0d: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x258084]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047beac: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2581e5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047be67: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x25822a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047bdd3: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2582be]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000426533: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000495c7e: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000401bf3: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000406a38: add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000458abb: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000047b401: add dword ptr [rax], eax; add byte ptr [rax], al; xor ecx, ecx; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000047c4f4: add dword ptr [rax], eax; add byte ptr [rax], al; xor r8d, r8d; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004ab9b5: add dword ptr [rax], eax; add byte ptr [rax], cl; fdivr st(7); dec dword ptr [rax]; fdivr st(7); jmp qword ptr [rcx + 0x8000001]; 
0x00000000004ab9c1: add dword ptr [rax], eax; add byte ptr [rax], cl; fdivr st(7); jmp qword ptr [rcx + 0x8000001]; 
0x0000000000422418: add dword ptr [rax], eax; add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0x860f; 
0x00000000004a0841: add dword ptr [rax], eax; add byte ptr [rbx + 0x23600a3d], cl; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000049c076: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000045d502: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004ab1d9: add dword ptr [rax], eax; add byte ptr [rbx + 0xf000001], ah; fdivr st(7); jmp qword ptr [rbx + 0xf000001]; 
0x0000000000418b3d: add dword ptr [rax], eax; add byte ptr [rbx - 0x7bf0fe08], al; ret; 
0x00000000004a7171: add dword ptr [rax], eax; add byte ptr [rbx], ah; fdivr st(7); jmp qword ptr [rbx]; 
0x00000000004a93ed: add dword ptr [rax], eax; add byte ptr [rbx], al; fdivr st(7); jmp rdx; 
0x00000000004aa311: add dword ptr [rax], eax; add byte ptr [rbx], bl; fdivr st(7); jmp qword ptr [rbp + 0xe]; 
0x0000000000469acc: add dword ptr [rax], eax; add byte ptr [rcx + 0x63], cl; cmp al, 0xb3; add rdi, r11; jmp rdi; 
0x00000000004ab9b1: add dword ptr [rax], eax; add byte ptr [rcx + 0x8000001], ah; fdivr st(7); dec dword ptr [rax]; fdivr st(7); jmp qword ptr [rcx + 0x8000001]; 
0x00000000004ab9d1: add dword ptr [rax], eax; add byte ptr [rcx + 0x8000001], ah; fdivr st(7); jmp qword ptr [rcx + 0x8000001]; 
0x00000000004588df: add dword ptr [rax], eax; add byte ptr [rcx - 0x176b70e], cl; mov edi, 0xffffff9c; syscall; 
0x00000000004a1548: add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; pop rax; or byte ptr [rbp - 0x77], cl; ret; 
0x0000000000485670: add dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x00000000004a82f9: add dword ptr [rax], eax; add byte ptr [rcx], ah; fdivr st(7); jmp qword ptr [rcx]; 
0x000000000049a808: add dword ptr [rax], eax; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fucomip st(1); ret; 
0x00000000004aaf59: add dword ptr [rax], eax; add byte ptr [rcx], dl; fdivr st(7); call qword ptr [rcx]; 
0x00000000004aaf31: add dword ptr [rax], eax; add byte ptr [rdi + 0x6000001], ah; fdivr st(7); jmp qword ptr [rdi + 0x6000001]; 
0x000000000040f97d: add dword ptr [rax], eax; add byte ptr [rdi + rdi - 0x75], dh; or cl, byte ptr [rax - 0x7d]; ret 0x3944; 
0x00000000004ab1bd: add dword ptr [rax], eax; add byte ptr [rdi], cl; fdivr st(7); dec dword ptr [rdi]; fdivr st(7); jmp qword ptr [rbx + 0xf000001]; 
0x00000000004ab1c9: add dword ptr [rax], eax; add byte ptr [rdi], cl; fdivr st(7); jmp qword ptr [rbx + 0xf000001]; 
0x000000000049b402: add dword ptr [rax], eax; add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x0000000000410375: add dword ptr [rax], eax; add byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], ch; jmp qword ptr [rsi - 0x70]; 
0x00000000004090a7: add dword ptr [rax], eax; add byte ptr [rdi], cl; xchg dword ptr [rax - 0x7f000000], esp; call qword ptr [rsi]; 
0x00000000004a9765: add dword ptr [rax], eax; add byte ptr [rdx + 0xc], bh; add byte ptr [rax], al; mov eax, dword ptr [rcx]; add byte ptr [rax], al; ret; 
0x00000000004aa99d: add dword ptr [rax], eax; add byte ptr [rdx + 0xe000001], ah; fdivr st(7); jmp qword ptr [rdx + 0xe000001]; 
0x00000000004aacad: add dword ptr [rax], eax; add byte ptr [rdx], ah; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004a94b9: add dword ptr [rax], eax; add byte ptr [rdx], al; fdivr st(7); call qword ptr [rsi]; 
0x00000000004a9ba1: add dword ptr [rax], eax; add byte ptr [rdx], cl; fdivr st(7); jmp qword ptr [rcx]; 
0x00000000004aaba1: add dword ptr [rax], eax; add byte ptr [rdx], dl; fdivr st(7); call qword ptr [rdx]; 
0x00000000004aabd5: add dword ptr [rax], eax; add byte ptr [rdx], dl; fdivr st(7); call rbx; 
0x0000000000480e09: add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x000000000042321f: add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004aaf15: add dword ptr [rax], eax; add byte ptr [rsi], al; fdivr st(7); inc dword ptr [rsi]; fdivr st(7); jmp qword ptr [rdi + 0x6000001]; 
0x00000000004aaf21: add dword ptr [rax], eax; add byte ptr [rsi], al; fdivr st(7); jmp qword ptr [rdi + 0x6000001]; 
0x00000000004aa981: add dword ptr [rax], eax; add byte ptr [rsi], cl; fdivr st(7); dec dword ptr [rsi]; fdivr st(7); jmp qword ptr [rdx + 0xe000001]; 
0x00000000004aa98d: add dword ptr [rax], eax; add byte ptr [rsi], cl; fdivr st(7); jmp qword ptr [rdx + 0xe000001]; 
0x00000000004a8325: add dword ptr [rax], eax; add byte ptr [rsi], dh; add dword ptr [rax], eax; add byte ptr [rcx], ah; fdivr st(7); jmp qword ptr [rcx]; 
0x00000000004ab499: add dword ptr [rax], eax; add ch, ah; fdivr st(7); jmp qword ptr [rbx + 0x11]; 
0x000000000040bbc5: add dword ptr [rax], eax; add cl, ch; sldt word ptr [r8]; nop dword ptr [rax]; lea rax, [rip + 0x960ff]; ret; 
0x00000000004a4bd9: add dword ptr [rax], eax; add cl, dl; fdivr st(7); call rcx; 
0x0000000000453d85: add dword ptr [rax], eax; add dh, dh; ret 0x7501; 
0x0000000000453d92: add dword ptr [rax], eax; add dh, dh; ret 0x7502; 
0x0000000000453d9f: add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x0000000000453d57: add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x0000000000453d64: add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x0000000000453d71: add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x0000000000469a26: add dword ptr [rax], eax; add dh, dh; ret 0xf04; 
0x000000000042a124: add dword ptr [rax], eax; add dh, dh; ret; 
0x00000000004a61c5: add dword ptr [rax], eax; add dl, dl; add byte ptr [rax], al; add byte ptr [rdi - 0x40000028], bh; fdivr st(7); call rdx; 
0x00000000004339cb: add dword ptr [rax], eax; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x0000000000432cab: add dword ptr [rax], eax; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1ce62]; cmove rax, rdx; ret; 
0x0000000000432cbc: add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x0000000000400c62: add dword ptr [rax], eax; mov eax, 0; leave; ret; 
0x000000000041e9ac: add dword ptr [rax], eax; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000400bed: add dword ptr [rax], eax; nop; leave; ret; 
0x0000000000493aa8: add dword ptr [rax], eax; or rax, rdx; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x0000000000414ab0: add dword ptr [rax], eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000045bb24: add dword ptr [rax], ebp; add byte ptr [rdi + rcx + 0x48], dh; test edx, edx; je 0x5bb38; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x000000000045bb31: add dword ptr [rax], esp; jmp rdx; 
0x0000000000455b97: add dword ptr [rbp + 0x16], esi; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x55b90; sub rax, 1; ret; 
0x0000000000455a47: add dword ptr [rbp + 0x16], esi; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x55a40; lea rax, [rcx - 1]; ret; 
0x0000000000407739: add dword ptr [rbp + 0x24], esi; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000483225: add dword ptr [rbp + 0x31], eax; sal byte ptr [rcx], 0xc9; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x000000000048329f: add dword ptr [rbp + 0x31], eax; shr byte ptr [rdx], 0x48; lea ecx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000047e795: add dword ptr [rbp + 0xf48ff78], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8502; 
0x000000000047e50f: add dword ptr [rbp + 0xf48ff7e], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8502; 
0x0000000000457fa9: add dword ptr [rbp - 0x57c03b0], ecx; add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xc085; 
0x000000000046de22: add dword ptr [rbp - 0x7b], eax; in al, 0xf; lahf; ret; 
0x00000000004448c2: add dword ptr [rbx + 0x157890e], ecx; mov dword ptr [rdi], ecx; ret; 
0x000000000047b935: add dword ptr [rbx - 0x4f743], eax; jmp qword ptr [rax]; 
0x0000000000463c41: add dword ptr [rbx - 0x67f3f1f], eax; or byte ptr [rdi], 0x85; rol dword ptr [rdx], 0; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000041c1ce: add dword ptr [rbx - 0x7cb70030], eax; ret; 
0x00000000004095da: add dword ptr [rbx - 0x7d], esi; clc; add dh, byte ptr [rbp + 0xe]; lea eax, [rsi*8 + 0x10]; ret; 
0x0000000000452ee1: add dword ptr [rcx + 0x3418b02], ecx; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x0000000000451711: add dword ptr [rcx + 0x3418b02], ecx; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000046bab2: add dword ptr [rcx + 0x39], ecx; ret; 
0x0000000000452ec1: add dword ptr [rcx + 0x418b6602], ecx; add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x0000000000451701: add dword ptr [rcx + 0x418b6602], ecx; add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x0000000000452eb1: add dword ptr [rcx + 0x4418a02], ecx; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000004516f1: add dword ptr [rcx + 0x4418a02], ecx; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000045a083: add dword ptr [rcx + 9], ecx; ret; 
0x0000000000409594: add dword ptr [rcx + rbx - 0x7d], esi; clc; add dh, byte ptr [rbp + 0xc]; lea eax, [rsi*8 + 0x14]; ret; 
0x000000000041ce1a: add dword ptr [rcx - 0x73], ecx; or byte ptr [r8 + 0x39], cl; ret; 
0x00000000004516e1: add dword ptr [rcx - 0x776b7fe], ecx; ret; 
0x000000000047e30e: add dword ptr [rcx - 0x77], eax; ret 0xe883; 
0x00000000004690f8: add dword ptr [rcx - 0x78], eax; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000476a01: add dword ptr [rcx - 0x7d], ecx; ret 0x2504; 
0x0000000000487ceb: add dword ptr [rcx - 0x7d], ecx; ret 0xf01; 
0x000000000045b925: add dword ptr [rcx - 0x7d], ecx; ret; 
0x000000000040fb47: add dword ptr [rcx - 0x7d], ecx; rol byte ptr [rax + rcx*2], 0x83; mov dword ptr [rcx + rax*2], 0x72f2a30f; ret 0xfe83; 
0x00000000004a6c9c: add dword ptr [rcx], eax; add byte ptr [rax], al; add dword ptr [rcx], eax; add byte ptr [rax], al; ret; 
0x00000000004588de: add dword ptr [rcx], eax; add byte ptr [rax], al; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000045885d: add dword ptr [rcx], eax; add byte ptr [rax], al; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x00000000004a6ca0: add dword ptr [rcx], eax; add byte ptr [rax], al; ret; 
0x000000000048498a: add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000040587a: add dword ptr [rcx], edi; ret 0xf772; 
0x0000000000456ec2: add dword ptr [rdi + 0x15], esi; jb 0x56ec9; mov byte ptr [rdi], cl; ret; 
0x0000000000456143: add dword ptr [rdi + 0x26], esi; jb 0x5614d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000457030: add dword ptr [rdi + 0x2c], esi; jb 0x57037; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x00000000004571f8: add dword ptr [rdi + 0x3a], esi; jb 0x571ff; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x00000000004564a3: add dword ptr [rdi + 0x3b], esi; jb 0x564ad; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004568f3: add dword ptr [rdi + 0x53], esi; jb 0x568fd; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004d0775: add dword ptr [rdi], 0x48; or eax, 0x1370303; ret; 
0x00000000004d070d: add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x00000000004d0741: add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x00000000004d071e: add dword ptr [rdi], 0xd; add eax, dword ptr [rbx]; or al, byte ptr [rcx]; ret; 
0x00000000004d0752: add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; cld; ret; 
0x00000000004d0786: add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004cce1d: add dword ptr [rdi], 3; ret 0xa01; 
0x00000000004c812e: add dword ptr [rdi], 3; ret; 
0x00000000004262fb: add dword ptr [rdi], ecx; mov dh, 0x3c; adc byte ptr [rax - 0x78], al; jl 0x26319; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000465b90: add dword ptr [rdi], ecx; mov dh, 0x41; dec dword ptr [rax - 0x7d]; ret 0x8801; 
0x0000000000457611: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0xf8e9; 
0x00000000004a0bbf: add dword ptr [rdi], ecx; test dh, al; add eax, 0x89490000; ret 0x8349; 
0x0000000000406a30: add dword ptr [rdi], ecx; test dword ptr [rax - 0x48000000], esi; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000463501: add dword ptr [rdi], ecx; xchg byte ptr [rdi], dl; or eax, 0xea810000; ret 0; 
0x0000000000488dae: add dword ptr [rdi], ecx; xchg eax, ebp; ret 0xc283; 
0x0000000000483223: add dword ptr [rdx + 1], ebp; xor r8d, r8d; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000455ebc: add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x000000000044774d: add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000049478b: add dword ptr [rdx + rax*2], 1; ret; 
0x00000000004c742a: add dword ptr [rdx + rax], 0x47; ret; 
0x00000000004902c6: add dword ptr [rdx + rdx*8 - 0x41f0308b], eax; sal edi, 0xd8; ret; 
0x0000000000456d26: add dword ptr [rdx - 0x2f], esp; jge 0x56d73; out 0x49, eax; jmp qword ptr [rdx - 0x2f]; 
0x00000000004476a6: add dword ptr [rdx - 0x2f], esp; jl 0x476f3; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000456b87: add dword ptr [rdx - 0x2f], esp; std; jg 0x56bd7; jmp qword ptr [rdx - 0x2f]; 
0x0000000000455e53: add dword ptr [rdx - 0xf], esp; jl 0x55ea0; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455f93: add dword ptr [rdx - 0xf], esp; jl 0x55fe0; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000004cf8e4: add dword ptr [rdx], 0x4a; ret; 
0x00000000004c6b1c: add dword ptr [rdx], 0x55; ret; 
0x00000000004cb7b4: add dword ptr [rdx], 0x5a; ret; 
0x00000000004d2358: add dword ptr [rdx], 0x76; ret; 
0x00000000004c6274: add dword ptr [rdx], 2; cwde; or cl, byte ptr [rsi]; or byte ptr [rbp + 0xb], al; add edx, dword ptr [rsi + 0x4a080e01]; ret; 
0x0000000000427a98: add dword ptr [rip + 0x2b12d5], 1; ret; 
0x000000000041d87a: add dword ptr [rip + 0x2bbfd7], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000406aab: add dword ptr [rsi + 0xa], esi; cmp ecx, eax; setb al; ret; 
0x00000000004c930b: add dword ptr [rsi + rcx + 0x30], ecx; add ch, byte ptr [rsi + rcx + 8]; ret; 
0x00000000004cd6d7: add dword ptr [rsi + rcx - 0x60], eax; add dword ptr [rax + 0x44000000], edx; jne 0xcd6e3; add byte ptr [rcx + rax*2], bl; stc; call rcx; 
0x0000000000400c9f: add dword ptr [rsi - 0x18], esi; mov eax, 0xfffffff2; ret; 
0x00000000004516c2: add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000004516d2: add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000004c6b6c: add dword ptr [rsi], 2; ret; 
0x0000000000404a2c: add dword ptr fs:[rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x84c7; 
0x00000000004a61c4: add dword ptr fs:[rax], eax; add dl, dl; add byte ptr [rax], al; add byte ptr [rdi - 0x40000028], bh; fdivr st(7); call rdx; 
0x000000000046a239: add dword ptr ss:[rax], eax; add al, ch; fisub word ptr [rsi - 6]; jmp qword ptr [rsi + 0x2e]; 
0x00000000004a8328: add dword ptr ss:[rax], eax; add byte ptr [rcx], ah; fdivr st(7); jmp qword ptr [rcx]; 
0x00000000004aacac: add dword ptr ss:[rax], eax; add byte ptr [rdx], ah; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004a8324: add dword ptr ss:[rax], eax; add byte ptr [rsi], dh; add dword ptr [rax], eax; add byte ptr [rcx], ah; fdivr st(7); jmp qword ptr [rcx]; 
0x0000000000407552: add eax, 0; add byte ptr [rax], al; movups xmmword ptr [rax + 0xc0], xmm0; pop rbx; ret; 
0x000000000049938d: add eax, 0x1489066; ret 0xb70f; 
0x000000000045b502: add eax, 0x15b800; add byte ptr [rax], al; syscall; 
0x00000000004079d9: add eax, 0x18c48348; ret; 
0x00000000004339d9: add eax, 0x1bb12; cmove rax, rdx; ret; 
0x0000000000432cb9: add eax, 0x1ce62; cmove rax, rdx; ret; 
0x00000000004587ea: add eax, 0x1f0fc3f3; add byte ptr [rax - 0x39], cl; ret 0xffc0; 
0x000000000040246b: add eax, 0x1ff8c100; add rsp, 8; and eax, 0xffffff83; ret; 
0x00000000004024f2: add eax, 0x1ff8c100; and eax, 0xfffffffe; add rsp, 0x18; ret; 
0x0000000000483d25: add eax, 0x20; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fdd5: add eax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa0a: add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000433590: add eax, 0x221ab; cmove rax, rdx; ret; 
0x0000000000433919: add eax, 0x22732; cmovne rax, rdx; ret; 
0x00000000004337d9: add eax, 0x22862; cmovne rax, rdx; ret; 
0x0000000000433679: add eax, 0x229d2; cmovne rax, rdx; ret; 
0x0000000000433980: add eax, 0x22a7b; cmovne rax, rdx; ret; 
0x0000000000433840: add eax, 0x22bab; cmovne rax, rdx; ret; 
0x00000000004336e0: add eax, 0x22d1b; cmovne rax, rdx; ret; 
0x000000000043395f: add eax, 0x22ecc; cmovne rax, rdx; ret; 
0x0000000000432c40: add eax, 0x22f9b; cmovne rax, rdx; ret; 
0x000000000043381f: add eax, 0x22ffc; cmovne rax, rdx; ret; 
0x00000000004336bf: add eax, 0x2316c; cmovne rax, rdx; ret; 
0x000000000043372e: add eax, 0x237dd; cmovne rax, rdx; ret; 
0x00000000004a025e: add eax, 0x238db1; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000043377f: add eax, 0x2390c; cmovne rax, rdx; ret; 
0x000000000049f9d9: add eax, 0x239506; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000049e961: add eax, 0x23aa7e; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000049e851: add eax, 0x23ab8e; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000494501: add eax, 0x24494b; adc byte ptr [rax - 0x73], cl; adc eax, 0x102; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x000000000049477c: add eax, 0x244a4f; jae 0x9478f; mov rdx, qword ptr [rip + 0x244a4e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000494931: add eax, 0x244fea; ret; 
0x0000000000493d99: add eax, 0x24532a; ret; 
0x0000000000493d7e: add eax, 0x245345; add rsp, 8; ret; 
0x0000000000493d92: add eax, 0x245349; mov qword ptr [rip + 0x24532a], rax; ret; 
0x0000000000493d77: add eax, 0x245364; mov qword ptr [rip + 0x245345], rax; add rsp, 8; ret; 
0x000000000048e822: add eax, 0x247911; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x24abd7]; mov qword ptr [rsi], rax; ret; 
0x0000000000490eba: add eax, 0x2481ed; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000048e82c: add eax, 0x24abd7; mov qword ptr [rsi], rax; ret; 
0x000000000048e7bb: add eax, 0x24ac50; ret; 
0x000000000048e782: add eax, 0x24ac89; add rsp, 8; ret; 
0x000000000048e6c6: add eax, 0x24ad45; ret; 
0x000000000048e77a: add eax, 0x24b0a8; add byte ptr [rax - 0x77], cl; add eax, 0x24ac89; add rsp, 8; ret; 
0x0000000000484980: add eax, 0x254ee7; test eax, eax; jne 0x849e6; mov eax, 0x101; syscall; 
0x000000000047c097: add eax, 0x258004; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047c044: add eax, 0x258057; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047bb17: add eax, 0x258084; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047beb6: add eax, 0x2581e5; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047be71: add eax, 0x25822a; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047be2c: add eax, 0x25826f; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047bddd: add eax, 0x2582be; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047b441: add eax, 0x25895a; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x0000000000470530: add eax, 0x262f6b; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004708df: add eax, 0x2630bc; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470891: add eax, 0x26310a; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004707e2: add eax, 0x2631b9; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470786: add eax, 0x263215; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004704e6: add eax, 0x2634b5; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470498: add eax, 0x263503; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470037: add eax, 0x263664; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004688ca: add eax, 0x26d371; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x688da; call rax; 
0x0000000000466cd2: add eax, 0x272201; ret; 
0x000000000049eda9: add eax, 0x2738a; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000045c842: add eax, 0x27aaf9; ret; 
0x000000000045e7f2: add eax, 0x27b191; ret; 
0x000000000045af3a: add eax, 0x27c271; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045aee1: add eax, 0x27ea3a; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000458d81: add eax, 0x280ae6; test eax, eax; jne 0x58da0; mov eax, 3; syscall; 
0x0000000000458bee: add eax, 0x280c79; test eax, eax; jne 0x58c58; mov eax, 0x48; syscall; 
0x0000000000458ab1: add eax, 0x280db6; test eax, eax; jne 0x58ad0; mov eax, 1; syscall; 
0x00000000004589e1: add eax, 0x280e86; test eax, eax; jne 0x58a00; xor eax, eax; syscall; 
0x0000000000461c2f: add eax, 0x29480000; ret 0x349; 
0x00000000004338f9: add eax, 0x2a5552; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x00000000004337b9: add eax, 0x2a5692; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x0000000000433659: add eax, 0x2a57f2; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x0000000000432c31: add eax, 0x2a621b; adc byte ptr [rax - 0x73], cl; adc eax, 0x23042; lea rax, [rip + 0x22f9b]; cmovne rax, rdx; ret; 
0x000000000042eb97: add eax, 0x2a7d04; ret; 
0x000000000042eb89: add eax, 0x2a7d1a; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2a7d04], rax; ret; 
0x000000000042eba1: add eax, 0x2aa226; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000042eb7b: add eax, 0x2aa238; lea rax, [rip - 0x14a7]; mov qword ptr [rip + 0x2a7d1a], rax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2a7d04], rax; ret; 
0x00000000004285af: add eax, 0x2ae298; ret; 
0x00000000004285a5: add eax, 0x2ae2a6; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x2ae298], eax; ret; 
0x0000000000428570: add eax, 0x2ae2b3; ret; 
0x0000000000428550: add eax, 0x2ae2cb; ret; 
0x0000000000428565: add eax, 0x2ae2e6; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x2ae2b3], rax; ret; 
0x0000000000428545: add eax, 0x2ae306; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x2ae2cb], rax; ret; 
0x0000000000428446: add eax, 0x2ae43d; ret; 
0x00000000004283d6: add eax, 0x2ae45d; ret; 
0x00000000004283c6: add eax, 0x2ae475; ret; 
0x0000000000427a02: add eax, 0x2ae759; ret; 
0x0000000000428a51: add eax, 0x2b0376; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000428a47: add eax, 0x2b0384; test eax, eax; je 0x28a60; mov dword ptr [rip + 0x2b0376], 0; ret; 
0x00000000004285c5: add eax, 0x2b082a; ret; 
0x0000000000427afd: add eax, 0x2b1272; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000049a189: add eax, 0x2ba5a; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000040f9c3: add eax, 0x2c89b8; ret; 
0x000000000040f9bc: add eax, 0x2c89c7; lea rax, [rip + 0x2c89b8]; ret; 
0x000000000040f9b3: add eax, 0x2c89c8; mov eax, dword ptr [rdx + rsi]; mov dword ptr [rip + 0x2c89c7], eax; lea rax, [rip + 0x2c89b8]; ret; 
0x000000000040fb8c: add eax, 0x2c92ef; add rsp, 0x88; pop rbx; ret; 
0x0000000000402351: add eax, 0x2d3dae; ret; 
0x0000000000401f61: add eax, 0x2d41c2; test eax, eax; js 0x2010; add rsp, 8; ret; 
0x0000000000401c8d: add eax, 0x2d447a; mov qword ptr [rip + 0x2d447b], rax; mov qword ptr [rip + 0x2d447c], rax; mov qword ptr [rip + 0x2d447d], rax; add rsp, 8; ret; 
0x0000000000401c94: add eax, 0x2d447b; mov qword ptr [rip + 0x2d447c], rax; mov qword ptr [rip + 0x2d447d], rax; add rsp, 8; ret; 
0x0000000000401c9b: add eax, 0x2d447c; mov qword ptr [rip + 0x2d447d], rax; add rsp, 8; ret; 
0x0000000000401ca2: add eax, 0x2d447d; add rsp, 8; ret; 
0x0000000000401bee: add eax, 0x2d4511; add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000401bc7: add eax, 0x2d4538; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000400cd3: add eax, 0x2d7698; add rsp, 8; ret; 
0x00000000004005a6: add eax, 0x2d8b49; add byte ptr [rax], al; add byte ptr [rax], al; pop rax; ret; 
0x00000000004cea4c: add eax, 0x3400e4e; ret; 
0x000000000049436e: add eax, 0x38c48348; ret; 
0x000000000042c3be: add eax, 0x39480000; ret 0xf275; 
0x0000000000483d45: add eax, 0x40; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fdf5: add eax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa2a: add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000045c44b: add eax, 0x440f4800; ret; 
0x000000000040233f: add eax, 0x441f0f00; add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov eax, dword ptr [rip + 0x2d3dae]; ret; 
0x000000000049bd03: add eax, 0x458b3777; or byte ptr [rcx + 0x63], cl; add al, 0x86; add rax, r14; jmp rax; 
0x0000000000452ef8: add eax, 0x48054289; lea eax, [rdx + 8]; ret; 
0x0000000000451728: add eax, 0x48054289; mov eax, edi; ret; 
0x0000000000444543: add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x0000000000453a56: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000004533f6: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x0000000000447a0b: add eax, 0x487c5162; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000456030: add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000452f79: add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x0000000000451769: add eax, 0x5428948; mov rax, rdi; ret; 
0x0000000000494510: add eax, 0x5b; cmovne rax, rdx; ret; 
0x00000000004bd511: add eax, 0x5ba0000; add byte ptr [rax], al; mov esp, 0xbe000005; add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x00000000004bd51d: add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x0000000000480d0a: add eax, 0x5c415d5b; ret; 
0x0000000000483d93: add eax, 0x60; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fe43: add eax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa4a: add eax, 0x60; add rax, rdi; vzeroupper; ret; 
0x00000000004339a9: add eax, 0x6c52; cmove rax, rdx; ret; 
0x00000000004335b9: add eax, 0x6d12; cmove rax, rdx; ret; 
0x0000000000486b12: add eax, 0x6e80000; sahf; clc; jmp qword ptr [rsi + 0xf]; 
0x0000000000400c84: add eax, 0x75eaff83; sbb bl, dh; ret; 
0x0000000000439d57: add eax, 0x83480000; ret 0x4910; 
0x000000000044d681: add eax, 0x83480000; ret 0xe910; 
0x0000000000439d85: add eax, 0x83480000; ret 0xeb10; 
0x000000000046e7a5: add eax, 0x83ffffef; ret; 
0x0000000000484876: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x0000000000484866: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x0000000000484886: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x0000000000452efb: add eax, 0x8428d48; ret; 
0x000000000041c8a8: add eax, 0x8944c689; ret 0xeab8; 
0x00000000004685c3: add eax, 0x89480000; ret 0x2948; 
0x00000000004a0bc3: add eax, 0x89490000; ret 0x8349; 
0x00000000004a0bb7: add eax, 0x8b480000; or byte ptr [r8 - 0x397bf0ff], bpl; add eax, 0x89490000; ret 0x8349; 
0x000000000042c24c: add eax, 0x8b4d0000; or byte ptr [rbp - 0x75], cl; push rax; or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x0000000000481c19: add eax, 0x902; cmove rax, rdx; ret; 
0x0000000000490458: add eax, 0x940fc085; ret 0x3d; 
0x000000000040c902: add eax, 0x95450; ret; 
0x000000000040c8ea: add eax, 0x9545d; ret; 
0x000000000040c8fa: add eax, 0x95461; ret; 
0x000000000040c8ca: add eax, 0x95465; ret; 
0x000000000040c8da: add eax, 0x95466; ret; 
0x000000000040c8f2: add eax, 0x95470; ret; 
0x000000000040c892: add eax, 0x95483; ret; 
0x000000000040c89a: add eax, 0x95484; ret; 
0x000000000040c88a: add eax, 0x95486; ret; 
0x000000000040c91a: add eax, 0x95494; ret; 
0x000000000040c912: add eax, 0x954a2; ret; 
0x000000000040c862: add eax, 0x954a7; ret; 
0x000000000040c852: add eax, 0x954ac; ret; 
0x000000000040c842: add eax, 0x954b0; ret; 
0x000000000040c90a: add eax, 0x954b1; ret; 
0x000000000040c822: add eax, 0x954bc; ret; 
0x000000000040c8b2: add eax, 0x954c1; ret; 
0x000000000040c8e2: add eax, 0x954c6; ret; 
0x000000000040c812: add eax, 0x954c7; ret; 
0x000000000040c8aa: add eax, 0x954d0; ret; 
0x000000000040c7f2: add eax, 0x954d8; ret; 
0x000000000040c802: add eax, 0x954e4; ret; 
0x000000000040c7e2: add eax, 0x954ef; ret; 
0x000000000040c882: add eax, 0x9550a; ret; 
0x000000000040c87a: add eax, 0x95519; ret; 
0x000000000040c872: add eax, 0x95528; ret; 
0x000000000040c832: add eax, 0x9556f; ret; 
0x000000000040bcf2: add eax, 0x96060; ret; 
0x000000000040bcda: add eax, 0x9606d; ret; 
0x000000000040bcea: add eax, 0x96071; ret; 
0x000000000040bcba: add eax, 0x96075; ret; 
0x000000000040bcca: add eax, 0x96076; ret; 
0x000000000040bce2: add eax, 0x96080; ret; 
0x000000000040bc82: add eax, 0x96093; ret; 
0x000000000040bc8a: add eax, 0x96094; ret; 
0x000000000040bc7a: add eax, 0x96096; ret; 
0x000000000040bd0a: add eax, 0x960a4; ret; 
0x000000000040bd02: add eax, 0x960b2; ret; 
0x000000000040bc52: add eax, 0x960b7; ret; 
0x000000000040bc42: add eax, 0x960bc; ret; 
0x000000000040bc32: add eax, 0x960c0; ret; 
0x000000000040bcfa: add eax, 0x960c1; ret; 
0x000000000040bc12: add eax, 0x960cc; ret; 
0x000000000040bca2: add eax, 0x960d1; ret; 
0x000000000040bcd2: add eax, 0x960d6; ret; 
0x000000000040bc02: add eax, 0x960d7; ret; 
0x000000000040bc9a: add eax, 0x960e0; ret; 
0x000000000040bbe2: add eax, 0x960e8; ret; 
0x000000000040bbf2: add eax, 0x960f4; ret; 
0x000000000040bbd2: add eax, 0x960ff; ret; 
0x000000000040bc72: add eax, 0x9611a; ret; 
0x000000000040bc6a: add eax, 0x96129; ret; 
0x000000000040bc62: add eax, 0x96138; ret; 
0x000000000040bc22: add eax, 0x9617f; ret; 
0x000000000040b0e2: add eax, 0x96c70; ret; 
0x000000000040b0ca: add eax, 0x96c7d; ret; 
0x000000000040b0da: add eax, 0x96c81; ret; 
0x000000000040b0aa: add eax, 0x96c85; ret; 
0x000000000040b0ba: add eax, 0x96c86; ret; 
0x000000000040b0d2: add eax, 0x96c90; ret; 
0x000000000040b072: add eax, 0x96ca3; ret; 
0x000000000040b07a: add eax, 0x96ca4; ret; 
0x000000000040b06a: add eax, 0x96ca6; ret; 
0x000000000040b0fa: add eax, 0x96cb4; ret; 
0x000000000040b0f2: add eax, 0x96cc2; ret; 
0x000000000040b042: add eax, 0x96cc7; ret; 
0x000000000040b032: add eax, 0x96ccc; ret; 
0x000000000040b022: add eax, 0x96cd0; ret; 
0x000000000040b0ea: add eax, 0x96cd1; ret; 
0x000000000040b002: add eax, 0x96cdc; ret; 
0x000000000040b092: add eax, 0x96ce1; ret; 
0x000000000040b0c2: add eax, 0x96ce6; ret; 
0x000000000040aff2: add eax, 0x96ce7; ret; 
0x000000000040b08a: add eax, 0x96cf0; ret; 
0x000000000040afd2: add eax, 0x96cf8; ret; 
0x000000000040afe2: add eax, 0x96d04; ret; 
0x000000000040afc2: add eax, 0x96d0f; ret; 
0x000000000040b062: add eax, 0x96d2a; ret; 
0x000000000040b05a: add eax, 0x96d39; ret; 
0x000000000040b052: add eax, 0x96d48; ret; 
0x000000000040b012: add eax, 0x96d8f; ret; 
0x000000000040a3e2: add eax, 0x979b1; ret; 
0x000000000040a3da: add eax, 0x979c0; ret; 
0x000000000040a3d2: add eax, 0x979cf; ret; 
0x000000000040a3aa: add eax, 0x979d7; ret; 
0x000000000040a352: add eax, 0x979dd; ret; 
0x000000000040a362: add eax, 0x979de; ret; 
0x000000000040a372: add eax, 0x979e0; ret; 
0x000000000040a37a: add eax, 0x979e1; ret; 
0x000000000040a332: add eax, 0x979e3; ret; 
0x000000000040a33a: add eax, 0x979e4; ret; 
0x000000000040a322: add eax, 0x979e7; ret; 
0x000000000040a3a2: add eax, 0x979ea; ret; 
0x000000000040a312: add eax, 0x979ec; ret; 
0x000000000040a302: add eax, 0x979f0; ret; 
0x000000000040a3ba: add eax, 0x979fa; ret; 
0x000000000040a2e2: add eax, 0x979fc; ret; 
0x000000000040a2d2: add eax, 0x97a07; ret; 
0x000000000040a3b2: add eax, 0x97a09; ret; 
0x000000000040a2b2: add eax, 0x97a18; ret; 
0x000000000040a2f2: add eax, 0x97a1e; ret; 
0x000000000040a2c2: add eax, 0x97a24; ret; 
0x000000000040a2a2: add eax, 0x97a2f; ret; 
0x0000000000400d82: add eax, 0xa0b71; ret; 
0x0000000000482f39: add eax, 0xa22; cmove rax, rdx; ret; 
0x000000000043340c: add eax, 0xb60f4100; add eax, 0xe0c148ff; add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x000000000040c8c2: add eax, 0xb81b8; ret; 
0x000000000041c89e: add eax, 0xb8c78948; mov edx, 0xf000000; add eax, 0x8944c689; ret 0xeab8; 
0x000000000040bcb2: add eax, 0xb8dc8; ret; 
0x000000000040b0a2: add eax, 0xb99d8; ret; 
0x000000000040a34a: add eax, 0xba730; ret; 
0x000000000043c44a: add eax, 0xc0310000; ret; 
0x0000000000452f7d: add eax, 0xc428d48; ret; 
0x0000000000453a5d: add eax, 0xc478d48; ret; 
0x00000000004531e7: add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004572b7: add eax, 0xce8c100; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000457347: add eax, 0xce8c100; mov edx, eax; and edx, 0xf; movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x0000000000481be9: add eax, 0xdf2; cmove rax, rdx; ret; 
0x0000000000433412: add eax, 0xe0c148ff; add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x0000000000464712: add eax, 0xe9000000; ret; 
0x00000000004448aa: add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000049c55a: add eax, 0xf7148948; ret; 
0x00000000004448b3: add eax, 0xf7f0ff3; ret; 
0x00000000004afbcc: add eax, 0xfefffa78; ja 0xafbcd; call qword ptr [rbx]; 
0x0000000000408bb7: add eax, 0xffdf43e8; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000482f98: add eax, 0xfffd3f53; cmp edx, 0x1000; lea rdx, [rip - 0x2bf3a]; cmove rax, rdx; ret; 
0x000000000049e86a: add eax, 0xffff50e9; push rbx; ret; 
0x000000000042eb82: add eax, 0xffffeb59; mov qword ptr [rip + 0x2a7d1a], rax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2a7d04], rax; ret; 
0x000000000042eb90: add eax, 0xfffff57b; mov qword ptr [rip + 0x2a7d04], rax; ret; 
0x000000000045db55: add eax, 1; push rax; call rbx; 
0x0000000000483b61: add eax, 1; ret; 
0x0000000000483b58: add eax, 2; ret; 
0x0000000000483b71: add eax, 3; ret; 
0x00000000004107a9: add eax, dword ptr [0]; ret; 
0x000000000049c4bc: add eax, dword ptr [rax + 0xd0]; add rsp, 0x18; ret; 
0x000000000047e1f3: add eax, dword ptr [rax + rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000047e139: add eax, dword ptr [rax + rax]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000048aac8: add eax, dword ptr [rax]; add al, ch; push rax; pop rsi; clc; call qword ptr [rbp + 0x53]; 
0x000000000048aaa8: add eax, dword ptr [rax]; add bl, dh; ret; 
0x0000000000498b26: add eax, dword ptr [rax]; add byte ptr [rax + 0x74], ah; xor ecx, dword ptr [rcx - 0x7d]; ret; 
0x00000000004991fc: add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x0000000000486852: add eax, dword ptr [rax]; add byte ptr [rax + 3], cl; add ecx, dword ptr [rax - 0x77]; and dword ptr [rax - 0x74fffffe], 5; ret; 
0x000000000047e9a1: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x3fe3d; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000048aa69: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add al, 0x90; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000047e1ec: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; or eax, 0x403ae; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000042b858: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; push rax; adc dh, dh; ret 0xf0f; 
0x0000000000499d66: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x000000000046ad29: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; jl 0x6ad54; or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x000000000049603e: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; pop rbp; mov eax, 0x89fd8945; ret 0xe283; 
0x000000000040fcdb: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; push rax; and byte ptr [rax + 1], cl; ret 0xb70f; 
0x000000000042f777: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000042ef7a: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000042f140: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x0000000000439f37: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d821: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000439f65: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000045e744: add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000048f131: add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbx + 0x2480eb0d], al; add byte ptr [rcx], al; pop rbx; ret; 
0x000000000045993c: add eax, dword ptr [rax]; add byte ptr [rax], al; pop rbp; pop r12; jmp rax; 
0x0000000000483bb3: add eax, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000458d8b: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000045b09c: add eax, dword ptr [rax]; add byte ptr [rbp - 0x19], dh; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x5b0ac; ret; 
0x000000000045760c: add eax, dword ptr [rax]; add byte ptr [rbx - 0x50f0fe40], al; ret 0xf8e9; 
0x0000000000498d70: add eax, dword ptr [rax]; add byte ptr [rcx + 0x348b4cd8], cl; ret 0xf41; 
0x000000000045b085: add eax, dword ptr [rax]; add byte ptr [rcx - 0x77], al; ret; 
0x00000000004c64d9: add eax, dword ptr [rax]; add byte ptr [rdi + rbp*4 - 0xd], ah; jmp qword ptr [rax]; 
0x0000000000471c91: add eax, dword ptr [rax]; add byte ptr [rdi], cl; mov ds, word ptr [rax + rax + 0x63490000]; ret 0x8944; 
0x0000000000497bb9: add eax, dword ptr [rax]; add byte ptr [rdi], cl; test byte ptr [rsi - 0x7cfffff5], bl; ret 0x4101; 
0x000000000045b125: add eax, dword ptr [rax]; add byte ptr [rsi + 0x80], bh; syscall; 
0x000000000048b9e6: add eax, dword ptr [rax]; add dh, dh; ret 0x7403; 
0x000000000048a5df: add eax, dword ptr [rax]; add dh, dh; ret 0xf08; 
0x0000000000427a88: add eax, dword ptr [rax]; add rsp, 0x80; mov qword ptr [rip + 0x2b12e0], rdx; add dword ptr [rip + 0x2b12d5], 1; ret; 
0x0000000000429af7: add eax, dword ptr [rax]; add rsp, 0x80; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000045730b: add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; pop rbx; ret; 
0x000000000048cbf5: add eax, dword ptr [rax]; mov eax, 0x15; syscall; 
0x000000000048b53b: add eax, dword ptr [rax]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000048be63: add eax, dword ptr [rax]; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000047e93b: add eax, dword ptr [rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000047e9a9: add eax, dword ptr [rax]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000426c59: add eax, dword ptr [rax]; nop dword ptr [rax + rax]; mov rax, -1; ret; 
0x00000000004572f0: add eax, dword ptr [rax]; pop rbx; ret; 
0x000000000048c6ac: add eax, dword ptr [rbp - 0xb8]; call rax; 
0x0000000000400c9c: add eax, dword ptr [rbx - 0x1789fe06]; mov eax, 0xfffffff2; ret; 
0x0000000000498f5d: add eax, dword ptr [rbx]; mov rdx, r13; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x00000000004d0721: add eax, dword ptr [rbx]; or al, byte ptr [rcx]; ret; 
0x000000000046d1ec: add eax, dword ptr [rcx - 0x40]; call 0xffffffff89d85af6; ret 0x8341; 
0x00000000004960f3: add eax, dword ptr [rdx + 8]; call rax; 
0x0000000000491244: add eax, dword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x9127e; add rsp, 0x68; ret; 
0x0000000000491674: add eax, dword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x916ae; add rsp, 0x68; ret; 
0x00000000004913a5: add eax, dword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x68]; xor rcx, qword ptr fs:[0x28]; jne 0x913ee; add rsp, 0x78; ret; 
0x00000000004d0755: add eax, dword ptr [rdx]; cld; ret; 
0x00000000004d0789: add eax, dword ptr [rdx]; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000048b726: add eax, dword ptr [rsi]; call rax; 
0x0000000000498dc0: add eax, dword ptr [rsi]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000049a196: add eax, eax; jmp rax; 
0x00000000004046c9: add eax, ebp; jmp rax; 
0x0000000000414676: add eax, ebp; mov esi, 0x8d4dfffe; je 0x14686; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x000000000048ba47: add eax, ebx; call rax; 
0x000000000045c94c: add eax, ebx; jmp rax; 
0x000000000044f9a8: add eax, ecx; add rax, rdi; vzeroupper; ret; 
0x00000000004078f7: add eax, ecx; jmp rax; 
0x000000000040cc15: add eax, ecx; lea rcx, [rip + 0x97182]; jmp rax; 
0x000000000040f9af: add eax, ecx; mov qword ptr [rip + 0x2c89c8], rax; mov eax, dword ptr [rdx + rsi]; mov dword ptr [rip + 0x2c89c7], eax; lea rax, [rip + 0x2c89b8]; ret; 
0x000000000043a359: add eax, ecx; ret; 
0x0000000000483c4d: add eax, ecx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fd0d: add eax, ecx; sub rax, rdx; vzeroupper; ret; 
0x000000000043a886: add eax, ecx; vzeroupper; ret; 
0x000000000043a356: add eax, edi; add rax, rcx; ret; 
0x0000000000483c4a: add eax, edi; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fd0a: add eax, edi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000043a883: add eax, edi; add rax, rcx; vzeroupper; ret; 
0x000000000047e82b: add eax, edi; jmp rax; 
0x000000000043a584: add eax, edi; ret; 
0x00000000004946c0: add eax, edi; sub rax, r8; ret; 
0x0000000000483d05: add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fdc5: add eax, edi; sub rax, rdx; vzeroupper; ret; 
0x0000000000455d6a: add eax, edi; sub rax, rsi; ret; 
0x000000000043a9fa: add eax, edi; vzeroupper; ret; 
0x0000000000494778: add eax, edx; cmp rax, qword ptr [rip + 0x244a4f]; jae 0x9478f; mov rdx, qword ptr [rip + 0x244a4e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000400dcb: add eax, edx; jmp rax; 
0x000000000040f940: add eax, edx; ret; 
0x000000000041d76c: add eax, edx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000044fcb6: add eax, edx; sub rax, rdi; ret; 
0x000000000048385b: add eax, edx; sub rax, rdi; shr rax, 2; ret; 
0x000000000048e616: add eax, esi; inc dword ptr [r9 + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x000000000045729c: add eax, esi; jmp rax; 
0x000000000049a1b9: add eax, esi; test dil, dil; jns 0x9a1c3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000049d1d9: add eax, esi; test dil, dil; jns 0x9d1e3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000049edd9: add eax, esi; test dil, dil; jns 0x9ede3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000049b40d: add eax, esp; jmp rax; 
0x0000000000472798: add ebp, 0x30; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000428a49: add ebp, dword ptr [rbx]; add byte ptr [rbp - 0x38ef8b40], al; add eax, 0x2b0376; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000040251b: add ebp, esi; add al, byte ptr [rax]; nop; xor eax, eax; ret; 
0x000000000048b722: add ebx, 0x18; add rax, qword ptr [r14]; call rax; 
0x0000000000498fb1: add ebx, 8; mov qword ptr [rsp], r8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000498ed9: add ebx, 8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x00000000004997ba: add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x0000000000497ab0: add ebx, dword ptr [rbp + 0x41]; pop rsp; pop r13; ret; 
0x0000000000425e71: add ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004d0746: add ebx, dword ptr [rbx + 3]; ret; 
0x0000000000444a73: add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x00000000004571ce: add ecx, 0x100; cmp rdx, rcx; jne 0x571b2; vzeroupper; ret; 
0x000000000045700b: add ecx, 0x80; cmp rdx, rcx; jne 0x56ff7; vzeroupper; ret; 
0x0000000000451715: add ecx, dword ptr [r9 - 0x76b7fcbe]; clc; ret; 
0x0000000000433417: add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x00000000004035b6: add ecx, dword ptr [rax + 0x39]; ret 0x4474; 
0x000000000046660d: add ecx, dword ptr [rax + 0x39]; ret; 
0x000000000041cd7e: add ecx, dword ptr [rax + 1]; fmul dword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000481c09: add ecx, dword ptr [rax + rax]; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x902]; cmove rax, rdx; ret; 
0x00000000004940b6: add ecx, dword ptr [rax - 0x75]; sbb byte ptr [r9], sil; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x000000000045af37: add ecx, dword ptr [rax - 0x77]; add eax, 0x27c271; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000486857: add ecx, dword ptr [rax - 0x77]; and dword ptr [rax - 0x74fffffe], 5; ret; 
0x0000000000451719: add ecx, dword ptr [rax - 0x77]; clc; ret; 
0x000000000048db77: add ecx, dword ptr [rax - 0x77]; mov rax, rcx; ret; 
0x000000000045f043: add ecx, dword ptr [rax - 0x77]; or byte ptr [r15], 0x8e; ret 1; 
0x000000000040512f: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000049aecf: add ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000041d771: add ecx, dword ptr [rbp + rcx*4 + 0x64]; ret; 
0x000000000049013a: add ecx, dword ptr [rbp - 0x77]; dec byte ptr [rax - 0x7d]; ret; 
0x0000000000492630: add ecx, dword ptr [rbp - 0x77]; ret 0x8d48; 
0x00000000004447e2: add ecx, dword ptr [rbx + 0x357890e]; mov dword ptr [rdi], ecx; ret; 
0x00000000004d0712: add ecx, dword ptr [rbx + 3]; ret; 
0x00000000004539c4: add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x0000000000453394: add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x000000000041ea15: add ecx, dword ptr [rcx + rcx*4 + 0x42]; or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x0000000000498f5e: add ecx, dword ptr [rcx + rcx*4 - 0x16]; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000451716: add ecx, dword ptr [rcx - 0x76b7fcbe]; clc; ret; 
0x000000000040cc5d: add ecx, dword ptr [rdi]; mov bh, 0x44; add al, byte ptr [r9]; ret 0xb60f; 
0x0000000000457faf: add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xc085; 
0x000000000045800d: add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xd284; 
0x00000000004919e9: add ecx, dword ptr [rdx - 0x3f7a0003]; jne 0x91a40; mov ebx, eax; mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x00000000004c8649: add ecx, dword ptr [rsi + rcx - 0x50]; add al, byte ptr [rdx]; ret 0xb00e; 
0x00000000004755c9: add ecx, eax; mov eax, r9d; ret; 
0x000000000043b412: add ecx, ebx; jmp rcx; 
0x00000000004aec85: add ecx, edi; call qword ptr [rax]; 
0x00000000004aec65: add ecx, edi; jmp qword ptr [rax + 3]; 
0x00000000004aec25: add ecx, edi; jmp rax; 
0x00000000004572c4: add ecx, esi; jmp rcx; 
0x0000000000453895: add edi, 0x10; bsf rdx, rdx; lea r11, [rip + 0x5c1ed]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453275: add edi, 0x10; bsf rdx, rdx; lea r11, [rip + 0x5c78d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004538fd: add edi, 0x10; lea r11, [rip + 0x5c189]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004532dd: add edi, 0x10; lea r11, [rip + 0x5c729]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000455d09: add edi, 0x10; sub eax, r8d; cmp eax, ecx; jle 0x55d48; movsxd rax, ecx; ret; 
0x000000000048a9bd: add edi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000453932: add edi, 0x20; lea r11, [rip + 0x5c154]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453312: add edi, 0x20; lea r11, [rip + 0x5c6f4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045b122: add edi, 0x308; mov esi, 0x80; syscall; 
0x00000000004537ff: add edi, 0x30; lea r11, [rip + 0x5c287]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004531df: add edi, 0x30; lea r11, [rip + 0x5c827]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004cbd31: add edi, eax; call qword ptr [rax]; 
0x000000000049c57b: add edi, eax; jmp qword ptr [rsi - 0x70]; 
0x0000000000474084: add edi, eax; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x0000000000471827: add edi, ebx; jmp qword ptr [rsi + 0xf]; 
0x0000000000469ad4: add edi, ebx; jmp rdi; 
0x00000000004aec89: add edi, ecx; call qword ptr [rax]; 
0x00000000004aec69: add edi, ecx; jmp qword ptr [rax + 5]; 
0x00000000004aec29: add edi, ecx; jmp rax; 
0x0000000000446271: add edi, edx; add rsi, rdx; lea r11, [rip + 0x69393]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004460f1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x69513]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445f71: add edi, edx; add rsi, rdx; lea r11, [rip + 0x69693]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445df2: add edi, edx; add rsi, rdx; lea r11, [rip + 0x69812]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445c71: add edi, edx; add rsi, rdx; lea r11, [rip + 0x69993]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445af1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x69b13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445971: add edi, edx; add rsi, rdx; lea r11, [rip + 0x69c93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004457f1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x69e13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445671: add edi, edx; add rsi, rdx; lea r11, [rip + 0x69f93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004454f1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6a113]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445371: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6a293]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004451f1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6a413]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445071: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6a593]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444ef1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6a713]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444d71: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6a893]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443791: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6b973]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443611: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6baf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443491: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6bc73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443312: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6bdf2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443191: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6bf73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443011: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6c0f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442e91: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6c273]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442d11: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6c3f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442b91: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6c573]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442a11: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6c6f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442891: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6c873]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442711: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6c9f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442591: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6cb73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442411: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6ccf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442291: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6ce73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f727: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6f5dd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cd57: add edi, edx; add rsi, rdx; lea r11, [rip + 0x71ded]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000041c25c: add edi, edx; jmp rdi; 
0x00000000004464dc: add edi, edx; lea r11, [rip + 0x6912b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444c37: add edi, edx; lea r11, [rip + 0x6a9d0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444adb: add edi, edx; lea r11, [rip + 0x6ab2c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004439e8: add edi, edx; lea r11, [rip + 0x6b71f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441dda: add edi, edx; lea r11, [rip + 0x6cf2d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442157: add edi, edx; lea r11, [rip + 0x6cfb0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441fe5: add edi, edx; lea r11, [rip + 0x6d122]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f63b: add edi, edx; lea r11, [rip + 0x6f6cc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f576: add edi, edx; lea r11, [rip + 0x6f791]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cc6b: add edi, edx; lea r11, [rip + 0x71edc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cba6: add edi, edx; lea r11, [rip + 0x71fa1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043be61: add edi, edx; lea r11, [rip + 0x72ba6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bde7: add edi, edx; lea r11, [rip + 0x72c20]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bd58: add edi, edx; lea r11, [rip + 0x72caf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bb4d: add edi, edx; lea r11, [rip + 0x72eba]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043ba1b: add edi, edx; lea r11, [rip + 0x72fec]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b955: add edi, edx; lea r11, [rip + 0x730b2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b8d7: add edi, edx; lea r11, [rip + 0x73130]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b840: add edi, edx; lea r11, [rip + 0x731c7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b644: add edi, edx; lea r11, [rip + 0x733c3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b513: add edi, edx; lea r11, [rip + 0x734f4]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b404: add edi, edx; lea r11, [rip + 0x73603]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000440320: add edi, edx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e9e2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d950: add edi, edx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x711f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441d0c: add edi, edx; sfence; lea r11, [rip + 0x6cff8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f324: add edi, edx; sfence; lea r11, [rip + 0x6f820]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004538b8: add edx, 0x10; sub rdx, rcx; lea r11, [rip + 0x5c1cb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453298: add edx, 0x10; sub rdx, rcx; lea r11, [rip + 0x5c76b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004c627d: add edx, dword ptr [rsi + 0x4a080e01]; ret; 
0x0000000000492892: add edx, eax; mov rax, rdx; pop rbx; ret; 
0x000000000041bf73: add edx, edi; jmp rdx; 
0x000000000040467d: add edx, esi; jmp rdx; 
0x00000000004538f9: add esi, 0x10; add rdi, 0x10; lea r11, [rip + 0x5c189]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004532d9: add esi, 0x10; add rdi, 0x10; lea r11, [rip + 0x5c729]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045392e: add esi, 0x20; add rdi, 0x20; lea r11, [rip + 0x5c154]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045330e: add esi, 0x20; add rdi, 0x20; lea r11, [rip + 0x5c6f4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004537fb: add esi, 0x30; add rdi, 0x30; lea r11, [rip + 0x5c287]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004531db: add esi, 0x30; add rdi, 0x30; lea r11, [rip + 0x5c827]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000420467: add esi, 0x58; mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000048ed90: add esi, 1; shl rsi, 4; cmp rcx, qword ptr [rdi + rsi]; jae 0x8ed41; xor eax, eax; ret; 
0x00000000004902c4: add esi, 1; test dl, dl; jne 0x9029a; movsx eax, cl; neg eax; ret; 
0x000000000045d4fb: add esi, dword ptr [rbp - 0x53]; add rsp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000467a16: add esi, dword ptr [rdi + rax - 0xd]; ret; 
0x0000000000470499: add esi, dword ptr [rip - 0x74b7ffda]; add al, 0xf8; jmp rax; 
0x00000000004695d5: add esi, eax; jmp rsi; 
0x0000000000444993: add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x00000000004560c5: add esi, ebx; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000045879c: add esi, ebx; ret; 
0x000000000042e090: add esi, ebx; stosq qword ptr [rdi], rax; pop rbx; ret; 
0x0000000000453871: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x5c212]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453854: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x5c22f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453251: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x5c7b2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453234: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x5c7cf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004573ce: add esi, edi; int1; pop rbx; mov eax, eax; ret; 
0x00000000004464d9: add esi, edx; add rdi, rdx; lea r11, [rip + 0x6912b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444c34: add esi, edx; add rdi, rdx; lea r11, [rip + 0x6a9d0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444ad8: add esi, edx; add rdi, rdx; lea r11, [rip + 0x6ab2c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004439e5: add esi, edx; add rdi, rdx; lea r11, [rip + 0x6b71f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441dd7: add esi, edx; add rdi, rdx; lea r11, [rip + 0x6cf2d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442154: add esi, edx; add rdi, rdx; lea r11, [rip + 0x6cfb0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441fe2: add esi, edx; add rdi, rdx; lea r11, [rip + 0x6d122]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f638: add esi, edx; add rdi, rdx; lea r11, [rip + 0x6f6cc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f573: add esi, edx; add rdi, rdx; lea r11, [rip + 0x6f791]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cc68: add esi, edx; add rdi, rdx; lea r11, [rip + 0x71edc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cba3: add esi, edx; add rdi, rdx; lea r11, [rip + 0x71fa1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043be5e: add esi, edx; add rdi, rdx; lea r11, [rip + 0x72ba6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bde4: add esi, edx; add rdi, rdx; lea r11, [rip + 0x72c20]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bd55: add esi, edx; add rdi, rdx; lea r11, [rip + 0x72caf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bb4a: add esi, edx; add rdi, rdx; lea r11, [rip + 0x72eba]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043ba18: add esi, edx; add rdi, rdx; lea r11, [rip + 0x72fec]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b952: add esi, edx; add rdi, rdx; lea r11, [rip + 0x730b2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b8d4: add esi, edx; add rdi, rdx; lea r11, [rip + 0x73130]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b83d: add esi, edx; add rdi, rdx; lea r11, [rip + 0x731c7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b641: add esi, edx; add rdi, rdx; lea r11, [rip + 0x733c3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b510: add esi, edx; add rdi, rdx; lea r11, [rip + 0x734f4]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b401: add esi, edx; add rdi, rdx; lea r11, [rip + 0x73603]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000446274: add esi, edx; lea r11, [rip + 0x69393]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004460f4: add esi, edx; lea r11, [rip + 0x69513]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445f74: add esi, edx; lea r11, [rip + 0x69693]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445df5: add esi, edx; lea r11, [rip + 0x69812]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445c74: add esi, edx; lea r11, [rip + 0x69993]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445af4: add esi, edx; lea r11, [rip + 0x69b13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445974: add esi, edx; lea r11, [rip + 0x69c93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004457f4: add esi, edx; lea r11, [rip + 0x69e13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445674: add esi, edx; lea r11, [rip + 0x69f93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004454f4: add esi, edx; lea r11, [rip + 0x6a113]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445374: add esi, edx; lea r11, [rip + 0x6a293]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004451f4: add esi, edx; lea r11, [rip + 0x6a413]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445074: add esi, edx; lea r11, [rip + 0x6a593]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444ef4: add esi, edx; lea r11, [rip + 0x6a713]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444d74: add esi, edx; lea r11, [rip + 0x6a893]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443794: add esi, edx; lea r11, [rip + 0x6b973]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443614: add esi, edx; lea r11, [rip + 0x6baf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443494: add esi, edx; lea r11, [rip + 0x6bc73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443315: add esi, edx; lea r11, [rip + 0x6bdf2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443194: add esi, edx; lea r11, [rip + 0x6bf73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443014: add esi, edx; lea r11, [rip + 0x6c0f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442e94: add esi, edx; lea r11, [rip + 0x6c273]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442d14: add esi, edx; lea r11, [rip + 0x6c3f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442b94: add esi, edx; lea r11, [rip + 0x6c573]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442a14: add esi, edx; lea r11, [rip + 0x6c6f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442894: add esi, edx; lea r11, [rip + 0x6c873]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442714: add esi, edx; lea r11, [rip + 0x6c9f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442594: add esi, edx; lea r11, [rip + 0x6cb73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442414: add esi, edx; lea r11, [rip + 0x6ccf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442294: add esi, edx; lea r11, [rip + 0x6ce73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440c50: add esi, edx; lea r11, [rip + 0x6e0b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440b00: add esi, edx; lea r11, [rip + 0x6e207]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004409b0: add esi, edx; lea r11, [rip + 0x6e357]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440860: add esi, edx; lea r11, [rip + 0x6e4a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440710: add esi, edx; lea r11, [rip + 0x6e5f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004405c0: add esi, edx; lea r11, [rip + 0x6e747]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440470: add esi, edx; lea r11, [rip + 0x6e897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004401d0: add esi, edx; lea r11, [rip + 0x6eb37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440080: add esi, edx; lea r11, [rip + 0x6ec87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ff30: add esi, edx; lea r11, [rip + 0x6edd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fde0: add esi, edx; lea r11, [rip + 0x6ef27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fc90: add esi, edx; lea r11, [rip + 0x6f077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fb40: add esi, edx; lea r11, [rip + 0x6f1c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f9f0: add esi, edx; lea r11, [rip + 0x6f317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f72a: add esi, edx; lea r11, [rip + 0x6f5dd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e280: add esi, edx; lea r11, [rip + 0x708c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e130: add esi, edx; lea r11, [rip + 0x70a17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dfe0: add esi, edx; lea r11, [rip + 0x70b67]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043de90: add esi, edx; lea r11, [rip + 0x70cb7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dd40: add esi, edx; lea r11, [rip + 0x70e07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dbf0: add esi, edx; lea r11, [rip + 0x70f57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043daa0: add esi, edx; lea r11, [rip + 0x710a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d800: add esi, edx; lea r11, [rip + 0x71347]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d6b0: add esi, edx; lea r11, [rip + 0x71497]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d560: add esi, edx; lea r11, [rip + 0x715e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d410: add esi, edx; lea r11, [rip + 0x71737]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d2c0: add esi, edx; lea r11, [rip + 0x71887]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d170: add esi, edx; lea r11, [rip + 0x719d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d020: add esi, edx; lea r11, [rip + 0x71b27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cd5a: add esi, edx; lea r11, [rip + 0x71ded]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000455c6d: add esp, 0x100; sub rax, rdx; ret; 
0x0000000000467ba6: add esp, 0x10; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004259a1: add esp, 0x10; pop rbx; jmp rax; 
0x0000000000401af3: add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000403e7c: add esp, 0x10; pop rbx; ret; 
0x0000000000491a38: add esp, 0x110; pop rbx; ret; 
0x000000000041c8ee: add esp, 0x118; ret; 
0x000000000046a62a: add esp, 0x148; ret; 
0x00000000004294b9: add esp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000042e783: add esp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000042edae: add esp, 0x18; pop rbx; pop rbp; jmp rax; 
0x000000000045c66a: add esp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000401521: add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004018e8: add esp, 0x18; ret; 
0x000000000042e7d1: add esp, 0x18; xor edx, edx; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000049c073: add esp, 0x198; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000045d4ff: add esp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004328c0: add esp, 0x20; call 0x1ee90; call 0x1c920; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x00000000004264ad: add esp, 0x20; mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x000000000042608d: add esp, 0x20; pop rbx; jmp rax; 
0x00000000004264e6: add esp, 0x20; pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x0000000000491ab9: add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000401da4: add esp, 0x20; pop rbx; ret; 
0x000000000049c724: add esp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000049c731: add esp, 0x278; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000457df2: add esp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000045876a: add esp, 0x28; ret; 
0x000000000045e8d8: add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000493c8f: add esp, 0x30; pop rbx; ret; 
0x0000000000499f86: add esp, 0x38; pop rbx; pop r14; ret; 
0x00000000004065c7: add esp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004254ae: add esp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000484bf1: add esp, 0x38; ret; 
0x00000000004978dc: add esp, 0x40; pop rbx; ret; 
0x0000000000490fcc: add esp, 0x48; jmp qword ptr [rax]; 
0x0000000000458442: add esp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000403ad9: add esp, 0x48; ret; 
0x0000000000403b59: add esp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x00000000004979c3: add esp, 0x50; pop rbx; ret; 
0x0000000000490f5a: add esp, 0x58; jmp qword ptr [rax]; 
0x000000000045899a: add esp, 0x58; ret; 
0x000000000045888c: add esp, 0x68; ret; 
0x0000000000483054: add esp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x0000000000458c1f: add esp, 0x78; ret; 
0x000000000041ef77: add esp, 0x80; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000477f2e: add esp, 0x80; mov eax, edx; pop rbx; ret; 
0x0000000000427a8b: add esp, 0x80; mov qword ptr [rip + 0x2b12e0], rdx; add dword ptr [rip + 0x2b12d5], 1; ret; 
0x0000000000429afa: add esp, 0x80; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x0000000000429c69: add esp, 0x80; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000475677: add esp, 0x80; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x000000000041f110: add esp, 0x80; pop rbx; mov rax, rsi; pop rbp; pop r12; ret; 
0x00000000004846d3: add esp, 0x80; pop rbx; ret; 
0x000000000046c123: add esp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x000000000041d98f: add esp, 0x80; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000045ae3d: add esp, 0x88; pop rbx; pop rbp; ret; 
0x000000000040fb92: add esp, 0x88; pop rbx; ret; 
0x000000000041031f: add esp, 0x98; ret; 
0x000000000047f137: add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004847f3: add esp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000466e26: add esp, 0xb8; pop rbx; pop r12; ret; 
0x00000000004236e5: add esp, 0xb8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004948d1: add esp, 0xc8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004016ac: add esp, 0xc8; ret; 
0x000000000041e757: add esp, 0xd0; pop rbx; ret; 
0x000000000041e8e6: add esp, 0xd8; pop rbx; pop rbp; ret; 
0x000000000041e465: add esp, 0xd8; ret; 
0x0000000000472795: add esp, 8; add ebp, 0x30; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000402471: add esp, 8; and eax, 0xffffff83; ret; 
0x0000000000406d01: add esp, 8; mov eax, 0xffffffef; pop rbx; pop rbp; ret; 
0x00000000004023d6: add esp, 8; mov eax, 0xfffffff2; pop rbx; pop rbp; ret; 
0x00000000004023f6: add esp, 8; mov eax, 0xfffffff4; pop rbx; pop rbp; ret; 
0x0000000000401491: add esp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000495c7a: add esp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x00000000004096c0: add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000040107c: add esp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x00000000004012ac: add esp, 8; mov eax, edi; pop rbx; pop rbp; ret; 
0x000000000040773d: add esp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000048daa9: add esp, 8; mov edx, 1; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000045a470: add esp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000040390c: add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000425a59: add esp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000497819: add esp, 8; movzx eax, al; neg eax; ret; 
0x0000000000407eb9: add esp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004010fb: add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000400413: add esp, 8; ret; 
0x0000000000401431: add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000004be6b1: add esp, edi; ljmp [rdx + rax]; cld; jmp rsp; 
0x00000000004be6b9: add esp, edi; ljmp [rdx + rax]; cld; ljmp [rdx + rax]; cld; call rsp; 
0x00000000004476a5: add qword ptr [r10 - 0x2f], r12; jl 0x476f3; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000042ddac: add qword ptr [rax], rax; add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x000000000041d879: add qword ptr [rip + 0x2bbfd7], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000444a72: add r11d, r14d; movq qword ptr [rdi], mm1; ret; 
0x0000000000444a02: add r14b, r11b; movq qword ptr [rdi], mm1; ret; 
0x0000000000444992: add r14d, r11d; movq qword ptr [rdi], mm1; ret; 
0x0000000000439f64: add r8, qword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000049a1b8: add r8, rsi; test dil, dil; jns 0x9a1c3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000049d1d8: add r8, rsi; test dil, dil; jns 0x9d1e3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000049edd8: add r8, rsi; test dil, dil; jns 0x9ede3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x0000000000426c58: add r8d, dword ptr [rax]; nop dword ptr [rax + rax]; mov rax, -1; ret; 
0x00000000004665ee: add r9b, byte ptr [rax + 0x39]; ret; 
0x000000000040cc5c: add r9d, dword ptr [r15]; mov bh, 0x44; add al, byte ptr [r9]; ret 0xb60f; 
0x000000000046660c: add r9d, dword ptr [rax + 0x39]; ret; 
0x00000000004755c8: add r9d, eax; mov eax, r9d; ret; 
0x0000000000483d24: add rax, 0x20; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fdd4: add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa09: add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000483d44: add rax, 0x40; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fdf4: add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa29: add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000483d92: add rax, 0x60; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fe42: add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa49: add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000483b60: add rax, 1; ret; 
0x0000000000483b57: add rax, 2; ret; 
0x0000000000483b70: add rax, 3; ret; 
0x00000000004107a8: add rax, qword ptr [0]; ret; 
0x000000000048b725: add rax, qword ptr [r14]; call rax; 
0x0000000000498dbf: add rax, qword ptr [r14]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000049c4bb: add rax, qword ptr [r8 + 0xd0]; add rsp, 0x18; ret; 
0x000000000048c6ab: add rax, qword ptr [rbp - 0xb8]; call rax; 
0x0000000000498f5c: add rax, qword ptr [rbx]; mov rdx, r13; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x00000000004960f2: add rax, qword ptr [rdx + 8]; call rax; 
0x0000000000491243: add rax, qword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x9127e; add rsp, 0x68; ret; 
0x0000000000491673: add rax, qword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x916ae; add rsp, 0x68; ret; 
0x00000000004913a4: add rax, qword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x68]; xor rcx, qword ptr fs:[0x28]; jne 0x913ee; add rsp, 0x78; ret; 
0x00000000004107a7: add rax, qword ptr fs:[0]; ret; 
0x000000000048ba46: add rax, r11; call rax; 
0x000000000049b40c: add rax, r12; jmp rax; 
0x00000000004046c8: add rax, r13; jmp rax; 
0x000000000049bd0d: add rax, r14; jmp rax; 
0x000000000049a3bb: add rax, r15; jmp rax; 
0x000000000049a195: add rax, r8; jmp rax; 
0x000000000049b945: add rax, r9; jmp rax; 
0x000000000045c9c3: add rax, rbp; jmp rax; 
0x000000000045c94b: add rax, rbx; jmp rax; 
0x000000000044f9a7: add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x00000000004078f6: add rax, rcx; jmp rax; 
0x000000000040cc14: add rax, rcx; lea rcx, [rip + 0x97182]; jmp rax; 
0x000000000040f9ae: add rax, rcx; mov qword ptr [rip + 0x2c89c8], rax; mov eax, dword ptr [rdx + rsi]; mov dword ptr [rip + 0x2c89c7], eax; lea rax, [rip + 0x2c89b8]; ret; 
0x000000000043a358: add rax, rcx; ret; 
0x0000000000483c4c: add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fd0c: add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000043a885: add rax, rcx; vzeroupper; ret; 
0x000000000043a355: add rax, rdi; add rax, rcx; ret; 
0x0000000000483c49: add rax, rdi; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fd09: add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000043a882: add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x000000000047e82a: add rax, rdi; jmp rax; 
0x000000000043a583: add rax, rdi; ret; 
0x00000000004946bf: add rax, rdi; sub rax, r8; ret; 
0x0000000000483d04: add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fdc4: add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000455d69: add rax, rdi; sub rax, rsi; ret; 
0x000000000043a9f9: add rax, rdi; vzeroupper; ret; 
0x0000000000494777: add rax, rdx; cmp rax, qword ptr [rip + 0x244a4f]; jae 0x9478f; mov rdx, qword ptr [rip + 0x244a4e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000400dca: add rax, rdx; jmp rax; 
0x000000000040f93f: add rax, rdx; ret; 
0x000000000041d76b: add rax, rdx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000044fcb5: add rax, rdx; sub rax, rdi; ret; 
0x000000000048385a: add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x000000000045729b: add rax, rsi; jmp rax; 
0x000000000048b721: add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x0000000000498fb0: add rbx, 8; mov qword ptr [rsp], r8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000498ed8: add rbx, 8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x00000000004571cd: add rcx, 0x100; cmp rdx, rcx; jne 0x571b2; vzeroupper; ret; 
0x000000000045700a: add rcx, 0x80; cmp rdx, rcx; jne 0x56ff7; vzeroupper; ret; 
0x000000000043b411: add rcx, r11; jmp rcx; 
0x00000000004572c3: add rcx, rsi; jmp rcx; 
0x0000000000453894: add rdi, 0x10; bsf rdx, rdx; lea r11, [rip + 0x5c1ed]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453274: add rdi, 0x10; bsf rdx, rdx; lea r11, [rip + 0x5c78d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004538fc: add rdi, 0x10; lea r11, [rip + 0x5c189]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004532dc: add rdi, 0x10; lea r11, [rip + 0x5c729]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000455d08: add rdi, 0x10; sub eax, r8d; cmp eax, ecx; jle 0x55d48; movsxd rax, ecx; ret; 
0x000000000048a9bc: add rdi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000453931: add rdi, 0x20; lea r11, [rip + 0x5c154]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453311: add rdi, 0x20; lea r11, [rip + 0x5c6f4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045b121: add rdi, 0x308; mov esi, 0x80; syscall; 
0x00000000004537fe: add rdi, 0x30; lea r11, [rip + 0x5c287]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004531de: add rdi, 0x30; lea r11, [rip + 0x5c827]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000041c25b: add rdi, r10; jmp rdi; 
0x0000000000469ad3: add rdi, r11; jmp rdi; 
0x0000000000446270: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x69393]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004460f0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x69513]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445f70: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x69693]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445df1: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x69812]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445c70: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x69993]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445af0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x69b13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445970: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x69c93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004457f0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x69e13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445670: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x69f93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004454f0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6a113]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445370: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6a293]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004451f0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6a413]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445070: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6a593]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444ef0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6a713]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444d70: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6a893]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443790: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6b973]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443610: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6baf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443490: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6bc73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443311: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6bdf2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443190: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6bf73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443010: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6c0f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442e90: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6c273]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442d10: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6c3f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442b90: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6c573]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442a10: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6c6f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442890: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6c873]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442710: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6c9f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442590: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6cb73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442410: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6ccf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442290: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6ce73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f726: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6f5dd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cd56: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x71ded]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004464db: add rdi, rdx; lea r11, [rip + 0x6912b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444c36: add rdi, rdx; lea r11, [rip + 0x6a9d0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444ada: add rdi, rdx; lea r11, [rip + 0x6ab2c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004439e7: add rdi, rdx; lea r11, [rip + 0x6b71f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441dd9: add rdi, rdx; lea r11, [rip + 0x6cf2d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442156: add rdi, rdx; lea r11, [rip + 0x6cfb0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441fe4: add rdi, rdx; lea r11, [rip + 0x6d122]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f63a: add rdi, rdx; lea r11, [rip + 0x6f6cc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f575: add rdi, rdx; lea r11, [rip + 0x6f791]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cc6a: add rdi, rdx; lea r11, [rip + 0x71edc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cba5: add rdi, rdx; lea r11, [rip + 0x71fa1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043be60: add rdi, rdx; lea r11, [rip + 0x72ba6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bde6: add rdi, rdx; lea r11, [rip + 0x72c20]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bd57: add rdi, rdx; lea r11, [rip + 0x72caf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bb4c: add rdi, rdx; lea r11, [rip + 0x72eba]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043ba1a: add rdi, rdx; lea r11, [rip + 0x72fec]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b954: add rdi, rdx; lea r11, [rip + 0x730b2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b8d6: add rdi, rdx; lea r11, [rip + 0x73130]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b83f: add rdi, rdx; lea r11, [rip + 0x731c7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b643: add rdi, rdx; lea r11, [rip + 0x733c3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b512: add rdi, rdx; lea r11, [rip + 0x734f4]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b403: add rdi, rdx; lea r11, [rip + 0x73603]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000044031f: add rdi, rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e9e2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d94f: add rdi, rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x711f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441d0b: add rdi, rdx; sfence; lea r11, [rip + 0x6cff8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f323: add rdi, rdx; sfence; lea r11, [rip + 0x6f820]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004538b7: add rdx, 0x10; sub rdx, rcx; lea r11, [rip + 0x5c1cb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453297: add rdx, 0x10; sub rdx, rcx; lea r11, [rip + 0x5c76b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000040467c: add rdx, r14; jmp rdx; 
0x0000000000492891: add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000041bf72: add rdx, rdi; jmp rdx; 
0x00000000004538f8: add rsi, 0x10; add rdi, 0x10; lea r11, [rip + 0x5c189]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004532d8: add rsi, 0x10; add rdi, 0x10; lea r11, [rip + 0x5c729]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045392d: add rsi, 0x20; add rdi, 0x20; lea r11, [rip + 0x5c154]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045330d: add rsi, 0x20; add rdi, 0x20; lea r11, [rip + 0x5c6f4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004537fa: add rsi, 0x30; add rdi, 0x30; lea r11, [rip + 0x5c287]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004531da: add rsi, 0x30; add rdi, 0x30; lea r11, [rip + 0x5c827]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000420466: add rsi, 0x58; mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000048ed8f: add rsi, 1; shl rsi, 4; cmp rcx, qword ptr [rdi + rsi]; jae 0x8ed41; xor eax, eax; ret; 
0x00000000004902c3: add rsi, 1; test dl, dl; jne 0x9029a; movsx eax, cl; neg eax; ret; 
0x00000000004695d4: add rsi, r8; jmp rsi; 
0x0000000000453870: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x5c212]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453853: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x5c22f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453250: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x5c7b2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453233: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x5c7cf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004464d8: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x6912b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444c33: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x6a9d0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444ad7: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x6ab2c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004439e4: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x6b71f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441dd6: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x6cf2d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442153: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x6cfb0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441fe1: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x6d122]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f637: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x6f6cc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f572: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x6f791]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cc67: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x71edc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cba2: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x71fa1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043be5d: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x72ba6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bde3: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x72c20]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bd54: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x72caf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bb49: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x72eba]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043ba17: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x72fec]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b951: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x730b2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b8d3: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x73130]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b83c: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x731c7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b640: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x733c3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b50f: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x734f4]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b400: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x73603]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000446273: add rsi, rdx; lea r11, [rip + 0x69393]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004460f3: add rsi, rdx; lea r11, [rip + 0x69513]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445f73: add rsi, rdx; lea r11, [rip + 0x69693]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445df4: add rsi, rdx; lea r11, [rip + 0x69812]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445c73: add rsi, rdx; lea r11, [rip + 0x69993]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445af3: add rsi, rdx; lea r11, [rip + 0x69b13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445973: add rsi, rdx; lea r11, [rip + 0x69c93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004457f3: add rsi, rdx; lea r11, [rip + 0x69e13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445673: add rsi, rdx; lea r11, [rip + 0x69f93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004454f3: add rsi, rdx; lea r11, [rip + 0x6a113]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445373: add rsi, rdx; lea r11, [rip + 0x6a293]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004451f3: add rsi, rdx; lea r11, [rip + 0x6a413]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445073: add rsi, rdx; lea r11, [rip + 0x6a593]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444ef3: add rsi, rdx; lea r11, [rip + 0x6a713]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444d73: add rsi, rdx; lea r11, [rip + 0x6a893]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443793: add rsi, rdx; lea r11, [rip + 0x6b973]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443613: add rsi, rdx; lea r11, [rip + 0x6baf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443493: add rsi, rdx; lea r11, [rip + 0x6bc73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443314: add rsi, rdx; lea r11, [rip + 0x6bdf2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443193: add rsi, rdx; lea r11, [rip + 0x6bf73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443013: add rsi, rdx; lea r11, [rip + 0x6c0f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442e93: add rsi, rdx; lea r11, [rip + 0x6c273]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442d13: add rsi, rdx; lea r11, [rip + 0x6c3f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442b93: add rsi, rdx; lea r11, [rip + 0x6c573]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442a13: add rsi, rdx; lea r11, [rip + 0x6c6f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442893: add rsi, rdx; lea r11, [rip + 0x6c873]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442713: add rsi, rdx; lea r11, [rip + 0x6c9f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442593: add rsi, rdx; lea r11, [rip + 0x6cb73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442413: add rsi, rdx; lea r11, [rip + 0x6ccf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442293: add rsi, rdx; lea r11, [rip + 0x6ce73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440c4f: add rsi, rdx; lea r11, [rip + 0x6e0b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440aff: add rsi, rdx; lea r11, [rip + 0x6e207]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004409af: add rsi, rdx; lea r11, [rip + 0x6e357]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044085f: add rsi, rdx; lea r11, [rip + 0x6e4a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044070f: add rsi, rdx; lea r11, [rip + 0x6e5f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004405bf: add rsi, rdx; lea r11, [rip + 0x6e747]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044046f: add rsi, rdx; lea r11, [rip + 0x6e897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004401cf: add rsi, rdx; lea r11, [rip + 0x6eb37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044007f: add rsi, rdx; lea r11, [rip + 0x6ec87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ff2f: add rsi, rdx; lea r11, [rip + 0x6edd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fddf: add rsi, rdx; lea r11, [rip + 0x6ef27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fc8f: add rsi, rdx; lea r11, [rip + 0x6f077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fb3f: add rsi, rdx; lea r11, [rip + 0x6f1c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f9ef: add rsi, rdx; lea r11, [rip + 0x6f317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f729: add rsi, rdx; lea r11, [rip + 0x6f5dd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e27f: add rsi, rdx; lea r11, [rip + 0x708c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e12f: add rsi, rdx; lea r11, [rip + 0x70a17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dfdf: add rsi, rdx; lea r11, [rip + 0x70b67]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043de8f: add rsi, rdx; lea r11, [rip + 0x70cb7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dd3f: add rsi, rdx; lea r11, [rip + 0x70e07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dbef: add rsi, rdx; lea r11, [rip + 0x70f57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043da9f: add rsi, rdx; lea r11, [rip + 0x710a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d7ff: add rsi, rdx; lea r11, [rip + 0x71347]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d6af: add rsi, rdx; lea r11, [rip + 0x71497]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d55f: add rsi, rdx; lea r11, [rip + 0x715e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d40f: add rsi, rdx; lea r11, [rip + 0x71737]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d2bf: add rsi, rdx; lea r11, [rip + 0x71887]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d16f: add rsi, rdx; lea r11, [rip + 0x719d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d01f: add rsi, rdx; lea r11, [rip + 0x71b27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cd59: add rsi, rdx; lea r11, [rip + 0x71ded]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000455c6c: add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000467ba5: add rsp, 0x10; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004259a0: add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000401af2: add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000403e7b: add rsp, 0x10; pop rbx; ret; 
0x0000000000491a37: add rsp, 0x110; pop rbx; ret; 
0x000000000041c8ed: add rsp, 0x118; ret; 
0x000000000046a629: add rsp, 0x148; ret; 
0x00000000004294b8: add rsp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000042e782: add rsp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000042edad: add rsp, 0x18; pop rbx; pop rbp; jmp rax; 
0x000000000045c669: add rsp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000401520: add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004018e7: add rsp, 0x18; ret; 
0x000000000042e7d0: add rsp, 0x18; xor edx, edx; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000049c072: add rsp, 0x198; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000045d4fe: add rsp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004328bf: add rsp, 0x20; call 0x1ee90; call 0x1c920; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x00000000004264ac: add rsp, 0x20; mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x000000000042608c: add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004264e5: add rsp, 0x20; pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x0000000000491ab8: add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000401da3: add rsp, 0x20; pop rbx; ret; 
0x000000000049c723: add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000049c730: add rsp, 0x278; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000457df1: add rsp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000458769: add rsp, 0x28; ret; 
0x000000000045e8d7: add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000493c8e: add rsp, 0x30; pop rbx; ret; 
0x0000000000499f85: add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000004065c6: add rsp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004254ad: add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000484bf0: add rsp, 0x38; ret; 
0x00000000004978db: add rsp, 0x40; pop rbx; ret; 
0x0000000000490fcb: add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000458441: add rsp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000403ad8: add rsp, 0x48; ret; 
0x0000000000403b58: add rsp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x00000000004979c2: add rsp, 0x50; pop rbx; ret; 
0x0000000000490f59: add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000458999: add rsp, 0x58; ret; 
0x000000000045888b: add rsp, 0x68; ret; 
0x0000000000483053: add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x0000000000458c1e: add rsp, 0x78; ret; 
0x000000000041ef76: add rsp, 0x80; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000477f2d: add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x0000000000427a8a: add rsp, 0x80; mov qword ptr [rip + 0x2b12e0], rdx; add dword ptr [rip + 0x2b12d5], 1; ret; 
0x0000000000429af9: add rsp, 0x80; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x0000000000429c68: add rsp, 0x80; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000475676: add rsp, 0x80; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x000000000041f10f: add rsp, 0x80; pop rbx; mov rax, rsi; pop rbp; pop r12; ret; 
0x00000000004846d2: add rsp, 0x80; pop rbx; ret; 
0x000000000046c122: add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x000000000041d98e: add rsp, 0x80; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000045ae3c: add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000040fb91: add rsp, 0x88; pop rbx; ret; 
0x000000000041031e: add rsp, 0x98; ret; 
0x000000000047f136: add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004847f2: add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000466e25: add rsp, 0xb8; pop rbx; pop r12; ret; 
0x00000000004236e4: add rsp, 0xb8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004948d0: add rsp, 0xc8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004016ab: add rsp, 0xc8; ret; 
0x000000000041e756: add rsp, 0xd0; pop rbx; ret; 
0x000000000041e8e5: add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x000000000041e464: add rsp, 0xd8; ret; 
0x0000000000472794: add rsp, 8; add ebp, 0x30; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000402470: add rsp, 8; and eax, 0xffffff83; ret; 
0x0000000000406d00: add rsp, 8; mov eax, 0xffffffef; pop rbx; pop rbp; ret; 
0x00000000004023d5: add rsp, 8; mov eax, 0xfffffff2; pop rbx; pop rbp; ret; 
0x00000000004023f5: add rsp, 8; mov eax, 0xfffffff4; pop rbx; pop rbp; ret; 
0x0000000000401490: add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000495c79: add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x00000000004096bf: add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000040107b: add rsp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x00000000004012ab: add rsp, 8; mov eax, edi; pop rbx; pop rbp; ret; 
0x000000000040773c: add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000048daa8: add rsp, 8; mov edx, 1; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000045a46f: add rsp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000040390b: add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000425a58: add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000497818: add rsp, 8; movzx eax, al; neg eax; ret; 
0x0000000000407eb8: add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004010fa: add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000400412: add rsp, 8; ret; 
0x0000000000401430: add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000408b66: add sil, al; or al, 0; xor eax, eax; ret; 
0x00000000004a624c: add word ptr [rax], ax; add al, dl; add byte ptr [rax], al; add byte ptr [rsi - 0x41000028], bh; fdivr st(7); call rax; 
0x000000000049478a: add word ptr [rdx + rax*2], 1; ret; 
0x00000000004c7601: and ah, dh; call qword ptr [rax]; 
0x00000000004c7645: and ah, dh; call qword ptr [rdi]; 
0x00000000004c7615: and ah, dh; jmp qword ptr [rax]; 
0x0000000000494504: and al, 0; adc byte ptr [rax - 0x73], cl; adc eax, 0x102; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x000000000048e77d: and al, 0; add byte ptr [rax - 0x77], cl; add eax, 0x24ac89; add rsp, 8; ret; 
0x0000000000490ebd: and al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004c7e40: and al, 0; add byte ptr [rax], al; test al, 0x1c; add byte ptr [rax], al; mov byte ptr [rbx - 0xc], bh; jmp qword ptr [rbp + 2]; 
0x000000000048e7b4: and al, 0; add byte ptr [rbp + 0xf], dh; mov rax, qword ptr [rip + 0x24ac50]; ret; 
0x000000000048e785: and al, 0; add rsp, 8; ret; 
0x0000000000494788: and al, 0; add word ptr [rdx + rax*2], 1; ret; 
0x000000000049477f: and al, 0; jae 0x9478f; mov rdx, qword ptr [rip + 0x244a4e]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000048e6bc: and al, 0; jne 0x8e6d0; lea rax, [rsi + 1]; mov qword ptr [rip + 0x24ad45], rax; ret; 
0x0000000000496c2e: and al, 0; jne 0x96cb0; cmp qword ptr [rip + 0x23f33d], 0; jne 0x96c3f; pop rbx; ret; 
0x00000000004941da: and al, 0; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x000000000048e825: and al, 0; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x24abd7]; mov qword ptr [rsi], rax; ret; 
0x0000000000493d95: and al, 0; mov qword ptr [rip + 0x24532a], rax; ret; 
0x0000000000493d7a: and al, 0; mov qword ptr [rip + 0x245345], rax; add rsp, 8; ret; 
0x000000000048e82f: and al, 0; mov qword ptr [rsi], rax; ret; 
0x000000000048afea: and al, 0; nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x000000000048e6c9: and al, 0; ret; 
0x000000000048af32: and al, 0; xor eax, eax; add rsp, 8; ret; 
0x0000000000460597: and al, 0x10; add byte ptr [rax - 0x77], cl; ret; 
0x000000000049c5f8: and al, 0x10; add rsp, 0x28; ret; 
0x0000000000420bde: and al, 0x10; call qword ptr [rbp + 0x18]; 
0x0000000000459a98: and al, 0x10; call rax; 
0x00000000004919fb: and al, 0x10; call rdx; 
0x0000000000484a0c: and al, 0x10; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x000000000040ff3c: and al, 0x10; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000042be0c: and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000420d6a: and al, 0x10; mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000004260b8: and al, 0x10; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000481442: and al, 0x10; mov rdi, r12; call rbx; 
0x000000000041cc13: and al, 0x10; mov rsi, qword ptr [r15]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000048356a: and al, 0x10; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000041cca3: and al, 0x10; mov rsi, r15; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000041cd38: and al, 0x10; mov rsi, rbp; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000049df98: and al, 0x10; or byte ptr [rax - 0x7d], cl; ret; 
0x00000000004c72c0: and al, 0x11; add byte ptr [rax], al; cmp al, 0xb; hlt; call qword ptr [rdi]; 
0x000000000049603c: and al, 0x14; add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; pop rbp; mov eax, 0x89fd8945; ret 0xe283; 
0x000000000048d8e3: and al, 0x18; call 0x8d210; add rsp, 0xd8; ret; 
0x000000000040ff45: and al, 0x18; call rax; 
0x0000000000458cfc: and al, 0x18; lea rax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; je 0x58d30; mov eax, 0x48; syscall; 
0x0000000000420d6f: and al, 0x18; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000484a10: and al, 0x18; mov eax, 0x101; syscall; 
0x0000000000458c30: and al, 0x18; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000045dad8: and al, 0x18; mov r9, r13; call rbx; 
0x000000000048135d: and al, 0x18; mov rdi, r12; call rbx; 
0x000000000048356f: and al, 0x18; mov rdi, rbp; mov r9, r14; call rbx; 
0x00000000004919f6: and al, 0x18; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x00000000004260b3: and al, 0x18; mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000484a07: and al, 0x1c; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x00000000004623de: and al, 0x20; call rax; 
0x0000000000483230: and al, 0x20; call rbx; 
0x0000000000458d06: and al, 0x20; je 0x58d30; mov eax, 0x48; syscall; 
0x000000000042be07: and al, 0x20; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x00000000004600f2: and al, 0x20; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000461e1a: and al, 0x20; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x00000000004c24a4: and al, 0x26; outsd dx, dword ptr [rsi]; ret 0x5ae4; 
0x000000000042e780: and al, 0x28; add rsp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000042edab: and al, 0x28; add rsp, 0x18; pop rbx; pop rbp; jmp rax; 
0x000000000042be02: and al, 0x28; mov qword ptr [rsp + 0x20], rsi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000490fba: and al, 0x28; mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000490f48: and al, 0x28; mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x00000000004600ed: and al, 0x28; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000431cb3: and al, 0x28; mov rdi, rbp; call rax; 
0x000000000046515e: and al, 0x28; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000484b68: and al, 0x28; xor eax, eax; mov rdx, rsp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x0000000000460ccb: and al, 0x30; call rbx; 
0x0000000000458d01: and al, 0x30; mov qword ptr [rsp + 0x20], rax; je 0x58d30; mov eax, 0x48; syscall; 
0x000000000048341e: and al, 0x30; mov rdi, rbp; call rbx; 
0x0000000000490fbf: and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000490f4d: and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x00000000004c94c0: and al, 0x33; add byte ptr [rax], al; or al, 0x99; cmc; call qword ptr [rdi + 2]; 
0x00000000004c0edc: and al, 0x36; adc eax, 0x42d35a1d; cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x0000000000461eda: and al, 0x38; add byte ptr [rsp + rsi - 0xa], dh; ret; 
0x0000000000461e24: and al, 0x38; call rbx; 
0x0000000000483108: and al, 0x38; lea rcx, [rax + 1]; call rbx; 
0x000000000046340b: and al, 0x38; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000490fc4: and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000490f52: and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000460cc6: and al, 0x38; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000004623cf: and al, 0x38; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000476a3c: and al, 0x40; add byte ptr [rcx + 0xf], al; xchg eax, esp; ret; 
0x000000000046645e: and al, 0x40; add byte ptr [rdx + rdi*2 - 0xa], dh; ret; 
0x000000000046521e: and al, 0x40; add byte ptr [rsi + rsi*2 - 0xa], dh; ret; 
0x0000000000490fc9: and al, 0x40; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000490f57: and al, 0x40; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000465168: and al, 0x40; call rbx; 
0x00000000004623d9: and al, 0x40; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000461e1f: and al, 0x40; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000463406: and al, 0x40; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000460cc1: and al, 0x40; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000458c68: and al, 0x41; mov eax, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x00000000004960f1: and al, 0x48; add eax, dword ptr [rdx + 8]; call rax; 
0x00000000004259c8: and al, 0x48; add esp, 0x10; pop rbx; jmp rax; 
0x000000000049a068: and al, 0x48; add esp, 0x38; pop rbx; pop r14; ret; 
0x0000000000499d6c: and al, 0x48; add esp, 0x38; ret; 
0x000000000040773b: and al, 0x48; add esp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000407b01: and al, 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000004802d9: and al, 0x48; mov eax, dword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004810a1: and al, 0x48; mov eax, dword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000425f1b: and al, 0x48; mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x0000000000422694: and al, 0x48; mov edi, ebx; call rax; 
0x0000000000465163: and al, 0x48; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004623d4: and al, 0x48; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000463401: and al, 0x48; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000483104: and al, 0x4c; lea ecx, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x0000000000498fb7: and al, 0x4c; mov edx, ebp; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000423365: and al, 0x4c; mov esi, ebp; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000498f65: and al, 0x4c; mov esi, esp; mov edi, ebp; call rax; 
0x000000000049124a: and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x9127e; add rsp, 0x68; ret; 
0x000000000049167a: and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x916ae; add rsp, 0x68; ret; 
0x00000000004c5d1c: and al, 0x5b; std; inc dword ptr [rbx + rbx*2]; std; call rsp; 
0x00000000004cc5c0: and al, 0x64; add byte ptr [rax], al; jl 0xcc589; clc; jmp qword ptr [rax]; 
0x0000000000404a2b: and al, 0x64; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x84c7; 
0x000000000042f673: and al, 0x68; call rax; 
0x00000000004913ab: and al, 0x68; xor rcx, qword ptr fs:[0x28]; jne 0x913ee; add rsp, 0x78; ret; 
0x000000000040a2c3: and al, 0x7a; or dword ptr [rax], eax; ret; 
0x00000000004af57c: and al, 0x7d; stc; push qword ptr [rsp + rdi*2 + 0x7c44fff9]; stc; call rsp; 
0x0000000000422909: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0xfffffffffffe00fe; jmp qword ptr [rsi + 0x2e]; 
0x000000000047310e: and al, 0x83; ret; 
0x00000000004665c9: and al, 0x84; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], r9d; ret; 
0x00000000004665e7: and al, 0x85; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9b, byte ptr [rax + 0x39]; ret; 
0x0000000000466605: and al, 0x86; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9d, dword ptr [rax + 0x39]; ret; 
0x0000000000466b1d: and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000428533: and al, 0x89; adc byte ptr [r11 + 0x5d], r11b; ret; 
0x00000000004134ec: and al, 0x8c; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x00000000004a145b: and al, 0x98; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x00000000004a0b6b: and al, 0x98; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x000000000046039b: and al, 0xa0; add byte ptr [rax], al; add dh, dh; ret 0x4801; 
0x000000000049c88e: and al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov edi, 1; call rax; 
0x000000000049c1db: and al, 0xbf; add dword ptr [rax], eax; add byte ptr [rax], al; call rax; 
0x0000000000489120: and al, 0xc0; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x848b; 
0x00000000004c9bcc: and al, 0xc3; cmc; call qword ptr [rdi]; 
0x00000000004ce02c: and al, 0xc3; stc; call qword ptr [rax]; 
0x0000000000458dcc: and al, 0xc; add rsp, 0x10; pop rbx; ret; 
0x0000000000407e3e: and al, 0xc; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000458dc3: and al, 0xc; call 0x5b0e0; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x0000000000458c73: and al, 0xc; mov eax, 0x48; syscall; 
0x000000000040ff40: and al, 0xc; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004259c3: and al, 0xc; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000041c87f: and al, 0xd0; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000407cef: and al, 0xd4; ret; 
0x000000000041f4d5: and al, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0x7c60; 
0x000000000041c887: and al, 0xe0; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xf0], eax; syscall; 
0x0000000000499d63: and al, 0xe8; ja 0x99d6a; add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000404f13: and al, 0xe8; or dword ptr [rax], eax; add al, ch; ret; 
0x00000000004275a3: and al, 0xe9; ret 0xfffd; 
0x000000000046183e: and al, 0xf6; ret; 
0x00000000004af9b8: and al, 0xf9; call qword ptr [rax - 0x38]; 
0x00000000004aedd9: and al, 0xf9; inc dword ptr [rax + 0x26]; stc; jmp qword ptr [rax]; 
0x00000000004aedf9: and al, 0xf9; inc dword ptr [rax]; stc; jmp rax; 
0x0000000000406812: and al, 1; ret; 
0x00000000004079d6: and al, 4; jne 0x79df; add rsp, 0x18; ret; 
0x0000000000458a3c: and al, 8; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000004260bd: and al, 8; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004264e3: and al, 8; add rsp, 0x20; pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x0000000000422f9b: and al, 8; call 0x21c30; mov rdx, qword ptr [rsp + 8]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000041cc1f: and al, 8; call rax; 
0x000000000042be11: and al, 8; call rcx; 
0x000000000047e932: and al, 8; ja 0x7e968; lea rdi, [rip + 0x3fdef]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000004588db: and al, 8; mov eax, 0x101; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000458d33: and al, 8; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000459a93: and al, 8; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004205b0: and al, 8; mov rdi, r15; call rax; 
0x0000000000422fa5: and al, 8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000459745: and al, 8; syscall; 
0x0000000000459745: and al, 8; syscall; cmp rax, -0xfff; jae 0x59752; ret; 
0x000000000041fb31: and al, 8; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x00000000004af8ff: and al, al; xchg cl, bh; call rax; 
0x00000000004af8ff: and al, al; xchg cl, bh; call rax; mov cl, bh; jmp rax; 
0x00000000004a41f4: and al, byte ptr [rax]; add byte ptr [rax], al; iretd; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004c844d: and al, byte ptr [rax]; add byte ptr [rax], al; leave; hlt; jmp qword ptr [rax]; 
0x0000000000458da9: and al, byte ptr [rax]; add byte ptr [rcx - 0x473d7621], cl; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000046feed: and al, byte ptr [rax]; add byte ptr [rcx - 0x75], cl; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000471131: and al, byte ptr [rcx]; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret; 
0x000000000044ff1a: and al, byte ptr [rsp - 0xb7f68c]; ret 0xc148; 
0x00000000004895ac: and al, ch; push -0x49; jmp qword ptr [rsi + 0xf]; 
0x0000000000478c81: and bh, al; add ch, byte ptr [rip - 0x7d000000]; ret; 
0x00000000004cc710: and bh, al; clc; jmp qword ptr [rcx]; 
0x00000000004623df: and bh, bh; rol byte ptr [rbx - 0x76befb08], 1; ret 0x415f; 
0x00000000004c1485: and bh, byte ptr [rsi - 0x5e0466e]; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x00000000004af4b4: and bh, byte ptr [rsi - 7]; push qword ptr [rdx + 0x42fff97d]; jge 0xaf4b8; call rdx; 
0x00000000004aed95: and bh, cl; call rax; 
0x00000000004aedd5: and bh, cl; jmp qword ptr [rax + 0x24]; 
0x00000000004aedf5: and bh, cl; jmp qword ptr [rax]; 
0x00000000004cf0f1: and bl, bh; jmp qword ptr [rdx]; 
0x00000000004c2023: and bl, byte ptr [rdx + 0x7a]; pop rcx; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x0000000000420879: and byte ptr [r8 + 1], r9b; ret; 
0x0000000000469cd3: and byte ptr [r8 - 0x77], r9b; sti; test rax, rax; je 0x69cdf; call rax; 
0x00000000004096e3: and byte ptr [r8 - 0x7b], r9b; sal byte ptr [rbp + rdx*8 + 0x48], 0x89; mov rdi, rsi; call rax; 
0x00000000004258e0: and byte ptr [r9 + 0x48c03113], cl; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000004046c1: and byte ptr [r9 + 0x63], r9b; test dword ptr [rax], r8d; add rax, r13; jmp rax; 
0x00000000004207de: and byte ptr [r9 - 0x77], r9b; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x0000000000485c84: and byte ptr [rax + 0x3948fff7], ch; ret; 
0x0000000000480dfe: and byte ptr [rax + 0x3b], cl; push rax; sbb byte ptr [rsi + 0x1f], dh; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000048109b: and byte ptr [rax + 0x3b], cl; sbb byte ptr [rsi + 0x24], sil; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004af5e0: and byte ptr [rax + 0x7fb0fff9], al; stc; inc dword ptr [rax + 0x7f]; stc; call rax; 
0x0000000000483d27: and byte ptr [rax + 1], cl; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fdd7: and byte ptr [rax + 1], cl; clc; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa0c: and byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x000000000040fce1: and byte ptr [rax + 1], cl; ret 0xb70f; 
0x000000000042087a: and byte ptr [rax + 1], cl; ret; 
0x000000000040bce3: and byte ptr [rax + 9], 0; ret; 
0x0000000000475b3e: and byte ptr [rax + 9], cl; ret 0xff83; 
0x000000000044fcad: and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000004838a9: and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x000000000048f139: and byte ptr [rax + rax], 1; pop rbx; ret; 
0x00000000004600f3: and byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x0000000000461e1b: and byte ptr [rax - 0x75], cl; je 0x61e44; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000478999: and byte ptr [rax - 0x75], cl; mov ebp, 0xfffff730; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000046d47f: and byte ptr [rax - 0x75], cl; mov ebp, 0xfffff758; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x00000000004865a3: and byte ptr [rax - 0x75], cl; sub byte ptr [rax + 0x39], r9b; ret 0x870f; 
0x0000000000422869: and byte ptr [rax - 0x77], cl; push rbx; xor byte ptr [rax - 0x77], cl; call 0xfffffffffffea05e; jmp qword ptr [rsi + 0x2e]; 
0x0000000000469cd4: and byte ptr [rax - 0x77], cl; sti; test rax, rax; je 0x69cdf; call rax; 
0x00000000004096e4: and byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rdx*8 + 0x48], 0x89; mov rdi, rsi; call rax; 
0x000000000049c6d6: and byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000477574: and byte ptr [rax - 0x7d], cl; ret 0xe920; 
0x000000000045edd6: and byte ptr [rax - 0x7d], cl; ret; 
0x00000000004221b2: and byte ptr [rax - 1], bh; pop rbx; ret; 
0x00000000004afacc: and byte ptr [rax - 6], al; push qword ptr [rax]; cli; inc dword ptr [rax + 0x40]; cli; jmp qword ptr [rax + 0x40]; 
0x00000000004aedf0: and byte ptr [rax], 0xf9; inc dword ptr [rax + 0x22]; stc; jmp qword ptr [rax]; 
0x00000000004af8fd: and byte ptr [rax], ah; and al, al; xchg cl, bh; call rax; 
0x00000000004af8fd: and byte ptr [rax], ah; and al, al; xchg cl, bh; call rax; mov cl, bh; jmp rax; 
0x00000000004af8fb: and byte ptr [rax], ah; and byte ptr [rax], ah; and al, al; xchg cl, bh; call rax; 
0x00000000004af8f9: and byte ptr [rax], ah; and byte ptr [rax], ah; and byte ptr [rax], ah; and al, al; xchg cl, bh; call rax; 
0x00000000004af8fc: and byte ptr [rax], ah; and byte ptr [rax], ah; rol byte ptr [rsi - 0x772f0007], 0xf9; jmp rax; 
0x00000000004af8fe: and byte ptr [rax], ah; rol byte ptr [rsi - 0x772f0007], 0xf9; jmp rax; 
0x000000000049c6a9: and byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000047be22: and byte ptr [rax], al; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x25826f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004573aa: and byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000458e31: and byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000458e31: and byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x58e40; ret; 
0x00000000004cf3e0: and byte ptr [rax], ch; sti; jmp qword ptr [rbx]; 
0x0000000000453314: and byte ptr [rbp + rcx*4 + 0x1d], cl; hlt; mov byte ptr [rip + 0xc634900], 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453934: and byte ptr [rbp + rcx*4 + 0x1d], cl; push rsp; rol dword ptr [rip + 0xc634900], 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043f945: and byte ptr [rbp + rcx*4 + 0x1d], cl; ret; 
0x00000000004a1721: and byte ptr [rbp - 0x77], cl; ret; 
0x00000000004021df: and byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000491abb: and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004777d3: and byte ptr [rbx + rcx*4 + 0x40], cl; sub cl, ch; ret 0xffe8; 
0x0000000000491b12: and byte ptr [rbx + rcx*4 + 0x7f], cl; sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; nop; jmp rdx; 
0x000000000047e81c: and byte ptr [rbx - 0x78f0d608], al; mov al, byte ptr [rax]; add byte ptr [rax], al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000004ae934: and byte ptr [rbx - 8], dh; inc dword ptr [rax + 0x74]; clc; jmp qword ptr [rax + 0x75]; 
0x00000000004aee38: and byte ptr [rbx], 0xf9; jmp qword ptr [rax + 0x25]; 
0x00000000004aee48: and byte ptr [rbx], ch; stc; jmp qword ptr [rax]; 
0x000000000046d490: and byte ptr [rcx + 0x2b], cl; push rdi; sbb byte ptr [rax + 0x39], cl; ret 0x850f; 
0x00000000004789ae: and byte ptr [rcx + 0x2b], cl; push rsi; sbb byte ptr [rax - 0x3f], cl; cli; add cl, byte ptr [rax + 0x39]; ret 0x850f; 
0x00000000004258e1: and byte ptr [rcx + 0x48c03113], cl; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000004046c2: and byte ptr [rcx + 0x63], cl; test dword ptr [rax], r8d; add rax, r13; jmp rax; 
0x0000000000424a49: and byte ptr [rcx + 0xc7640f], cl; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000420fe1: and byte ptr [rcx + 0xc76417], cl; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000047e082: and byte ptr [rcx + rbp], bh; ja 0x7e0b0; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000042be08: and byte ptr [rcx + rcx*4 + 0x5c], cl; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x00000000004af3cc: and byte ptr [rcx + rdi*8 - 1], al; jnp 0xaf3cc; call rax; 
0x00000000004aedf8: and byte ptr [rcx + rdi*8], ah; inc dword ptr [rax]; stc; jmp rax; 
0x00000000004aec08: and byte ptr [rcx + rdi*8], al; jmp qword ptr [rax]; 
0x00000000004aee88: and byte ptr [rcx + rdi*8], bl; push qword ptr [rax + 0x1d]; stc; push qword ptr [rax - 0x7f0006f8]; or edi, ecx; call rax; 
0x00000000004264af: and byte ptr [rcx - 0x2dcea42f], cl; jmp rax; 
0x000000000041d5b7: and byte ptr [rcx - 0x353eb711], cl; adc dword ptr [rax + rcx*2 + 0x33], esp; adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x0000000000401eff: and byte ptr [rcx - 0x3fffff01], al; jg 0x1f7b; or bl, dh; ret; 
0x000000000047a2d9: and byte ptr [rcx - 0x537bf0ce], cl; out 0xff, eax; inc dword ptr [rcx - 5]; jg 0x7a2f8; test byte ptr [rax - 0x7c000019], ah; ret; 
0x000000000049c884: and byte ptr [rcx - 0x77], cl; fmul dword ptr [rcx + rcx*4 - 0x1f]; mov rdx, qword ptr [r12]; mov esi, 1; mov edi, 1; call rax; 
0x00000000004207df: and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x000000000046f679: and byte ptr [rcx - 1], bh; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x00000000004b1d84: and byte ptr [rcx - 5], bh; jmp qword ptr [rax + 0x78]; 
0x00000000004afaf0: and byte ptr [rcx - 6], al; inc dword ptr [rax + 0x41]; cli; jmp qword ptr [rax + 0x41]; 
0x00000000004af0e8: and byte ptr [rcx - 7], bl; push qword ptr [rax + 0x40fff958]; pop rax; stc; call rax; 
0x00000000004aed50: and byte ptr [rcx], 0xf9; inc dword ptr [rax + 0x23]; stc; jmp qword ptr [rax]; 
0x00000000004aee44: and byte ptr [rcx], ch; stc; jmp qword ptr [rax]; 
0x000000000048e964: and byte ptr [rcx], dh; fisttp dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x94; ret; 
0x0000000000456dd1: and byte ptr [rdi + 0x64], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000049d466: and byte ptr [rdi + 0x76], dh; adc eax, 0x30ff8040; jne 0x9d498; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000049e2c6: and byte ptr [rdi + 0x76], dh; adc eax, 0x30ff8040; jne 0x9e2f8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x00000000004560fc: and byte ptr [rdi + 0x7e], dh; movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000456e21: and byte ptr [rdi + 0xb], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000043bdec: and byte ptr [rdi + rax], ch; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000466ea6: and byte ptr [rdi], ah; add al, ch; ret 0xfc85; 
0x0000000000456311: and byte ptr [rdi], cl; adc dword ptr [rdi + 0x30], edi; movups xmmword ptr [r11], xmm8; ret; 
0x000000000049b512: and byte ptr [rdi], cl; test dl, cl; add al, 0; add al, ch; add dl, byte ptr [rax + rdi*8]; jmp qword ptr [rsi - 0x70]; 
0x0000000000453e7d: and byte ptr [rdi], cl; test dword ptr [rax + rax + 0x40a80000], edi; jne 0x53f50; lea rax, [rdi + 7]; ret; 
0x000000000041e90b: and byte ptr [rdi], cl; test dword ptr [rsi - 0x77000000], esp; ret 0xe281; 
0x0000000000453d60: and byte ptr [rdi], cl; test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x00000000004476e6: and byte ptr [rdx + 0x14], dh; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000455e78: and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x00000000004d15a0: and byte ptr [rdx - 4], bl; jmp qword ptr [rax + 1]; 
0x00000000004af844: and byte ptr [rdx - 7], dh; call qword ptr [rax + 0xfff971]; jno 0xaf848; jmp qword ptr [rax + 0x53]; 
0x00000000004ae914: and byte ptr [rdx - 8], ch; inc dword ptr [rax + 0x6b]; clc; jmp qword ptr [rax + 0x6c]; 
0x00000000004aedd4: and byte ptr [rdx], 0xf9; jmp qword ptr [rax + 0x24]; 
0x00000000004aec04: and byte ptr [rdx], al; stc; jmp qword ptr [rax]; 
0x00000000004afa50: and byte ptr [rdx], bh; cli; push qword ptr [rax]; cmp bh, dl; call qword ptr [rax + 0x3a]; 
0x00000000004aed58: and byte ptr [rip + 0x2700fff9], ah; stc; jmp rax; 
0x00000000004af3a4: and byte ptr [rip + 0x36a0fff9], dh; stc; jmp qword ptr [rax]; 
0x000000000047bb19: and byte ptr [rip + 0x48b4800], 0xf8; jmp rax; 
0x00000000004aee4c: and byte ptr [rip + 0x6d0fff9], ch; stc; call qword ptr [rax]; 
0x00000000004aee4c: and byte ptr [rip + 0x6d0fff9], ch; stc; call qword ptr [rax]; or edi, ecx; jmp qword ptr [rax + 0xc]; 
0x000000000043b4aa: and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043b4a5: and byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004aedbc: and byte ptr [rsi], 0xf9; jmp qword ptr [rax + 0x28]; 
0x00000000004046b7: and byte ptr [rsi], al; ja 0x4760; mov eax, dword ptr [r15 + 0x20]; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x00000000004aec0c: and byte ptr [rsi], al; stc; push qword ptr [rax + 0x70fff8f8]; cli; clc; call qword ptr [rax - 4]; 
0x0000000000457368: and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x0000000000483b52: and ch, 0xf; je 0x83b70; add rax, 2; ret; 
0x00000000004019bd: and ch, al; or eax, 0x8500000b; sar byte ptr [rax + 9], 0x48; add esp, 0x18; ret; 
0x000000000043a9dc: and ch, al; std; xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x0000000000483b3d: and cl, 0xf; je 0x83b60; ret; 
0x00000000004aebd0: and cl, bh; clc; jmp rax; 
0x00000000004aedf1: and cl, bh; inc dword ptr [rax + 0x22]; stc; jmp qword ptr [rax]; 
0x00000000004aedd1: and cl, bh; inc dword ptr [rax + 0x60fff922]; and al, 0xf9; inc dword ptr [rax + 0x26]; stc; jmp qword ptr [rax]; 
0x00000000004aee11: and cl, bh; inc dword ptr [rax]; and bh, cl; call rax; 
0x00000000004aee31: and cl, bh; push qword ptr [rax - 0x7f0006df]; and edi, ecx; jmp qword ptr [rax + 0x25]; 
0x000000000045bc21: and cl, byte ptr [rax + 0x63]; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000000420b2d: and cl, byte ptr [rax - 0x75]; and dword ptr [rax + 0x48000000], 0xffffff89; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000048e764: and cl, byte ptr [rax - 0x77]; ret 0x1f0f; 
0x000000000042c5dd: and cl, byte ptr [rax]; add byte ptr [rax - 0x17], dl; ret; 
0x0000000000407ead: and cl, byte ptr [rcx + 0x39]; ret 0xed75; 
0x000000000043aced: and cl, byte ptr [rcx - 0x77]; ret; 
0x0000000000482f3a: and cl, byte ptr [rdx]; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x0000000000477578: and cl, ch; push rax; call 0xffffffff8955757f; ret 0x894c; 
0x00000000004a0e61: and cl, ch; sar ebx, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004aee10: and cl, dil; inc dword ptr [rax]; and bh, cl; call rax; 
0x00000000004572d3: and dh, 0xf0; mov edx, 0; cmove rax, rdx; pop rbx; ret; 
0x00000000004cccf0: and dh, ah; clc; call qword ptr [rax]; 
0x00000000004ccd20: and dh, ah; clc; jmp qword ptr [rcx]; 
0x00000000004581dd: and dh, ah; mov edi, edx; mov eax, r8d; syscall; 
0x000000000045b499: and dh, al; sub byte ptr [rcx], al; ret; 
0x0000000000478c80: and dil, al; add ch, byte ptr [rip - 0x7d000000]; ret; 
0x00000000004aedf4: and dil, cl; jmp qword ptr [rax]; 
0x00000000004aea38: and dl, bh; clc; jmp qword ptr [rdx]; 
0x00000000004aefbc: and dl, byte ptr [rdi - 7]; push qword ptr [rdx + 0x42fff956]; push rsi; stc; call rdx; 
0x00000000004787f8: and dword ptr [r8], eax; add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x0000000000420b30: and dword ptr [rax + 0x48000000], 0xffffff89; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000490ebc: and dword ptr [rax + rax], 0; add rsp, 8; ret; 
0x0000000000402465: and dword ptr [rax - 0x40], edx; call 0x59670; sar eax, 0x1f; add rsp, 8; and eax, 0xffffff83; ret; 
0x000000000048685a: and dword ptr [rax - 0x74fffffe], 5; ret; 
0x000000000040974e: and dword ptr [rax - 0x77], ecx; fimul word ptr [rcx + rcx*4 - 0x19]; call rdx; 
0x000000000045d800: and dword ptr [rax - 0x77], ecx; ret 0x894c; 
0x0000000000478961: and dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; test dword ptr [rax], esi; idiv edi; dec dword ptr [rax - 0x39]; ret 0x7c60; 
0x00000000004787f9: and dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x00000000004a4e2c: and dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; fdivr st(7); jmp qword ptr [rcx]; 
0x00000000004c3fc2: and dword ptr [rax], edx; jmp qword ptr [rdi]; 
0x0000000000426cb7: and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000426d0f: and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000427b3e: and dword ptr [rdi], ecx; mov dh, 0; ret; 
0x00000000004c1079: and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x00000000004c3fc1: and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000004107ab: and eax, 0; ret; 
0x0000000000409682: and eax, 0x10538b48; test rdx, rdx; je 0x96a8; mov rdi, rax; call rdx; 
0x000000000048b52f: and eax, 0x134d870f; add byte ptr [rax], al; lea rcx, [rip + 0x34243]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x00000000004339cd: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x0000000000432cad: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1ce62]; cmove rax, rdx; ret; 
0x000000000043399d: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x00000000004335ad: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x0000000000481c0d: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x902]; cmove rax, rdx; ret; 
0x0000000000482f2d: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000481bdd: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xdf2]; cmove rax, rdx; ret; 
0x000000000048afe7: and eax, 0x24c274; nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x00000000004aed59: and eax, 0x2700fff9; stc; jmp rax; 
0x00000000004aed19: and eax, 0x2730fff9; stc; call qword ptr [rax]; 
0x00000000004aee3d: and eax, 0x2750fff9; stc; jmp qword ptr [rax]; 
0x00000000004016a0: and eax, 0x28; jne 0x172d; add rsp, 0xc8; ret; 
0x0000000000401830: and eax, 0x28; jne 0x18bd; add rsp, 0xc8; ret; 
0x000000000041e45d: and eax, 0x28; jne 0x1e46c; add rsp, 0xd8; ret; 
0x0000000000403ad1: and eax, 0x28; jne 0x3af5; add rsp, 0x48; ret; 
0x0000000000403e74: and eax, 0x28; jne 0x3e9d; add rsp, 0x10; pop rbx; ret; 
0x00000000004579aa: and eax, 0x28; jne 0x579d4; add rsp, 0x20; pop rbx; ret; 
0x0000000000458762: and eax, 0x28; jne 0x58779; add rsp, 0x28; ret; 
0x0000000000458880: and eax, 0x28; jne 0x58939; add rsp, 0x68; ret; 
0x0000000000458992: and eax, 0x28; jne 0x589db; add rsp, 0x58; ret; 
0x0000000000458c13: and eax, 0x28; jne 0x58cc9; add rsp, 0x78; ret; 
0x0000000000458d22: and eax, 0x28; jne 0x58d73; add rsp, 0x68; ret; 
0x0000000000459711: and eax, 0x28; jne 0x59727; add rsp, 0x28; ret; 
0x000000000046a3da: and eax, 0x28; jne 0x6a3e6; add rsp, 0x18; ret; 
0x000000000046a622: and eax, 0x28; jne 0x6a673; add rsp, 0x148; ret; 
0x000000000047801d: and eax, 0x28; jne 0x7802c; add rsp, 0xd8; ret; 
0x00000000004849a5: and eax, 0x28; jne 0x84a69; add rsp, 0x78; ret; 
0x0000000000484ab7: and eax, 0x28; jne 0x84b03; add rsp, 0x58; ret; 
0x0000000000484b3a: and eax, 0x28; jne 0x84b49; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000484be9: and eax, 0x28; jne 0x84c0b; add rsp, 0x38; ret; 
0x0000000000491095: and eax, 0x28; jne 0x910a2; add rsp, 0x20; pop rbx; ret; 
0x0000000000491190: and eax, 0x28; jne 0x911c3; add rsp, 0x38; ret; 
0x0000000000491250: and eax, 0x28; jne 0x9127e; add rsp, 0x68; ret; 
0x00000000004913b1: and eax, 0x28; jne 0x913ee; add rsp, 0x78; ret; 
0x0000000000491680: and eax, 0x28; jne 0x916ae; add rsp, 0x68; ret; 
0x00000000004936bc: and eax, 0x28; jne 0x936fe; leave; ret; 
0x0000000000493c83: and eax, 0x28; jne 0x93d44; add rsp, 0x30; pop rbx; ret; 
0x0000000000494368: and eax, 0x28; jne 0x94374; add rsp, 0x38; ret; 
0x000000000049444b: and eax, 0x28; jne 0x94464; add rsp, 0x38; ret; 
0x00000000004977c6: and eax, 0x28; jne 0x977dc; add rsp, 0x38; ret; 
0x00000000004079cf: and eax, 0x28; mov eax, dword ptr [rsp + 4]; jne 0x79df; add rsp, 0x18; ret; 
0x000000000041c8e3: and eax, 0x28; mov eax, r8d; jne 0x1c90c; add rsp, 0x118; ret; 
0x000000000041fb29: and eax, 0x28; mov qword ptr [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x00000000004004c9: and eax, 0x2d5bfa; nop; ret; 
0x000000000041d688: and eax, 0x30; call rax; 
0x000000000041d5c2: and eax, 0x30; call rdx; 
0x000000000041d6ae: and eax, 0x30; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x00000000004572ed: and eax, 0x3fc00; pop rbx; ret; 
0x00000000004573ca: and eax, 0x3fffc00; div ecx; pop rbx; mov eax, eax; ret; 
0x0000000000457338: and eax, 0x3fffc00; pop rbx; ret; 
0x0000000000484a93: and eax, 0x410000; cmp eax, 0x410000; je 0x84ac8; mov eax, 0x101; syscall; 
0x000000000047bb1a: and eax, 0x48b4800; clc; jmp rax; 
0x00000000004c86f5: and eax, 0x4d480000; cmc; call rsp; 
0x0000000000485c7a: and eax, 0x508b4800; or byte ptr [rax - 0x75], cl; xor al, ch; and byte ptr [rax + 0x3948fff7], ch; ret; 
0x0000000000484983: and eax, 0x75c08500; pop rbp; mov eax, 0x101; syscall; 
0x00000000004573e3: and eax, 0x7ff80000; div ecx; mov eax, eax; ret; 
0x0000000000457387: and eax, 0x7ff80000; ret; 
0x000000000049c5ed: and eax, 0x85480000; sal byte ptr [rbx + rcx + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x00000000004868bd: and eax, 0x89484000; sub dword ptr [rax + 0xf000002], -0x7b; ret; 
0x000000000045b4fa: and eax, 0x8d48f631; cmp eax, 0x550c1; mov eax, 0x15; syscall; 
0x000000000040a456: and eax, 0x908d0000; movabs al, byte ptr [0xc2490fc08500000f]; add rsp, 8; ret; 
0x000000000045b107: and eax, 0xc; cmp eax, 4; je 0x5b110; ret; 
0x00000000004ab498: and eax, 0xe5000001; fdivr st(7); jmp qword ptr [rbx + 0x11]; 
0x00000000004572bc: and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000415bea: and eax, 0xfa83108b; add cl, byte ptr [rdi]; test bh, bl; sbb al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000419231: and eax, 0xfa83108b; add cl, byte ptr [rdi]; test bh, bl; sbb byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x000000000043ca20: and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000043c153: and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000402474: and eax, 0xffffff83; ret; 
0x000000000044fbf4: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0x4fc10; bsf rax, rdx; ret; 
0x000000000044fb93: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0x4fc20; bsf rax, rdx; ret; 
0x00000000004097b8: and eax, 0xffffffdf; ret; 
0x00000000004076f3: and eax, 0xffffffea; ret; 
0x000000000049a1d5: and eax, 0xfffffff8; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x00000000004024f7: and eax, 0xfffffffe; add rsp, 0x18; ret; 
0x000000000049c59b: and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000491b5c: and eax, 2; sub eax, 1; ret; 
0x00000000004c84a1: and eax, dword ptr [rax]; add ah, cl; retf; hlt; jmp qword ptr [rdx + 0x36]; 
0x000000000049f9dc: and eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000496c38: and eax, dword ptr [rax]; add byte ptr [rbp + 2], dh; pop rbx; ret; 
0x0000000000458dc7: and eax, dword ptr [rax]; add byte ptr [rbx + 0x480c2444], cl; add esp, 0x10; pop rbx; ret; 
0x000000000049e854: and eax, dword ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000049c4fa: and eax, dword ptr [rax]; cmp byte ptr [rdx + rsi], 8; jne 0x9c51c; mov rax, qword ptr [rax]; ret; 
0x000000000049f4b3: and eax, dword ptr [rax]; jne 0x9f498; pop rbx; ret; 
0x000000000049c565: and eax, dword ptr [rax]; mov rax, qword ptr [rdi + rsi*8]; cmp byte ptr [rcx + rsi], 8; jne 0x9c575; mov qword ptr [rax], rdx; ret; 
0x00000000004095dc: and eax, dword ptr [rbx + 0xe7502f8]; lea eax, [rsi*8 + 0x10]; ret; 
0x0000000000461c2e: and eax, dword ptr [rip + 0x29480000]; ret 0x349; 
0x000000000048256e: and eax, ecx; je 0x82730; bsr rax, rax; add rax, rdi; ret; 
0x0000000000433959: and ebp, dword ptr [rdi]; add al, byte ptr [rax]; lea rax, [rip + 0x22ecc]; cmovne rax, rdx; ret; 
0x0000000000426cb8: and ebp, edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000426d10: and ebp, edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045b0a2: and ebx, 0xffffffbb; cmp r11d, 0xa; je 0x5b0ac; ret; 
0x0000000000406a29: and ecx, 0xc; je 0x6a67; cmp ecx, 1; jne 0x6ae7; mov eax, 1; ret; 
0x000000000043ca25: and ecx, 0xff; sub eax, ecx; ret; 
0x000000000043c158: and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000004819ca: and ecx, dword ptr [rax - 0x39]; or byte ptr [r8], al; add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000045a7ba: and ecx, dword ptr [rax - 0x77]; ret 0xabe; 
0x000000000042185e: and ecx, dword ptr [rcx + rcx*4 + 0x43]; or byte ptr [rdx + 1], bh; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000042ddaa: and ecx, ebp; add qword ptr [rax], rax; add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x00000000004aed51: and ecx, edi; inc dword ptr [rax + 0x23]; stc; jmp qword ptr [rax]; 
0x00000000004aee35: and ecx, edi; inc dword ptr [rax + 0x60fff923]; and eax, 0x2750fff9; stc; jmp qword ptr [rax]; 
0x00000000004aed31: and ecx, edi; jmp qword ptr [rax + 0x23]; 
0x00000000004aed71: and ecx, edi; jmp qword ptr [rax]; 
0x00000000004aed11: and ecx, edi; push qword ptr [rax + 0x23]; stc; call qword ptr [rax + 0x25]; 
0x00000000004aed91: and ecx, edi; push rax; and bh, cl; call rax; 
0x00000000004aed15: and edi, ecx; call qword ptr [rax + 0x25]; 
0x00000000004aed35: and edi, ecx; inc dword ptr [rax + 0x25]; stc; jmp qword ptr [rax]; 
0x00000000004aee39: and edi, ecx; jmp qword ptr [rax + 0x25]; 
0x00000000004aed55: and edi, ecx; jmp qword ptr [rax]; 
0x000000000045734e: and edx, 0xf; movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x00000000004826fe: and edx, eax; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000004827f2: and esi, eax; je 0x82730; bsr rax, rsi; add rax, rdi; ret; 
0x00000000004825fc: and esi, ecx; je 0x82730; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x00000000004c76b5: and esp, esi; jmp rsi; 
0x000000000045d7ff: and qword ptr [rax - 0x77], rcx; ret 0x894c; 
0x000000000045b0a1: and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x5b0ac; ret; 
0x000000000043a9db: and r13b, r8b; std; xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x0000000000406a28: and r9d, 0xc; je 0x6a67; cmp ecx, 1; jne 0x6ae7; mov eax, 1; ret; 
0x0000000000484982: and rax, 0x75c08500; pop rbp; mov eax, 0x101; syscall; 
0x000000000044fbf3: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0x4fc10; bsf rax, rdx; ret; 
0x000000000044fb92: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0x4fc20; bsf rax, rdx; ret; 
0x000000000049a1d4: and rax, 0xfffffffffffffff8; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x000000000048256d: and rax, rcx; je 0x82730; bsr rax, rax; add rax, rdi; ret; 
0x00000000004826fd: and rdx, r8; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000004827f1: and rsi, rax; je 0x82730; bsr rax, rsi; add rax, rdi; ret; 
0x00000000004825fb: and rsi, rcx; je 0x82730; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000045b498: and sil, al; sub byte ptr [rcx], al; ret; 
0x00000000004c7600: and spl, sil; call qword ptr [rax]; 
0x000000000047ac96: bnd call qword ptr [rax + 0x38]; 
0x000000000046d489: bnd call qword ptr [rbx + 0x38]; 
0x00000000004af6b8: bnd jae 0xaf6b4; push qword ptr [rdx + 0x73]; stc; push rdx; jb 0xaf6bc; jmp qword ptr [rdx + 0x72]; 
0x00000000004af6c0: bnd jb 0xaf6bc; jmp qword ptr [rdx + 0x72]; 
0x000000000042bdfa: bnd jmp 0x2bc73; mov byte ptr [rsp + 0x28], dl; mov qword ptr [rsp + 0x20], rsi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000042bec0: bnd jmp 0x2bcce; mov qword ptr [rsp + 0x10], rdx; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000040467e: bnd jmp rdx; 
0x000000000044fdd1: bsf eax, eax; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa81: bsf eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000044fdf1: bsf eax, eax; add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa91: bsf eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000044fe3f: bsf eax, eax; add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000043aabf: bsf eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000044f9a4: bsf eax, eax; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x000000000043a65a: bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x000000000044fd06: bsf eax, eax; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000043ab16: bsf eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x000000000043a580: bsf eax, eax; add rax, rdi; ret; 
0x0000000000483d01: bsf eax, eax; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fdc1: bsf eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa71: bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000043a9f1: bsf eax, eax; cmp rdx, rax; jbe 0x3aa60; add rax, rdi; vzeroupper; ret; 
0x000000000043a590: bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000043a5a0: bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000043a570: bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000043a4cf: bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000044f533: bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000044f313: bsf eax, eax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000043a349: bsf eax, eax; sub rdx, rax; jbe 0x3a5f0; add rax, rdi; add rax, rcx; ret; 
0x000000000043a5b0: bsf eax, eax; sub rdx, rax; jbe 0x3a5f0; add rax, rdi; ret; 
0x000000000043a5c0: bsf eax, eax; sub rdx, rax; jbe 0x3a5f0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000043a5d0: bsf eax, eax; sub rdx, rax; jbe 0x3a5f0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000043a5e0: bsf eax, eax; sub rdx, rax; jbe 0x3a5f0; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000044fb56: bsf eax, edx; ret; 
0x0000000000483747: bsf eax, edx; shr rax, 2; ret; 
0x000000000043b3b1: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000043b3d1: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000043b397: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000043b121: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000434fda: bsf ecx, ecx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000004350a0: bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000468efd: bsf edi, edx; inc dword ptr [rbx - 0x76be0008]; ret 0x840f; 
0x0000000000434e6c: bsf edx, eax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000044fcb2: bsf edx, edx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000483857: bsf edx, edx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000004538d1: bsf edx, edx; lea r11, [rip + 0x5c1b5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453899: bsf edx, edx; lea r11, [rip + 0x5c1ed]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453874: bsf edx, edx; lea r11, [rip + 0x5c212]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453857: bsf edx, edx; lea r11, [rip + 0x5c22f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004532b1: bsf edx, edx; lea r11, [rip + 0x5c755]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453279: bsf edx, edx; lea r11, [rip + 0x5c78d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453254: bsf edx, edx; lea r11, [rip + 0x5c7b2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453237: bsf edx, edx; lea r11, [rip + 0x5c7cf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000434e01: bsf edx, edx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000044f650: bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000044f430: bsf rax, rax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000044fba2: bsf rax, rdx; ret; 
0x0000000000483746: bsf rax, rdx; shr rax, 2; ret; 
0x0000000000434fd9: bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000043509f: bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000434e6b: bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000044fcb1: bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000483856: bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000004538d0: bsf rdx, rdx; lea r11, [rip + 0x5c1b5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453898: bsf rdx, rdx; lea r11, [rip + 0x5c1ed]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453873: bsf rdx, rdx; lea r11, [rip + 0x5c212]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453856: bsf rdx, rdx; lea r11, [rip + 0x5c22f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004532b0: bsf rdx, rdx; lea r11, [rip + 0x5c755]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453278: bsf rdx, rdx; lea r11, [rip + 0x5c78d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453253: bsf rdx, rdx; lea r11, [rip + 0x5c7b2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453236: bsf rdx, rdx; lea r11, [rip + 0x5c7cf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000434e00: bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000482577: bsr eax, eax; add rax, rdi; ret; 
0x0000000000482951: bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000004827fb: bsr eax, esi; add rax, rdi; ret; 
0x0000000000482709: bsr esi, esi; lea rax, [rcx + rsi]; ret; 
0x0000000000482605: bsr esi, esi; lea rax, [rdi + rsi]; ret; 
0x0000000000482576: bsr rax, rax; add rax, rdi; ret; 
0x00000000004827fa: bsr rax, rsi; add rax, rdi; ret; 
0x0000000000482708: bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000482604: bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000043b18c: bswap eax; bswap ecx; mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x000000000043b18e: bswap ecx; mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x0000000000482b93: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000483853: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000482af4: bts edx, esi; sar rdx, cl; test rdx, rdx; je 0x82b10; bsf rax, rdx; ret; 
0x0000000000482b92: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000483852: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000482af3: bts rdx, rsi; sar rdx, cl; test rdx, rdx; je 0x82b10; bsf rax, rdx; ret; 
0x000000000048e7a6: call 0x10920; nop dword ptr [rax + rax]; cmp byte ptr [rip + 0x24b071], 0; jne 0x8e7c8; mov rax, qword ptr [rip + 0x24ac50]; ret; 
0x000000000041d8d8: call 0x10920; xor eax, eax; ret; 
0x0000000000481c4f: call 0x1511c4b; ret; 
0x000000000045b4bd: call 0x184df00a; jg 0x5b4a6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x0000000000478292: call 0x18cc05df; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004328c8: call 0x1c920; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x000000000049c579: call 0x1c920; nop; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000400bea: call 0x1d7a0; nop; leave; ret; 
0x00000000004328c3: call 0x1ee90; call 0x1c920; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x0000000000400c5f: call 0x1f000; mov eax, 0; leave; ret; 
0x0000000000407fa9: call 0x1f101099; add byte ptr [rbp - 0x781400be], cl; mov eax, 0xffffffea; ret; 
0x000000000047e73d: call 0x2001083; ror byte ptr [rbp + 0x39441704], cl; ret 0xf49; 
0x0000000000400e4d: call 0x2030; mov dword ptr [rip + 0x2d7518], ebx; xor eax, eax; pop rbx; ret; 
0x0000000000422f9d: call 0x21c30; mov rdx, qword ptr [rsp + 8]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004018de: call 0x2360; test eax, eax; js 0x18f0; add rsp, 0x18; ret; 
0x0000000000401954: call 0x2450; test eax, eax; js 0x1968; add rsp, 8; ret; 
0x0000000000401984: call 0x2490; test eax, eax; js 0x1998; add rsp, 8; ret; 
0x00000000004019be: call 0x24d0; test eax, eax; js 0x19d0; add rsp, 0x18; ret; 
0x000000000042396d: call 0x25570; mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000043b0d4: call 0x29933e8; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x000000000047e81b: call 0x2a006b40; ja 0x7e8b0; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000048f045: call 0x2f470; add rsp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x000000000041e9a9: call 0x2f470; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000490268: call 0x2f470; mov qword ptr [rbx], 0; mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000040059f: call 0x2f470; mov qword ptr [rip + 0x2d8b49], 0; pop rax; ret; 
0x000000000048e8ed: call 0x2f470; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000403734: call 0x2f470; mov rax, rbx; pop rbx; ret; 
0x000000000046eeba: call 0x3948eebe; fmul qword ptr [rdi]; lea ebp, [rdx]; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x000000000040a0bb: call 0x415ce21d; pop rbp; ret; 
0x000000000040acc3: call 0x415cee25; pop rbp; ret; 
0x000000000040adcb: call 0x415cef2d; pop rbp; ret; 
0x000000000040b9e3: call 0x415cfb45; pop rbp; ret; 
0x000000000040c5f3: call 0x415d0755; pop rbp; ret; 
0x000000000041f28c: call 0x415e33ee; pop rbp; pop r14; ret; 
0x0000000000430da3: call 0x415f4f05; pop rbp; pop r14; ret; 
0x00000000004312a3: call 0x415f5405; pop rbp; pop r14; ret; 
0x0000000000494c6e: call 0x41658dd0; pop rbp; ret; 
0x0000000000470aaf: call 0x42070aae; call qword ptr [rdi + 0x38]; 
0x000000000044ff24: call 0x48edea39; mov eax, edi; ret; 
0x0000000000450004: call 0x48edeb19; mov eax, edx; ret; 
0x000000000046ff1b: call 0x4906ff1a; mov esi, dword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x0000000000409490: call 0x498; test eax, eax; jne 0x9561; mov rax, 0x6d5400; pop rbx; ret; 
0x000000000046d3e3: call 0x4d06d3de; mov esi, edi; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000043c525: call 0x4e72d51d; call 0xf6aade1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000443ff0: call 0x4ef44fe7; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000446b10: call 0x4ef47b07; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000410310: call 0x58bb0; cmp eax, -1; je 0x103eb; add rsp, 0x98; ret; 
0x0000000000432b74: call 0x595e0; mov edx, 0; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000402468: call 0x59670; sar eax, 0x1f; add rsp, 8; and eax, 0xffffff83; ret; 
0x00000000004024ef: call 0x59670; sar eax, 0x1f; and eax, 0xfffffffe; add rsp, 0x18; ret; 
0x000000000048b08b: call 0x59880; test eax, eax; js 0x8b0a2; pop rbx; ret; 
0x000000000045993a: call 0x59cfd; add byte ptr [rbp + 0x41], bl; pop rsp; jmp rax; 
0x0000000000427a85: call 0x5b030; add rsp, 0x80; mov qword ptr [rip + 0x2b12e0], rdx; add dword ptr [rip + 0x2b12d5], 1; ret; 
0x0000000000429af4: call 0x5b030; add rsp, 0x80; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x0000000000477f28: call 0x5b060; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x00000000004846cd: call 0x5b060; add rsp, 0x80; pop rbx; ret; 
0x000000000046c11d: call 0x5b060; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x0000000000458da7: call 0x5b080; mov edi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x0000000000458dc5: call 0x5b0e0; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x00000000004589db: call 0x5b320; mov eax, dword ptr [rip + 0x280e86]; test eax, eax; jne 0x58a00; xor eax, eax; syscall; 
0x0000000000484c0b: call 0x5b320; mov ecx, 0xc; mov eax, ecx; syscall; 
0x0000000000426c56: call 0x5b320; nop dword ptr [rax + rax]; mov rax, -1; ret; 
0x000000000040233c: call 0x5b320; nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov eax, dword ptr [rip + 0x2d3dae]; ret; 
0x00000000004979d4: call 0x5b320; nop dword ptr [rax]; mov eax, 0x26; syscall; 
0x0000000000494927: call 0x5b320; nop dword ptr [rax]; mov eax, dword ptr [rip + 0x244fea]; ret; 
0x0000000000466cc4: call 0x5b320; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x272201]; ret; 
0x000000000045e7e8: call 0x5b320; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x27b191]; ret; 
0x000000000048482a: call 0x5b320; nop; mov eax, 0x3f; syscall; 
0x0000000000409762: call 0x5c41f4c2; ret; 
0x0000000000409fc2: call 0x5c41fd22; pop r13; ret; 
0x000000000040a0a2: call 0x5c41fe02; pop r13; ret; 
0x000000000040acaa: call 0x5c420a0a; pop r13; ret; 
0x000000000040b8f2: call 0x5c421652; pop r13; ret; 
0x000000000040b9ca: call 0x5c42172a; pop r13; ret; 
0x000000000040c502: call 0x5c422262; pop r13; ret; 
0x000000000040c5da: call 0x5c42233a; pop r13; ret; 
0x000000000041e9af: call 0x5c43470f; ret; 
0x000000000041f2c3: call 0x5c435023; pop r13; pop r14; ret; 
0x000000000041f3a4: call 0x5c435104; pop r13; ret; 
0x000000000041f3df: call 0x5c43513f; pop r13; ret; 
0x00000000004230c8: call 0x5c438e28; ret; 
0x00000000004230e4: call 0x5c438e44; ret; 
0x0000000000423e03: call 0x5c439b63; ret; 
0x0000000000427fd3: call 0x5c43dd33; pop r13; pop r14; ret; 
0x000000000042807f: call 0x5c43dddf; pop r13; pop r14; ret; 
0x000000000042f246: call 0x5c444fa6; pop r13; pop r14; ret; 
0x0000000000459923: call 0x5c46f683; mov esi, 2; jmp rax; 
0x0000000000459e5f: call 0x5c46fbbf; pop r13; ret; 
0x000000000048d824: call 0x5c4a3584; pop r13; ret; 
0x000000000048efa3: call 0x5c4a4d03; ret; 
0x000000000048efc0: call 0x5c4a4d20; ret; 
0x000000000048effd: call 0x5c4a4d5d; ret; 
0x0000000000494c4c: call 0x5c4aa9ac; pop r13; ret; 
0x0000000000499757: call 0x5c4af4b7; pop r13; ret; 
0x0000000000499786: call 0x5c4af4e6; pop r13; ret; 
0x00000000004675ed: call 0x5c8b0; mov rdi, r14; call rbx; 
0x000000000045e3c5: call 0x5c8b0; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x00000000004678c4: call 0x5c8b0; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x0000000000431f83: call 0x5d447bc9; pop r14; pop r15; ret; 
0x0000000000440476: call 0x634d0481; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000046ec30: call 0x634fec34; rol byte ptr [rbp - 0x40f0b737], 1; ror byte ptr [rax + 0xf], 0x44; ret 0xae9; 
0x000000000041d770: call 0x648f2378; ret; 
0x000000000046a2b6: call 0x6506a2ba; mov qword ptr [rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000046a313: call 0x6506a317; add rax, qword ptr [0]; ret; 
0x00000000004069a1: call 0x68e0; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000407e37: call 0x6b00; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000407855: call 0x6c10; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000483b35: call 0x74dabf3c; adc eax, 0xe180d188; pcmpeqb mm3, qword ptr [rsi]; ret; 
0x000000000043ca08: call 0x75cc021d; adc ah, byte ptr [rip + 0xffff]; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000401041: call 0x7710; test eax, eax; jns 0x102a; xor eax, eax; pop rbx; ret; 
0x000000000047e081: call 0x77311ca6; sub dword ptr [rdi], ecx; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000483c54: call 0x7801015b; ret; 
0x0000000000483d0c: call 0x78010213; ret; 
0x0000000000483d30: call 0x78010237; ret; 
0x0000000000483d50: call 0x78010257; ret; 
0x0000000000483d9e: call 0x780102a5; ret; 
0x0000000000483e3d: call 0x78010344; ret; 
0x0000000000483f78: call 0x7801047f; ret; 
0x0000000000483faa: call 0x780104b1; ret; 
0x0000000000483fc1: call 0x780104c8; ret; 
0x0000000000483fe5: call 0x780104ec; ret; 
0x0000000000484005: call 0x7801050c; ret; 
0x0000000000484025: call 0x7801052c; ret; 
0x0000000000484035: call 0x7801053c; ret; 
0x000000000048405c: call 0x78010563; ret; 
0x0000000000484080: call 0x78010587; ret; 
0x00000000004840a0: call 0x780105a7; ret; 
0x00000000004840ee: call 0x780105f5; ret; 
0x00000000004cbe84: call 0x780cbee5; ja 0xcbe83; jmp qword ptr [rdi + 6]; 
0x000000000048f082: call 0x7c943888; ret; 
0x0000000000496a1f: call 0x7c94b225; ret; 
0x0000000000467a65: call 0x84a036b; pop rbx; ret; 
0x0000000000497a3d: call 0x88080; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x00000000004910d8: call 0x89f60; mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x00000000004997b3: call 0x89f60; mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000048daa7: call 0x8cd5df4; mov edx, 1; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000004a0348: call 0x8ce8695; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000048d8e5: call 0x8d210; add rsp, 0xd8; ret; 
0x000000000048ba33: call 0x8d9b0; mov r11, qword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x000000000048c69f: call 0x8d9b0; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x0000000000409280: call 0x9090; cmp rax, 1; sbb eax, eax; and eax, 0xffffffea; ret; 
0x0000000000467a4c: call 0x91140; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000401159: call 0x9290; test rax, rax; je 0x1170; mov eax, dword ptr [rax]; add rsp, 8; ret; 
0x00000000004936af: call 0x92a60; mov rax, qword ptr [rbp - 8]; xor rax, qword ptr fs:[0x28]; jne 0x936fe; leave; ret; 
0x00000000004939cb: call 0x93c97; add byte ptr [rax], al; mov eax, 1; ret; 
0x0000000000497734: call 0x95050; mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000049100d: call 0x95050; mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000497913: call 0x997c0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000049783f: call 0x99ac0; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000499d64: call 0x9a0e0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000400b21: call 0x9eac0; mov byte ptr [rip + 0x2d77f3], 1; pop rbp; ret; 
0x000000000049c5eb: call 0x9eb00; test rax, rax; je 0x9c600; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000410ee7: call 0xaf991ef; ja 0x10c11; lea rdx, [rip + 0x9c1b7]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000410fd3: call 0xaf992db; ja 0x10c3f; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x000000000043c52a: call 0xf6aade1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004572ba: call 0xfe5f5cb; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x000000000049a35b: call 0xffffffff850cec9f; cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x830f; 
0x000000000049a3f0: call 0xffffffff850ced34; cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x9272; 
0x000000000047757b: call 0xffffffff8955757f; ret 0x894c; 
0x000000000046d1ef: call 0xffffffff89d85af6; ret 0x8341; 
0x00000000004ca184: call 0xffffffffb80ca1c8; fdiv st(5); jmp qword ptr [rax]; 
0x00000000004d0484: call 0xffffffffc20d052b; add bl, dh; jmp qword ptr [rcx]; 
0x000000000043b382: call 0xffffffffc52e2986; std; xlatb; ret; 
0x000000000047f8ce: call 0xffffffffc7500c5c; ror byte ptr [rax], 0x83; insd dword ptr [rdi], dx; add byte ptr [rax - 0x39], cl; ret 0x7c60; 
0x00000000004cc884: call 0xffffffffc80cc8ef; iretd; clc; jmp qword ptr [rcx]; 
0x00000000004ab2b8: call 0xffffffffd00ab295; add byte ptr [rax], al; add al, ch; fdivr st(7); jmp qword ptr [rdx]; 
0x000000000045a475: call 0xffffffffe10501d5; nop word ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000404f14: call 0xffffffffe8004f22; ret; 
0x00000000004aeca5: call 0xffffffffe99beca2; clc; jmp rax; 
0x00000000004aece5: call 0xffffffffea0bece2; clc; call qword ptr [rax - 0x15]; 
0x000000000043e4a3: call 0xfffffffff0626ff4; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000440e73: call 0xfffffffff06299c4; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e373: call 0xfffffffff0636cc4; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043e3b1: call 0xfffffffff0636d02; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e3e9: call 0xfffffffff0636d3a; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043e427: call 0xfffffffff0636d78; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e45f: call 0xfffffffff0636db0; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e487: call 0xfffffffff0636dd8; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e4af: call 0xfffffffff0636e00; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000440d43: call 0xfffffffff0639694; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000440d81: call 0xfffffffff06396d2; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000440db9: call 0xfffffffff063970a; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000440df7: call 0xfffffffff0639748; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000440e2f: call 0xfffffffff0639780; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000440e57: call 0xfffffffff06397a8; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000440e7f: call 0xfffffffff06397d0; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000049c8cb: call 0xfffffffff07f541c; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049ca49: call 0xfffffffff07f559a; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049cb95: call 0xfffffffff07f56e6; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049cbe1: call 0xfffffffff07f5732; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049cd70: call 0xfffffffff07f58c1; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049ced0: call 0xfffffffff07f5a21; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049cf21: call 0xfffffffff07f5a72; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x0000000000497aab: call 0xfffffffff8cac30b; add ebx, dword ptr [rbp + 0x41]; pop rsp; pop r13; ret; 
0x00000000004572eb: call 0xfffffffffc0597fe; add eax, dword ptr [rax]; pop rbx; ret; 
0x0000000000457336: call 0xfffffffffc059841; inc dword ptr [rbx]; pop rbx; ret; 
0x000000000049702c: call 0xffffffffffc00000; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000049ea54: call 0xffffffffffc00000; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000422910: call 0xfffffffffffe00fe; jmp qword ptr [rsi + 0x2e]; 
0x0000000000422870: call 0xfffffffffffea05e; jmp qword ptr [rsi + 0x2e]; 
0x00000000004aee63: call qword ptr [rax + 0x10]; 
0x00000000004aeeb7: call qword ptr [rax + 0x17]; 
0x000000000042322a: call qword ptr [rax + 0x18]; 
0x000000000045c834: call qword ptr [rax + 0x1f0f2e66]; test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x27aaf9]; ret; 
0x000000000049c524: call qword ptr [rax + 0x1f0f2e66]; test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x90]; ret; 
0x00000000004aebcb: call qword ptr [rax + 0x20fff906]; stc; clc; jmp rax; 
0x00000000004aed17: call qword ptr [rax + 0x25]; 
0x00000000004aee3f: call qword ptr [rax + 0x27]; 
0x00000000004aee3f: call qword ptr [rax + 0x27]; stc; jmp qword ptr [rax]; 
0x00000000004a1bff: call qword ptr [rax + 0x2b]; 
0x0000000000429b5d: call qword ptr [rax + 0x31]; 
0x000000000046f426: call qword ptr [rax + 0x38]; 
0x00000000004afa1b: call qword ptr [rax + 0x39]; 
0x00000000004afa1b: call qword ptr [rax + 0x39]; cli; jmp qword ptr [rax + 0x39]; 
0x00000000004afa57: call qword ptr [rax + 0x3a]; 
0x00000000004afa57: call qword ptr [rax + 0x3a]; cli; jmp qword ptr [rax + 0x3a]; 
0x00000000004afa7b: call qword ptr [rax + 0x3b]; 
0x00000000004afaaf: call qword ptr [rax + 0x3f]; 
0x00000000004afaaf: call qword ptr [rax + 0x3f]; cli; jmp qword ptr [rax + 0x3f]; 
0x0000000000422ba6: call qword ptr [rax + 0x40]; 
0x000000000049a172: call qword ptr [rax + 0x49]; 
0x00000000004af14b: call qword ptr [rax + 0x4b]; 
0x00000000004ae8df: call qword ptr [rax + 0x57]; 
0x00000000004aeefb: call qword ptr [rax + 0x57]; stc; jmp rax; 
0x000000000047f924: call qword ptr [rax + 0x58]; 
0x00000000004af0d3: call qword ptr [rax + 0x5b]; 
0x00000000004af0d3: call qword ptr [rax + 0x5b]; stc; jmp rax; 
0x00000000004ae8ef: call qword ptr [rax + 0x5c]; 
0x00000000004ae8ff: call qword ptr [rax + 0x61]; 
0x0000000000480d03: call qword ptr [rax + 0x68]; 
0x000000000049a2c9: call qword ptr [rax + 0x74]; 
0x00000000004afb9f: call qword ptr [rax + 0x77]; 
0x000000000042336c: call qword ptr [rax + 0x78]; 
0x00000000004af7d3: call qword ptr [rax + 0x78]; stc; call rax; 
0x00000000004af60b: call qword ptr [rax + 0x7b]; 
0x00000000004af3f3: call qword ptr [rax + 0x7e]; 
0x00000000004af3f3: call qword ptr [rax + 0x7e]; stc; jmp rax; 
0x00000000004af847: call qword ptr [rax + 0xfff971]; jno 0xaf848; jmp qword ptr [rax + 0x53]; 
0x00000000004cbdfb: call qword ptr [rax + 1]; 
0x0000000000420d78: call qword ptr [rax + 8]; 
0x00000000004af06f: call qword ptr [rax + rbx*2 - 7]; jmp rsp; 
0x00000000004aeceb: call qword ptr [rax - 0x15]; 
0x0000000000470b68: call qword ptr [rax - 0x18]; 
0x0000000000470b68: call qword ptr [rax - 0x18]; xchg eax, ecx; ret 0xffff; 
0x000000000049e379: call qword ptr [rax - 0x1b]; 
0x00000000004aec97: call qword ptr [rax - 0x1c]; 
0x00000000004aea4b: call qword ptr [rax - 0x28]; 
0x00000000004af9bb: call qword ptr [rax - 0x38]; 
0x00000000004afa83: call qword ptr [rax - 0x4f0005c5]; cmp edi, edx; call rax; 
0x00000000004afa63: call qword ptr [rax - 0x4f0005c6]; cmp bh, dl; call rax; 
0x00000000004ae9df: call qword ptr [rax - 0x52]; 
0x00000000004ae9bb: call qword ptr [rax - 0x5d]; 
0x00000000004afa2b: call qword ptr [rax - 0x5f0005c7]; cmp edx, edi; push qword ptr [rax - 0x3f0005c7]; cmp edx, edi; call rax; 
0x00000000004af923: call qword ptr [rax - 0x67]; 
0x00000000004af923: call qword ptr [rax - 0x67]; stc; jmp qword ptr [rax - 0x65]; 
0x00000000004aebc3: call qword ptr [rax - 0x6f0006fe]; add al, 0xf9; call qword ptr [rax + 0x20fff906]; stc; clc; jmp rax; 
0x00000000004be7e7: call qword ptr [rax - 0x70003fd]; add al, 0xfc; call rax; 
0x000000000047c420: call qword ptr [rax - 0x75]; 
0x00000000004aec7b: call qword ptr [rax - 3]; 
0x00000000004aec7b: call qword ptr [rax - 3]; clc; inc dword ptr [rax - 1]; clc; call qword ptr [rax]; 
0x00000000004aec17: call qword ptr [rax - 4]; 
0x00000000004aeb73: call qword ptr [rax - 5]; 
0x00000000004aebaf: call qword ptr [rax - 7]; 
0x00000000004aebaf: call qword ptr [rax - 7]; clc; call qword ptr [rax]; 
0x00000000004d0f73: call qword ptr [rax]; 
0x00000000004aeea7: call qword ptr [rax]; adc bh, cl; jmp qword ptr [rax + 0x13]; 
0x00000000004aec1f: call qword ptr [rax]; add cl, bh; jmp rax; 
0x00000000004afa4b: call qword ptr [rax]; cmp bh, dl; jmp qword ptr [rax]; 
0x00000000004afa73: call qword ptr [rax]; cmp edi, edx; push qword ptr [rax]; cmp edi, edx; call qword ptr [rax + 0x3b]; 
0x00000000004aecc7: call qword ptr [rax]; hlt; clc; jmp qword ptr [rax - 0xb]; 
0x000000000049a2e7: call qword ptr [rax]; jne 0x9a308; xor eax, eax; ret; 
0x000000000049d487: call qword ptr [rax]; jne 0x9d49e; xor eax, eax; ret; 
0x000000000049e2e7: call qword ptr [rax]; jne 0x9e2fe; xor eax, eax; ret; 
0x000000000049ed57: call qword ptr [rax]; jne 0x9ed78; xor eax, eax; ret; 
0x00000000004aee53: call qword ptr [rax]; or edi, ecx; jmp qword ptr [rax + 0xc]; 
0x00000000004aecdb: call qword ptr [rax]; out 0xf8, al; jmp qword ptr [rax - 0x19]; 
0x00000000004ae8eb: call qword ptr [rax]; pop rbx; clc; call qword ptr [rax + 0x5c]; 
0x00000000004ae8db: call qword ptr [rax]; push rsi; clc; call qword ptr [rax + 0x57]; 
0x00000000004af9fb: call qword ptr [rax]; stc; jmp qword ptr [rax - 0xc]; 
0x00000000004aebff: call qword ptr [rax]; stc; jmp qword ptr [rax]; 
0x00000000004af913: call qword ptr [rax]; xchg eax, ecx; stc; jmp qword ptr [rax]; 
0x000000000041fbc4: call qword ptr [rbp + 0x18]; 
0x00000000004aac17: call qword ptr [rbp + 0x1c000001]; fdivr st(7); jmp rbx; 
0x000000000041fb38: call qword ptr [rbp + 0x20]; 
0x0000000000420475: call qword ptr [rbp + 0x30]; 
0x000000000041f9dc: call qword ptr [rbp + 0x38]; 
0x0000000000400b6c: call qword ptr [rbp + 0x48]; 
0x00000000004186ee: call qword ptr [rbp + 0x53]; 
0x000000000047f8fb: call qword ptr [rbp + 0x58]; 
0x000000000041ef2a: call qword ptr [rbp + 0x60]; 
0x0000000000425ea6: call qword ptr [rbp + 0x68]; 
0x0000000000421f65: call qword ptr [rbp + 0x70]; 
0x00000000004ab6d3: call qword ptr [rbp + 1]; 
0x00000000004a7677: call qword ptr [rbp + 7]; 
0x0000000000420a76: call qword ptr [rbp + 8]; 
0x00000000004af577: call qword ptr [rbp + rdi*2 + 0x7d24fff9]; stc; push qword ptr [rsp + rdi*2 + 0x7c44fff9]; stc; call rsp; 
0x00000000004af76b: call qword ptr [rbp + rsi*2 - 7]; call rsp; 
0x00000000004a951f: call qword ptr [rbp]; 
0x000000000040fe2e: call qword ptr [rbx + 0x10]; 
0x00000000004ab417: call qword ptr [rbx + 0x11]; 
0x0000000000425fbc: call qword ptr [rbx + 0x18]; 
0x000000000046d48a: call qword ptr [rbx + 0x38]; 
0x0000000000401922: call qword ptr [rbx + 0x48]; 
0x000000000049cf72: call qword ptr [rbx + 0x49]; 
0x000000000042a64c: call qword ptr [rbx + 0x50]; 
0x000000000049c762: call qword ptr [rbx + 0x52]; 
0x000000000042dfd6: call qword ptr [rbx + 0x64]; 
0x00000000004c2740: call qword ptr [rbx + 0x7c]; 
0x000000000046fab0: call qword ptr [rbx + 0xf]; 
0x00000000004d12eb: call qword ptr [rbx + 1]; 
0x00000000004cbed3: call qword ptr [rbx + 4]; 
0x00000000004af77b: call qword ptr [rbx + rsi*2 - 7]; call rsp; 
0x00000000004bf83f: call qword ptr [rbx - 0x38]; 
0x000000000048b1ab: call qword ptr [rbx - 0x77]; 
0x00000000004b01af: call qword ptr [rbx - 0x7a]; 
0x00000000004d0f1b: call qword ptr [rbx]; 
0x000000000046dbe4: call qword ptr [rcx + 0x38]; 
0x00000000004c60eb: call qword ptr [rcx + 0x5c]; 
0x00000000004aa2d3: call qword ptr [rcx + 0xe]; 
0x00000000004cc18f: call qword ptr [rcx + 1]; 
0x00000000004a54ff: call qword ptr [rcx + 2]; 
0x00000000004b0edb: call qword ptr [rcx - 0x45]; 
0x00000000004c202d: call qword ptr [rcx - 0x66]; 
0x00000000004a535f: call qword ptr [rcx - 0x6e000028]; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004ad30b: call qword ptr [rcx - 0xe]; 
0x0000000000498fc0: call qword ptr [rcx]; 
0x0000000000426ec1: call qword ptr [rdi + 0x18]; 
0x000000000041f504: call qword ptr [rdi + 0x38]; 
0x0000000000422284: call qword ptr [rdi + 0x40]; 
0x00000000004250be: call qword ptr [rdi + 0x58]; 
0x0000000000489e28: call qword ptr [rdi + 0x60]; 
0x000000000041fe81: call qword ptr [rdi + 0x70]; 
0x0000000000423bfe: call qword ptr [rdi + 0x78]; 
0x00000000004ca1e7: call qword ptr [rdi + 1]; 
0x00000000004c94c7: call qword ptr [rdi + 2]; 
0x00000000004af567: call qword ptr [rdi + rdi*2 - 7]; jmp rsp; 
0x00000000004af75b: call qword ptr [rdi + rsi*2 - 7]; call rsp; 
0x00000000004c97f3: call qword ptr [rdi]; 
0x00000000004af4af: call qword ptr [rdx + 0x22fff97e]; jle 0xaf4b0; push qword ptr [rdx + 0x42fff97d]; jge 0xaf4b8; call rdx; 
0x00000000004ad0bf: call qword ptr [rdx + 0x3e]; 
0x00000000004ad0eb: call qword ptr [rdx + 0x3f]; 
0x00000000004af1bb: call qword ptr [rdx + 0x4d]; 
0x00000000004af1bb: call qword ptr [rdx + 0x4d]; stc; call rdx; 
0x00000000004af1b3: call qword ptr [rdx + 0x4e]; 
0x00000000004af1b3: call qword ptr [rdx + 0x4e]; stc; call rdx; 
0x00000000004af1ab: call qword ptr [rdx + 0x4f]; 
0x00000000004af1ab: call qword ptr [rdx + 0x4f]; stc; call rdx; 
0x00000000004af1a3: call qword ptr [rdx + 0x50]; 
0x00000000004af1a3: call qword ptr [rdx + 0x50]; stc; call rdx; 
0x00000000004af19b: call qword ptr [rdx + 0x51]; 
0x00000000004af19b: call qword ptr [rdx + 0x51]; stc; call rdx; 
0x00000000004aefa7: call qword ptr [rdx + 0x59]; 
0x00000000004aefa7: call qword ptr [rdx + 0x59]; stc; jmp rdx; 
0x00000000004d063b: call qword ptr [rdx + 1]; 
0x00000000004c60df: call qword ptr [rdx + rbx*2 - 3]; jmp qword ptr [rdi + 0x5a]; 
0x00000000004aea33: call qword ptr [rdx - 0x2a]; 
0x00000000004aea33: call qword ptr [rdx - 0x2a]; clc; jmp qword ptr [rdx]; 
0x00000000004a747f: call qword ptr [rdx - 0x6d000028]; fdivr st(7); jmp qword ptr [rbp]; 
0x00000000004af49f: call qword ptr [rdx - 0x80]; 
0x00000000004af49f: call qword ptr [rdx - 0x80]; stc; jmp rdx; 
0x00000000004c6e9b: call qword ptr [rdx]; 
0x000000000040909f: call qword ptr [rip + 0xfc00000]; test dh, cl; add dword ptr [rax], eax; add byte ptr [rdi], cl; xchg dword ptr [rax - 0x7f000000], esp; call qword ptr [rsi]; 
0x00000000004cbd6f: call qword ptr [rsi + 0x16]; 
0x0000000000421ecf: call qword ptr [rsi + 0x18]; 
0x00000000004aa30f: call qword ptr [rsi + 0x1b000001]; fdivr st(7); jmp qword ptr [rbp + 0xe]; 
0x00000000004261d1: call qword ptr [rsi + 0x20]; 
0x00000000004c3d7f: call qword ptr [rsi + 0x30]; 
0x00000000004725a5: call qword ptr [rsi + 0x38]; 
0x0000000000429d5d: call qword ptr [rsi + 0x50]; 
0x00000000004aef43: call qword ptr [rsi + 0x56]; 
0x00000000004aef43: call qword ptr [rsi + 0x56]; stc; jmp rsi; 
0x00000000004af43b: call qword ptr [rsi + 0x7d]; 
0x00000000004af43b: call qword ptr [rsi + 0x7d]; stc; jmp rsi; 
0x00000000004cf37b: call qword ptr [rsi + 1]; 
0x00000000004c626b: call qword ptr [rsi + 2]; 
0x00000000004af763: call qword ptr [rsi + rsi*2 - 7]; call rsp; 
0x00000000004aeac7: call qword ptr [rsi - 0x22]; 
0x00000000004a24ef: call qword ptr [rsi - 0x2d]; 
0x00000000004a24ef: call qword ptr [rsi - 0x2d]; idiv bh; sal esi, cl; push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi]; 
0x00000000004a25cf: call qword ptr [rsi - 0x30]; 
0x00000000004a2723: call qword ptr [rsi - 0x33]; 
0x00000000004a2873: call qword ptr [rsi - 0x36]; 
0x00000000004a29b3: call qword ptr [rsi - 0x39]; 
0x00000000004a2a73: call qword ptr [rsi - 0x3c]; 
0x00000000004a2b6b: call qword ptr [rsi - 0x3f]; 
0x00000000004a2c87: call qword ptr [rsi - 0x42]; 
0x00000000004a2d87: call qword ptr [rsi - 0x45]; 
0x00000000004a2e9b: call qword ptr [rsi - 0x48]; 
0x00000000004a2ff3: call qword ptr [rsi - 0x4b]; 
0x00000000004a30f3: call qword ptr [rsi - 0x4e]; 
0x00000000004a30f3: call qword ptr [rsi - 0x4e]; idiv bh; mov dl, 0xf6; jmp qword ptr [rsi]; 
0x00000000004a32b3: call qword ptr [rsi - 0x51]; 
0x00000000004a35c3: call qword ptr [rsi - 0x54]; 
0x00000000004a38cf: call qword ptr [rsi - 0x57]; 
0x00000000004ca30b: call qword ptr [rsi]; 
0x000000000040910f: call qword ptr [rsi]; jne 0x9270; mov rax, 0x6d2f60; ret; 
0x00000000004a2b3f: call qword ptr [rsi]; ret 0xfff6; 
0x00000000004af773: call qword ptr [rsp + rsi*2 - 7]; call rsp; 
0x0000000000400410: call rax; 
0x0000000000400410: call rax; add rsp, 8; ret; 
0x00000000004ae81f: call rax; clc; push rax; clc; jmp qword ptr [rax]; 
0x00000000004afa93: call rax; cli; jmp rax; 
0x00000000004aed0b: call rax; cmc; clc; ljmp [rax + 0x70fff921]; and edi, ecx; call qword ptr [rax + 0x25]; 
0x00000000004afa6b: call rax; cmp bh, dl; push rax; cmp bh, dl; call qword ptr [rax]; 
0x00000000004afa3b: call rax; cmp edx, edi; jmp rax; 
0x00000000004af9eb: call rax; in eax, dx; stc; jmp qword ptr [rax]; 
0x00000000004af5eb: call rax; jle 0xaf5e8; jmp qword ptr [rax + 0x7e]; 
0x00000000004af903: call rax; mov cl, bh; jmp rax; 
0x00000000004aee97: call rax; or al, 0xf9; jmp qword ptr [rax]; 
0x00000000004aecb7: call rax; out dx, al; clc; jmp qword ptr [rax]; 
0x00000000004ae8e7: call rax; pop rcx; clc; call qword ptr [rax]; 
0x00000000004aeedb: call rax; pop rdx; stc; jmp qword ptr [rax + 0x5a]; 
0x00000000004ae8f7: call rax; pop rsi; clc; call qword ptr [rax]; 
0x00000000004af0f3: call rax; push rdi; stc; jmp qword ptr [rax + 0x57]; 
0x00000000004ae8d7: call rax; push rsp; clc; call qword ptr [rax]; 
0x00000000004aee83: call rax; sbb bh, cl; jmp qword ptr [rax]; 
0x00000000004aed6b: call rax; stc; jmp qword ptr [rax + 0x21]; 
0x00000000004aed67: call rax; sub al, 0xf9; call rax; stc; jmp qword ptr [rax + 0x21]; 
0x00000000004a9783: call rbp; add byte ptr [rax], al; add byte ptr [rdx - 0x4d000028], dh; fdivr st(7); jmp qword ptr [rbp]; 
0x000000000040094d: call rbx; 
0x000000000042be13: call rcx; 
0x00000000004a4bdf: call rcx; fdivr st(7); call rcx; fdivr st(7); jmp qword ptr [rbx]; 
0x00000000004a4be3: call rcx; fdivr st(7); jmp qword ptr [rbx]; 
0x0000000000459ed3: call rdi; 
0x00000000004ab213: call rdi; add byte ptr [rax], al; add dh, ah; fdivr st(7); jmp rsi; 
0x000000000041d5c7: call rdx; 
0x00000000004af4bf: call rdx; jl 0xaf4bc; jmp qword ptr [rdx + 0x7c]; 
0x00000000004af19f: call rdx; push rax; stc; call qword ptr [rdx + 0x50]; 
0x00000000004aefc7: call rdx; push rbp; stc; jmp qword ptr [rdx + 0x55]; 
0x00000000004af1b7: call rdx; stc; call qword ptr [rdx + 0x4d]; 
0x00000000004af1af: call rdx; stc; call qword ptr [rdx + 0x4e]; 
0x00000000004af1a7: call rdx; stc; call qword ptr [rdx + 0x4f]; 
0x000000000045dde1: call rsi; 
0x00000000004aef23: call rsi; pop rcx; stc; jmp qword ptr [rsi + 0x59]; 
0x00000000004a2af7: call rsi; ret 0xfff6; 
0x0000000000459991: call rsp; 
0x00000000004a9d5b: call rsp; add byte ptr [rax], al; add dl, ah; fdivr st(7); jmp rdx; 
0x0000000000420873: cdq; add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x000000000043303d: cdq; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000004a93ec: cdq; add dword ptr [rax], eax; add byte ptr [rbx], al; fdivr st(7); jmp rdx; 
0x000000000049b944: cdq; add rax, r9; jmp rax; 
0x00000000004c94c5: cdq; cmc; call qword ptr [rdi + 2]; 
0x00000000004a57b8: cdq; fdivr st(7); call qword ptr [rax]; 
0x00000000004a57b0: cdq; fdivr st(7); lcall [rcx - 0x66000028]; fdivr st(7); call qword ptr [rax]; 
0x00000000004c3820: cdq; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x000000000041369b: cdq; int 0xfe; dec dword ptr [rcx - 0x77]; ret 0x149; 
0x0000000000479683: cdq; jb 0x7967f; jmp qword ptr [rsi + 0xf]; 
0x00000000004c381b: cdq; mov edi, 0x99b51319; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000004101ee: cdq; mov word ptr [rax + rax], gs; add al, 0xeb; mov byte ptr [rcx], bh; ret 0x860f; 
0x000000000040b0a4: cdq; or eax, dword ptr [rax]; ret; 
0x00000000004af925: cdq; stc; jmp qword ptr [rax - 0x65]; 
0x0000000000470579: cdqe; movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x26301a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000470c1b: cdqe; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x262978]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x00000000004705c3: cdqe; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x262fd0]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x0000000000470528: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x262f6b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004708d7: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2630bc]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470889: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26310a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004707da: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2631b9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047077e: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x263215]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004704de: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2634b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470490: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x263503]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047002f: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x263664]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004be7ec: clc; add al, 0xfc; call rax; 
0x0000000000479461: clc; add cl, byte ptr [rax + 0x29]; ret 0xb8; 
0x000000000048dad3: clc; add cl, byte ptr [rax - 0x77]; ret 0xc148; 
0x000000000041991f: clc; add cl, byte ptr [rdi]; test ch, dl; add al, 0; add byte ptr [rbx - 0x7bf0fc08], al; ret; 
0x0000000000409598: clc; add dh, byte ptr [rbp + 0xc]; lea eax, [rsi*8 + 0x14]; ret; 
0x00000000004095de: clc; add dh, byte ptr [rbp + 0xe]; lea eax, [rsi*8 + 0x10]; ret; 
0x00000000004321b3: clc; add dword ptr [rax - 0x73], ecx; clc; cmovne rax, rcx; ret; 
0x000000000041c1cd: clc; add dword ptr [rbx - 0x7cb70030], eax; ret; 
0x00000000004095d9: clc; add dword ptr [rbx - 0x7d], esi; clc; add dh, byte ptr [rbp + 0xe]; lea eax, [rsi*8 + 0x10]; ret; 
0x0000000000409593: clc; add dword ptr [rcx + rbx - 0x7d], esi; clc; add dh, byte ptr [rbp + 0xc]; lea eax, [rsi*8 + 0x14]; ret; 
0x0000000000497aaf: clc; add ebx, dword ptr [rbp + 0x41]; pop rsp; pop r13; ret; 
0x000000000045f042: clc; add ecx, dword ptr [rax - 0x77]; or byte ptr [r15], 0x8e; ret 1; 
0x000000000043a357: clc; add rax, rcx; ret; 
0x0000000000483c4b: clc; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fd0b: clc; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000043a884: clc; add rax, rcx; vzeroupper; ret; 
0x0000000000401a1d: clc; add rsp, 0x18; ret; 
0x00000000004ae8de: clc; call qword ptr [rax + 0x57]; 
0x00000000004ae8ee: clc; call qword ptr [rax + 0x5c]; 
0x00000000004ae8fe: clc; call qword ptr [rax + 0x61]; 
0x00000000004cbdfa: clc; call qword ptr [rax + 1]; 
0x00000000004aecea: clc; call qword ptr [rax - 0x15]; 
0x00000000004aec96: clc; call qword ptr [rax - 0x1c]; 
0x00000000004aea4a: clc; call qword ptr [rax - 0x28]; 
0x00000000004ae9de: clc; call qword ptr [rax - 0x52]; 
0x00000000004ae9ba: clc; call qword ptr [rax - 0x5d]; 
0x00000000004aec7a: clc; call qword ptr [rax - 3]; 
0x00000000004aec7a: clc; call qword ptr [rax - 3]; clc; inc dword ptr [rax - 1]; clc; call qword ptr [rax]; 
0x00000000004aec16: clc; call qword ptr [rax - 4]; 
0x00000000004aeb72: clc; call qword ptr [rax - 5]; 
0x00000000004ae8da: clc; call qword ptr [rax]; 
0x00000000004aec1e: clc; call qword ptr [rax]; add cl, bh; jmp rax; 
0x00000000004aecc6: clc; call qword ptr [rax]; hlt; clc; jmp qword ptr [rax - 0xb]; 
0x00000000004aecda: clc; call qword ptr [rax]; out 0xf8, al; jmp qword ptr [rax - 0x19]; 
0x00000000004ae8ea: clc; call qword ptr [rax]; pop rbx; clc; call qword ptr [rax + 0x5c]; 
0x00000000004ae8da: clc; call qword ptr [rax]; push rsi; clc; call qword ptr [rax + 0x57]; 
0x00000000004aebfe: clc; call qword ptr [rax]; stc; jmp qword ptr [rax]; 
0x000000000048aace: clc; call qword ptr [rbp + 0x53]; 
0x00000000004cc276: clc; call qword ptr [rbp + 1]; 
0x00000000004cbed2: clc; call qword ptr [rbx + 4]; 
0x00000000004cc12a: clc; call qword ptr [rbx]; 
0x00000000004cc18e: clc; call qword ptr [rcx + 1]; 
0x00000000004aea56: clc; call qword ptr [rcx]; 
0x00000000004cbeea: clc; call qword ptr [rdi]; 
0x00000000004aea32: clc; call qword ptr [rdx - 0x2a]; 
0x00000000004aea32: clc; call qword ptr [rdx - 0x2a]; clc; jmp qword ptr [rdx]; 
0x00000000004cc09e: clc; call qword ptr [rdx]; 
0x00000000004cbd6e: clc; call qword ptr [rsi + 0x16]; 
0x00000000004aeac6: clc; call qword ptr [rsi - 0x22]; 
0x00000000004ccc7a: clc; call qword ptr [rsi]; 
0x00000000004ae81e: clc; call rax; 
0x00000000004ae81e: clc; call rax; clc; push rax; clc; jmp qword ptr [rax]; 
0x00000000004aecb6: clc; call rax; out dx, al; clc; jmp qword ptr [rax]; 
0x00000000004ae8e6: clc; call rax; pop rcx; clc; call qword ptr [rax]; 
0x00000000004ae8f6: clc; call rax; pop rsi; clc; call qword ptr [rax]; 
0x00000000004ae8d6: clc; call rax; push rsp; clc; call qword ptr [rax]; 
0x00000000004aea1e: clc; call rcx; 
0x00000000004cc936: clc; call rsi; 
0x00000000004cc026: clc; call rsp; 
0x00000000004aec11: clc; clc; push qword ptr [rax - 6]; clc; call qword ptr [rax - 4]; 
0x00000000004aec31: clc; clc; push qword ptr [rax]; cli; clc; call qword ptr [rax]; 
0x00000000004a18e0: clc; cmc; cmc; call qword ptr [rax]; 
0x00000000004321b8: clc; cmovne rax, rcx; ret; 
0x000000000043bfbd: clc; cmp rcx, rax; jne 0x3c9f3; xor eax, eax; ret; 
0x000000000047292e: clc; dec dword ptr [rax + 0x29]; ret; 
0x00000000004780e5: clc; dec dword ptr [rax - 0x39]; ret 0xffa0; 
0x000000000049be2e: clc; dec dword ptr [rax - 0x75]; push rbp; add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x000000000041f509: clc; dec dword ptr [rax - 0x77]; ret 0xf41; 
0x00000000004108ac: clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000471136: clc; dec dword ptr [rcx - 0x77]; ret; 
0x000000000047115f: clc; dec dword ptr [rdi]; test byte ptr [rcx - 0x7a000007], al; ror byte ptr [rdi], 0x84; ret; 
0x000000000046f0de: clc; dec dword ptr [rdi]; test dword ptr [rsi - 0x16000007], esi; ret; 
0x0000000000476c14: clc; dec dword ptr [rdi]; xchg eax, esp; shr cl, 0xfd; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x000000000046e493: clc; idiv bh; inc dword ptr [rax]; add byte ptr [rax], al; add cl, ch; ret 0xfffa; 
0x0000000000479b03: clc; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000406463: clc; imul eax, eax, 0xc2b2ae35; mov edx, eax; shr edx, 0x10; xor eax, edx; ret; 
0x00000000004ae81a: clc; inc dword ptr [rax + 0x3f]; clc; call rax; 
0x00000000004ae916: clc; inc dword ptr [rax + 0x6b]; clc; jmp qword ptr [rax + 0x6c]; 
0x00000000004ae9d2: clc; inc dword ptr [rax + 0x70fff8ab]; lodsb al, byte ptr [rsi]; clc; jmp qword ptr [rax - 0x53]; 
0x00000000004ae936: clc; inc dword ptr [rax + 0x74]; clc; jmp qword ptr [rax + 0x75]; 
0x00000000004aeb32: clc; inc dword ptr [rax - 0x25]; clc; call rax; 
0x00000000004aecb2: clc; inc dword ptr [rax - 0x2f000713]; out dx, al; clc; jmp qword ptr [rax]; 
0x00000000004ae9e2: clc; inc dword ptr [rax - 0x51]; clc; push qword ptr [rax]; mov al, 0xf8; jmp qword ptr [rax]; 
0x00000000004ae93e: clc; inc dword ptr [rax - 0x5f00078a]; ja 0xae93f; inc eax; js 0xae943; jmp qword ptr [rax + 0x68]; 
0x00000000004ae98e: clc; inc dword ptr [rax - 0xf00076d]; xchg eax, esp; clc; jmp qword ptr [rax - 0x6a]; 
0x00000000004aec7e: clc; inc dword ptr [rax - 1]; clc; call qword ptr [rax]; 
0x00000000004aeb56: clc; inc dword ptr [rax - 3]; clc; jmp qword ptr [rax]; 
0x00000000004ae90e: clc; inc dword ptr [rax]; imul edi, eax, 0xf86a20ff; inc dword ptr [rax + 0x6b]; clc; jmp qword ptr [rax + 0x6c]; 
0x00000000004ae92e: clc; inc dword ptr [rax]; jb 0xae92b; jmp qword ptr [rax]; 
0x00000000004ae9f2: clc; inc dword ptr [rax]; mov bl, 0xf8; push rax; mov bl, 0xf8; jmp rax; 
0x0000000000479f2b: clc; inc dword ptr [rbx + rcx*4 - 0x63]; idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x00000000004aea7e: clc; inc dword ptr [rcx - 0x23]; clc; call rcx; 
0x00000000004aea52: clc; inc dword ptr [rcx - 0x2a]; clc; call qword ptr [rcx]; 
0x0000000000468f02: clc; inc dword ptr [rcx - 0x77]; ret 0x840f; 
0x00000000004aecc2: clc; inc eax; clc; call qword ptr [rax]; 
0x00000000004aecd6: clc; inc eax; in al, 0xf8; call qword ptr [rax]; 
0x00000000004aecd6: clc; inc eax; in al, 0xf8; call qword ptr [rax]; out 0xf8, al; jmp qword ptr [rax - 0x19]; 
0x00000000004ae946: clc; inc eax; js 0xae943; jmp qword ptr [rax + 0x68]; 
0x00000000004ae926: clc; inc eax; outsd dx, dword ptr [rsi]; clc; jmp rax; 
0x000000000040afd3: clc; insb byte ptr [rdi], dx; or dword ptr [rax], eax; ret; 
0x00000000004cc8b8: clc; iretd; clc; jmp qword ptr [rcx]; 
0x00000000004840f1: clc; ja 0x840b7; nop word ptr cs:[rax + rax]; nop; mov eax, 0xc9; syscall; 
0x00000000004afb98: clc; ja 0xafb95; push qword ptr [rax]; ja 0xafb99; call qword ptr [rax + 0x77]; 
0x00000000004cd494: clc; jb 0xcd497; add byte ptr [rax], ch; sub bh, cl; call qword ptr [rax]; 
0x0000000000422e94: clc; jbe 0x22f98; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000046d626: clc; jbe 0x6ec45; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000046dbcc: clc; jbe 0x6ecd9; mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000428425: clc; jg 0x2849f; or byte ptr [rax + 0x4f058948], dl; in al, 0x2a; add bl, dh; ret; 
0x00000000004573e6: clc; jg 0x573e0; int1; mov eax, eax; ret; 
0x0000000000463337: clc; jg 0x632c3; ret 0xdb76; 
0x00000000004ae94a: clc; jmp qword ptr [rax + 0x68]; 
0x00000000004ae91a: clc; jmp qword ptr [rax + 0x6c]; 
0x00000000004ae93a: clc; jmp qword ptr [rax + 0x75]; 
0x00000000004aec62: clc; jmp qword ptr [rax + 1]; 
0x00000000004aecde: clc; jmp qword ptr [rax - 0x19]; 
0x00000000004aeb0e: clc; jmp qword ptr [rax - 0x21]; 
0x00000000004aeb3a: clc; jmp qword ptr [rax - 0x24]; 
0x00000000004aea46: clc; jmp qword ptr [rax - 0x29]; 
0x00000000004ae9da: clc; jmp qword ptr [rax - 0x53]; 
0x00000000004ae996: clc; jmp qword ptr [rax - 0x6a]; 
0x00000000004aecca: clc; jmp qword ptr [rax - 0xb]; 
0x00000000004aeb52: clc; jmp qword ptr [rax - 5]; 
0x00000000004cc5c6: clc; jmp qword ptr [rax]; 
0x00000000004cbeba: clc; jmp qword ptr [rbx + 0x17]; 
0x00000000004cbe72: clc; jmp qword ptr [rbx]; 
0x00000000004aea76: clc; jmp qword ptr [rcx]; 
0x00000000004cbe8a: clc; jmp qword ptr [rdi + 6]; 
0x00000000004aea36: clc; jmp qword ptr [rdx]; 
0x0000000000481860: clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000486b18: clc; jmp qword ptr [rsi + 0xf]; 
0x000000000048779c: clc; jmp qword ptr [rsi - 0x70]; 
0x00000000004aea92: clc; jmp qword ptr [rsi]; 
0x000000000047003f: clc; jmp rax; 
0x00000000004cc0ee: clc; jmp rbx; 
0x00000000004c8f68: clc; jnp 0xc8f60; jmp qword ptr [rdx + 1]; 
0x00000000004aea16: clc; lcall [rsi - 0x5f000729]; fdivr st(0); call rcx; 
0x0000000000441ec6: clc; lea r11, [rip + 0x6ce42]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441d10: clc; lea r11, [rip + 0x6cff8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f402: clc; lea r11, [rip + 0x6f746]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f328: clc; lea r11, [rip + 0x6f820]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000049c8d3: clc; leave; ret; 
0x00000000004aed0e: clc; ljmp [rax + 0x70fff921]; and edi, ecx; call qword ptr [rax + 0x25]; 
0x00000000004c2482: clc; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x0000000000421cb4: clc; mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000043e4c7: clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043ee1b: clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f01b: clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f21b: clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e4ab: clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043edef: clc; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043efef: clc; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f1ef: clc; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e47f: clc; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043ee37: clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000443d87: clc; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043f037: clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000443cf7: clc; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043f237: clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000446786: clc; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043e4e3: clc; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000456ece: clc; mov qword ptr [rdi], rcx; ret; 
0x000000000045704d: clc; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x000000000044771c: clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000045615a: clc; mov qword ptr [rdi], rsi; ret; 
0x000000000049a1d7: clc; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x000000000043c53f: clc; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x3c9f3; xor eax, eax; ret; 
0x000000000049ca51: clc; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000043bfb9: clc; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x3c9f3; xor eax, eax; ret; 
0x0000000000456152: clc; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000043ad02: clc; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000047ea11: clc; or dword ptr [rdi], ecx; xchg dword ptr [rdi], esi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x8b08; 
0x000000000040135c: clc; pop rbp; pop r12; ret; 
0x00000000004012b0: clc; pop rbx; pop rbp; ret; 
0x0000000000401303: clc; pop rbx; ret; 
0x00000000004aecd2: clc; push qword ptr [rax - 0x1d]; clc; inc eax; in al, 0xf8; call qword ptr [rax]; 
0x00000000004aea42: clc; push qword ptr [rax - 0x2a]; clc; jmp qword ptr [rax - 0x29]; 
0x00000000004ae9d6: clc; push qword ptr [rax - 0x54]; clc; jmp qword ptr [rax - 0x53]; 
0x00000000004ae9b2: clc; push qword ptr [rax - 0x60]; clc; jmp rax; 
0x00000000004aecbe: clc; push qword ptr [rax - 0xf]; clc; inc eax; clc; call qword ptr [rax]; 
0x00000000004aebfa: clc; push qword ptr [rax - 2]; clc; call qword ptr [rax]; 
0x00000000004aebfa: clc; push qword ptr [rax - 2]; clc; call qword ptr [rax]; stc; jmp qword ptr [rax]; 
0x00000000004aec76: clc; push qword ptr [rax - 5]; clc; call qword ptr [rax - 3]; 
0x00000000004aec12: clc; push qword ptr [rax - 6]; clc; call qword ptr [rax - 4]; 
0x00000000004aec32: clc; push qword ptr [rax]; cli; clc; call qword ptr [rax]; 
0x00000000004ae9e6: clc; push qword ptr [rax]; mov al, 0xf8; jmp qword ptr [rax]; 
0x00000000004aeb76: clc; push qword ptr [rax]; std; clc; call qword ptr [rax]; 
0x00000000004aeb92: clc; push qword ptr [rax]; sti; clc; call qword ptr [rax]; 
0x0000000000480d07: clc; push qword ptr [rbp + rax + 0x5b]; pop rbp; pop r12; ret; 
0x0000000000426d4f: clc; push qword ptr [rbp - 0x44]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004aea86: clc; push qword ptr [rcx - 0x22]; clc; call qword ptr [rcx]; 
0x00000000004847c3: clc; push qword ptr [rdi + rax*2 - 0x77]; ret 0xe283; 
0x00000000004aeb7e: clc; push rax; add cl, bh; jmp rax; 
0x00000000004ae822: clc; push rax; clc; jmp qword ptr [rax]; 
0x00000000004aebb6: clc; push rax; cld; clc; call rax; 
0x00000000004ae9f6: clc; push rax; mov bl, 0xf8; jmp rax; 
0x00000000004aec3a: clc; push rax; std; clc; call rax; 
0x00000000004ae992: clc; push rax; xchg eax, esp; clc; jmp qword ptr [rax - 0x6a]; 
0x0000000000400dc1: clc; push rbx; mov rbx, rax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004a02e8: clc; push rbx; ret; 
0x00000000004cbee8: clc; pushfq; clc; call qword ptr [rdi]; 
0x00000000004cdfd8: clc; ret 0xfff9; 
0x0000000000421ce5: clc; ret; 
0x00000000004c7f94: clc; sbb eax, 0x88280000; hlt; call qword ptr [rbx + 1]; 
0x000000000049222a: clc; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000048385f: clc; shr rax, 2; ret; 
0x000000000047e81e: clc; sub dword ptr [rdi], ecx; xchg dword ptr [rdx + 0x48000000], ecx; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000004946c1: clc; sub rax, r8; ret; 
0x0000000000483d06: clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fdc6: clc; sub rax, rdx; vzeroupper; ret; 
0x0000000000455d6b: clc; sub rax, rsi; ret; 
0x000000000043a9fb: clc; vzeroupper; ret; 
0x00000000004936b7: clc; xor rax, qword ptr fs:[0x28]; jne 0x936fe; leave; ret; 
0x00000000004c3fb8: cld; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000045730a: cld; add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; pop rbx; ret; 
0x00000000004572ef: cld; add eax, dword ptr [rax]; pop rbx; ret; 
0x00000000004be7e6: cld; call qword ptr [rax - 0x70003fd]; add al, 0xfc; call rax; 
0x00000000004d0f72: cld; call qword ptr [rax]; 
0x00000000004d12ea: cld; call qword ptr [rbx + 1]; 
0x00000000004bf83e: cld; call qword ptr [rbx - 0x38]; 
0x00000000004d0f1a: cld; call qword ptr [rbx]; 
0x00000000004d0bce: cld; call qword ptr [rdi + 1]; 
0x00000000004d122a: cld; call qword ptr [rdi]; 
0x00000000004d1f02: cld; call qword ptr [rdx + 1]; 
0x00000000004d1a72: cld; call qword ptr [rdx]; 
0x00000000004be7ee: cld; call rax; 
0x00000000004be6c2: cld; call rsp; 
0x00000000004aebb9: cld; clc; call rax; 
0x00000000004aebf9: cld; clc; push qword ptr [rax - 2]; clc; call qword ptr [rax]; 
0x00000000004aec39: cld; clc; push rax; std; clc; call rax; 
0x0000000000455501: cld; cmp eax, ecx; jne 0x55710; xor eax, eax; ret; 
0x000000000043bfe6: cld; cmp ecx, eax; jne 0x3c9ff; xor eax, eax; ret; 
0x00000000004bf896: cld; dec dword ptr [rax - 0x38]; cld; jmp rax; 
0x000000000045c441: cld; dec dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x73], 0x3d; add eax, 0x440f4800; ret; 
0x000000000048b08e: cld; inc dword ptr [rbp + 0x5b0e78c0]; ret; 
0x00000000004573cc: cld; inc dword ptr [rbx]; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000045733a: cld; inc dword ptr [rbx]; pop rbx; ret; 
0x0000000000496497: cld; inc edi; sbb byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004afbc8: cld; jbe 0xafbc5; inc dword ptr [rip - 0x1000588]; ja 0xafbcd; call qword ptr [rbx]; 
0x00000000004d15a2: cld; jmp qword ptr [rax + 1]; 
0x00000000004d254a: cld; jmp qword ptr [rax]; 
0x00000000004d114a: cld; jmp qword ptr [rbp]; 
0x00000000004d0ac6: cld; jmp qword ptr [rbx + 1]; 
0x00000000004d21b2: cld; jmp qword ptr [rbx]; 
0x00000000004d1af2: cld; jmp qword ptr [rcx + 9]; 
0x00000000004d1756: cld; jmp qword ptr [rcx]; 
0x00000000004d1f6a: cld; jmp qword ptr [rdx + 1]; 
0x00000000004d0e36: cld; jmp qword ptr [rdx + 5]; 
0x00000000004d10d2: cld; jmp qword ptr [rdx]; 
0x000000000045f924: cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000431cd8: cld; jmp qword ptr [rsi + 0xf]; 
0x000000000048c7fc: cld; jmp qword ptr [rsi - 0x70]; 
0x00000000004d1ce2: cld; jmp qword ptr [rsi]; 
0x00000000004bf812: cld; jmp rax; 
0x00000000004d10ea: cld; jmp rdx; 
0x00000000004be6b6: cld; jmp rsp; 
0x00000000004be6be: cld; ljmp [rdx + rax]; cld; call rsp; 
0x00000000004be6b2: cld; ljmp [rdx + rax]; cld; jmp rsp; 
0x00000000004be6ba: cld; ljmp [rdx + rax]; cld; ljmp [rdx + rax]; cld; call rsp; 
0x000000000043ec52: cld; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ee55: cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043f055: cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043f255: cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000456ed6: cld; mov dword ptr [rdi], ecx; ret; 
0x0000000000457058: cld; mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x000000000044772e: cld; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000456168: cld; mov dword ptr [rdi], esi; ret; 
0x000000000043bfe3: cld; mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x3c9ff; xor eax, eax; ret; 
0x00000000004554fe: cld; mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x55710; xor eax, eax; ret; 
0x000000000043c245: cld; mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x3c9ff; xor eax, eax; ret; 
0x0000000000456162: cld; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000043e68a: cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e86a: cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ea4a: cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ec2a: cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e84e: cld; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ea2e: cld; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ec0e: cld; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e886: cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000443f16: cld; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043ea66: cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000443e96: cld; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043ec46: cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000443e16: cld; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043e6a6: cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000443f96: cld; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000458f07: cld; mov rdi, r12; mov eax, 0x4f; syscall; 
0x00000000004790f0: cld; out 0xfd, eax; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000043e531: cld; ret; 
0x00000000004cc934: cld; sar al, 1; call rsi; 
0x00000000004be449: cld; sti; call qword ptr [rax - 3]; 
0x00000000004be47d: cld; sti; call qword ptr [rax]; 
0x00000000004be471: cld; sti; jmp qword ptr [rax]; 
0x00000000004be445: cld; sti; push qword ptr [rax - 4]; sti; call qword ptr [rax - 3]; 
0x00000000004be479: cld; sti; push qword ptr [rax - 4]; sti; call qword ptr [rax]; 
0x00000000004c1936: cld; test al, 0x97; xchg eax, esp; ret; 
0x000000000044789d: cld; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000447663: cld; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000447b5f: cld; vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000455e2b: cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004569f2: cld; vzeroupper; ret; 
0x0000000000456ebc: cli; add al, 0x73; adc eax, dword ptr [rax + 0x157701fa]; jb 0x56ec9; mov byte ptr [rdi], cl; ret; 
0x0000000000482f9e: cli; add byte ptr [rax], dl; add byte ptr [rax], al; lea rdx, [rip - 0x2bf3a]; cmove rax, rdx; ret; 
0x00000000004789b5: cli; add cl, byte ptr [rax + 0x39]; ret 0x850f; 
0x0000000000420932: cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x0000000000415bee: cli; add cl, byte ptr [rdi]; test bh, bl; sbb al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000419235: cli; add cl, byte ptr [rdi]; test bh, bl; sbb byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000455eae: cli; add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000456ec1: cli; add dword ptr [rdi + 0x15], esi; jb 0x56ec9; mov byte ptr [rdi], cl; ret; 
0x0000000000456142: cli; add dword ptr [rdi + 0x26], esi; jb 0x5614d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000045702f: cli; add dword ptr [rdi + 0x2c], esi; jb 0x57037; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x00000000004571f7: cli; add dword ptr [rdi + 0x3a], esi; jb 0x571ff; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x00000000004564a2: cli; add dword ptr [rdi + 0x3b], esi; jb 0x564ad; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004568f2: cli; add dword ptr [rdi + 0x53], esi; jb 0x568fd; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000455ebb: cli; add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x000000000044774c: cli; add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000406aaa: cli; add dword ptr [rsi + 0xa], esi; cmp ecx, eax; setb al; ret; 
0x0000000000400c9e: cli; add dword ptr [rsi - 0x18], esi; mov eax, 0xfffffff2; ret; 
0x0000000000457fae: cli; add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xc085; 
0x000000000045800c: cli; add ecx, dword ptr [rdi]; xchg eax, esi; ret 0xd284; 
0x0000000000456dd0: cli; and byte ptr [rdi + 0x64], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000456e20: cli; and byte ptr [rdi + 0xb], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000455e77: cli; and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000046f425: cli; call qword ptr [rax + 0x38]; 
0x00000000004afa1a: cli; call qword ptr [rax + 0x39]; 
0x00000000004afa1a: cli; call qword ptr [rax + 0x39]; cli; jmp qword ptr [rax + 0x39]; 
0x00000000004afa56: cli; call qword ptr [rax + 0x3a]; 
0x00000000004afa56: cli; call qword ptr [rax + 0x3a]; cli; jmp qword ptr [rax + 0x3a]; 
0x00000000004afa7a: cli; call qword ptr [rax + 0x3b]; 
0x00000000004afaae: cli; call qword ptr [rax + 0x3f]; 
0x00000000004afaae: cli; call qword ptr [rax + 0x3f]; cli; jmp qword ptr [rax + 0x3f]; 
0x00000000004afb9e: cli; call qword ptr [rax + 0x77]; 
0x00000000004afa82: cli; call qword ptr [rax - 0x4f0005c5]; cmp edi, edx; call rax; 
0x00000000004afa62: cli; call qword ptr [rax - 0x4f0005c6]; cmp bh, dl; call rax; 
0x00000000004afa2a: cli; call qword ptr [rax - 0x5f0005c7]; cmp edx, edi; push qword ptr [rax - 0x3f0005c7]; cmp edx, edi; call rax; 
0x00000000004afa4a: cli; call qword ptr [rax]; 
0x00000000004afa4a: cli; call qword ptr [rax]; cmp bh, dl; jmp qword ptr [rax]; 
0x00000000004afa72: cli; call qword ptr [rax]; cmp edi, edx; push qword ptr [rax]; cmp edi, edx; call qword ptr [rax + 0x3b]; 
0x00000000004b01ae: cli; call qword ptr [rbx - 0x7a]; 
0x00000000004afbd2: cli; call qword ptr [rbx]; 
0x00000000004b0eda: cli; call qword ptr [rcx - 0x45]; 
0x00000000004afa3a: cli; call rax; 
0x00000000004afa92: cli; call rax; cli; jmp rax; 
0x00000000004afa6a: cli; call rax; cmp bh, dl; push rax; cmp bh, dl; call qword ptr [rax]; 
0x00000000004afa3a: cli; call rax; cmp edx, edi; jmp rax; 
0x00000000004afc12: cli; call rbx; 
0x00000000004b0026: cli; call rsi; 
0x00000000004b00b6: cli; call rsp; 
0x00000000004aec15: cli; clc; call qword ptr [rax - 4]; 
0x00000000004aec35: cli; clc; call qword ptr [rax]; 
0x000000000049f992: cli; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000045b745: cli; cmp eax, 0x83497174; ret; 
0x000000000045d7fb: cli; dec dword ptr [rax - 0x73]; and qword ptr [rax - 0x77], rcx; ret 0x894c; 
0x000000000048e8f0: cli; dec dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000045825f: cli; dec dword ptr [rax - 0x77]; ret; 
0x0000000000480f57: cli; dec dword ptr [rbx - 0x14f3db8c]; ret 0x5590; 
0x00000000004b008a: cli; dec dword ptr [rdi]; xchg dl, bh; push rsp; test dl, bh; jmp qword ptr [rdi - 0x7a]; 
0x0000000000476b8a: cli; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x00000000004afa16: cli; inc dword ptr [rax + 0x39]; cli; call qword ptr [rax + 0x39]; 
0x00000000004afa16: cli; inc dword ptr [rax + 0x39]; cli; call qword ptr [rax + 0x39]; cli; jmp qword ptr [rax + 0x39]; 
0x00000000004afaaa: cli; inc dword ptr [rax + 0x3f]; cli; call qword ptr [rax + 0x3f]; 
0x00000000004afaaa: cli; inc dword ptr [rax + 0x3f]; cli; call qword ptr [rax + 0x3f]; cli; jmp qword ptr [rax + 0x3f]; 
0x00000000004afad2: cli; inc dword ptr [rax + 0x40]; cli; jmp qword ptr [rax + 0x40]; 
0x00000000004afaf2: cli; inc dword ptr [rax + 0x41]; cli; jmp qword ptr [rax + 0x41]; 
0x00000000004b092a: cli; inc dword ptr [rax + 0x58fffab5]; mov ch, 0xfa; push qword ptr [rax]; mov ch, 0xfa; call qword ptr [rax]; 
0x00000000004afafa: cli; inc dword ptr [rax - 0x5f0005bf]; cli; inc eax; cli; jmp rax; 
0x00000000004afada: cli; inc dword ptr [rax - 0x5f0005c0]; cli; inc eax; cli; jmp rax; 
0x00000000004b01a6: cli; inc dword ptr [rax*4 - 0x7afb0006]; cli; call qword ptr [rbx - 0x7a]; 
0x000000000045730e: cli; inc dword ptr [rax]; add byte ptr [rax], al; cmove rax, rcx; pop rbx; ret; 
0x00000000004afac6: cli; inc dword ptr [rax]; cli; jmp qword ptr [rax]; 
0x00000000004afa46: cli; inc dword ptr [rax]; cmp bh, dl; call qword ptr [rax]; 
0x00000000004afa46: cli; inc dword ptr [rax]; cmp bh, dl; call qword ptr [rax]; cmp bh, dl; jmp qword ptr [rax]; 
0x00000000004b090e: cli; inc dword ptr [rbx + rsi*4 - 6]; inc dword ptr [rbx + rsi*4 - 6]; inc dword ptr [rbx + rsi*4 - 6]; inc dword ptr [rbx + rsi*4 - 6]; jmp rax; 
0x00000000004b0912: cli; inc dword ptr [rbx + rsi*4 - 6]; inc dword ptr [rbx + rsi*4 - 6]; inc dword ptr [rbx + rsi*4 - 6]; jmp rax; 
0x00000000004b0916: cli; inc dword ptr [rbx + rsi*4 - 6]; inc dword ptr [rbx + rsi*4 - 6]; jmp rax; 
0x00000000004b091a: cli; inc dword ptr [rbx + rsi*4 - 6]; jmp rax; 
0x0000000000468eff: cli; inc dword ptr [rbx - 0x76be0008]; ret 0x840f; 
0x0000000000464ad5: cli; inc dword ptr [rcx - 0x77]; ret 0x5be9; 
0x00000000004617ed: cli; inc dword ptr [rcx - 0x77]; ret; 
0x00000000004b013e: cli; inc dword ptr [rdx + 0x32fffa85]; test edx, edi; lcall [rbp - 0x7a]; cli; jmp rcx; 
0x00000000004afbca: cli; inc dword ptr [rip - 0x1000588]; ja 0xafbcd; call qword ptr [rbx]; 
0x00000000004b002a: cli; inc dword ptr [rsi - 0x7a]; cli; ljmp [rsi - 0x7b]; cli; jmp rcx; 
0x00000000004afa8e: cli; inc eax; cli; call rax; 
0x00000000004afa8e: cli; inc eax; cli; call rax; cli; jmp rax; 
0x00000000004afae2: cli; inc eax; cli; jmp rax; 
0x00000000004afa36: cli; inc eax; cmp edx, edi; call rax; 
0x00000000004afa36: cli; inc eax; cmp edx, edi; call rax; cmp edx, edi; jmp rax; 
0x00000000004afb8e: cli; inc eax; ja 0xafb8d; jmp rax; 
0x00000000004b01ea: cli; inc eax; test edx, edi; jmp rcx; 
0x0000000000456f78: cli; ja 0x56f8a; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000456f28: cli; ja 0x56f93; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000455e64: cli; jb 0x55e76; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000447707: cli; jg 0x47711; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000455e86: cli; jg 0x55e90; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x00000000004564b9: cli; jg 0x564c3; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000456921: cli; jg 0x5692b; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000457042: cli; jg 0x5704c; vzeroupper; ret; 
0x0000000000457218: cli; jg 0x57222; vzeroupper; ret; 
0x00000000004afa1e: cli; jmp qword ptr [rax + 0x39]; 
0x00000000004afa5a: cli; jmp qword ptr [rax + 0x3a]; 
0x00000000004afab2: cli; jmp qword ptr [rax + 0x3f]; 
0x00000000004afad6: cli; jmp qword ptr [rax + 0x40]; 
0x00000000004afaf6: cli; jmp qword ptr [rax + 0x41]; 
0x00000000004b095a: cli; jmp qword ptr [rax - 0x4c]; 
0x00000000004afa4e: cli; jmp qword ptr [rax]; 
0x00000000004cea82: cli; jmp qword ptr [rbx + 8]; 
0x00000000004b0f52: cli; jmp qword ptr [rdi + 0x63]; 
0x00000000004b0092: cli; jmp qword ptr [rdi - 0x7a]; 
0x00000000004b0efe: cli; jmp qword ptr [rdi]; 
0x000000000046a240: cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000045ed48: cli; jmp qword ptr [rsi + 0xf]; 
0x000000000045dc8c: cli; jmp qword ptr [rsi - 0x70]; 
0x00000000004afa3e: cli; jmp rax; 
0x00000000004b0ee2: cli; jmp rbx; 
0x00000000004b0032: cli; jmp rcx; 
0x000000000041bf74: cli; jmp rdx; 
0x00000000004b092e: cli; lcall [rax - 0x4b]; cli; push qword ptr [rax]; mov ch, 0xfa; call qword ptr [rax]; 
0x00000000004b0146: cli; lcall [rbp - 0x7a]; cli; jmp rcx; 
0x00000000004b01e2: cli; lcall [rcx]; xchg dl, bh; push qword ptr [rsi - 0x3f00057b]; test edx, edi; jmp rcx; 
0x00000000004b0efa: cli; lcall [rdi - 0x43]; cli; jmp qword ptr [rdi]; 
0x00000000004b0f46: cli; lcall [rdi - 0x46]; cli; lcall [rdx + rdi*4 - 0x414f0006]; cli; jmp qword ptr [rdi + 0x63]; 
0x00000000004b0f4a: cli; lcall [rdx + rdi*4 - 0x414f0006]; cli; jmp qword ptr [rdi + 0x63]; 
0x00000000004b0f16: cli; lcall [rdx + rdi*4 - 0x42260006]; cli; jmp qword ptr [rax]; 
0x000000000042e087: cli; lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x00000000004afb8a: cli; ljmp [rax - 0x3f000589]; ja 0xafb8d; jmp rax; 
0x00000000004b0096: cli; ljmp [rax]; test edx, edi; jmp rcx; 
0x00000000004b002e: cli; ljmp [rsi - 0x7b]; cli; jmp rcx; 
0x0000000000471c8f: cli; mov dword ptr [rbx], 0x8e0f0000; pushfq; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8944; 
0x000000000043f058: cli; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043f052: cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000422b9f: cli; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000041c256: cli; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x000000000043ad08: cli; movzx edx, dl; sub eax, edx; ret; 
0x00000000004397b6: cli; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000455e90: cli; or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000004004c2: cli; pop rbx; sub eax, 0xff906600; and eax, 0x2d5bfa; nop; ret; 
0x00000000004c3da1: cli; push 0x6e; ja 0xc3d29; ret 0x48f; 
0x00000000004afa5e: cli; push qword ptr [rax + 0x3a]; cli; call qword ptr [rax - 0x4f0005c6]; cmp bh, dl; call rax; 
0x00000000004afa7e: cli; push qword ptr [rax + 0x3b]; cli; call qword ptr [rax - 0x4f0005c5]; cmp edi, edx; call rax; 
0x00000000004afa32: cli; push qword ptr [rax - 0x3f0005c7]; cmp edx, edi; call rax; 
0x00000000004aface: cli; push qword ptr [rax]; cli; inc dword ptr [rax + 0x40]; cli; jmp qword ptr [rax + 0x40]; 
0x00000000004afa52: cli; push qword ptr [rax]; cmp bh, dl; call qword ptr [rax + 0x3a]; 
0x00000000004afa52: cli; push qword ptr [rax]; cmp bh, dl; call qword ptr [rax + 0x3a]; cli; jmp qword ptr [rax + 0x3a]; 
0x00000000004afa76: cli; push qword ptr [rax]; cmp edi, edx; call qword ptr [rax + 0x3b]; 
0x00000000004afa12: cli; push qword ptr [rax]; cmp edx, edi; inc dword ptr [rax + 0x39]; cli; call qword ptr [rax + 0x39]; 
0x00000000004afb9a: cli; push qword ptr [rax]; ja 0xafb99; call qword ptr [rax + 0x77]; 
0x00000000004b0932: cli; push qword ptr [rax]; mov ch, 0xfa; call qword ptr [rax]; 
0x00000000004b010a: cli; push qword ptr [rdx]; test edx, edi; jmp rcx; 
0x00000000004b0142: cli; push qword ptr [rdx]; test edx, edi; lcall [rbp - 0x7a]; cli; jmp rcx; 
0x00000000004b01e6: cli; push qword ptr [rsi - 0x3f00057b]; test edx, edi; jmp rcx; 
0x00000000004afa6e: cli; push rax; cmp bh, dl; call qword ptr [rax]; 
0x00000000004afa42: cli; push rax; cmp edx, edi; inc dword ptr [rax]; cmp bh, dl; call qword ptr [rax]; 
0x00000000004b008e: cli; push rsp; test dl, bh; jmp qword ptr [rdi - 0x7a]; 
0x00000000004b0072: cli; push rsp; test dl, bh; jmp rcx; 
0x00000000004b006e: cli; push rsp; test dl, bh; push rsp; test dl, bh; jmp rcx; 
0x0000000000456df9: cli; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000004097b1: cli; sbb byte ptr [rsi + 0xb], dh; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x000000000045b02b: cli; setae al; ret; 
0x000000000044fbf9: cli; test rdx, rdx; je 0x4fc10; bsf rax, rdx; ret; 
0x000000000044fb98: cli; test rdx, rdx; je 0x4fc20; bsf rax, rdx; ret; 
0x0000000000482ae8: cli; test rdx, rdx; je 0x82b10; bsf rax, rdx; ret; 
0x0000000000482a78: cli; test rdx, rdx; je 0x82b20; bsf rax, rdx; ret; 
0x00000000004837a8: cli; test rdx, rdx; je 0x837d0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000048373c: cli; test rdx, rdx; je 0x837e0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000447b6d: cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004c148a: cli; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x000000000040959e: cmc; adc al, 0; add byte ptr [rax], al; ret; 
0x00000000004095b2: cmc; adc byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000049044b: cmc; add al, byte ptr [rax]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000040251c: cmc; add al, byte ptr [rax]; nop; xor eax, eax; ret; 
0x0000000000483b51: cmc; and ch, 0xf; je 0x83b70; add rax, 2; ret; 
0x00000000004a18e2: cmc; call qword ptr [rax]; 
0x00000000004ca406: cmc; call qword ptr [rbx]; 
0x00000000004ca1e6: cmc; call qword ptr [rdi + 1]; 
0x00000000004c94c6: cmc; call qword ptr [rdi + 2]; 
0x00000000004c97f2: cmc; call qword ptr [rdi]; 
0x00000000004c888e: cmc; call qword ptr [rdx]; 
0x00000000004ca30a: cmc; call qword ptr [rsi]; 
0x00000000004c86fa: cmc; call rsp; 
0x00000000004aed0d: cmc; clc; ljmp [rax + 0x70fff921]; and edi, ecx; call qword ptr [rax + 0x25]; 
0x00000000004613e7: cmc; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000004a18e1: cmc; cmc; call qword ptr [rax]; 
0x00000000004a18da: cmc; dec dword ptr [rax - 0x7000a0b]; cmc; cmc; call qword ptr [rax]; 
0x00000000004c87ba: cmc; jmp qword ptr [rax]; 
0x00000000004c8b3a: cmc; jmp qword ptr [rcx + 1]; 
0x00000000004c8906: cmc; jmp qword ptr [rcx + 2]; 
0x00000000004c9f1e: cmc; jmp qword ptr [rdi + 2]; 
0x00000000004c8f6a: cmc; jmp qword ptr [rdx + 1]; 
0x00000000004c9c5a: cmc; jmp qword ptr [rsi]; 
0x00000000004c918e: cmc; jmp rdi; 
0x00000000004c93d6: cmc; jmp rdx; 
0x00000000004c41c9: cmc; mov ch, 0xab; ret; 
0x0000000000443e9a: cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043e8de: cmc; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000443e93: cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043ea47: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ea63: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000409676: cmc; mov rbx, rdi; mov edi, eax; call rdx; 
0x0000000000455243: cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x00000000004c1077: cmc; pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x0000000000455247: cmc; sub eax, edx; ret; 
0x00000000004c3805: cmc; xlatb; ret 0x4e27; 
0x00000000004283a9: cmovae eax, dword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000004283a8: cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000457314: cmove eax, ecx; pop rbx; ret; 
0x00000000004812b1: cmove eax, ecx; ret; 
0x0000000000432b83: cmove eax, edx; add rsp, 8; ret; 
0x00000000004572dc: cmove eax, edx; pop rbx; ret; 
0x0000000000432cbf: cmove eax, edx; ret; 
0x0000000000423dff: cmove ebp, esp; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000423dfe: cmove ebp, r12d; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x00000000004011e9: cmove ebx, eax; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x000000000048dbd8: cmove ecx, eax; mov rax, rcx; ret; 
0x0000000000497a3a: cmove edx, eax; call 0x88080; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000045b024: cmove edx, eax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x00000000004812b0: cmove r8, rcx; ret; 
0x0000000000457313: cmove rax, rcx; pop rbx; ret; 
0x0000000000432b82: cmove rax, rdx; add rsp, 8; ret; 
0x00000000004572db: cmove rax, rdx; pop rbx; ret; 
0x0000000000432cbe: cmove rax, rdx; ret; 
0x000000000048dbd7: cmove rcx, rax; mov rax, rcx; ret; 
0x000000000045b023: cmove rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x00000000004321ba: cmovne eax, ecx; ret; 
0x000000000047fe91: cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000425df9: cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000045736c: cmovne eax, edx; pop rbx; ret; 
0x0000000000432c46: cmovne eax, edx; ret; 
0x000000000044f784: cmovne eax, edx; vzeroupper; ret; 
0x000000000040cce2: cmovne ebx, eax; mov rax, rbx; pop rbx; ret; 
0x0000000000482701: cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000482705: cmovne esi, edx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000004321b9: cmovne rax, rcx; ret; 
0x000000000045736b: cmovne rax, rdx; pop rbx; ret; 
0x0000000000432c45: cmovne rax, rdx; ret; 
0x000000000044f783: cmovne rax, rdx; vzeroupper; ret; 
0x000000000040cce1: cmovne rbx, rax; mov rax, rbx; pop rbx; ret; 
0x0000000000482700: cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000482704: cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000004699ed: cmovns eax, dword ptr [rbx + 0x149f0e7]; ror byte ptr [rax - 0x77], 1; ret 0x894c; 
0x000000000040a403: cmovns eax, edx; add rsp, 8; ret; 
0x000000000045bb28: cmovs eax, dword ptr [rbp + 0x480a74d2]; lea edi, [rcx + rax + 0x20]; jmp rdx; 
0x0000000000487f79: cmovs eax, dword ptr [rbx - 0x4a170f19]; test bh, dh; dec dword ptr [rax - 0x77]; ret; 
0x000000000045fecc: cmovs eax, edx; ret; 
0x0000000000447715: cmovs ecx, dword ptr [rbx + 0x498b4836]; clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000049cf48: cmovs ecx, dword ptr [rcx + 0x1bffe]; add byte ptr [rax], al; jmp rax; 
0x0000000000481018: cmovs edi, dword ptr [rcx]; int1; jne 0x81010; lea eax, [rdx + rdi]; ret; 
0x00000000004572be: cmovs esp, dword ptr [rbx + 0xc]; xchg byte ptr [rax + 1], cl; int1; jmp rcx; 
0x0000000000457350: cmovs esp, dword ptr [rbx + 4]; xchg eax, esi; add rax, rsi; jmp rax; 
0x00000000004946b6: cmp ah, byte ptr [rbx + 0x1f]; adc dh, byte ptr [rbx - 0xc]; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x0000000000455d58: cmp ah, byte ptr [rbx - 0x27]; add cl, byte ptr [rdi]; xchg eax, edx; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x0000000000455da2: cmp ah, byte ptr [rbx - 0x37]; cmp cl, byte ptr [rax + 0x63]; leave; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x000000000044cffa: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044db5a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044d33a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000044cb1a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000044d67a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044ce5a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044c63a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000044d81a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000044c97a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044cab0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d7b0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d2d0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044daf0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044cdf0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000044c910: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d610: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x0000000000404285: cmp al, 0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1f0f; 
0x00000000004c7f90: cmp al, 0; add byte ptr [rax], al; clc; sbb eax, 0x88280000; hlt; call qword ptr [rbx + 1]; 
0x0000000000410030: cmp al, 0; add byte ptr [rax], al; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x00000000004d10e0: cmp al, 0; add byte ptr [rax], al; scasq rax, qword ptr [rdi]; add byte ptr [rax], al; xor rsp, rdi; jmp rdx; 
0x00000000004c7614: cmp al, 0x20; hlt; jmp qword ptr [rax]; 
0x0000000000464c72: cmp al, 0x24; add byte ptr [rcx - 0x77], al; ret; 
0x000000000045eb82: cmp al, 0x24; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd5e9; 
0x00000000004259c7: cmp al, 0x24; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000483103: cmp al, 0x24; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000047e083: cmp al, 0x29; ja 0x7e0b0; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000045dbe0: cmp al, 0x2d; sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000049a3af: cmp al, 0x2f; ja 0x9ac61; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x000000000049c56c: cmp al, 0x31; or byte ptr [rbp + 4], dh; mov qword ptr [rax], rdx; ret; 
0x000000000049c4fd: cmp al, 0x32; or byte ptr [rbp + 0x1a], dh; mov rax, qword ptr [rax]; ret; 
0x00000000004ad110: cmp al, 0x40; idiv bh; xor dword ptr [rax - 0xa], eax; jmp qword ptr [rsi]; 
0x00000000004c2480: cmp al, 0x46; clc; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000004c2028: cmp al, 0x7b; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000004c3fb5: cmp al, 0xaa; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x0000000000469ad1: cmp al, 0xb3; add rdi, r11; jmp rdi; 
0x00000000004c72c4: cmp al, 0xb; hlt; call qword ptr [rdi]; 
0x000000000041c259: cmp al, 0xba; add rdi, r10; jmp rdi; 
0x00000000004c0ee3: cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x000000000049b3fd: cmp al, 0xee; ja 0x9b519; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x00000000004af3b9: cmp al, 0xf9; jmp qword ptr [rax]; 
0x00000000004c70d8: cmp al, 0xf; add byte ptr [rax], al; in al, 5; hlt; call qword ptr [rdx]; 
0x000000000045a89d: cmp al, 0xff; dec dword ptr [rax - 0x7f]; ret; 
0x000000000047e9a0: cmp al, 3; add byte ptr [rax], al; lea rdx, [rip + 0x3fe3d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000047c093: cmp al, 7; lea rax, [rip + 0x258004]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047c040: cmp al, 7; lea rax, [rip + 0x258057]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047bb13: cmp al, 7; lea rax, [rip + 0x258084]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047beb2: cmp al, 7; lea rax, [rip + 0x2581e5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047be6d: cmp al, 7; lea rax, [rip + 0x25822a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047be28: cmp al, 7; lea rax, [rip + 0x25826f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047bdd9: cmp al, 7; lea rax, [rip + 0x2582be]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047052c: cmp al, 7; lea rax, [rip + 0x262f6b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004708db: cmp al, 7; lea rax, [rip + 0x2630bc]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047088d: cmp al, 7; lea rax, [rip + 0x26310a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004707de: cmp al, 7; lea rax, [rip + 0x2631b9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470782: cmp al, 7; lea rax, [rip + 0x263215]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004704e2: cmp al, 7; lea rax, [rip + 0x2634b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470494: cmp al, 7; lea rax, [rip + 0x263503]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470033: cmp al, 7; lea rax, [rip + 0x263664]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004c9bb5: cmp al, byte ptr [rax]; add byte ptr [rax], ch; ret; 
0x00000000004c9bc9: cmp al, byte ptr [rax]; add byte ptr [rbx + rax*8], ah; cmc; call qword ptr [rdi]; 
0x000000000046051a: cmp al, byte ptr [rbx - 0x76b7fd1e]; ret; 
0x00000000004555ae: cmp al, byte ptr [rsi - 1]; jne 0x55725; xor eax, eax; ret; 
0x000000000043c14b: cmp al, cl; jne 0x3ca20; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000455662: cmp al, cl; jne 0x55725; cmp eax, ecx; jne 0x55725; xor eax, eax; ret; 
0x000000000045571f: cmp al, cl; jne 0x55725; cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x000000000043a576: cmp al, dh; ret; 
0x000000000043a575: cmp al, r14b; ret; 
0x000000000049a2e6: cmp bh, 0x10; jne 0x9a308; xor eax, eax; ret; 
0x000000000049d486: cmp bh, 0x10; jne 0x9d49e; xor eax, eax; ret; 
0x000000000049e2e6: cmp bh, 0x10; jne 0x9e2fe; xor eax, eax; ret; 
0x000000000049ed56: cmp bh, 0x10; jne 0x9ed78; xor eax, eax; ret; 
0x000000000049a2ce: cmp bh, 0x30; jne 0x9a308; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000049d46c: cmp bh, 0x30; jne 0x9d498; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000049e2cc: cmp bh, 0x30; jne 0x9e2f8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000049a2c8: cmp bh, 0x50; je 0x9a2eb; cmp dil, 0x30; jne 0x9a308; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000049d441: cmp bh, 4; jne 0x9d455; mov eax, 8; ret; 
0x00000000004978ee: cmp bh, ah; jmp qword ptr [rsi + 0x2e]; 
0x0000000000476932: cmp bh, byte ptr [rdx + 4]; add byte ptr [rcx + 0x29], cl; ret; 
0x00000000004af375: cmp bh, cl; jmp qword ptr [rax]; 
0x00000000004cbc05: cmp bh, dh; jmp qword ptr [rdi + 0x2b]; 
0x00000000004afa55: cmp bh, dl; call qword ptr [rax + 0x3a]; 
0x00000000004afa55: cmp bh, dl; call qword ptr [rax + 0x3a]; cli; jmp qword ptr [rax + 0x3a]; 
0x00000000004afa61: cmp bh, dl; call qword ptr [rax - 0x4f0005c6]; cmp bh, dl; call rax; 
0x00000000004afa49: cmp bh, dl; call qword ptr [rax]; 
0x00000000004afa49: cmp bh, dl; call qword ptr [rax]; cmp bh, dl; jmp qword ptr [rax]; 
0x00000000004afa71: cmp bh, dl; call qword ptr [rax]; cmp edi, edx; push qword ptr [rax]; cmp edi, edx; call qword ptr [rax + 0x3b]; 
0x00000000004afa69: cmp bh, dl; call rax; 
0x00000000004afa69: cmp bh, dl; call rax; cmp bh, dl; push rax; cmp bh, dl; call qword ptr [rax]; 
0x00000000004afa59: cmp bh, dl; jmp qword ptr [rax + 0x3a]; 
0x00000000004afa4d: cmp bh, dl; jmp qword ptr [rax]; 
0x00000000004afa5d: cmp bh, dl; push qword ptr [rax + 0x3a]; cli; call qword ptr [rax - 0x4f0005c6]; cmp bh, dl; call rax; 
0x00000000004afa51: cmp bh, dl; push qword ptr [rax]; cmp bh, dl; call qword ptr [rax + 0x3a]; 
0x00000000004afa51: cmp bh, dl; push qword ptr [rax]; cmp bh, dl; call qword ptr [rax + 0x3a]; cli; jmp qword ptr [rax + 0x3a]; 
0x00000000004afa6d: cmp bh, dl; push rax; cmp bh, dl; call qword ptr [rax]; 
0x000000000041fd12: cmp byte ptr [r8 - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000049c480: cmp byte ptr [r9 + 0xdf], 0; je 0x9c46c; add rsp, 0x18; ret; 
0x00000000004860ab: cmp byte ptr [rax + 0x29], cl; ret 0x8d49; 
0x00000000004216df: cmp byte ptr [rax + 0x29], cl; ret; 
0x0000000000422189: cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x00000000004104ab: cmp byte ptr [rax + 0x39], cl; ret 0x4f76; 
0x000000000041f9de: cmp byte ptr [rax + 0x39], cl; ret; 
0x000000000043a5b7: cmp byte ptr [rax + 1], cl; clc; ret; 
0x000000000047f795: cmp byte ptr [rax + 1], cl; ret; 
0x000000000047f500: cmp byte ptr [rax + 1], cl; ror byte ptr [rax + 0x39], cl; ret 0xf48; 
0x00000000004cf5d4: cmp byte ptr [rax + rax - 0x4c9d800], dl; jmp qword ptr [rax]; 
0x000000000046a737: cmp byte ptr [rax - 0x73], cl; dec dword ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x148; 
0x0000000000420bd6: cmp byte ptr [rax - 0x75], cl; adc byte ptr [r13 + r9*4 + 0x44], cl; and al, 0x10; call qword ptr [rbp + 0x18]; 
0x000000000046340c: cmp byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x0000000000490fc5: cmp byte ptr [rax - 0x75], cl; and al, 0x40; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000490f53: cmp byte ptr [rax - 0x75], cl; and al, 0x40; add rsp, 0x58; jmp qword ptr [rax]; 
0x00000000004623d0: cmp byte ptr [rax - 0x75], cl; je 0x623f9; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000046a8b4: cmp byte ptr [rax - 0x75], cl; jl 0x6a8dd; and byte ptr [rax + 1], cl; ret; 
0x000000000041fd13: cmp byte ptr [rax - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x0000000000406707: cmp byte ptr [rax - 0x77], cl; ret 0xb941; 
0x0000000000493bdf: cmp byte ptr [rax - 0x77], cl; xlatb; mov byte ptr [rsi], al; jne 0x93bc0; mov rax, rsi; ret; 
0x000000000041f506: cmp byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret 0xf41; 
0x0000000000461da4: cmp byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x000000000043a5a6: cmp byte ptr [rax], ah; ret; 
0x00000000004d1cd8: cmp byte ptr [rax], al; add byte ptr [rax], al; mov ebx, 0xa4c00000; cld; jmp qword ptr [rsi]; 
0x00000000004d17e4: cmp byte ptr [rax], al; add byte ptr [rax], al; mov sil, 0; add byte ptr [rdx - 4], ah; jmp rsp; 
0x00000000004d23f0: cmp byte ptr [rax], al; add byte ptr [rax], al; pop rax; ret 0; 
0x00000000004ca300: cmp byte ptr [rax], al; add byte ptr [rax], al; push -0x27ffffbf; fdivrp st(5); call qword ptr [rsi]; 
0x000000000049c46f: cmp byte ptr [rax], al; je 0x9c490; add rsp, 0x18; ret; 
0x00000000004cf3f8: cmp byte ptr [rax], ch; sti; jmp qword ptr [rsi]; 
0x00000000004c71b8: cmp byte ptr [rax], cl; hlt; jmp qword ptr [rsi + 1]; 
0x000000000044f320: cmp byte ptr [rax], dh; cmovne rax, rdx; ret; 
0x000000000043a596: cmp byte ptr [rax], dl; ret; 
0x000000000043a595: cmp byte ptr [rax], r10b; ret; 
0x000000000043a5a5: cmp byte ptr [rax], r12b; ret; 
0x000000000044f31f: cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000446694: cmp byte ptr [rbp + 0x63490006], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004747c9: cmp byte ptr [rbp - 0x77], cl; dec byte ptr [rcx + rcx*4 - 0x16]; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x00000000004d0751: cmp byte ptr [rbx + 0x2030d07], al; cld; ret; 
0x00000000004d0785: cmp byte ptr [rbx + 0x2030d07], al; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004d071d: cmp byte ptr [rbx + 0x3030d07], al; or al, byte ptr [rcx]; ret; 
0x0000000000499f88: cmp byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x00000000004065c9: cmp byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000004254b0: cmp byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004d0773: cmp byte ptr [rbx + rax*4 + 7], al; or rax, 0x1370303; ret; 
0x00000000004d070b: cmp byte ptr [rbx + rax*4 + 7], al; or rax, 0x34b0303; ret; 
0x00000000004d073f: cmp byte ptr [rbx + rax*4 + 7], al; or rax, 0x35b0303; ret; 
0x00000000004c2027: cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000004078ec: cmp byte ptr [rbx - 0x976fff7], ah; movsxd rax, dword ptr [rcx + rsi*4]; add rax, rcx; jmp rax; 
0x0000000000480d40: cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x000000000049c481: cmp byte ptr [rcx + 0xdf], 0; je 0x9c46c; add rsp, 0x18; ret; 
0x0000000000425e6b: cmp byte ptr [rcx + rcx*4 + 0x63], cl; mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000494034: cmp byte ptr [rcx + rdi*8 + 0x66ceebff], dh; nop dword ptr [rax + rax]; pop rbx; ret; 
0x000000000049c56b: cmp byte ptr [rcx + rsi], 8; jne 0x9c575; mov qword ptr [rax], rdx; ret; 
0x000000000046d48c: cmp byte ptr [rcx - 0x75], cl; push rdi; and byte ptr [rcx + 0x2b], cl; push rdi; sbb byte ptr [rax + 0x39], cl; ret 0x850f; 
0x00000000004058c9: cmp byte ptr [rcx - 0x76e3db94], cl; ret; 
0x00000000004d1ad4: cmp byte ptr [rcx - 0x78280000], bh; cld; jmp qword ptr [rcx]; 
0x000000000048f4c6: cmp byte ptr [rcx - 0x7d], cl; ret 0x4908; 
0x0000000000426d94: cmp byte ptr [rcx], 0xa; je 0x26da8; cmp rsi, rcx; jne 0x26d90; lea eax, [rdx + rdi]; ret; 
0x00000000004afa28: cmp byte ptr [rcx], 0xfa; call qword ptr [rax - 0x5f0005c7]; cmp edx, edi; push qword ptr [rax - 0x3f0005c7]; cmp edx, edi; call rax; 
0x00000000004076ef: cmp byte ptr [rcx], al; sbb eax, eax; and eax, 0xffffffea; ret; 
0x0000000000408d01: cmp byte ptr [rcx], bh; ret 0xd189; 
0x00000000004c74a8: cmp byte ptr [rcx], bl; hlt; jmp qword ptr [rcx + 2]; 
0x000000000049c551: cmp byte ptr [rdi + rsi + 0xd8], 0; je 0x9c560; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x00000000004cc0d4: cmp byte ptr [rdi], bl; add byte ptr [rax], bl; lodsd eax, dword ptr [rsi]; clc; call qword ptr [rax]; 
0x0000000000464444: cmp byte ptr [rdi], cl; test byte ptr [rdi], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000043c9b0: cmp byte ptr [rdi], dl; ret 0x2373; 
0x000000000043c999: cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000043c982: cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000043b43e: cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043be9d: cmp byte ptr [rdi], dl; ret; 
0x000000000049c4fc: cmp byte ptr [rdx + rsi], 8; jne 0x9c51c; mov rax, qword ptr [rax]; ret; 
0x000000000042eb7c: cmp byte ptr [rdx - 0x72b7ffd6], ah; add eax, 0xffffeb59; mov qword ptr [rip + 0x2a7d1a], rax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2a7d04], rax; ret; 
0x0000000000433729: cmp byte ptr [rdx], al; add byte ptr [rax - 0x73], cl; add eax, 0x237dd; cmovne rax, rdx; ret; 
0x00000000004d1148: cmp byte ptr [rdx], dh; cld; jmp qword ptr [rbp]; 
0x000000000048e7b0: cmp byte ptr [rip + 0x24b071], 0; jne 0x8e7c8; mov rax, qword ptr [rip + 0x24ac50]; ret; 
0x00000000004ae818: cmp byte ptr [rsi], 0xf8; inc dword ptr [rax + 0x3f]; clc; call rax; 
0x00000000004cdfd4: cmp byte ptr [rsi], bh; add al, bh; ret 0xfff9; 
0x000000000043ceaa: cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000042c3e7: cmp ch, cl; movabs dword ptr [0x8b4c001f0ffffffe], eax; adc byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004af5dd: cmp cl, 0xff; and byte ptr [rax + 0x7fb0fff9], al; stc; inc dword ptr [rax + 0x7f]; stc; call rax; 
0x000000000046d9da: cmp cl, 0xff; jmp qword ptr [rsi - 0x70]; 
0x00000000004af5e1: cmp cl, 0xff; mov al, 0x7f; stc; inc dword ptr [rax + 0x7f]; stc; call rax; 
0x00000000004af3e5: cmp cl, 0xff; movabs al, byte ptr [0xc0fff97f30fff97f]; jle 0xaf3ec; call qword ptr [rax + 0x7e]; 
0x0000000000490345: cmp cl, 9; jbe 0x90330; cmp r8d, eax; je 0x90296; sub eax, r8d; ret; 
0x000000000046cbed: cmp cl, bh; dec dword ptr [rax + 0x29]; ret; 
0x0000000000455da5: cmp cl, byte ptr [rax + 0x63]; leave; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x0000000000455824: cmp cl, byte ptr [rax + rdx + 2]; jne 0x55840; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x55820; ret; 
0x00000000004558d4: cmp cl, byte ptr [rax + rdx + 2]; jne 0x558f0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x558d0; ret; 
0x00000000004981e2: cmp cl, byte ptr [rax - 0x7d]; ret 0xf08; 
0x0000000000413517: cmp cl, ch; ret 0xfffb; 
0x00000000004939c5: cmp cx, 0x7fff; je 0x939b4; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000044f781: cmp dh, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000004571fa: cmp dh, byte ptr [rdx + 2]; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x00000000004caf35: cmp dh, dh; jmp qword ptr [rax]; 
0x000000000049a2e5: cmp dil, 0x10; jne 0x9a308; xor eax, eax; ret; 
0x000000000049d485: cmp dil, 0x10; jne 0x9d49e; xor eax, eax; ret; 
0x000000000049e2e5: cmp dil, 0x10; jne 0x9e2fe; xor eax, eax; ret; 
0x000000000049ed55: cmp dil, 0x10; jne 0x9ed78; xor eax, eax; ret; 
0x000000000049a2cd: cmp dil, 0x30; jne 0x9a308; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000049d46b: cmp dil, 0x30; jne 0x9d498; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000049e2cb: cmp dil, 0x30; jne 0x9e2f8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000049a2c7: cmp dil, 0x50; je 0x9a2eb; cmp dil, 0x30; jne 0x9a308; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000049d440: cmp dil, 4; jne 0x9d455; mov eax, 8; ret; 
0x0000000000455e76: cmp dl, 0x20; jb 0x55e85; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000455e63: cmp dl, 0x40; jb 0x55e76; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000456141: cmp dl, 1; ja 0x5616c; jb 0x5614d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004564a1: cmp dl, 1; ja 0x564e1; jb 0x564ad; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004568f1: cmp dl, 1; ja 0x56949; jb 0x568fd; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000456ec0: cmp dl, 1; ja 0x56eda; jb 0x56ec9; mov byte ptr [rdi], cl; ret; 
0x000000000045702e: cmp dl, 1; ja 0x5705f; jb 0x57037; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x00000000004571f6: cmp dl, 1; ja 0x57235; jb 0x571ff; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000044774b: cmp dl, 1; jb 0x47754; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000455eba: cmp dl, 1; jb 0x55ec1; mov byte ptr [rdi], cl; ret; 
0x0000000000455ead: cmp dl, 2; jb 0x55eba; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000455ea2: cmp dl, 4; jb 0x55ead; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000455e8f: cmp dl, 8; jb 0x55e9e; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000432225: cmp dl, al; jne 0x32210; sub rax, 0x10; ret; 
0x00000000004af0cc: cmp dl, byte ptr [rbp - 7]; jmp rax; 
0x0000000000432224: cmp dl, r8b; jne 0x32210; sub rax, 0x10; ret; 
0x00000000004046b4: cmp dword ptr [r15 + 0x20], 6; ja 0x4760; mov eax, dword ptr [r15 + 0x20]; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x000000000041255e: cmp dword ptr [rax + rax], ebp; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004941d9: cmp dword ptr [rax + rax], esp; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x000000000041d751: cmp dword ptr [rax - 0x39], ecx; ret; 
0x000000000049bd00: cmp dword ptr [rbp + 8], 5; ja 0x9bd3d; mov eax, dword ptr [rbp + 8]; movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 
0x000000000048497e: cmp dword ptr [rbx + 0x254ee705], ecx; add byte ptr [rbp - 0x47a28a40], al; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000048bc28: cmp dword ptr [rbx + 8], 0x25; jne 0x8bc40; mov r15, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000040fe21: cmp dword ptr [rbx + 8], 0x25; mov r14, qword ptr [rbx]; jne 0x10040; call qword ptr [rbx + 0x10]; 
0x0000000000406a2d: cmp dword ptr [rbx - 0x7af0fe07], eax; mov al, 0; add byte ptr [rax], al; mov eax, 1; ret; 
0x00000000004439d8: cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x000000000048be62: cmp dword ptr [rbx], eax; add byte ptr [rdx + 0x63], cl; add al, 0xa7; add rax, rdi; jmp rax; 
0x000000000049c46d: cmp dword ptr [rcx + 0x38], 0; je 0x9c490; add rsp, 0x18; ret; 
0x0000000000481014: cmp dword ptr [rcx], 0xa; je 0x81028; cmp rcx, rsi; jne 0x81010; lea eax, [rdx + rdi]; ret; 
0x00000000004283a5: cmp dword ptr [rdi + 0x10], eax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000004064f3: cmp dword ptr [rdi + 0x14], eax; sete al; ret; 
0x00000000004064eb: cmp dword ptr [rdi + 0x18], ecx; jne 0x64d8; mov eax, dword ptr [rsi + 0x14]; cmp dword ptr [rdi + 0x14], eax; sete al; ret; 
0x00000000004046b5: cmp dword ptr [rdi + 0x20], 6; ja 0x4760; mov eax, dword ptr [r15 + 0x20]; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x00000000004076ed: cmp dword ptr [rdi + 0x38], 1; sbb eax, eax; and eax, 0xffffffea; ret; 
0x000000000043377a: cmp dword ptr [rdx], eax; add byte ptr [rax - 0x73], cl; add eax, 0x2390c; cmovne rax, rdx; ret; 
0x0000000000426d95: cmp dword ptr [rdx], ecx; je 0x26da8; cmp rsi, rcx; jne 0x26d90; lea eax, [rdx + rdi]; ret; 
0x0000000000481015: cmp dword ptr [rdx], ecx; je 0x81028; cmp rcx, rsi; jne 0x81010; lea eax, [rdx + rdi]; ret; 
0x00000000004078ba: cmp dword ptr [rdx], esi; je 0x78d0; cmp rax, rcx; jne 0x78b0; xor eax, eax; ret; 
0x0000000000496c34: cmp dword ptr [rip + 0x23f33d], 0; jne 0x96c3f; pop rbx; ret; 
0x0000000000485008: cmp dword ptr [rsi], eax; je 0x850d8; xor eax, eax; leave; ret; 
0x0000000000432b7f: cmp eax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000048ed4f: cmp eax, -1; cmove rax, rdx; ret; 
0x0000000000410315: cmp eax, -1; je 0x103eb; add rsp, 0x98; ret; 
0x0000000000425a68: cmp eax, -1; je 0x259e8; mov eax, 0xffffffff; ret; 
0x0000000000425c58: cmp eax, -1; je 0x25bd8; mov eax, 0xffffffff; ret; 
0x0000000000480d06: cmp eax, -1; je 0x80d10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000426d4e: cmp eax, -1; jne 0x26d0f; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045c942: cmp eax, 0x16; ja 0x5c990; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x000000000045c9b9: cmp eax, 0x17; ja 0x5c990; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000045bc1d: cmp eax, 0x1e; ja 0x5bc44; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000496c35: cmp eax, 0x23f33d; add byte ptr [rbp + 2], dh; pop rbx; ret; 
0x0000000000496c36: cmp eax, 0x23f3; jne 0x96c3f; pop rbx; ret; 
0x000000000048e7b1: cmp eax, 0x24b071; add byte ptr [rbp + 0xf], dh; mov rax, qword ptr [rip + 0x24ac50]; ret; 
0x0000000000470581: cmp eax, 0x26301a; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000047e81d: cmp eax, 0x29; ja 0x7e8b0; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000421c32: cmp eax, 0x2b4370; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x000000000041255c: cmp eax, 0x2c39fe; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000401cd5: cmp eax, 0x2d442e; ret; 
0x0000000000490449: cmp eax, 0x2f52c; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000048cbf2: cmp eax, 0x32d83; mov eax, 0x15; syscall; 
0x000000000048be60: cmp eax, 0x339b3; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000047e1e6: cmp eax, 0x37; ja 0x7e5a0; lea rcx, [rip + 0x403ae]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000047e99b: cmp eax, 0x37; ja 0x7ece0; lea rdx, [rip + 0x3fe3d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000047e938: cmp eax, 0x3fdef; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000484a98: cmp eax, 0x410000; je 0x84ac8; mov eax, 0x101; syscall; 
0x000000000047e9a7: cmp eax, 0x480003fe; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000045b4ff: cmp eax, 0x550c1; mov eax, 0x15; syscall; 
0x0000000000403a3f: cmp eax, 0x5bfffffa; mov eax, 0xfffffff4; pop rbp; pop r12; ret; 
0x000000000040cc8c: cmp eax, 0x649; ja 0xcca8; lea rdx, [rip + 0x957de]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004c2361: cmp eax, 0x7170d773; mov ebp, 0xfb67d10d; ret; 
0x00000000004c235e: cmp eax, 0x733db8a1; xlatb; jo 0xc23d7; mov ebp, 0xfb67d10d; ret; 
0x000000000045b91f: cmp eax, 0x83482f74; ret; 
0x000000000045b746: cmp eax, 0x83497174; ret; 
0x0000000000482864: cmp eax, 0x89000001; ret 0x8948; 
0x00000000004583e1: cmp eax, 0x89480001; ret 0x8b48; 
0x000000000041d8ce: cmp eax, 0x8fdba; mov edx, 0x6c; call 0x10920; xor eax, eax; ret; 
0x000000000041bf69: cmp eax, 0x91272; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000410ee9: cmp eax, 0xa; ja 0x10c11; lea rdx, [rip + 0x9c1b7]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000410fd5: cmp eax, 0xa; ja 0x10c3f; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x00000000004339d2: cmp eax, 0xc00; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x0000000000432cb2: cmp eax, 0xc00; lea rax, [rip + 0x1ce62]; cmove rax, rdx; ret; 
0x00000000004339a2: cmp eax, 0xc00; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x00000000004335b2: cmp eax, 0xc00; lea rax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x0000000000481c12: cmp eax, 0xc00; lea rax, [rip + 0x902]; cmove rax, rdx; ret; 
0x0000000000482f32: cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000481be2: cmp eax, 0xc00; lea rax, [rip + 0xdf2]; cmove rax, rdx; ret; 
0x00000000004c9f19: cmp eax, 0xd1640000; cmc; jmp qword ptr [rdi + 2]; 
0x0000000000425ad9: cmp eax, 0xd8af8b48; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0x7c60; 
0x00000000004c5cec: cmp eax, 0xf4fffd58; push rdi; std; jmp rsp; 
0x00000000004581d7: cmp eax, 0xfffff000; ja 0x58200; hlt; mov edi, edx; mov eax, r8d; syscall; 
0x0000000000458708: cmp eax, 0xfffff001; jae 0x58710; ret; 
0x0000000000458e38: cmp eax, 0xfffff001; jae 0x58e40; ret; 
0x0000000000459678: cmp eax, 0xfffff001; jae 0x59680; ret; 
0x000000000045974a: cmp eax, 0xfffff001; jae 0x59752; ret; 
0x0000000000459858: cmp eax, 0xfffff001; jae 0x59860; ret; 
0x0000000000459888: cmp eax, 0xfffff001; jae 0x59890; ret; 
0x00000000004598b8: cmp eax, 0xfffff001; jae 0x598c0; ret; 
0x000000000045af6b: cmp eax, 0xfffff001; jae 0x5af73; ret; 
0x000000000045af9b: cmp eax, 0xfffff001; jae 0x5afa3; ret; 
0x000000000045afc8: cmp eax, 0xfffff001; jae 0x5afd0; ret; 
0x0000000000484838: cmp eax, 0xfffff001; jae 0x84840; ret; 
0x00000000004979e8: cmp eax, 0xfffff001; jae 0x979f0; ret; 
0x0000000000401c0e: cmp eax, 1; je 0x1c20; xor eax, eax; add rsp, 0x18; ret; 
0x0000000000457876: cmp eax, 1; je 0x57890; cmp eax, 2; je 0x57888; xor eax, eax; ret; 
0x0000000000409592: cmp eax, 1; je 0x95b0; cmp eax, 2; jne 0x95a8; lea eax, [rsi*8 + 0x14]; ret; 
0x00000000004095d8: cmp eax, 1; je 0x9600; cmp eax, 2; jne 0x95f0; lea eax, [rsi*8 + 0x10]; ret; 
0x0000000000409286: cmp eax, 1; sbb eax, eax; and eax, 0xffffffea; ret; 
0x000000000045787b: cmp eax, 2; je 0x57888; xor eax, eax; ret; 
0x0000000000409597: cmp eax, 2; jne 0x95a8; lea eax, [rsi*8 + 0x14]; ret; 
0x00000000004095dd: cmp eax, 2; jne 0x95f0; lea eax, [rsi*8 + 0x10]; ret; 
0x000000000045b10a: cmp eax, 4; je 0x5b110; ret; 
0x00000000004085cf: cmp eax, 7; ja 0x8308; lea rdx, [rip + 0x996b9]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000048109d: cmp eax, dword ptr [rdx + 0x18]; jbe 0x810c6; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000049477b: cmp eax, dword ptr [rip + 0x244a4f]; jae 0x9478f; mov rdx, qword ptr [rip + 0x244a4e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000426084: cmp eax, eax; jbe 0x26098; mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000049034b: cmp eax, eax; je 0x90296; sub eax, r8d; ret; 
0x000000000041ef23: cmp eax, ecx; jbe 0x1ef98; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000425998: cmp eax, ecx; jbe 0x259b0; mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000425af9: cmp eax, ecx; jbe 0x25bb0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000425d21: cmp eax, ecx; jbe 0x25db8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000425e9f: cmp eax, ecx; jbe 0x25ed8; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000425f18: cmp eax, ecx; jbe 0x25f40; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000426ca8: cmp eax, ecx; jbe 0x26ce0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000426d3f: cmp eax, ecx; jbe 0x26d60; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000480f1d: cmp eax, ecx; jbe 0x80f50; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000455d0f: cmp eax, ecx; jle 0x55d48; movsxd rax, ecx; ret; 
0x0000000000455502: cmp eax, ecx; jne 0x55710; xor eax, eax; ret; 
0x000000000045566a: cmp eax, ecx; jne 0x55725; xor eax, eax; ret; 
0x00000000004078bf: cmp eax, ecx; jne 0x78b0; xor eax, eax; ret; 
0x0000000000455723: cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x0000000000422e93: cmp eax, edi; jbe 0x22f98; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000046d625: cmp eax, edi; jbe 0x6ec45; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000046dbcb: cmp eax, edi; jbe 0x6ecd9; mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000427b3b: cmp eax, edx; jae 0x27b60; movzx eax, byte ptr [rax]; ret; 
0x000000000045b040: cmp eax, edx; jne 0x5b04c; nop; mov eax, 0xca; syscall; 
0x000000000048e775: cmp eax, edx; jne 0x8e78c; mov byte ptr [rip + 0x24b0a8], 0; mov qword ptr [rip + 0x24ac89], rax; add rsp, 8; ret; 
0x00000000004258a2: cmp eax, esi; jbe 0x25900; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000046e0e4: cmp eax, esi; jbe 0x6ec5d; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000046dda0: cmp eax, esi; jbe 0x6ecc1; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000479918: cmp eax, esi; jbe 0x7a690; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x0000000000480138: cmp eax, esi; jbe 0x80170; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000480fb7: cmp eax, esi; jbe 0x80fd0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000045b0a6: cmp ebx, 0xa; je 0x5b0ac; ret; 
0x00000000004cf5f1: cmp ebx, edi; jmp qword ptr [rbx]; 
0x00000000004939c6: cmp ecx, 0xe8747fff; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000004af5d9: cmp ecx, 0xf98090ff; jmp qword ptr [rax]; 
0x00000000004af499: cmp ecx, 0xf980c2ff; call qword ptr [rdx - 0x80]; 
0x00000000004af499: cmp ecx, 0xf980c2ff; call qword ptr [rdx - 0x80]; stc; jmp rdx; 
0x00000000004af419: cmp ecx, 0xf980d6ff; jmp qword ptr [rsi - 0x80]; 
0x00000000004af415: cmp ecx, 0xf98146ff; call rsi; 
0x0000000000406a2e: cmp ecx, 1; jne 0x6ae7; mov eax, 1; ret; 
0x000000000045b491: cmp ecx, dword ptr [rax + 0x18]; ja 0x5b4a6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000045b4bf: cmp ecx, dword ptr [rax + 0x18]; jg 0x5b4a6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000045dc32: cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000042ac90: cmp ecx, dword ptr [rax - 0x7f]; in al, dx; add byte ptr [rax], 0; add al, ch; ret; 
0x00000000004807c4: cmp ecx, dword ptr [rbp - 0x75]; mov ch, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0x7c60; 
0x000000000048ed98: cmp ecx, dword ptr [rdi + rsi]; jae 0x8ed41; xor eax, eax; ret; 
0x0000000000497531: cmp ecx, dword ptr [rdx + 0x28]; jae 0x97510; mov eax, 1; ret; 
0x00000000004812ae: cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x000000000043c5c5: cmp ecx, eax; jne 0x3c9f3; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000043c06b: cmp ecx, eax; jne 0x3c9f3; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000043bfbf: cmp ecx, eax; jne 0x3c9f3; xor eax, eax; ret; 
0x000000000043c0b6: cmp ecx, eax; jne 0x3c9ff; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000043bfe7: cmp ecx, eax; jne 0x3c9ff; xor eax, eax; ret; 
0x000000000043c2b8: cmp ecx, eax; jne 0x3ca0a; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000048db28: cmp ecx, eax; jne 0x8dacb; mov eax, dword ptr [rdx + 4]; ret; 
0x0000000000491b58: cmp ecx, eax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000406ab8: cmp ecx, eax; seta al; ret; 
0x0000000000406aae: cmp ecx, eax; setb al; ret; 
0x00000000004936c2: cmp ecx, ecx; ret; 
0x00000000004af3b1: cmp ecx, edi; jmp qword ptr [rax]; 
0x000000000048101a: cmp ecx, esi; jne 0x81010; lea eax, [rdx + rdi]; ret; 
0x000000000040910e: cmp edi, 0x16; jne 0x9270; mov rax, 0x6d2f60; ret; 
0x00000000004091f0: cmp edi, 0x40000008; jne 0x9270; mov rax, 0x6d2d60; ret; 
0x0000000000409200: cmp edi, 0x80000015; jne 0x9270; mov rax, 0x6d2f20; ret; 
0x00000000004090ce: cmp edi, 0xc0000008; jne 0x9270; mov rax, 0x6d2de0; ret; 
0x00000000004091d8: cmp edi, 0xc000003e; jne 0x9270; mov rax, 0x6d52c0; ret; 
0x000000000040915a: cmp edi, 0xc00000f3; je 0x9260; cmp edi, 0xe0000008; jne 0x9270; mov rax, 0x6d2e60; ret; 
0x0000000000409166: cmp edi, 0xe0000008; jne 0x9270; mov rax, 0x6d2e60; ret; 
0x00000000004091c0: cmp edi, 8; jne 0x9270; mov rax, 0x6d2da0; ret; 
0x0000000000480b8e: cmp edi, dword ptr [rax + 0x18]; jbe 0x80bbb; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004755b0: cmp edi, eax; ja 0x75590; mov eax, r9d; ret; 
0x0000000000456129: cmp edi, ecx; jb 0x56294; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000456484: cmp edi, ecx; jb 0x56651; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004568cf: cmp edi, ecx; jb 0x56b0c; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004afa79: cmp edi, edx; call qword ptr [rax + 0x3b]; 
0x00000000004afa81: cmp edi, edx; call qword ptr [rax - 0x4f0005c5]; cmp edi, edx; call rax; 
0x00000000004afa89: cmp edi, edx; call rax; 
0x00000000004afa8d: cmp edi, edx; inc eax; cli; call rax; 
0x00000000004afa8d: cmp edi, edx; inc eax; cli; call rax; cli; jmp rax; 
0x00000000004560c2: cmp edi, edx; jb 0x560c9; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004afa7d: cmp edi, edx; push qword ptr [rax + 0x3b]; cli; call qword ptr [rax - 0x4f0005c5]; cmp edi, edx; call rax; 
0x00000000004afa75: cmp edi, edx; push qword ptr [rax]; cmp edi, edx; call qword ptr [rax + 0x3b]; 
0x00000000004d13d5: cmp edi, esp; call qword ptr [rax]; 
0x00000000004977de: cmp edi, esp; jmp qword ptr [rsi + 0x2e]; 
0x00000000004755af: cmp edi, r8d; ja 0x75590; mov eax, r9d; ret; 
0x0000000000482f9d: cmp edx, 0x1000; lea rdx, [rip - 0x2bf3a]; cmove rax, rdx; ret; 
0x00000000004097b0: cmp edx, 0x18; jbe 0x97c0; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x000000000040a520: cmp edx, 0x18; jbe 0xa530; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x000000000040b110: cmp edx, 0x18; jbe 0xb120; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x000000000040bd20: cmp edx, 0x18; jbe 0xbd30; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x0000000000456e1f: cmp edx, 0x20; ja 0x56e2f; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000456dcf: cmp edx, 0x20; ja 0x56e38; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000041df35: cmp edx, 0x24; jbe 0x1df50; mov rax, -0x40; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000046c655: cmp edx, 0x24; jbe 0x6c670; mov rax, -0x40; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000456f77: cmp edx, 0x40; ja 0x56f8a; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000456f27: cmp edx, 0x40; ja 0x56f93; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000045730d: cmp edx, 0xff; cmove rax, rcx; pop rbx; ret; 
0x0000000000406aa9: cmp edx, 1; jbe 0x6ab8; cmp ecx, eax; setb al; ret; 
0x0000000000400c9d: cmp edx, 1; jbe 0xc8a; mov eax, 0xfffffff2; ret; 
0x000000000041d673: cmp edx, 3; jne 0x1d5a0; mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000480e00: cmp edx, dword ptr [rax + 0x18]; jbe 0x80e24; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000043aa05: cmp edx, eax; jbe 0x3aa60; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000043aa25: cmp edx, eax; jbe 0x3aa60; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000043aa45: cmp edx, eax; jbe 0x3aa60; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000043a9f5: cmp edx, eax; jbe 0x3aa60; add rax, rdi; vzeroupper; ret; 
0x0000000000457012: cmp edx, ecx; jne 0x56ff7; vzeroupper; ret; 
0x00000000004571d5: cmp edx, ecx; jne 0x571b2; vzeroupper; ret; 
0x00000000004afa19: cmp edx, edi; call qword ptr [rax + 0x39]; 
0x00000000004afa19: cmp edx, edi; call qword ptr [rax + 0x39]; cli; jmp qword ptr [rax + 0x39]; 
0x00000000004afa29: cmp edx, edi; call qword ptr [rax - 0x5f0005c7]; cmp edx, edi; push qword ptr [rax - 0x3f0005c7]; cmp edx, edi; call rax; 
0x00000000004afa39: cmp edx, edi; call rax; 
0x00000000004afa39: cmp edx, edi; call rax; cmp edx, edi; jmp rax; 
0x00000000004afa15: cmp edx, edi; inc dword ptr [rax + 0x39]; cli; call qword ptr [rax + 0x39]; 
0x00000000004afa15: cmp edx, edi; inc dword ptr [rax + 0x39]; cli; call qword ptr [rax + 0x39]; cli; jmp qword ptr [rax + 0x39]; 
0x00000000004afa45: cmp edx, edi; inc dword ptr [rax]; cmp bh, dl; call qword ptr [rax]; 
0x00000000004afa45: cmp edx, edi; inc dword ptr [rax]; cmp bh, dl; call qword ptr [rax]; cmp bh, dl; jmp qword ptr [rax]; 
0x00000000004afa35: cmp edx, edi; inc eax; cmp edx, edi; call rax; 
0x00000000004afa35: cmp edx, edi; inc eax; cmp edx, edi; call rax; cmp edx, edi; jmp rax; 
0x00000000004afa1d: cmp edx, edi; jmp qword ptr [rax + 0x39]; 
0x00000000004afa3d: cmp edx, edi; jmp rax; 
0x00000000004afa31: cmp edx, edi; push qword ptr [rax - 0x3f0005c7]; cmp edx, edi; call rax; 
0x00000000004afa11: cmp edx, edi; push qword ptr [rax]; cmp edx, edi; inc dword ptr [rax + 0x39]; cli; call qword ptr [rax + 0x39]; 
0x00000000004afa41: cmp edx, edi; push rax; cmp edx, edi; inc dword ptr [rax]; cmp bh, dl; call qword ptr [rax]; 
0x000000000045b02a: cmp edx, edi; setae al; ret; 
0x0000000000427b79: cmp esi, -1; setne al; neg eax; ret; 
0x0000000000458c28: cmp esi, 9; jne 0x58bf7; lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000004802d5: cmp esi, dword ptr [rax + 0x18]; jbe 0x802fe; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000480485: cmp esi, dword ptr [rax + 0x18]; jbe 0x804b2; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004564a5: cmp esi, dword ptr [rdx + 5]; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004c2618: cmp esi, dword ptr [rsi + 0x33]; movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x0000000000482df5: cmp esi, eax; jbe 0x82e70; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000004c3804: cmp esi, ebp; xlatb; ret 0x4e27; 
0x0000000000426d9a: cmp esi, ecx; jne 0x26d90; lea eax, [rdx + rdi]; ret; 
0x000000000042321a: cmp esp, edx; jbe 0x23400; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000049c46c: cmp qword ptr [r9 + 0x38], 0; je 0x9c490; add rsp, 0x18; ret; 
0x00000000004283a4: cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000496c33: cmp qword ptr [rip + 0x23f33d], 0; jne 0x96c3f; pop rbx; ret; 
0x0000000000485007: cmp qword ptr [rsi], rax; je 0x850d8; xor eax, eax; leave; ret; 
0x00000000004568f0: cmp r10b, 1; ja 0x56949; jb 0x568fd; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000045b0a5: cmp r11d, 0xa; je 0x5b0ac; ret; 
0x0000000000423219: cmp r12, rdx; jbe 0x23400; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000049034a: cmp r8d, eax; je 0x90296; sub eax, r8d; ret; 
0x0000000000490344: cmp r9b, 9; jbe 0x90330; cmp r8d, eax; je 0x90296; sub eax, r8d; ret; 
0x00000000004581d6: cmp rax, -0x1000; ja 0x58200; hlt; mov edi, edx; mov eax, r8d; syscall; 
0x0000000000458707: cmp rax, -0xfff; jae 0x58710; ret; 
0x0000000000458e37: cmp rax, -0xfff; jae 0x58e40; ret; 
0x0000000000459677: cmp rax, -0xfff; jae 0x59680; ret; 
0x0000000000459749: cmp rax, -0xfff; jae 0x59752; ret; 
0x0000000000459857: cmp rax, -0xfff; jae 0x59860; ret; 
0x0000000000459887: cmp rax, -0xfff; jae 0x59890; ret; 
0x00000000004598b7: cmp rax, -0xfff; jae 0x598c0; ret; 
0x000000000045af6a: cmp rax, -0xfff; jae 0x5af73; ret; 
0x000000000045af9a: cmp rax, -0xfff; jae 0x5afa3; ret; 
0x000000000045afc7: cmp rax, -0xfff; jae 0x5afd0; ret; 
0x0000000000484837: cmp rax, -0xfff; jae 0x84840; ret; 
0x00000000004979e7: cmp rax, -0xfff; jae 0x979f0; ret; 
0x0000000000432b7e: cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000048ed4e: cmp rax, -1; cmove rax, rdx; ret; 
0x000000000045c941: cmp rax, 0x16; ja 0x5c990; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x000000000045c9b8: cmp rax, 0x17; ja 0x5c990; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000045bc1c: cmp rax, 0x1e; ja 0x5bc44; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000409285: cmp rax, 1; sbb eax, eax; and eax, 0xffffffea; ret; 
0x000000000048109c: cmp rax, qword ptr [rdx + 0x18]; jbe 0x810c6; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000049477a: cmp rax, qword ptr [rip + 0x244a4f]; jae 0x9478f; mov rdx, qword ptr [rip + 0x244a4e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000426083: cmp rax, r8; jbe 0x26098; mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000041ef22: cmp rax, rcx; jbe 0x1ef98; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000425997: cmp rax, rcx; jbe 0x259b0; mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000425af8: cmp rax, rcx; jbe 0x25bb0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000425d20: cmp rax, rcx; jbe 0x25db8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000425e9e: cmp rax, rcx; jbe 0x25ed8; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000425f17: cmp rax, rcx; jbe 0x25f40; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000426ca7: cmp rax, rcx; jbe 0x26ce0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000426d3e: cmp rax, rcx; jbe 0x26d60; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000480f1c: cmp rax, rcx; jbe 0x80f50; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004078be: cmp rax, rcx; jne 0x78b0; xor eax, eax; ret; 
0x0000000000422e92: cmp rax, rdi; jbe 0x22f98; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000046d624: cmp rax, rdi; jbe 0x6ec45; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000046dbca: cmp rax, rdi; jbe 0x6ecd9; mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000427b3a: cmp rax, rdx; jae 0x27b60; movzx eax, byte ptr [rax]; ret; 
0x000000000048e774: cmp rax, rdx; jne 0x8e78c; mov byte ptr [rip + 0x24b0a8], 0; mov qword ptr [rip + 0x24ac89], rax; add rsp, 8; ret; 
0x00000000004258a1: cmp rax, rsi; jbe 0x25900; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000046e0e3: cmp rax, rsi; jbe 0x6ec5d; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000046dd9f: cmp rax, rsi; jbe 0x6ecc1; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000479917: cmp rax, rsi; jbe 0x7a690; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x0000000000480137: cmp rax, rsi; jbe 0x80170; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000480fb6: cmp rax, rsi; jbe 0x80fd0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000045b490: cmp rcx, qword ptr [rax + 0x18]; ja 0x5b4a6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000045b4be: cmp rcx, qword ptr [rax + 0x18]; jg 0x5b4a6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000048ed97: cmp rcx, qword ptr [rdi + rsi]; jae 0x8ed41; xor eax, eax; ret; 
0x0000000000497530: cmp rcx, qword ptr [rdx + 0x28]; jae 0x97510; mov eax, 1; ret; 
0x00000000004812ad: cmp rcx, qword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x000000000048db27: cmp rcx, r8; jne 0x8dacb; mov eax, dword ptr [rdx + 4]; ret; 
0x000000000043c5c4: cmp rcx, rax; jne 0x3c9f3; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000043c06a: cmp rcx, rax; jne 0x3c9f3; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000043bfbe: cmp rcx, rax; jne 0x3c9f3; xor eax, eax; ret; 
0x0000000000491b57: cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000481019: cmp rcx, rsi; jne 0x81010; lea eax, [rdx + rdi]; ret; 
0x0000000000480b8d: cmp rdi, qword ptr [rax + 0x18]; jbe 0x80bbb; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000456128: cmp rdi, r9; jb 0x56294; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000456483: cmp rdi, r9; jb 0x56651; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004568ce: cmp rdi, r9; jb 0x56b0c; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004560c1: cmp rdi, rdx; jb 0x560c9; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000456e1e: cmp rdx, 0x20; ja 0x56e2f; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000456dce: cmp rdx, 0x20; ja 0x56e38; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000456f76: cmp rdx, 0x40; ja 0x56f8a; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000456f26: cmp rdx, 0x40; ja 0x56f93; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000041d672: cmp rdx, 3; jne 0x1d5a0; mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000480dff: cmp rdx, qword ptr [rax + 0x18]; jbe 0x80e24; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000043aa04: cmp rdx, rax; jbe 0x3aa60; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000043aa24: cmp rdx, rax; jbe 0x3aa60; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000043aa44: cmp rdx, rax; jbe 0x3aa60; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000043a9f4: cmp rdx, rax; jbe 0x3aa60; add rax, rdi; vzeroupper; ret; 
0x0000000000457011: cmp rdx, rcx; jne 0x56ff7; vzeroupper; ret; 
0x00000000004571d4: cmp rdx, rcx; jne 0x571b2; vzeroupper; ret; 
0x000000000045b029: cmp rdx, rdi; setae al; ret; 
0x00000000004802d4: cmp rsi, qword ptr [rax + 0x18]; jbe 0x802fe; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000480484: cmp rsi, qword ptr [rax + 0x18]; jbe 0x804b2; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000482df4: cmp rsi, rax; jbe 0x82e70; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000426d99: cmp rsi, rcx; jne 0x26d90; lea eax, [rdx + rdi]; ret; 
0x000000000044f780: cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000048508d: cmp word ptr [rsi + 0x14], 0x2f75; jne 0x84fbd; mov eax, 1; leave; ret; 
0x00000000004d0819: cmpsb byte ptr [rsi], byte ptr [rdi]; add byte ptr [rax], al; test dh, dh; sti; call rdx; 
0x00000000004aaba0: cmpsb byte ptr [rsi], byte ptr [rdi]; add dword ptr [rax], eax; add byte ptr [rdx], dl; fdivr st(7); call qword ptr [rdx]; 
0x00000000004aabd4: cmpsb byte ptr [rsi], byte ptr [rdi]; add dword ptr [rax], eax; add byte ptr [rdx], dl; fdivr st(7); call rbx; 
0x00000000004a0bb6: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0x8b480000; or byte ptr [r8 - 0x397bf0ff], bpl; add eax, 0x89490000; ret 0x8349; 
0x000000000043c449: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0xc0310000; ret; 
0x000000000040b06b: cmpsb byte ptr [rsi], byte ptr [rdi]; insb byte ptr [rdi], dx; or dword ptr [rax], eax; ret; 
0x000000000044d136: cmpsb byte ptr [rsi], byte ptr [rdi]; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004a2b0c: cmpsb byte ptr [rsi], byte ptr [rdi]; ret 0xfff6; 
0x00000000004654d6: cmpsb byte ptr [rsi], byte ptr [rdi]; ret; 
0x000000000040058c: cmpsb byte ptr [rsi], byte ptr [rdi]; seta dl; sbb dl, 0; test dl, dl; jne 0x598; ret; 
0x000000000043be66: cmpsb byte ptr [rsi], byte ptr [rdi]; sub eax, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000043daa5: cmpsd dword ptr [rsi], dword ptr [rdi]; adc byte ptr [rdi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000049ea55: cmpsd dword ptr [rsi], dword ptr [rdi]; adc eax, 0x8948ffb6; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004d08e5: cmpsd dword ptr [rsi], dword ptr [rdi]; add byte ptr [rax], al; js 0xd08e3; sti; jmp qword ptr [rsi]; 
0x00000000004aaf30: cmpsd dword ptr [rsi], dword ptr [rdi]; add dword ptr [rax], eax; add byte ptr [rdi + 0x6000001], ah; fdivr st(7); jmp qword ptr [rdi + 0x6000001]; 
0x00000000004aaf20: cmpsd dword ptr [rsi], dword ptr [rdi]; add dword ptr [rax], eax; add byte ptr [rsi], al; fdivr st(7); jmp qword ptr [rdi + 0x6000001]; 
0x000000000048be68: cmpsd dword ptr [rsi], dword ptr [rdi]; add rax, rdi; jmp rax; 
0x0000000000440865: cmpsd dword ptr [rsi], dword ptr [rdi]; in al, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040a34c: cmpsd dword ptr [rsi], dword ptr [rdi]; or eax, dword ptr [rax]; ret; 
0x000000000040c863: cmpsd dword ptr [rsi], dword ptr [rdi]; push rsp; or dword ptr [rax], eax; ret; 
0x000000000040d875: cmpsd dword ptr [rsi], dword ptr [rdi]; ret 9; 
0x00000000004af97d: cmpsd dword ptr [rsi], dword ptr [rdi]; stc; inc eax; leave; stc; jmp qword ptr [rax - 0x35]; 
0x00000000004c4355: cmpsd dword ptr [rsi], dword ptr [rdi]; xor byte ptr [rsi + 0x4ce2e5dd], 0x67; add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x00000000004d08e4: cmpsq qword ptr [rsi], qword ptr [rdi]; add byte ptr [rax], al; js 0xd08e3; sti; jmp qword ptr [rsi]; 
0x00000000004aaf54: cwde; add byte ptr [rax], al; add byte ptr [rax + 0x11000001], ah; fdivr st(7); call qword ptr [rcx]; 
0x000000000049a360: cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x830f; 
0x000000000042942c: cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000049a3f5: cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x9272; 
0x000000000042043b: cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x00000000004a145c: cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x00000000004a0b6c: cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x00000000004cf9ed: cwde; add byte ptr [rax], al; sti; jmp qword ptr [rcx]; 
0x000000000049c075: cwde; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000049f4b2: cwde; and eax, dword ptr [rax]; jne 0x9f498; pop rbx; ret; 
0x00000000004cbed1: cwde; clc; call qword ptr [rbx + 4]; 
0x0000000000491ac3: cwde; cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000491a57: cwde; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000004a57fc: cwde; fdivr st(7); call qword ptr [rcx]; 
0x00000000004a57f4: cwde; fdivr st(7); lcall [rax - 0x67000028]; fdivr st(7); call qword ptr [rcx]; 
0x000000000047057a: cwde; movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x26301a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000470c1c: cwde; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x262978]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x00000000004705c4: cwde; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x262fd0]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x0000000000470529: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x262f6b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004708d8: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2630bc]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047088a: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26310a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004707db: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2631b9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047077f: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x263215]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004704df: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2634b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470491: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x263503]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470030: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x263664]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004c6277: cwde; or cl, byte ptr [rsi]; or byte ptr [rbp + 0xb], al; add edx, dword ptr [rsi + 0x4a080e01]; ret; 
0x00000000004cba34: cwde; pop rax; add byte ptr [rax], al; pop rax; jg 0xcba31; jmp qword ptr [rbx]; 
0x000000000041d5cf: cwde; ret 0x2b; 
0x00000000004aeb50: cwde; stc; clc; jmp qword ptr [rax - 5]; 
0x0000000000451421: dec byte ptr [r8 + 0x29]; ret 0x280f; 
0x0000000000451422: dec byte ptr [rax + 0x29]; ret 0x280f; 
0x0000000000447cc2: dec byte ptr [rax + 0x6f]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x00000000004569e5: dec byte ptr [rax + 0x7f]; je 0x56a01; std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x0000000000456bc3: dec byte ptr [rax + 0x7f]; jg 0x56bcb; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000456d69: dec byte ptr [rax + 0x7f]; jg 0x56d71; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x00000000004569ed: dec byte ptr [rax + 0x7f]; jl 0x56a09; cld; vzeroupper; ret; 
0x0000000000456af6: dec byte ptr [rax + 0x7f]; jns 0x56af9; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000456c8f: dec byte ptr [rax + 0x7f]; jns 0x56c92; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000456afd: dec byte ptr [rax + 0x7f]; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000046d3e9: dec byte ptr [rax - 0x75]; mov ebp, 0xfffff758; call rax; 
0x000000000049019f: dec byte ptr [rax - 0x77]; fisttp word ptr [rax - 0x77]; ret 0xfde8; 
0x0000000000481b00: dec byte ptr [rax - 0x77]; ret; 
0x000000000049013d: dec byte ptr [rax - 0x7d]; ret; 
0x0000000000459b02: dec byte ptr [rbx + rcx*4 + 0x5f]; or byte ptr [rcx - 0xa], al; ret; 
0x000000000041d0f6: dec byte ptr [rcx + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x000000000041cca7: dec byte ptr [rcx + rcx*4 - 0x11]; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000004747cc: dec byte ptr [rcx + rcx*4 - 0x16]; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x0000000000458c29: dec byte ptr [rcx]; jne 0x58bf7; lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000456170: dec byte ptr [rdi]; mov bh, 0x36; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x0000000000465b93: dec dword ptr [r8 - 0x7d]; ret 0x8801; 
0x000000000046d486: dec dword ptr [rax + 0x29]; bnd call qword ptr [rbx + 0x38]; 
0x0000000000451562: dec dword ptr [rax + 0x29]; ret 0x280f; 
0x0000000000491e61: dec dword ptr [rax + 0x29]; ret 0x8948; 
0x0000000000491fa1: dec dword ptr [rax + 0x29]; ret 0x894c; 
0x000000000042da85: dec dword ptr [rax + 0x29]; ret 0x8d4c; 
0x00000000004205dd: dec dword ptr [rax + 0x29]; ret; 
0x00000000004789a0: dec dword ptr [rax + 0x29]; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x00000000004825f7: dec dword ptr [rax + 0x31]; ror dword ptr [rax + 0x21], 0xce; je 0x82730; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000047e792: dec dword ptr [rax + 0x39]; add dword ptr [rbp + 0xf48ff78], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8502; 
0x000000000042241d: dec dword ptr [rax + 0x39]; ret 0x860f; 
0x0000000000485613: dec dword ptr [rax + 0x39]; ret; 
0x000000000042bdff: dec dword ptr [rax + 0x48282454]; mov dword ptr [rsp + 0x20], esi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000493b5e: dec dword ptr [rax + 0x48e57506]; mov eax, esi; ret; 
0x000000000040203d: dec dword ptr [rax + 0x63]; add al, 0xba; add rax, rdx; jmp rax; 
0x000000000046ec32: dec dword ptr [rax + 0x63]; rol byte ptr [rbp - 0x40f0b737], 1; ror byte ptr [rax + 0xf], 0x44; ret 0xae9; 
0x000000000047e512: dec dword ptr [rax + 0xf]; add dword ptr [r8 - 0x7d], ecx; ret 0x8502; 
0x00000000004827f9: dec dword ptr [rax + 0xf]; mov ebp, 0xf80148c6; ret; 
0x000000000046a73b: dec dword ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x148; 
0x0000000000481c51: dec dword ptr [rax + 1]; ret; 
0x00000000004bf897: dec dword ptr [rax - 0x38]; cld; jmp rax; 
0x00000000004a025b: dec dword ptr [rax - 0x39]; add eax, 0x238db1; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000049f9d6: dec dword ptr [rax - 0x39]; add eax, 0x239506; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000490eb7: dec dword ptr [rax - 0x39]; add eax, 0x2481ed; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000045868f: dec dword ptr [rax - 0x39]; ret 0; 
0x000000000046d450: dec dword ptr [rax - 0x39]; ret 0x7c60; 
0x0000000000458634: dec dword ptr [rax - 0x39]; ret 0x8000; 
0x00000000004585a7: dec dword ptr [rax - 0x39]; ret 0xff80; 
0x00000000004780e6: dec dword ptr [rax - 0x39]; ret 0xffa0; 
0x0000000000458925: dec dword ptr [rax - 0x39]; ret 0xffc0; 
0x00000000004584fc: dec dword ptr [rax - 0x39]; ret 0xffff; 
0x0000000000411d43: dec dword ptr [rax - 0x39]; ret; 
0x0000000000494fb1: dec dword ptr [rax - 0x39]; sbb byte ptr [r8], al; add byte ptr [rax], al; add bl, ch; ret; 
0x00000000004748e4: dec dword ptr [rax - 0x39]; shl dword ptr [rax + 0x7c], 0x6d; add byte ptr [rax - 0x39], cl; ret 0x8308; 
0x000000000049b10f: dec dword ptr [rax - 0x46]; mov eax, 0xf; syscall; 
0x00000000004a18db: dec dword ptr [rax - 0x7000a0b]; cmc; cmc; call qword ptr [rax]; 
0x00000000004085d7: dec dword ptr [rax - 0x73]; adc eax, 0x996b9; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000040853d: dec dword ptr [rax - 0x73]; adc eax, 0x99733; mov r12d, eax; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x00000000004110be: dec dword ptr [rax - 0x73]; adc eax, 0x9c042; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000410ef1: dec dword ptr [rax - 0x73]; adc eax, 0x9c1b7; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000410d6d: dec dword ptr [rax - 0x73]; adc eax, 0x9c30f; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000465aa4: dec dword ptr [rax - 0x73]; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000043358d: dec dword ptr [rax - 0x73]; add eax, 0x221ab; cmove rax, rdx; ret; 
0x000000000045d7fc: dec dword ptr [rax - 0x73]; and qword ptr [rax - 0x77], rcx; ret 0x894c; 
0x000000000047e663: dec dword ptr [rax - 0x73]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000426c4f: dec dword ptr [rax - 0x73]; push -0x3a171115; add r8d, dword ptr [rax]; nop dword ptr [rax + rax]; mov rax, -1; ret; 
0x000000000048ef75: dec dword ptr [rax - 0x73]; push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000042ded8: dec dword ptr [rax - 0x73]; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x000000000049b602: dec dword ptr [rax - 0x75]; add byte ptr [rcx + 1], cl; ret 0xef89; 
0x00000000004936b3: dec dword ptr [rax - 0x75]; clc; xor rax, qword ptr fs:[0x28]; jne 0x936fe; leave; ret; 
0x000000000041fd0f: dec dword ptr [rax - 0x75]; cmp byte ptr [r8 - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x00000000004058c4: dec dword ptr [rax - 0x75]; jl 0x58ed; cmp byte ptr [rcx - 0x76e3db94], cl; ret; 
0x000000000045e3cc: dec dword ptr [rax - 0x75]; jne 0x5e361; call rsi; 
0x00000000004a1457: dec dword ptr [rax - 0x75]; mov ah, 0x24; cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x00000000004788fb: dec dword ptr [rax - 0x75]; mov ebp, 0xfffff730; call rax; 
0x000000000046dbdc: dec dword ptr [rax - 0x75]; mov ebp, 0xfffff758; call qword ptr [rcx + 0x38]; 
0x000000000049be2f: dec dword ptr [rax - 0x75]; push rbp; add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x0000000000422fa1: dec dword ptr [rax - 0x75]; push rsp; and al, 8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004259bc: dec dword ptr [rax - 0x75]; sbb byte ptr [r11 + 0x480c2474], cl; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000046ff17: dec dword ptr [rax - 0x75]; xchg eax, ebp; call 0x4906ff1a; mov esi, dword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x00000000004678c8: dec dword ptr [rax - 0x75]; xchg eax, ebp; push 0x4cffffff; mov edi, esi; call rdx; 
0x00000000004910dc: dec dword ptr [rax - 0x77]; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000042eb94: dec dword ptr [rax - 0x77]; add eax, 0x2a7d04; ret; 
0x000000000042eb86: dec dword ptr [rax - 0x77]; add eax, 0x2a7d1a; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2a7d04], rax; ret; 
0x00000000004997b7: dec dword ptr [rax - 0x77]; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x000000000042bebd: dec dword ptr [rax - 0x77]; bnd jmp 0x2bcce; mov qword ptr [rsp + 0x10], rdx; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000048e8f1: dec dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000047aed9: dec dword ptr [rax - 0x77]; mov ebp, 0xfffffb18; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x258dad]; jmp rax; 
0x000000000046f67e: dec dword ptr [rax - 0x77]; mov ebp, 0xfffffb18; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000042bec5: dec dword ptr [rax - 0x77]; push rsp; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000484c1e: dec dword ptr [rax - 0x77]; ret 0x1477; 
0x000000000042e37f: dec dword ptr [rax - 0x77]; ret 0x2948; 
0x0000000000484b7d: dec dword ptr [rax - 0x77]; ret 0x7577; 
0x000000000042e0fc: dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000432af7: dec dword ptr [rax - 0x77]; ret 0x854d; 
0x000000000046a562: dec dword ptr [rax - 0x77]; ret 0x870f; 
0x000000000047d0f8: dec dword ptr [rax - 0x77]; ret 0x8b44; 
0x0000000000458426: dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000487b0c: dec dword ptr [rax - 0x77]; ret 0x8d4c; 
0x000000000048c127: dec dword ptr [rax - 0x77]; ret 0x8e8; 
0x0000000000459815: dec dword ptr [rax - 0x77]; ret 0xa076; 
0x0000000000458581: dec dword ptr [rax - 0x77]; ret 0xa0e9; 
0x0000000000465abd: dec dword ptr [rax - 0x77]; ret 0xb2eb; 
0x000000000045856d: dec dword ptr [rax - 0x77]; ret 0xb4e9; 
0x000000000047b209: dec dword ptr [rax - 0x77]; ret 0xb848; 
0x000000000047d466: dec dword ptr [rax - 0x77]; ret 0xb9e8; 
0x000000000048512c: dec dword ptr [rax - 0x77]; ret 0xefeb; 
0x000000000041f50a: dec dword ptr [rax - 0x77]; ret 0xf41; 
0x000000000041452f: dec dword ptr [rax - 0x77]; ret 0xf748; 
0x000000000040442f: dec dword ptr [rax - 0x77]; ret; 
0x000000000045c442: dec dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x73], 0x3d; add eax, 0x440f4800; ret; 
0x0000000000484d76: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; nop; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000467cb2: dec dword ptr [rax - 0x7b]; sal byte ptr [rbx + 0x48], 0xc7; ret 0xfff0; 
0x000000000040345d: dec dword ptr [rax - 0x7b]; sal byte ptr [rbx + rdx + 0x48], 0xc7; ret 0xffff; 
0x00000000004941cf: dec dword ptr [rax - 0x7b]; sal byte ptr [rdx + rcx + 0x48], 0x8d; adc eax, 0x2439c4; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x000000000049447e: dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rcx + 0x5b], 0x5d; pop r12; ret; 
0x0000000000496a1c: dec dword ptr [rax - 0x7d]; call 0x7c94b225; ret; 
0x00000000004790f3: dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000401f51: dec dword ptr [rax - 0x7d]; in al, dx; or byte ptr [rax + 0x63], cl; add al, 0xba; add rax, rdx; jmp rax; 
0x000000000046521a: dec dword ptr [rax - 0x7d]; jl 0x65243; add byte ptr [rsi + rsi*2 - 0xa], sil; ret; 
0x00000000004638c1: dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000461fab: dec dword ptr [rax - 0x7d]; ret 0x4804; 
0x0000000000414a7b: dec dword ptr [rax - 0x7d]; ret 0x4901; 
0x0000000000465b94: dec dword ptr [rax - 0x7d]; ret 0x8801; 
0x000000000049d3f7: dec dword ptr [rax - 0x7d]; ret 0xe902; 
0x0000000000408bbc: dec dword ptr [rax - 0x7d]; ret; 
0x0000000000468b08: dec dword ptr [rax - 0x7d]; rol byte ptr [rcx], 0x83; ret 0x4801; 
0x00000000004439dc: dec dword ptr [rax - 0x7f]; ret 0x80; 
0x000000000045a8a0: dec dword ptr [rax - 0x7f]; ret; 
0x00000000004863b7: dec dword ptr [rax - 9]; fmul dword ptr [rcx + 0x21]; ret 0x394c; 
0x000000000049ddf4: dec dword ptr [rax - 9]; ret; 
0x00000000004091f1: dec dword ptr [rax]; add byte ptr [rax], al; jne 0x9270; mov rax, 0x6d2d60; ret; 
0x00000000004ab9bb: dec dword ptr [rax]; fdivr st(7); jmp qword ptr [rcx + 0x8000001]; 
0x00000000004091c1: dec dword ptr [rax]; jne 0x9270; mov rax, 0x6d2da0; ret; 
0x000000000046f95b: dec dword ptr [rbp + 0x29]; fisttp word ptr [rcx + rcx*4 - 0x22]; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000471354: dec dword ptr [rbp + 0x63]; ret 0x20be; 
0x000000000041467b: dec dword ptr [rbp - 0x73]; je 0x14686; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x000000000041f4d1: dec dword ptr [rbp - 0x75]; mov esp, 0xd824; add byte ptr [rax - 0x39], cl; ret 0x7c60; 
0x0000000000412257: dec dword ptr [rbp - 0x75]; push rsp; ret 0x4820; 
0x000000000047757d: dec dword ptr [rbp - 0x77]; ret 0x894c; 
0x000000000046bba6: dec dword ptr [rbp - 0x7b]; dec dword ptr [rax - 0x77]; ret; 
0x000000000040fbf4: dec dword ptr [rbx + 0x2c926115]; add bh, dh; ret 0; 
0x0000000000407e3b: dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000043216d: dec dword ptr [rbx + 0x90c2454]; ret 0xbae9; 
0x0000000000474aa1: dec dword ptr [rbx - 0x1237b]; inc edi; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x0000000000480f58: dec dword ptr [rbx - 0x14f3db8c]; ret 0x5590; 
0x000000000047cff5: dec dword ptr [rbx - 0x177cefbe]; xor byte ptr [rbx - 0x78f0f608], al; ret; 
0x00000000004804eb: dec dword ptr [rbx - 0x3b7cb7fa]; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004a4ceb: dec dword ptr [rbx - 0x74000028]; fdivr st(7); call qword ptr [rdx]; 
0x00000000004a4ce3: dec dword ptr [rbx - 0x74000028]; fdivr st(7); dec dword ptr [rbx - 0x74000028]; fdivr st(7); call qword ptr [rdx]; 
0x00000000004712af: dec dword ptr [rcx + 0x39]; ret 0x850f; 
0x000000000048b7c9: dec dword ptr [rcx + 0x39]; ret 0x860f; 
0x000000000046fb93: dec dword ptr [rcx + 0x39]; ret; 
0x00000000004011ca: dec dword ptr [rcx + 0x415d5bd8]; pop rsp; ret; 
0x00000000004940b4: dec dword ptr [rcx + 0x438b4803]; sbb byte ptr [rcx], dh; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x000000000047a597: dec dword ptr [rcx + 0x63]; ret 0x8545; 
0x000000000047aa15: dec dword ptr [rcx + 0x63]; ret; 
0x0000000000410fdd: dec dword ptr [rcx + 0x63]; test dword ptr [rax], r8d; add rax, r13; jmp rax; 
0x0000000000457332: dec dword ptr [rcx + 0x6e8c1c8]; and eax, 0x3fffc00; pop rbx; ret; 
0x0000000000482f7c: dec dword ptr [rcx + 0xe181d1]; or al, 2; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x000000000048ba45: dec dword ptr [rcx + rax - 0x28]; call rax; 
0x000000000047ac82: dec dword ptr [rcx + rbp - 0x1f]; mov r14, rcx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000493a8d: dec dword ptr [rcx + rcx*4 + 0x4f]; or byte ptr [rcx + rbp - 0x30], al; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000043e66e: dec dword ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000493aec: dec dword ptr [rcx + rcx*4 + 7]; sub eax, esi; mov qword ptr [rdi + 8], r9; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000004795f7: dec dword ptr [rcx + rcx*4 - 0x16]; call qword ptr [rbx + 0x38]; 
0x00000000004795ed: dec dword ptr [rcx + rcx*4 - 0x1a]; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000046f419: dec dword ptr [rcx + rcx*4 - 0x1a]; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000004788f1: dec dword ptr [rcx + rcx*4 - 0xa]; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x000000000047c318: dec dword ptr [rcx + rcx*4 - 0xe]; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000047b34a: dec dword ptr [rcx + rcx*4 - 0xe]; mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000047c495: dec dword ptr [rcx + rcx*4 - 0xe]; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000047c322: dec dword ptr [rcx + rcx*4 - 1]; call qword ptr [rax + 0x38]; 
0x000000000047b357: dec dword ptr [rcx + rcx*4 - 1]; call qword ptr [rcx + 0x38]; 
0x000000000045e3c9: dec dword ptr [rcx + rcx*4 - 1]; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000046d3e6: dec dword ptr [rcx + rcx*4 - 2]; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000046f885: dec dword ptr [rcx + rcx*4 - 9]; call qword ptr [rax + 0x38]; 
0x00000000004675f1: dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x00000000004678cf: dec dword ptr [rcx + rcx*4 - 9]; call rdx; 
0x000000000046d246: dec dword ptr [rcx - 0x2f42763f]; idiv bh; call rax; 
0x000000000047ac8f: dec dword ptr [rcx - 0x3f]; inc byte ptr [rdx]; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000047b8ee: dec dword ptr [rcx - 0x4e773]; ljmp [rcx]; ror byte ptr [rax - 0x7d], 1; mov ebp, 0xfffffae8; add byte ptr [rcx - 0x77], al; ret 0x1674; 
0x0000000000464652: dec dword ptr [rcx - 0x75]; add byte ptr [r8 - 0x77], r9b; fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x000000000041cf6f: dec dword ptr [rcx - 0x75]; add byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000041ce14: dec dword ptr [rcx - 0x75]; add cl, byte ptr [rcx - 0x77]; add dword ptr [rcx - 0x73], ecx; or byte ptr [r8 + 0x39], cl; ret; 
0x000000000040a142: dec dword ptr [rcx - 0x76227618]; ret; 
0x000000000048bb10: dec dword ptr [rcx - 0x77]; ret 0x13e9; 
0x00000000004134c1: dec dword ptr [rcx - 0x77]; ret 0x149; 
0x000000000048c4b0: dec dword ptr [rcx - 0x77]; ret 0x9be9; 
0x000000000047a564: dec dword ptr [rcx - 0x77]; ret 0xff31; 
0x000000000046faf7: dec dword ptr [rcx - 0x77]; ret; 
0x000000000042b676: dec dword ptr [rcx - 0x7b]; ret; 
0x000000000046f8ff: dec dword ptr [rcx - 0x7d]; ret; 
0x000000000046fdfb: dec dword ptr [rdi + rcx + 0x48]; ret 0x958b; 
0x00000000004ab1c3: dec dword ptr [rdi]; fdivr st(7); jmp qword ptr [rbx + 0xf000001]; 
0x00000000004011e8: dec dword ptr [rdi]; fmul dword ptr [rcx + 0x415d5bd8]; pop rsp; ret; 
0x0000000000425ab0: dec dword ptr [rdi]; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000471160: dec dword ptr [rdi]; test byte ptr [rcx - 0x7a000007], al; ror byte ptr [rdi], 0x84; ret; 
0x00000000004624af: dec dword ptr [rdi]; test byte ptr [rsi - 0x8fffffc], cl; ret 0; 
0x000000000043b376: dec dword ptr [rdi]; test dword ptr [rbx - 0x3a000003], esp; std; xlatb; ret 0xe883; 
0x00000000004555b0: dec dword ptr [rdi]; test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000046f0df: dec dword ptr [rdi]; test dword ptr [rsi - 0x16000007], esi; ret; 
0x000000000047d766: dec dword ptr [rdi]; test dword ptr [rsi - 0x16000022], ecx; sahf; fdivr st(7); jmp qword ptr [rsi + 0xf]; 
0x000000000048cc0a: dec dword ptr [rdi]; xchg bh, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004b008b: dec dword ptr [rdi]; xchg dl, bh; push rsp; test dl, bh; jmp qword ptr [rdi - 0x7a]; 
0x00000000004306fc: dec dword ptr [rdi]; xchg eax, ebp; ret 0xd020; 
0x000000000045d679: dec dword ptr [rdi]; xchg eax, ebp; ret; 
0x0000000000427b7b: dec dword ptr [rdi]; xchg eax, ebp; sal bh, 0xd8; ret; 
0x000000000045942f: dec dword ptr [rdi]; xchg eax, esp; ret 0xc221; 
0x0000000000458f36: dec dword ptr [rdi]; xchg eax, esp; ret 0xca21; 
0x0000000000476c15: dec dword ptr [rdi]; xchg eax, esp; shr cl, 0xfd; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x00000000004a9b9b: dec dword ptr [rdx]; fdivr st(7); lcall [rsi + 0xa000001]; fdivr st(7); jmp qword ptr [rcx]; 
0x00000000004a40c7: dec dword ptr [rip - 0x7c000000]; fdivr st(7); call qword ptr [rbx]; 
0x00000000004af3cf: dec dword ptr [rsi + 0x7b]; stc; call rax; 
0x00000000004aa1bb: dec dword ptr [rsi - 0x71000028]; fdivr st(7); jmp qword ptr [rcx]; 
0x00000000004aa987: dec dword ptr [rsi]; fdivr st(7); jmp qword ptr [rdx + 0xe000001]; 
0x00000000004a5c83: dec eax; fdivr st(7); dec eax; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004a5c87: dec eax; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004a1c4f: dec eax; pop rsi; idiv bh; rcr byte ptr [rbp - 0xa], 1; jmp rax; 
0x00000000004a4dbb: dec ebx; fdivr st(7); call qword ptr [rdx]; 
0x00000000004a4db7: dec ebx; fdivr st(7); dec ebx; fdivr st(7); call qword ptr [rdx]; 
0x00000000004a88c3: dec ecx; add byte ptr [rax], al; add al, ah; fdivr st(7); jmp qword ptr [rbx]; 
0x00000000004a889b: dec ecx; add byte ptr [rax], al; add al, ah; fdivr st(7); jmp rax; 
0x00000000004ab2bb: dec edi; add byte ptr [rax], al; add al, ch; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004a41ef: dec edi; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004a8857: dec edx; add byte ptr [rax], al; add cl, ah; fdivr st(7); jmp rcx; 
0x00000000004a663b: dec esp; add byte ptr [rax], al; add al, al; fdivr st(7); call rcx; 
0x00000000004a54fb: dec esp; fdivr st(7); call qword ptr [rcx + 2]; 
0x00000000004a54f7: dec esp; fdivr st(7); dec esp; fdivr st(7); call qword ptr [rcx + 2]; 
0x0000000000451561: dec qword ptr [r8 + 0x29]; ret 0x280f; 
0x00000000004825f6: dec qword ptr [rax + 0x31]; ror dword ptr [rax + 0x21], 0xce; je 0x82730; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x00000000004938f4: div byte ptr [rbp + 0x29]; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000004829e2: div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x00000000004038fb: div byte ptr [rbp + rcx - 0x75]; or byte ptr [rbx + 0x518d0c46], r9b; add bh, byte ptr [rcx]; ret 0xd77; 
0x00000000004939c2: div byte ptr [rbp - 0x11]; cmp cx, 0x7fff; je 0x939b4; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000048db75: div byte ptr [rbx + rax + 0x48]; mov dword ptr [rsi], edi; mov rax, rcx; ret; 
0x00000000004436d6: div byte ptr [rdi + 0x63490006]; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000049c54e: div byte ptr [rdi + rcx - 0x80]; mov esp, 0xd837; add byte ptr [rax], al; je 0x9c560; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x000000000049c4f2: div dword ptr [rbp + 0x1b]; lea rdx, [rip + 0x23cd04]; cmp byte ptr [rdx + rsi], 8; jne 0x9c51c; mov rax, qword ptr [rax]; ret; 
0x00000000004755c6: div eax; add r9d, eax; mov eax, r9d; ret; 
0x00000000004a18d9: div ebp; dec dword ptr [rax - 0x7000a0b]; cmc; cmc; call qword ptr [rax]; 
0x00000000004573e8: div ecx; mov eax, eax; ret; 
0x00000000004573cf: div ecx; pop rbx; mov eax, eax; ret; 
0x00000000004755c5: div r8d; add r9d, eax; mov eax, r9d; ret; 
0x000000000049c554: fadd dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbp + rax + 0x48], dh; mov dword ptr [rdi + rsi*8], edx; ret; 
0x000000000049c513: fadd dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbx + rbx*8 - 0xd], dh; ret; 
0x0000000000421e30: fadd dword ptr [rax]; add byte ptr [rax], al; mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x000000000041e8e8: fadd dword ptr [rax]; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000041e467: fadd dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000402fa5: fadd dword ptr [rcx + 0x5c]; pop r13; pop r14; pop r15; ret; 
0x00000000004755b3: fadd qword ptr [rcx + rcx*4 - 0x38]; ret; 
0x0000000000453d70: fadd qword ptr [rcx]; add byte ptr [rax], al; test dl, 0x40; jne 0x53d30; lea rax, [rdi + 7]; ret; 
0x000000000043c041: fbld tbyte ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000049f324: fbstp tbyte ptr [rbp - 0x17]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000043c03f: fbstp tbyte ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000044fe2b: fcmovnb st(0), st(5); std; xlatb; ret; 
0x000000000046e2c6: fcmovnb st(0), st(6); test esp, eax; idiv bh; jmp qword ptr [rax]; 
0x00000000004aeb0c: fcmovnu st(0), st(6); clc; jmp qword ptr [rax - 0x21]; 
0x00000000004cf774: fcom dword ptr [rbp + 0x3f080000]; sti; jmp qword ptr [rax]; 
0x00000000004cf374: fcom dword ptr [rcx + 0x26b80000]; sti; call qword ptr [rsi + 1]; 
0x000000000040c7f3: fcom dword ptr [rcx + rcx]; ret; 
0x00000000004cb974: fcom dword ptr [rdi]; add byte ptr [rax], ch; jl 0xcb971; jmp qword ptr [rbx]; 
0x00000000004cb874: fcom dword ptr [rsi]; add byte ptr [rax], ch; je 0xcb871; jmp qword ptr [rbx]; 
0x00000000004aef88: fcom qword ptr [rbp - 7]; ljmp [rbp + rdx*2 - 7]; call qword ptr [rdx]; 
0x000000000049c519: fcomi st(3); ret; 
0x00000000004ca3b1: fcomip st(5); call qword ptr [rdx]; 
0x000000000041fa69: fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x00000000004011cc: fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000401080: fcomp dword ptr [rbx + 0x5d]; ret; 
0x00000000004cc174: fcomp dword ptr [rdi]; add byte ptr [rax - 0x51], bl; clc; call qword ptr [rbx]; 
0x00000000004c4379: fcomp dword ptr [rdx + 0x21]; ret; 
0x00000000004ca308: fcomp st(6); cmc; call qword ptr [rsi]; 
0x0000000000497736: fcos; dec dword ptr [rax - 0x77]; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x00000000004940b2: fcos; dec dword ptr [rcx + 0x438b4803]; sbb byte ptr [rcx], dh; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x00000000004d1274: fdiv dword ptr [rax + 0x34c80000]; cld; call qword ptr [rax]; 
0x00000000004d1674: fdiv dword ptr [rax + rax - 0x3a18800]; call qword ptr [rbx]; 
0x00000000004978d8: fdiv dword ptr [rbp + 0x11]; add rsp, 0x40; pop rbx; ret; 
0x00000000004979bf: fdiv dword ptr [rbp + 0x12]; add rsp, 0x50; pop rbx; ret; 
0x0000000000491a34: fdiv dword ptr [rbp + 0x1e]; add rsp, 0x110; pop rbx; ret; 
0x00000000004cd774: fdiv dword ptr [rbp]; add byte ptr [rax + 0x4a], ch; stc; call qword ptr [rdi]; 
0x000000000043c50f: fdiv dword ptr [rdx - 0x10f09928]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c30f: fdiv qword ptr [rdx - 0x10f09924]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004aea7d: fdiv st(0), st(0); inc dword ptr [rcx - 0x23]; clc; call rcx; 
0x00000000004aeabd: fdiv st(0), st(0); jmp qword ptr [rsi]; 
0x000000000049a169: fdiv st(3); ret; 
0x00000000004ca189: fdiv st(5); jmp qword ptr [rax]; 
0x0000000000471ae3: fdiv st(7), st(0); jmp qword ptr [rsi + 0x2e]; 
0x000000000047d3d4: fdiv st(7), st(0); jmp qword ptr [rsi + 0xf]; 
0x00000000004aea89: fdivp st(0); call qword ptr [rcx]; 
0x00000000004aeb0d: fdivp st(0); jmp qword ptr [rax - 0x21]; 
0x00000000004ce309: fdivp st(1); call qword ptr [rax]; 
0x00000000004ce2f1: fdivp st(1); call qword ptr [rbx]; 
0x00000000004ce31d: fdivp st(1); call qword ptr [rdx]; 
0x000000000042e0fa: fdivp st(7); dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000004ce074: fdivr dword ptr [rsi]; add al, bl; ret; 
0x00000000004cdc78: fdivr qword ptr [rdx]; add byte ptr [rsi + rbx*4], dl; stc; jmp rax; 
0x00000000004aea5d: fdivr st(0); call qword ptr [rcx]; 
0x00000000004aea1d: fdivr st(0); call rcx; 
0x00000000004aea15: fdivr st(0); lcall [rsi - 0x5f000729]; fdivr st(0); call rcx; 
0x00000000004d0419: fdivr st(3); jmp qword ptr [rsi + 7]; 
0x00000000004c1935: fdivr st(4); test al, 0x97; xchg eax, esp; ret; 
0x00000000004a57b9: fdivr st(7); call qword ptr [rax]; 
0x00000000004aac15: fdivr st(7); call qword ptr [rbp + 0x1c000001]; fdivr st(7); jmp rbx; 
0x00000000004ab6d1: fdivr st(7); call qword ptr [rbp + 1]; 
0x00000000004a7675: fdivr st(7); call qword ptr [rbp + 7]; 
0x00000000004a951d: fdivr st(7); call qword ptr [rbp]; 
0x00000000004ab415: fdivr st(7); call qword ptr [rbx + 0x11]; 
0x00000000004a40cd: fdivr st(7); call qword ptr [rbx]; 
0x00000000004aa2d1: fdivr st(7); call qword ptr [rcx + 0xe]; 
0x00000000004a54fd: fdivr st(7); call qword ptr [rcx + 2]; 
0x00000000004a535d: fdivr st(7); call qword ptr [rcx - 0x6e000028]; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004a57fd: fdivr st(7); call qword ptr [rcx]; 
0x00000000004a9e39: fdivr st(7); call qword ptr [rdi]; 
0x00000000004a747d: fdivr st(7); call qword ptr [rdx - 0x6d000028]; fdivr st(7); jmp qword ptr [rbp]; 
0x00000000004a4dbd: fdivr st(7); call qword ptr [rdx]; 
0x00000000004aa30d: fdivr st(7); call qword ptr [rsi + 0x1b000001]; fdivr st(7); jmp qword ptr [rbp + 0xe]; 
0x00000000004a86a1: fdivr st(7); call qword ptr [rsi + 1]; 
0x00000000004a7141: fdivr st(7); call qword ptr [rsi]; 
0x00000000004a6259: fdivr st(7); call rax; 
0x00000000004a9781: fdivr st(7); call rbp; add byte ptr [rax], al; add byte ptr [rdx - 0x4d000028], dh; fdivr st(7); jmp qword ptr [rbp]; 
0x00000000004a6215: fdivr st(7); call rbx; 
0x00000000004a4bdd: fdivr st(7); call rcx; 
0x00000000004a4bdd: fdivr st(7); call rcx; fdivr st(7); call rcx; fdivr st(7); jmp qword ptr [rbx]; 
0x00000000004a4be1: fdivr st(7); call rcx; fdivr st(7); jmp qword ptr [rbx]; 
0x00000000004a6655: fdivr st(7); call rdi; 
0x00000000004ab211: fdivr st(7); call rdi; add byte ptr [rax], al; add dh, ah; fdivr st(7); jmp rsi; 
0x00000000004a61d1: fdivr st(7); call rdx; 
0x00000000004a7021: fdivr st(7); call rsi; 
0x00000000004a9d59: fdivr st(7); call rsp; 
0x00000000004a9d59: fdivr st(7); call rsp; add byte ptr [rax], al; add dl, ah; fdivr st(7); jmp rdx; 
0x00000000004ab9b9: fdivr st(7); dec dword ptr [rax]; fdivr st(7); jmp qword ptr [rcx + 0x8000001]; 
0x00000000004a4ce9: fdivr st(7); dec dword ptr [rbx - 0x74000028]; fdivr st(7); call qword ptr [rdx]; 
0x00000000004a4ce1: fdivr st(7); dec dword ptr [rbx - 0x74000028]; fdivr st(7); dec dword ptr [rbx - 0x74000028]; fdivr st(7); call qword ptr [rdx]; 
0x00000000004ab1c1: fdivr st(7); dec dword ptr [rdi]; fdivr st(7); jmp qword ptr [rbx + 0xf000001]; 
0x00000000004a9b99: fdivr st(7); dec dword ptr [rdx]; fdivr st(7); lcall [rsi + 0xa000001]; fdivr st(7); jmp qword ptr [rcx]; 
0x00000000004a40c5: fdivr st(7); dec dword ptr [rip - 0x7c000000]; fdivr st(7); call qword ptr [rbx]; 
0x00000000004aa1b9: fdivr st(7); dec dword ptr [rsi - 0x71000028]; fdivr st(7); jmp qword ptr [rcx]; 
0x00000000004aa985: fdivr st(7); dec dword ptr [rsi]; fdivr st(7); jmp qword ptr [rdx + 0xe000001]; 
0x00000000004a5c81: fdivr st(7); dec eax; fdivr st(7); dec eax; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004a5c85: fdivr st(7); dec eax; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004a4db9: fdivr st(7); dec ebx; fdivr st(7); call qword ptr [rdx]; 
0x00000000004a4db5: fdivr st(7); dec ebx; fdivr st(7); dec ebx; fdivr st(7); call qword ptr [rdx]; 
0x00000000004a88c1: fdivr st(7); dec ecx; add byte ptr [rax], al; add al, ah; fdivr st(7); jmp qword ptr [rbx]; 
0x00000000004a8899: fdivr st(7); dec ecx; add byte ptr [rax], al; add al, ah; fdivr st(7); jmp rax; 
0x00000000004ab2b9: fdivr st(7); dec edi; add byte ptr [rax], al; add al, ch; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004a41ed: fdivr st(7); dec edi; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004a8855: fdivr st(7); dec edx; add byte ptr [rax], al; add cl, ah; fdivr st(7); jmp rcx; 
0x00000000004a6639: fdivr st(7); dec esp; add byte ptr [rax], al; add al, al; fdivr st(7); call rcx; 
0x00000000004a54f9: fdivr st(7); dec esp; fdivr st(7); call qword ptr [rcx + 2]; 
0x00000000004a54f5: fdivr st(7); dec esp; fdivr st(7); dec esp; fdivr st(7); call qword ptr [rcx + 2]; 
0x00000000004a93e5: fdivr st(7); inc dword ptr [rbx]; fdivr st(7); lcall [rcx + 0x3000001]; fdivr st(7); jmp rdx; 
0x00000000004a7d39: fdivr st(7); inc dword ptr [rcx - 0x7e000028]; fdivr st(7); jmp qword ptr [rbx + 1]; 
0x00000000004a94b1: fdivr st(7); inc dword ptr [rdx]; fdivr st(7); lcall [rdx + 0x2000001]; fdivr st(7); call qword ptr [rsi]; 
0x00000000004aaf19: fdivr st(7); inc dword ptr [rsi]; fdivr st(7); jmp qword ptr [rdi + 0x6000001]; 
0x00000000004aad41: fdivr st(7); inc eax; add byte ptr [rax], al; add bl, dl; fdivr st(7); call rdx; 
0x00000000004ab209: fdivr st(7); inc ebp; add byte ptr [rax], al; add dh, ah; fdivr st(7); call rdi; 
0x00000000004a6651: fdivr st(7); inc ebx; fdivr st(7); call rdi; 
0x00000000004a6675: fdivr st(7); inc ebx; fdivr st(7); inc ebx; fdivr st(7); call rdi; 
0x00000000004a9d51: fdivr st(7); inc edx; add byte ptr [rax], al; add dl, ah; fdivr st(7); call rsp; 
0x00000000004aafa1: fdivr st(7); inc edx; fdivr st(7); call rsi; 
0x00000000004aafc5: fdivr st(7); inc edx; fdivr st(7); inc edx; fdivr st(7); call rsi; 
0x00000000004ab40d: fdivr st(7); inc esi; add byte ptr [rax], al; add bh, dl; fdivr st(7); call qword ptr [rbx + 0x11]; 
0x00000000004ab3e5: fdivr st(7); inc esi; add byte ptr [rax], al; add bh, dl; fdivr st(7); call rdi; 
0x00000000004ab319: fdivr st(7); inc esp; add byte ptr [rax], al; add ah, dl; fdivr st(7); call rsi; 
0x00000000004a7629: fdivr st(7); jmp qword ptr [rax + 1]; 
0x00000000004a6b69: fdivr st(7); jmp qword ptr [rax]; 
0x00000000004aa315: fdivr st(7); jmp qword ptr [rbp + 0xe]; 
0x00000000004a7471: fdivr st(7); jmp qword ptr [rbp]; 
0x00000000004ab49d: fdivr st(7); jmp qword ptr [rbx + 0x11]; 
0x00000000004ab1c5: fdivr st(7); jmp qword ptr [rbx + 0xf000001]; 
0x00000000004a7d41: fdivr st(7); jmp qword ptr [rbx + 1]; 
0x00000000004a4281: fdivr st(7); jmp qword ptr [rbx]; 
0x00000000004ab9bd: fdivr st(7); jmp qword ptr [rcx + 0x8000001]; 
0x00000000004a75e5: fdivr st(7); jmp qword ptr [rcx + 1]; 
0x00000000004a4e31: fdivr st(7); jmp qword ptr [rcx]; 
0x00000000004aaf1d: fdivr st(7); jmp qword ptr [rdi + 0x6000001]; 
0x00000000004a53a9: fdivr st(7); jmp qword ptr [rdi]; 
0x00000000004aa989: fdivr st(7); jmp qword ptr [rdx + 0xe000001]; 
0x00000000004a41f1: fdivr st(7); jmp qword ptr [rdx]; 
0x000000000047d76f: fdivr st(7); jmp qword ptr [rsi + 0xf]; 
0x00000000004a91ed: fdivr st(7); jmp qword ptr [rsi]; 
0x00000000004a8895: fdivr st(7); jmp rax; 
0x00000000004a4275: fdivr st(7); jmp rbx; 
0x00000000004a4d35: fdivr st(7); jmp rcx; 
0x00000000004a66c9: fdivr st(7); jmp rdi; 
0x00000000004a93f1: fdivr st(7); jmp rdx; 
0x00000000004ab205: fdivr st(7); jmp rsi; 
0x00000000004ab359: fdivr st(7); jmp rsp; 
0x00000000004a57f5: fdivr st(7); lcall [rax - 0x67000028]; fdivr st(7); call qword ptr [rcx]; 
0x00000000004aa309: fdivr st(7); lcall [rbx]; fdivr st(7); call qword ptr [rsi + 0x1b000001]; fdivr st(7); jmp qword ptr [rbp + 0xe]; 
0x00000000004a93e9: fdivr st(7); lcall [rcx + 0x3000001]; fdivr st(7); jmp rdx; 
0x00000000004a57b1: fdivr st(7); lcall [rcx - 0x66000028]; fdivr st(7); call qword ptr [rax]; 
0x00000000004a94b5: fdivr st(7); lcall [rdx + 0x2000001]; fdivr st(7); call qword ptr [rsi]; 
0x00000000004a9b9d: fdivr st(7); lcall [rsi + 0xa000001]; fdivr st(7); jmp qword ptr [rcx]; 
0x00000000004a4d2d: fdivr st(7); ljmp [rbp - 0x52000028]; fdivr st(7); jmp rcx; 
0x00000000004a4d25: fdivr st(7); ljmp [rbp - 0x52000028]; fdivr st(7); ljmp [rbp - 0x52000028]; fdivr st(7); jmp rcx; 
0x00000000004a75e1: fdivr st(7); ljmp [rbx]; fdivr st(7); jmp qword ptr [rcx + 1]; 
0x00000000004a75dd: fdivr st(7); ljmp [rbx]; fdivr st(7); ljmp [rbx]; fdivr st(7); jmp qword ptr [rcx + 1]; 
0x00000000004a7139: fdivr st(7); ljmp [rdx - 0x55000028]; fdivr st(7); call qword ptr [rsi]; 
0x00000000004a7625: fdivr st(7); ljmp [rdx]; fdivr st(7); jmp qword ptr [rax + 1]; 
0x00000000004a7621: fdivr st(7); ljmp [rdx]; fdivr st(7); ljmp [rdx]; fdivr st(7); jmp qword ptr [rax + 1]; 
0x00000000004a9351: fdivr st(7); push qword ptr [rbx]; fdivr st(7); call qword ptr [rsi]; 
0x00000000004a934d: fdivr st(7); push qword ptr [rbx]; fdivr st(7); push qword ptr [rbx]; fdivr st(7); call qword ptr [rsi]; 
0x00000000004a9789: fdivr st(7); push qword ptr [rdx + 0x65ffffd8]; add byte ptr [rax], al; add byte ptr [rbp], ah; add byte ptr [rax], al; ret; 
0x00000000004a53a1: fdivr st(7); push qword ptr [rip + 0x35ffffd8]; fdivr st(7); jmp qword ptr [rdi]; 
0x0000000000455728: fdivr st(7); ret; 
0x00000000004ca309: fdivrp st(5); call qword ptr [rsi]; 
0x000000000049ea83: fdivrp st(7); jmp qword ptr [rsi + 0x2e]; 
0x0000000000453ed2: fiadd dword ptr [rax]; add byte ptr [rax], al; test ah, 0x40; jne 0x53fc0; lea rax, [rdi + 0xf]; ret; 
0x0000000000400591: fiadd dword ptr [rax]; test dl, dl; jne 0x598; ret; 
0x000000000041dd08: fiadd dword ptr [rbp + 0x450f48c9]; ret 0x8348; 
0x000000000049c242: fiadd dword ptr [rsi]; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000042186a: fiadd word ptr [rcx + rcx*4 - 0x11]; mov eax, r9d; syscall; 
0x000000000043a87e: fiadd word ptr [rcx]; add byte ptr [rax], al; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x000000000042321e: fiadd word ptr [rcx]; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000400e4e: ficom word ptr [rcx]; add byte ptr [rax], al; mov dword ptr [rip + 0x2d7518], ebx; xor eax, eax; pop rbx; ret; 
0x000000000040cc96: ficom word ptr [rdi + 9]; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x00000000004c41c6: ficomp word ptr [rdx - 0x19]; cmc; mov ch, 0xab; ret; 
0x0000000000400d92: fidiv dword ptr [rbp + 0x2d]; add byte ptr [rbp - 0xcf98b40], al; ret; 
0x000000000043c40f: fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c10f: fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000497535: fidivr dword ptr [rax + 1]; ret; 
0x0000000000468622: fidivr dword ptr [rcx - 0x47]; jmp qword ptr [rsi + 0x2e]; 
0x0000000000487ea9: fild dword ptr [rbp - 0x7cb70009]; ret; 
0x000000000049c483: fild word ptr [rax]; add byte ptr [rax], al; add byte ptr [rdx + 0x48], dh; add esp, 0x18; ret; 
0x00000000004743a2: fild word ptr [rbp - 0x77]; ret 0x8b4c; 
0x00000000004675e8: fild word ptr [rcx + rcx*4 + 0x45]; mov eax, 0xff52bee8; dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x000000000042901c: fimul dword ptr [rax + 0x21]; ret 0x8948; 
0x0000000000464659: fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x0000000000490197: fimul dword ptr [rax + 0x39]; ret 0x7472; 
0x0000000000474f3d: fimul dword ptr [rax + 0x39]; ret 0xe57f; 
0x000000000042a11d: fimul dword ptr [rax + 0x39]; ror dword ptr [rdi], cl; xchg dword ptr [rcx - 0x9ffffff], ecx; ret; 
0x0000000000455d65: fimul dword ptr [rax + 0x63]; ror dword ptr [rax + 1], 0xf8; sub rax, rsi; ret; 
0x0000000000482b95: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000483855: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x00000000004395d6: fimul dword ptr [rax + rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000047b8bd: fimul dword ptr [rax - 0x3f]; clc; add cl, byte ptr [rax + 0x29]; ret 0xb8; 
0x000000000041d767: fimul dword ptr [rax - 9]; ror byte ptr [rax + 1], cl; ror byte ptr [rax - 0x3f], 1; call 0x648f2378; ret; 
0x000000000046ddaa: fimul dword ptr [rcx + rcx*4 - 0x12]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000043e6f1: fimul word ptr [r9 + r9*4 + 0x57]; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000046006f: fimul word ptr [rax + 1]; ret; 
0x00000000004096e0: fimul word ptr [rax - 0x75]; and byte ptr [r8 - 0x7b], r9b; sal byte ptr [rbp + rdx*8 + 0x48], 0x89; mov rdi, rsi; call rax; 
0x000000000043e6f2: fimul word ptr [rcx + rcx*4 + 0x57]; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000409751: fimul word ptr [rcx + rcx*4 - 0x19]; call rdx; 
0x000000000046f961: fimul word ptr [rcx + rcx*4 - 9]; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000458aef: fistp qword ptr [rax + 1]; syscall; 
0x0000000000420b37: fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000425a5e: fistp word ptr [rbx + 0x5d]; jmp rax; 
0x00000000004801c0: fistp word ptr [rbx + 0x5d]; pop r12; jmp rax; 
0x0000000000401935: fistp word ptr [rbx - 0x17]; xor al, 0xdb; add al, byte ptr [rax]; nop dword ptr [rax]; pop rbx; ret; 
0x000000000049f321: fisttp dword ptr [rax - 0x77]; fbstp tbyte ptr [rbp - 0x17]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000467c27: fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004927f1: fisttp dword ptr [rax - 0x77]; ret; 
0x000000000049f4ad: fisttp dword ptr [rax - 0x77]; sbb eax, 0x23989b; jne 0x9f498; pop rbx; ret; 
0x0000000000475d8c: fisttp dword ptr [rax - 0x7b]; rol byte ptr [rcx + 0xf], 0x94; ret; 
0x000000000048e966: fisttp dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x94; ret; 
0x0000000000476a38: fisttp dword ptr [rax - 0x7d]; jl 0x76a61; add byte ptr [rcx + 0xf], al; xchg eax, esp; ret; 
0x000000000049b940: fisttp dword ptr [rbx + 0x63]; add al, 0x99; add rax, r9; jmp rax; 
0x000000000049280b: fisttp dword ptr [rcx - 0x77]; ret 0x8b4a; 
0x0000000000464337: fisttp dword ptr [rcx - 0x7d]; ret; 
0x000000000040d1fe: fisttp dword ptr [rcx]; add cl, ch; ret 0xfffa; 
0x000000000049d3bd: fisttp dword ptr [rdi]; mov dh, 0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000407b33: fisttp dword ptr [rdi]; xchg eax, ebp; ret 0xc085; 
0x00000000004302eb: fisttp dword ptr [rdi]; xchg eax, ebp; ret 0xd020; 
0x000000000048ca84: fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x000000000043e8d1: fisttp qword ptr [r9 + r9*4 + 0x57]; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043349a: fisttp qword ptr [rax + 0x29]; ret; 
0x0000000000414a9e: fisttp qword ptr [rax - 0x7d]; ret 0x4401; 
0x0000000000455c62: fisttp qword ptr [rax - 1]; ror byte ptr [rax - 1], 0xc0; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x000000000043e8d2: fisttp qword ptr [rcx + rcx*4 + 0x57]; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e521: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e61d: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043e569: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000459920: fisttp word ptr [rax - 0x77]; call 0x5c46f683; mov esi, 2; jmp rax; 
0x00000000004901a2: fisttp word ptr [rax - 0x77]; ret 0xfde8; 
0x00000000004106f3: fisttp word ptr [rax - 0x7d]; ret; 
0x000000000049288f: fisttp word ptr [rax]; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000458dad: fisttp word ptr [rcx + 0x3b8c2]; add byte ptr [rax], al; syscall; 
0x000000000043e522: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e61e: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043e56a: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000046f95e: fisttp word ptr [rcx + rcx*4 - 0x22]; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000040233d: fisttp word ptr [rdi + 0x1f0f0005]; add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov eax, dword ptr [rip + 0x2d3dae]; ret; 
0x000000000044e46d: fisttp word ptr [rip - 0x7cb80000]; ret 0x4910; 
0x000000000043c411: fisub dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000453d0f: fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000043c111: fisub word ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000046a23e: fisub word ptr [rsi - 6]; jmp qword ptr [rsi + 0x2e]; 
0x0000000000453d51: fisubr word ptr [rax - 0x297af0f0]; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x0000000000492b04: fld qword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x149; 
0x00000000004c2621: fld qword ptr [rsi + 0x32]; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x0000000000482832: fld st(5); std; xlatb; retf 0xfdc5; xlatb; ret; 
0x00000000004c4351: fldcw word ptr [rcx - 0x7f58d21b]; mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x0000000000433913: fldenv [rdi]; add al, byte ptr [rax]; lea rax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x000000000043a4b9: fldenv [rsi + 0xf]; je 0x3a50d; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000043a797: fldenv [rsi + 0xf]; je 0x3a7eb; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000043c491: fldenv [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043a3b1: fldenv [rsi + 0xf]; xlatb; ret; 
0x000000000049759d: fldpi; adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000049375d: fldpi; sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000477dac: fldpi; stosd dword ptr [rdi], eax; mov eax, 1; ret; 
0x00000000004938a4: fmul dword ptr [rax + 0x11]; rcr byte ptr [rbp + 0x5b], 1; ret; 
0x0000000000459665: fmul dword ptr [rax + 0x39]; ret; 
0x00000000004214d8: fmul dword ptr [rax - 0x77]; ret; 
0x000000000041cd81: fmul dword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000405147: fmul dword ptr [rax - 0x7d]; ret; 
0x0000000000498d74: fmul dword ptr [rbx + rcx*4 + 0x34]; ret 0xf41; 
0x00000000004863ba: fmul dword ptr [rcx + 0x21]; ret 0x394c; 
0x00000000004011eb: fmul dword ptr [rcx + 0x415d5bd8]; pop rsp; ret; 
0x000000000049c887: fmul dword ptr [rcx + rcx*4 - 0x1f]; mov rdx, qword ptr [r12]; mov esi, 1; mov edi, 1; call rax; 
0x000000000049c1d1: fmul dword ptr [rcx + rcx*4 - 0x1f]; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x0000000000401d9c: fmul dword ptr [rdi]; test dword ptr [rax + 1], eax; add byte ptr [rax], al; add rsp, 0x20; pop rbx; ret; 
0x000000000043eac1: fmul qword ptr [r9 + r9*4 + 0x57]; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004960c2: fmul qword ptr [rax - 0x77]; ret; 
0x000000000043eac2: fmul qword ptr [rcx + rcx*4 + 0x57]; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000433bc9: fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x00000000004480ef: fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x000000000046eebf: fmul qword ptr [rdi]; lea ebp, [rdx]; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000482830: fnsave dword ptr [rcx + rbx*8 - 0x3b]; std; xlatb; retf 0xfdc5; xlatb; ret; 
0x000000000043372f: fnsave dword ptr [rdi]; add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x000000000043c20f: fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c48f: fnstenv [rdx - 0x10f09927]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000041c7f9: fpatan; ret; 
0x00000000004ca1e5: fprem1; call qword ptr [rdi + 1]; 
0x00000000004ca1bd: fprem1; call qword ptr [rdi]; 
0x00000000004ca1d1: fprem1; call qword ptr [rsi]; 
0x00000000004aea65: fprem; call qword ptr [rcx]; 
0x000000000043c211: frstor dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000462ff4: fsqrt; jmp qword ptr [rsi + 0xf]; 
0x000000000045ed46: fst qword ptr [rdi]; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000004c2307: fstp dword ptr [rbx + 0x4a315a58]; ret 0x1b49; 
0x00000000004c60b4: fstp dword ptr [rcx - 3]; jmp rsp; 
0x00000000004c2680: fstp st(0); ret 0xde5d; 
0x00000000004cc574: fsub dword ptr [rbx]; add byte ptr [rax], cl; ret 0xfff8; 
0x0000000000458718: fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000004587a8: fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000458a58: fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x000000000043c511: fsub dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000450294: fsub dword ptr [rsi + 0xf]; xlatb; ret; 
0x000000000046a29b: fsub dword ptr [rsi]; add byte ptr [rax + rcx - 0xd], dh; ret; 
0x000000000043c311: fsub qword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000044f48c: fsub qword ptr [rsi + 0xf]; xlatb; ret; 
0x00000000004ccc74: fsubr dword ptr [rdx]; add byte ptr [rax], cl; in al, 0xf8; call qword ptr [rsi]; 
0x000000000040b003: fsubr qword ptr [rcx + rcx]; ret; 
0x0000000000458d54: fsubr st(3); ret 0xf66; 
0x0000000000401e1c: fucomi st(1); imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000489611: fucomi st(3); ret 0x1f0f; 
0x000000000043b0ce: fucomi st(4); vptest ymm5, ymm0; jae 0x3b370; xor eax, eax; vzeroupper; ret; 
0x000000000041e9a8: fucomip st(0); ret 0x10a; 
0x00000000004830e7: fucomip st(0); ret; 
0x000000000049a811: fucomip st(1); ret; 
0x000000000046dfde: hlt; add al, 0; add byte ptr [rcx - 0x7d], al; in al, dx; add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x00000000004c7286: hlt; call qword ptr [rax]; 
0x00000000004c7256: hlt; call qword ptr [rbx + 1]; 
0x00000000004c776a: hlt; call qword ptr [rcx]; 
0x00000000004c7106: hlt; call qword ptr [rdi]; 
0x00000000004c70de: hlt; call qword ptr [rdx]; 
0x00000000004c833a: hlt; call rax; 
0x00000000004c82ae: hlt; call rsp; 
0x00000000004aed09: hlt; clc; call rax; 
0x00000000004aecc9: hlt; clc; jmp qword ptr [rax - 0xb]; 
0x000000000045c888: hlt; jg 0x5c88d; add byte ptr [rcx], dh; sar byte ptr [rcx], cl; ret; 
0x00000000004c7366: hlt; jmp qword ptr [rax + 9]; 
0x00000000004c8452: hlt; jmp qword ptr [rax]; 
0x00000000004c7e4a: hlt; jmp qword ptr [rbp + 2]; 
0x00000000004c73b6: hlt; jmp qword ptr [rbx]; 
0x00000000004c74aa: hlt; jmp qword ptr [rcx + 2]; 
0x00000000004c84a6: hlt; jmp qword ptr [rdx + 0x36]; 
0x00000000004c71ba: hlt; jmp qword ptr [rsi + 1]; 
0x00000000004c70f2: hlt; jmp qword ptr [rsi]; 
0x00000000004c76b6: hlt; jmp rsi; 
0x00000000004cc09c: hlt; lodsb al, byte ptr [rsi]; clc; call qword ptr [rdx]; 
0x0000000000453318: hlt; mov byte ptr [rip + 0xc634900], 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004c670c: hlt; mov dl, 0xf3; call qword ptr [rcx]; 
0x0000000000443e1a: hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043eace: hlt; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000443e13: hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004581de: hlt; mov edi, edx; mov eax, r8d; syscall; 
0x000000000043ec27: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ec43: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000422b9c: hlt; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x00000000004946bb: hlt; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x0000000000455233: hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000004d0bcc: hlt; or bh, ah; call qword ptr [rdi + 1]; 
0x00000000004c5cf0: hlt; push rdi; std; jmp rsp; 
0x0000000000455237: hlt; sub eax, edx; ret; 
0x000000000046d100: hlt; syscall; 
0x00000000004b0090: hlt; test dl, bh; jmp qword ptr [rdi - 0x7a]; 
0x00000000004b0074: hlt; test dl, bh; jmp rcx; 
0x00000000004b0070: hlt; test dl, bh; push rsp; test dl, bh; jmp rcx; 
0x000000000043b518: hlt; xor al, 7; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000046d24c: idiv bh; call rax; 
0x00000000004ad10e: idiv bh; cmp al, 0x40; idiv bh; xor dword ptr [rax - 0xa], eax; jmp qword ptr [rsi]; 
0x00000000004a2b0a: idiv bh; cmpsb byte ptr [rsi], byte ptr [rdi]; ret 0xfff6; 
0x00000000004788f9: idiv bh; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff730; call rax; 
0x000000000046dbda: idiv bh; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff758; call qword ptr [rcx + 0x38]; 
0x00000000004788ef: idiv bh; dec dword ptr [rcx + rcx*4 - 0xa]; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x000000000046d3e4: idiv bh; dec dword ptr [rcx + rcx*4 - 2]; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000046d244: idiv bh; dec dword ptr [rcx - 0x2f42763f]; idiv bh; call rax; 
0x000000000046d3dd: idiv bh; inc dword ptr [rax + rcx*4 - 0x7b]; call 0x4d06d3de; mov esi, edi; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000046e494: idiv bh; inc dword ptr [rax]; add byte ptr [rax], al; add cl, ch; ret 0xfffa; 
0x00000000004a2746: idiv bh; int 0xf6; jmp qword ptr [rsi]; 
0x000000000046dfa6: idiv bh; jmp qword ptr [rax]; 
0x00000000004015a3: idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000416124: idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000004a323a: idiv bh; mov al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi]; 
0x00000000004a30ae: idiv bh; mov bl, 0xf6; call qword ptr [rsi]; 
0x00000000004a30aa: idiv bh; mov bl, 0xf6; ljmp [rsi]; mov bl, 0xf6; call qword ptr [rsi]; 
0x00000000004a2ffa: idiv bh; mov ch, 0xf6; jmp qword ptr [rsi]; 
0x00000000004a30f6: idiv bh; mov dl, 0xf6; jmp qword ptr [rsi]; 
0x00000000004a307a: idiv bh; out dx, al; mov bl, 0xf6; push qword ptr [rax]; test al, 0xf6; call rsi; 
0x00000000004a2aee: idiv bh; out dx, al; ret 0xfff6; 
0x00000000004a255a: idiv bh; out dx, al; sal esi, 1; call rsi; 
0x00000000004a30ee: idiv bh; outsb dx, byte ptr [rsi]; mov dl, 0xf6; call qword ptr [rsi - 0x4e]; 
0x00000000004a24e6: idiv bh; outsb dx, byte ptr [rsi]; sal esi, cl; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x2d]; 
0x00000000004a2b1e: idiv bh; pop rsi; ret 0xfff6; 
0x00000000004a1c52: idiv bh; rcr byte ptr [rbp - 0xa], 1; jmp rax; 
0x00000000004ad20e: idiv bh; sal eax, 0xf6; call rsp; 
0x00000000004a2582: idiv bh; sal esi, 1; call qword ptr [rsi]; 
0x00000000004a257e: idiv bh; sal esi, 1; ljmp [rsi]; sal esi, 1; call qword ptr [rsi]; 
0x00000000004a24f2: idiv bh; sal esi, cl; push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi]; 
0x00000000004a2a9e: idiv bh; scasb al, byte ptr [rdi]; ret; 
0x00000000004a2aaa: idiv bh; xchg eax, esi; ret; 
0x00000000004a30a6: idiv bh; xor byte ptr [rax - 0x4cb9000a], ch; idiv bh; mov bl, 0xf6; call qword ptr [rsi]; 
0x00000000004a30e6: idiv bh; xor byte ptr [rax - 0x4d79000a], ch; idiv bh; outsb dx, byte ptr [rsi]; mov dl, 0xf6; call qword ptr [rsi - 0x4e]; 
0x00000000004a273e: idiv bh; xor byte ptr [rax - 0x57cf000a], ch; idiv bh; int 0xf6; jmp qword ptr [rsi]; 
0x00000000004a2a96: idiv bh; xor byte ptr [rax - 0x57cf000a], ch; idiv bh; scasb al, byte ptr [rdi]; ret; 
0x00000000004a2aa2: idiv bh; xor byte ptr [rax - 0x57cf000a], ch; idiv bh; xchg eax, esi; ret; 
0x00000000004ad112: idiv bh; xor dword ptr [rax - 0xa], eax; jmp qword ptr [rsi]; 
0x00000000004d081d: idiv bl; call rdx; 
0x00000000004d0809: idiv bl; jmp qword ptr [rcx]; 
0x00000000004430d6: idiv byte ptr [rbp + 0x63490006]; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004c2617: idiv byte ptr [rbx]; jbe 0xc264e; movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x00000000004433d6: idiv byte ptr [rdx + 0x63490006]; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000045fec6: idiv byte ptr [rdx - 1]; cmovs eax, edx; ret; 
0x00000000004ad10d: idiv dil; cmp al, 0x40; idiv bh; xor dword ptr [rax - 0xa], eax; jmp qword ptr [rsi]; 
0x00000000004ad111: idiv dil; xor dword ptr [rax - 0xa], eax; jmp qword ptr [rsi]; 
0x000000000046d566: idiv edi; call qword ptr [rax]; 
0x0000000000479037: idiv edi; call qword ptr [rbx + 0xf]; 
0x000000000046d484: idiv edi; dec dword ptr [rax + 0x29]; bnd call qword ptr [rbx + 0x38]; 
0x000000000047899e: idiv edi; dec dword ptr [rax + 0x29]; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000046d44e: idiv edi; dec dword ptr [rax - 0x39]; ret 0x7c60; 
0x000000000042bebb: idiv edi; dec dword ptr [rax - 0x77]; bnd jmp 0x2bcce; mov qword ptr [rsp + 0x10], rdx; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000479f31: idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x00000000004795f5: idiv edi; dec dword ptr [rcx + rcx*4 - 0x16]; call qword ptr [rbx + 0x38]; 
0x00000000004795eb: idiv edi; dec dword ptr [rcx + rcx*4 - 0x1a]; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000047918d: idiv edi; inc dword ptr [rcx - 1]; push rbp; cmp byte ptr [rax + 0x39], cl; ret; 
0x0000000000479a2f: idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000042a56b: idiv edi; jmp qword ptr [rsi - 0x70]; 
0x000000000046bb61: idiv esi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000487ea7: imul al; fild dword ptr [rbp - 0x7cb70009]; ret; 
0x00000000004ccced: imul eax, dword ptr [rax], 0; and dh, ah; clc; call qword ptr [rax]; 
0x00000000004ccd1d: imul eax, dword ptr [rax], 0; and dh, ah; clc; jmp qword ptr [rcx]; 
0x00000000004ccd3d: imul eax, dword ptr [rax], 0; jo 0xccd28; clc; call qword ptr [rcx]; 
0x00000000004ccd05: imul eax, dword ptr [rax], 0; sbb dh, ah; clc; call qword ptr [rdx]; 
0x00000000004ccb85: imul eax, dword ptr [rax], 0xf8e35800; call qword ptr [rcx]; 
0x000000000042217f: imul eax, dword ptr [rbx], 0x538b4800; or byte ptr [rax + 0x2b], cl; push rbx; cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x0000000000453d91: imul eax, dword ptr [rcx], 0; add dh, dh; ret 0x7502; 
0x0000000000477872: imul eax, dword ptr [rcx], 0xc7480000; ret 0xffe0; 
0x0000000000447a0a: imul eax, dword ptr [rip + 0x487c5162], 0x62067111; push rcx; jl 0x47a5f; adc dword ptr [rcx + 7], edi; ret; 
0x00000000004a3e42: imul eax, dword ptr [rsi], 0x6690669; imul eax, dword ptr [rsi], 0x6690669; imul eax, dword ptr [rsi], 0x6690669; imul eax, dword ptr [rsi], 0x6690669; imul eax, dword ptr [rsi], 0x830669; ret; 
0x00000000004a3e48: imul eax, dword ptr [rsi], 0x6690669; imul eax, dword ptr [rsi], 0x6690669; imul eax, dword ptr [rsi], 0x6690669; imul eax, dword ptr [rsi], 0x830669; ret; 
0x00000000004a3e4e: imul eax, dword ptr [rsi], 0x6690669; imul eax, dword ptr [rsi], 0x6690669; imul eax, dword ptr [rsi], 0x830669; ret; 
0x00000000004a3e54: imul eax, dword ptr [rsi], 0x6690669; imul eax, dword ptr [rsi], 0x830669; ret; 
0x00000000004a3e5a: imul eax, dword ptr [rsi], 0x830669; ret; 
0x0000000000406464: imul eax, eax, 0xc2b2ae35; mov edx, eax; shr edx, 0x10; xor eax, edx; ret; 
0x00000000004532a1: imul eax, edi, 5; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000468887: imul eax; ret; 
0x0000000000470531: imul ebp, dword ptr [rdi], 0x26; add byte ptr [rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x00000000004991f0: imul ecx, dword ptr [rax], 0x74; jl 0x99180; adc byte ptr [r13 - 0x267bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x000000000043dde3: imul ecx, dword ptr [rip + 0x63490007], 0x8d499314; adc al, 0x13; jmp rdx; 
0x00000000004ae911: imul edi, eax, 0xf86a20ff; inc dword ptr [rax + 0x6b]; clc; jmp qword ptr [rax + 0x6c]; 
0x00000000004478a3: imul edi, ebp, 0x487c5162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000447669: imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000401e1e: imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000413654: imul edi, edx, -1; dec dword ptr [rax - 0x7d]; ret; 
0x00000000004275ee: imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x000000000045320c: imul esp, dword ptr [rsi + 0xf], 0x74; ret 0xff3; 
0x0000000000440ba3: imul esp, ecx, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004c7280: in al, 0x10; add byte ptr [rax], al; sbb al, 0xb; hlt; call qword ptr [rax]; 
0x0000000000428416: in al, 0x2a; add bl, dh; ret; 
0x000000000043eac6: in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000040c803: in al, 0x54; or dword ptr [rax], eax; ret; 
0x00000000004d171c: in al, 0x60; cld; jmp qword ptr [rdx]; 
0x000000000041bfe9: in al, 0x74; mov esp, 0x24448b48; sub byte ptr [rax - 0x7d], cl; ret; 
0x000000000044ff1c: in al, 0x74; or dword ptr [rax - 1], ecx; ret 0xc148; 
0x00000000004af758: in al, 0x77; stc; call qword ptr [rdi + rsi*2 - 7]; call rsp; 
0x000000000040a33b: in al, 0x79; or dword ptr [rax], eax; ret; 
0x000000000045b743: in al, 0x80; cli; cmp eax, 0x83497174; ret; 
0x00000000004cdbfc: in al, 0x9d; stc; call qword ptr [rdx]; 
0x000000000045ed44: in al, 0xe8; fst qword ptr [rdi]; cli; jmp qword ptr [rsi + 0xf]; 
0x0000000000443dfa: in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000456eae: in al, 0xf3; ret; 
0x00000000004aecd9: in al, 0xf8; call qword ptr [rax]; 
0x00000000004aecd9: in al, 0xf8; call qword ptr [rax]; out 0xf8, al; jmp qword ptr [rax - 0x19]; 
0x00000000004ccc79: in al, 0xf8; call qword ptr [rsi]; 
0x000000000046db40: in al, 0xf; lahf; ret; 
0x000000000045e3c7: in al, 0xff; dec dword ptr [rcx + rcx*4 - 1]; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000047a684: in al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004c70dc: in al, 5; hlt; call qword ptr [rdx]; 
0x0000000000440866: in al, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042d310: in al, dx; adc al, 8; add byte ptr [rcx], dh; call qword ptr [rax + 0x31]; 
0x000000000045ec6a: in al, dx; add byte ptr [rax], 0; add al, ch; in al, dx; ret; 
0x000000000045eccc: in al, dx; add byte ptr [rax], 0; add al, ch; pop rdx; ret; 
0x0000000000431394: in al, dx; add byte ptr [rax], 0; add al, ch; ret 0x29c; 
0x0000000000429494: in al, dx; add byte ptr [rax], 0; add al, ch; ret 0x31b; 
0x000000000042ac93: in al, dx; add byte ptr [rax], 0; add al, ch; ret; 
0x000000000048eea7: in al, dx; add byte ptr [rax], dl; add byte ptr [rax], al; mov rbx, rsp; mov rsi, rbx; syscall; 
0x00000000004c8888: in al, dx; add byte ptr es:[rax], al; push rdx; cmc; call qword ptr [rdx]; 
0x000000000046dfe4: in al, dx; add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x000000000046de21: in al, dx; add dword ptr [rbp - 0x7b], eax; in al, 0xf; lahf; ret; 
0x00000000004be6b0: in al, dx; add esp, edi; ljmp [rdx + rax]; cld; jmp rsp; 
0x00000000004aecb1: in al, dx; clc; inc dword ptr [rax - 0x2f000713]; out dx, al; clc; jmp qword ptr [rax]; 
0x00000000004d13d4: in al, dx; cmp edi, esp; call qword ptr [rax]; 
0x00000000004abbdc: in al, dx; fdivr st(7); call rsp; 
0x000000000046d243: in al, dx; idiv bh; dec dword ptr [rcx - 0x2f42763f]; idiv bh; call rax; 
0x00000000004b1dd4: in al, dx; jge 0xb1dd2; call rsp; 
0x00000000004441f0: in al, dx; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000423e01: in al, dx; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000045b103: in al, dx; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x5b110; ret; 
0x000000000043eaca: in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004441fa: in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000049d457: in al, dx; or al, ch; ret 0xf7f4; 
0x0000000000401952: in al, dx; or al, ch; test dword ptr [rdx], 0xc0850000; js 0x1968; add rsp, 8; ret; 
0x0000000000432237: in al, dx; or al, ch; xchg eax, edx; movsxd rdi, edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000401157: in al, dx; or al, ch; xor al, byte ptr [rcx - 0x7ab80000]; sal byte ptr [rbp + rcx - 0x75], 0; add rsp, 8; ret; 
0x0000000000407a0b: in al, dx; or byte ptr [rax + 0x63], cl; add al, 0xb2; add rax, rdx; jmp rax; 
0x0000000000401f54: in al, dx; or byte ptr [rax + 0x63], cl; add al, 0xba; add rax, rdx; jmp rax; 
0x00000000004038f7: in al, dx; or byte ptr [rax - 0x7b], cl; div byte ptr [rbp + rcx - 0x75]; or byte ptr [rbx + 0x518d0c46], r9b; add bh, byte ptr [rcx]; ret 0xd77; 
0x000000000042e11f: in al, dx; or byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x00000000004399c4: in al, dx; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042a649: in al, dx; or byte ptr [rcx], dh; call qword ptr [rbx + 0x50]; 
0x0000000000429d5a: in al, dx; or byte ptr [rcx], dh; call qword ptr [rsi + 0x50]; 
0x00000000004c7254: in al, dx; or esp, esi; call qword ptr [rbx + 1]; 
0x00000000004cc188: in al, dx; pop rdi; add byte ptr [rax], al; scasd eax, dword ptr [rdi]; clc; call qword ptr [rcx + 1]; 
0x000000000040f879: in al, dx; ret; 
0x000000000049d0f9: in al, dx; sbb byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret; 
0x0000000000499b74: in al, dx; sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000004af9e9: in al, dx; stc; call rax; 
0x00000000004af9e9: in al, dx; stc; call rax; in eax, dx; stc; jmp qword ptr [rax]; 
0x000000000043b0cf: in al, dx; vptest ymm5, ymm0; jae 0x3b370; xor eax, eax; vzeroupper; ret; 
0x0000000000458476: in eax, 0; add byte ptr [rax], al; syscall; 
0x000000000049acfc: in eax, 0x23; add byte ptr [rax], cl; mov byte ptr [rip + 0x23e509], 8; ret; 
0x000000000049acf5: in eax, 0x23; add byte ptr [rax], cl; mov byte ptr [rip + 0x23e50f], 8; mov byte ptr [rip + 0x23e509], 8; ret; 
0x000000000049acee: in eax, 0x23; add byte ptr [rax], cl; mov byte ptr [rip + 0x23e515], 8; mov byte ptr [rip + 0x23e50f], 8; mov byte ptr [rip + 0x23e509], 8; ret; 
0x000000000049ad03: in eax, 0x23; add byte ptr [rax], cl; ret; 
0x00000000004c24a3: in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x000000000045a872: in eax, 0x27; add byte ptr [rax + 0x39], cl; ret; 
0x00000000004c4353: in eax, 0x2d; cmpsd dword ptr [rsi], dword ptr [rdi]; xor byte ptr [rsi + 0x4ce2e5dd], 0x67; add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x0000000000493b62: in eax, 0x48; mov eax, esi; ret; 
0x000000000043e8d6: in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004c1739: in eax, 0x6a; mov eax, 0x45155e93; ret 0x591c; 
0x000000000047beb7: in eax, 0x81; and eax, 0x48b4800; clc; jmp rax; 
0x000000000049b63a: in eax, 0x83; call qword ptr [rcx]; 
0x00000000004bf83c: in eax, 0xd1; cld; call qword ptr [rbx - 0x38]; 
0x00000000004bf894: in eax, 0xd1; cld; dec dword ptr [rax - 0x38]; cld; jmp rax; 
0x00000000004c4359: in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x0000000000457369: in eax, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x0000000000443e7a: in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000483b53: in eax, 0xf; je 0x83b70; add rax, 2; ret; 
0x000000000047555b: in eax, 0xff; jmp qword ptr [rsi - 0x70]; 
0x00000000004c3821: in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x0000000000440716: in eax, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000476338: in eax, dx; add al, 0x84; ror byte ptr [rdi], 0x84; ret 0x17; 
0x00000000004794c8: in eax, dx; add dword ptr [rax - 0x91743], eax; jmp qword ptr [rax]; 
0x00000000004096be: in eax, dx; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000490ebb: in eax, dx; and dword ptr [rax + rax], 0; add rsp, 8; ret; 
0x00000000004aecb5: in eax, dx; clc; call rax; 
0x00000000004aecb5: in eax, dx; clc; call rax; out dx, al; clc; jmp qword ptr [rax]; 
0x00000000004abb18: in eax, dx; fdivr st(7); call qword ptr [rcx]; 
0x000000000049f36f: in eax, dx; jne 0x9f348; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049f5c2: in eax, dx; jne 0x9f5a8; pop rbx; pop rbp; pop r12; ret; 
0x00000000004a017c: in eax, dx; jne 0xa0160; pop rbx; pop rbp; pop r12; ret; 
0x0000000000444270: in eax, dx; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000455a52: in eax, dx; lea rax, [rcx - 1]; ret; 
0x000000000043e8da: in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000044427a: in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000455832: in eax, dx; ret; 
0x000000000045389f: in eax, dx; rol dword ptr [rip + 0xc634900], 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043cd5f: in eax, dx; sbb eax, 0x63490007; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004af9ed: in eax, dx; stc; jmp qword ptr [rax]; 
0x0000000000455ba2: in eax, dx; sub rax, 1; ret; 
0x00000000004078c2: in eax, dx; xor eax, eax; ret; 
0x000000000048cbed: in eax, dx; xor esi, esi; lea rdi, [rip + 0x32d83]; mov eax, 0x15; syscall; 
0x000000000040916e: inc byte ptr [rax]; add byte ptr [rax], al; mov rax, 0x6d2e60; ret; 
0x0000000000459b1c: inc byte ptr [rbp - 0x60f0be13]; ret 0x8545; 
0x000000000047e9a8: inc byte ptr [rbx]; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000047ac92: inc byte ptr [rdx]; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000048e618: inc dword ptr [r9 + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x00000000004aee0f: inc dword ptr [rax + 0x20]; stc; inc dword ptr [rax]; and bh, cl; call rax; 
0x00000000004aedf3: inc dword ptr [rax + 0x22]; stc; jmp qword ptr [rax]; 
0x00000000004aed53: inc dword ptr [rax + 0x23]; stc; jmp qword ptr [rax]; 
0x00000000004aed37: inc dword ptr [rax + 0x25]; stc; jmp qword ptr [rax]; 
0x00000000004aeddb: inc dword ptr [rax + 0x26]; stc; jmp qword ptr [rax]; 
0x00000000004afa17: inc dword ptr [rax + 0x39]; cli; call qword ptr [rax + 0x39]; 
0x00000000004afa17: inc dword ptr [rax + 0x39]; cli; call qword ptr [rax + 0x39]; cli; jmp qword ptr [rax + 0x39]; 
0x00000000004ae81b: inc dword ptr [rax + 0x3f]; clc; call rax; 
0x00000000004afaab: inc dword ptr [rax + 0x3f]; cli; call qword ptr [rax + 0x3f]; 
0x00000000004afaab: inc dword ptr [rax + 0x3f]; cli; call qword ptr [rax + 0x3f]; cli; jmp qword ptr [rax + 0x3f]; 
0x00000000004afad3: inc dword ptr [rax + 0x40]; cli; jmp qword ptr [rax + 0x40]; 
0x00000000004aedef: inc dword ptr [rax + 0x40fff920]; and bh, cl; jmp qword ptr [rax]; 
0x00000000004aed4f: inc dword ptr [rax + 0x40fff921]; and edi, ecx; jmp qword ptr [rax]; 
0x00000000004afaf3: inc dword ptr [rax + 0x41]; cli; jmp qword ptr [rax + 0x41]; 
0x00000000004af0ef: inc dword ptr [rax + 0x58]; stc; call rax; 
0x00000000004af0ef: inc dword ptr [rax + 0x58]; stc; call rax; push rdi; stc; jmp qword ptr [rax + 0x57]; 
0x00000000004b092b: inc dword ptr [rax + 0x58fffab5]; mov ch, 0xfa; push qword ptr [rax]; mov ch, 0xfa; call qword ptr [rax]; 
0x00000000004aeed7: inc dword ptr [rax + 0x5b]; stc; call rax; 
0x00000000004aeed7: inc dword ptr [rax + 0x5b]; stc; call rax; pop rdx; stc; jmp qword ptr [rax + 0x5a]; 
0x00000000004aedd3: inc dword ptr [rax + 0x60fff922]; and al, 0xf9; inc dword ptr [rax + 0x26]; stc; jmp qword ptr [rax]; 
0x00000000004aee37: inc dword ptr [rax + 0x60fff923]; and eax, 0x2750fff9; stc; jmp qword ptr [rax]; 
0x00000000004ae917: inc dword ptr [rax + 0x6b]; clc; jmp qword ptr [rax + 0x6c]; 
0x00000000004ae9d3: inc dword ptr [rax + 0x70fff8ab]; lodsb al, byte ptr [rsi]; clc; jmp qword ptr [rax - 0x53]; 
0x00000000004ae937: inc dword ptr [rax + 0x74]; clc; jmp qword ptr [rax + 0x75]; 
0x000000000049a2c3: inc dword ptr [rax + 0x74]; sub dword ptr [rax - 0x80], eax; call qword ptr [rax + 0x74]; 
0x00000000004af5e7: inc dword ptr [rax + 0x7f]; stc; call rax; 
0x00000000004af5e7: inc dword ptr [rax + 0x7f]; stc; call rax; jle 0xaf5e8; jmp qword ptr [rax + 0x7e]; 
0x00000000004af13b: inc dword ptr [rax + 0xfff94d]; stc; push qword ptr [rax + 0x4c]; stc; jmp rax; 
0x000000000046d3df: inc dword ptr [rax + rcx*4 - 0x7b]; call 0x4d06d3de; mov esi, edi; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x0000000000474d70: inc dword ptr [rax - 0x15343]; jmp qword ptr [rdi + 0x74]; 
0x00000000004750f2: inc dword ptr [rax - 0x15343]; jmp qword ptr [rdi + 0x75]; 
0x00000000004af9af: inc dword ptr [rax - 0x23]; stc; jmp rax; 
0x00000000004aeb33: inc dword ptr [rax - 0x25]; clc; call rax; 
0x00000000004af9e7: inc dword ptr [rax - 0x2f000614]; in eax, dx; stc; jmp qword ptr [rax]; 
0x00000000004aee7f: inc dword ptr [rax - 0x2f0006e7]; sbb bh, cl; jmp qword ptr [rax]; 
0x00000000004aee93: inc dword ptr [rax - 0x2f0006f5]; or al, 0xf9; jmp qword ptr [rax]; 
0x00000000004aecb3: inc dword ptr [rax - 0x2f000713]; out dx, al; clc; jmp qword ptr [rax]; 
0x00000000004af98f: inc dword ptr [rax - 0x30]; stc; jmp rax; 
0x00000000004ae9e3: inc dword ptr [rax - 0x51]; clc; push qword ptr [rax]; mov al, 0xf8; jmp qword ptr [rax]; 
0x00000000004af97b: inc dword ptr [rax - 0x59]; stc; inc eax; leave; stc; jmp qword ptr [rax - 0x35]; 
0x00000000004afafb: inc dword ptr [rax - 0x5f0005bf]; cli; inc eax; cli; jmp rax; 
0x00000000004afadb: inc dword ptr [rax - 0x5f0005c0]; cli; inc eax; cli; jmp rax; 
0x00000000004af34f: inc dword ptr [rax - 0x5f0006d3]; stc; jmp qword ptr [rax]; 
0x00000000004ae93f: inc dword ptr [rax - 0x5f00078a]; ja 0xae93f; inc eax; js 0xae943; jmp qword ptr [rax + 0x68]; 
0x00000000004af91f: inc dword ptr [rax - 0x69]; stc; call qword ptr [rax - 0x67]; 
0x00000000004af91f: inc dword ptr [rax - 0x69]; stc; call qword ptr [rax - 0x67]; stc; jmp qword ptr [rax - 0x65]; 
0x0000000000479c1d: inc dword ptr [rax - 0x91743]; jmp qword ptr [rax]; 
0x000000000046e4d5: inc dword ptr [rax - 0x93b43]; jmp qword ptr [rax]; 
0x00000000004ae98f: inc dword ptr [rax - 0xf00076d]; xchg eax, esp; clc; jmp qword ptr [rax - 0x6a]; 
0x00000000004aec7f: inc dword ptr [rax - 1]; clc; call qword ptr [rax]; 
0x00000000004aeb57: inc dword ptr [rax - 3]; clc; jmp qword ptr [rax]; 
0x00000000004b01a7: inc dword ptr [rax*4 - 0x7afb0006]; cli; call qword ptr [rbx - 0x7a]; 
0x0000000000401f01: inc dword ptr [rax]; add al, al; jg 0x1f7b; or bl, dh; ret; 
0x000000000047aee7: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0x258dad; jmp rax; 
0x000000000048de3a: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rcx - 0x26b7b], cl; jmp qword ptr [rsi + 0x41]; 
0x0000000000472ab1: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rdi + rcx - 0x4a], al; or al, 0x89; ret 0xc689; 
0x000000000046e496: inc dword ptr [rax]; add byte ptr [rax], al; add cl, ch; ret 0xfffa; 
0x0000000000479dd7: inc dword ptr [rax]; add byte ptr [rax], al; add dh, al; test eax, ebp; idiv bh; jmp qword ptr [rax]; 
0x000000000043ca21: inc dword ptr [rax]; add byte ptr [rax], al; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000045730f: inc dword ptr [rax]; add byte ptr [rax], al; cmove rax, rcx; pop rbx; ret; 
0x000000000043ca27: inc dword ptr [rax]; add byte ptr [rax], al; sub eax, ecx; ret; 
0x00000000004aee13: inc dword ptr [rax]; and bh, cl; call rax; 
0x00000000004aee2f: inc dword ptr [rax]; and cl, bh; push qword ptr [rax - 0x7f0006df]; and edi, ecx; jmp qword ptr [rax + 0x25]; 
0x00000000004afac7: inc dword ptr [rax]; cli; jmp qword ptr [rax]; 
0x00000000004afa47: inc dword ptr [rax]; cmp bh, dl; call qword ptr [rax]; 
0x00000000004afa47: inc dword ptr [rax]; cmp bh, dl; call qword ptr [rax]; cmp bh, dl; jmp qword ptr [rax]; 
0x00000000004af5d7: inc dword ptr [rax]; cmp ecx, 0xf98090ff; jmp qword ptr [rax]; 
0x00000000004ae90f: inc dword ptr [rax]; imul edi, eax, 0xf86a20ff; inc dword ptr [rax + 0x6b]; clc; jmp qword ptr [rax + 0x6c]; 
0x00000000004ae92f: inc dword ptr [rax]; jb 0xae92b; jmp qword ptr [rax]; 
0x00000000004af647: inc dword ptr [rax]; jb 0xaf644; push qword ptr [rax + 0x71]; stc; jmp rsi; 
0x00000000004af84b: inc dword ptr [rax]; jno 0xaf848; jmp qword ptr [rax + 0x53]; 
0x00000000004ae9af: inc dword ptr [rax]; lahf; clc; push qword ptr [rax - 0x60]; clc; jmp rax; 
0x00000000004ae9f3: inc dword ptr [rax]; mov bl, 0xf8; push rax; mov bl, 0xf8; jmp rax; 
0x00000000004aedfb: inc dword ptr [rax]; stc; jmp rax; 
0x00000000004af343: inc dword ptr [rax]; stc; push qword ptr [rax + 0x4b]; stc; jmp rax; 
0x00000000004af13f: inc dword ptr [rax]; stc; push qword ptr [rax + 0x4c]; stc; jmp rax; 
0x00000000004a188a: inc dword ptr [rax]; sub rsp, 8; add rsp, 8; ret; 
0x0000000000464334: inc dword ptr [rbp + 0x31]; fisttp dword ptr [rcx - 0x7d]; ret; 
0x000000000048cbea: inc dword ptr [rbp + 0x31]; in eax, dx; xor esi, esi; lea rdi, [rip + 0x32d83]; mov eax, 0x15; syscall; 
0x0000000000407e23: inc dword ptr [rbp + 0x480878c0]; add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000493d70: inc dword ptr [rbp + 0x480e74c0]; lea eax, [rip + 0x245364]; mov qword ptr [rip + 0x245345], rax; add rsp, 8; ret; 
0x0000000000401238: inc dword ptr [rbp + 0x5b0b74d2]; pop rbp; pop r12; ret; 
0x000000000048b08f: inc dword ptr [rbp + 0x5b0e78c0]; ret; 
0x000000000046e662: inc dword ptr [rbp + 0x79850fc9]; add eax, dword ptr [rax]; add byte ptr [rcx - 0x77], al; ret; 
0x000000000040ccd9: inc dword ptr [rbp + 0xb8c0]; add byte ptr [rax], al; cmovne rbx, rax; mov rax, rbx; pop rbx; ret; 
0x000000000049b93c: inc dword ptr [rbp + 0xf]; mov dh, 0xdb; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x0000000000497812: inc dword ptr [rbp - 0x3f6af040]; add rsp, 8; movzx eax, al; neg eax; ret; 
0x00000000004919ec: inc dword ptr [rbp - 0x76b08a40]; ret; 
0x0000000000411570: inc dword ptr [rbp - 0x7aa48740]; ror byte ptr [rdi], 0x84; ret; 
0x0000000000420fde: inc dword ptr [rbx + 0x178920ca]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000400947: inc dword ptr [rbx + 0x438d01c1]; call rbx; 
0x0000000000424a46: inc dword ptr [rbx + 0xf8920c9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000004c5d1f: inc dword ptr [rbx + rbx*2]; std; call rsp; 
0x0000000000479f2c: inc dword ptr [rbx + rcx*4 - 0x63]; idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x00000000004b090f: inc dword ptr [rbx + rsi*4 - 6]; inc dword ptr [rbx + rsi*4 - 6]; inc dword ptr [rbx + rsi*4 - 6]; inc dword ptr [rbx + rsi*4 - 6]; jmp rax; 
0x00000000004b0913: inc dword ptr [rbx + rsi*4 - 6]; inc dword ptr [rbx + rsi*4 - 6]; inc dword ptr [rbx + rsi*4 - 6]; jmp rax; 
0x00000000004b0917: inc dword ptr [rbx + rsi*4 - 6]; inc dword ptr [rbx + rsi*4 - 6]; jmp rax; 
0x00000000004b091b: inc dword ptr [rbx + rsi*4 - 6]; jmp rax; 
0x000000000041c1cb: inc dword ptr [rbx - 0x2f7cfe08]; dec dword ptr [rax - 0x7d]; ret; 
0x000000000049d669: inc dword ptr [rbx - 0x38b7f808]; ret 0xffff; 
0x0000000000468f00: inc dword ptr [rbx - 0x76be0008]; ret 0x840f; 
0x000000000046530b: inc dword ptr [rbx - 0x7af0f808]; xchg eax, esi; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x000000000049b863: inc dword ptr [rbx - 0x7bf0bf1e]; ret; 
0x000000000042da3e: inc dword ptr [rbx - 0x7bf0fe1a]; pop rax; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4c07; 
0x000000000046e454: inc dword ptr [rbx - 0x8f743]; call qword ptr [rax]; 
0x0000000000474d8c: inc dword ptr [rbx - 0x9b43]; jmp qword ptr [rsi + 0x75]; 
0x00000000004573cd: inc dword ptr [rbx]; div ecx; pop rbx; mov eax, eax; ret; 
0x00000000004a93e7: inc dword ptr [rbx]; fdivr st(7); lcall [rcx + 0x3000001]; fdivr st(7); jmp rdx; 
0x000000000045733b: inc dword ptr [rbx]; pop rbx; ret; 
0x0000000000482f9c: inc dword ptr [rcx + 0x1000fa]; add byte ptr [rax - 0x73], cl; adc eax, 0xfffd40c6; cmove rax, rdx; ret; 
0x000000000048e619: inc dword ptr [rcx + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x000000000046f822: inc dword ptr [rcx + 0x29]; ret 0x8545; 
0x000000000046eebc: inc dword ptr [rcx + 0x39]; fmul qword ptr [rdi]; lea ebp, [rdx]; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x00000000004c60db: inc dword ptr [rcx + 0x5a]; std; call qword ptr [rdx + rbx*2 - 3]; jmp qword ptr [rdi + 0x5a]; 
0x0000000000490352: inc dword ptr [rcx + rbp - 0x40]; ret; 
0x0000000000421acb: inc dword ptr [rcx + rcx*4 - 0x18]; syscall; 
0x00000000004aea7f: inc dword ptr [rcx - 0x23]; clc; call rcx; 
0x00000000004c60af: inc dword ptr [rcx - 0x260002ac]; pop rcx; std; jmp rsp; 
0x00000000004aea53: inc dword ptr [rcx - 0x2a]; clc; call qword ptr [rcx]; 
0x0000000000464ad6: inc dword ptr [rcx - 0x77]; ret 0x5be9; 
0x0000000000468f03: inc dword ptr [rcx - 0x77]; ret 0x840f; 
0x00000000004617ee: inc dword ptr [rcx - 0x77]; ret; 
0x000000000046de1e: inc dword ptr [rcx - 0x7d]; in al, dx; add dword ptr [rbp - 0x7b], eax; in al, 0xf; lahf; ret; 
0x00000000004a7d3b: inc dword ptr [rcx - 0x7e000028]; fdivr st(7); jmp qword ptr [rbx + 1]; 
0x000000000047918f: inc dword ptr [rcx - 1]; push rbp; cmp byte ptr [rax + 0x39], cl; ret; 
0x0000000000478d6c: inc dword ptr [rcx - 5]; jg 0x78d83; test byte ptr [rip - 0x7c000003], dl; ret; 
0x000000000047a1e4: inc dword ptr [rcx - 5]; jg 0x7a1fb; test byte ptr [rbp - 0x7c000018], bl; ret; 
0x000000000047a2e1: inc dword ptr [rcx - 5]; jg 0x7a2f8; test byte ptr [rax - 0x7c000019], ah; ret; 
0x000000000046e25c: inc dword ptr [rcx]; add byte ptr [rax], al; add bh, al; test dword ptr [rax], ecx; idiv edi; call qword ptr [rax]; 
0x000000000047a5e1: inc dword ptr [rcx]; add byte ptr [rax], al; add dh, al; test eax, ebp; idiv bh; jmp qword ptr [rax]; 
0x00000000004068a6: inc dword ptr [rcx]; ret; 
0x00000000004b013f: inc dword ptr [rdx + 0x32fffa85]; test edx, edi; lcall [rbp - 0x7a]; cli; jmp rcx; 
0x00000000004aefc3: inc dword ptr [rdx + 0x56]; stc; call rdx; 
0x00000000004aefc3: inc dword ptr [rdx + 0x56]; stc; call rdx; push rbp; stc; jmp qword ptr [rdx + 0x55]; 
0x00000000004af6cb: inc dword ptr [rdx + 0x71]; stc; call rdx; 
0x00000000004af4bb: inc dword ptr [rdx + 0x7d]; stc; call rdx; 
0x00000000004af4bb: inc dword ptr [rdx + 0x7d]; stc; call rdx; jl 0xaf4bc; jmp qword ptr [rdx + 0x7c]; 
0x00000000004a94b3: inc dword ptr [rdx]; fdivr st(7); lcall [rdx + 0x2000001]; fdivr st(7); call qword ptr [rsi]; 
0x00000000004afbcb: inc dword ptr [rip - 0x1000588]; ja 0xafbcd; call qword ptr [rbx]; 
0x000000000044ec4d: inc dword ptr [rip - 0x7cb80000]; ret 0x4910; 
0x00000000004aef1f: inc dword ptr [rsi + 0x5a]; stc; call rsi; 
0x00000000004aef1f: inc dword ptr [rsi + 0x5a]; stc; call rsi; pop rcx; stc; jmp qword ptr [rsi + 0x59]; 
0x00000000004a30eb: inc dword ptr [rsi + 0x6efff6b2]; mov dl, 0xf6; call qword ptr [rsi - 0x4e]; 
0x00000000004af40f: inc dword ptr [rsi + 0x7b]; stc; push qword ptr [rsi + 0x46fff981]; cmp ecx, 0xf980d6ff; jmp qword ptr [rsi - 0x80]; 
0x00000000004a257f: inc dword ptr [rsi - 0x2f]; idiv bh; sal esi, 1; call qword ptr [rsi]; 
0x00000000004a30ab: inc dword ptr [rsi - 0x4d]; idiv bh; mov bl, 0xf6; call qword ptr [rsi]; 
0x00000000004b002b: inc dword ptr [rsi - 0x7a]; cli; ljmp [rsi - 0x7b]; cli; jmp rcx; 
0x00000000004af417: inc dword ptr [rsi - 0x7f]; stc; call rsi; 
0x000000000049d442: inc dword ptr [rsi*2 + 0x8b80f]; add byte ptr [rax], al; ret; 
0x00000000004aaf1b: inc dword ptr [rsi]; fdivr st(7); jmp qword ptr [rdi + 0x6000001]; 
0x00000000004a2ae7: inc dword ptr [rsi]; ret; 
0x00000000004af583: inc dword ptr [rsp + rdi*2 - 7]; call rsp; 
0x00000000004aeea3: inc eax; adc cl, bh; call qword ptr [rax]; 
0x00000000004aeea3: inc eax; adc cl, bh; call qword ptr [rax]; adc bh, cl; jmp qword ptr [rax + 0x13]; 
0x00000000004aad43: inc eax; add byte ptr [rax], al; add bl, dl; fdivr st(7); call rdx; 
0x0000000000455c6a: inc eax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000004aecc3: inc eax; clc; call qword ptr [rax]; 
0x00000000004aecc3: inc eax; clc; call qword ptr [rax]; hlt; clc; jmp qword ptr [rax - 0xb]; 
0x00000000004afa8f: inc eax; cli; call rax; 
0x00000000004afa8f: inc eax; cli; call rax; cli; jmp rax; 
0x00000000004afae3: inc eax; cli; jmp rax; 
0x00000000004afa37: inc eax; cmp edx, edi; call rax; 
0x00000000004afa37: inc eax; cmp edx, edi; call rax; cmp edx, edi; jmp rax; 
0x00000000004aecd7: inc eax; in al, 0xf8; call qword ptr [rax]; 
0x00000000004aecd7: inc eax; in al, 0xf8; call qword ptr [rax]; out 0xf8, al; jmp qword ptr [rax - 0x19]; 
0x0000000000455c67: inc eax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000455c64: inc eax; inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000004af9f7: inc eax; int1; stc; call qword ptr [rax]; 
0x00000000004af9f7: inc eax; int1; stc; call qword ptr [rax]; stc; jmp qword ptr [rax - 0xc]; 
0x00000000004afb8f: inc eax; ja 0xafb8d; jmp rax; 
0x00000000004af3ef: inc eax; jle 0xaf3ec; call qword ptr [rax + 0x7e]; 
0x00000000004af3ef: inc eax; jle 0xaf3ec; call qword ptr [rax + 0x7e]; stc; jmp rax; 
0x00000000004af607: inc eax; jnp 0xaf604; call qword ptr [rax + 0x7b]; 
0x00000000004ae947: inc eax; js 0xae943; jmp qword ptr [rax + 0x68]; 
0x00000000004af97f: inc eax; leave; stc; jmp qword ptr [rax - 0x35]; 
0x00000000004af96b: inc eax; mov esi, 0xc0c0fff9; stc; inc eax; ret 0xfff9; 
0x00000000004ae927: inc eax; outsd dx, dword ptr [rsi]; clc; jmp rax; 
0x00000000004aeef7: inc eax; push rdi; stc; call qword ptr [rax + 0x57]; 
0x00000000004aeef7: inc eax; push rdi; stc; call qword ptr [rax + 0x57]; stc; jmp rax; 
0x00000000004af973: inc eax; ret 0xfff9; 
0x00000000004b01eb: inc eax; test edx, edi; jmp rcx; 
0x00000000004ab20b: inc ebp; add byte ptr [rax], al; add dh, ah; fdivr st(7); call rdi; 
0x000000000043b37c: inc ebp; std; xlatb; ret 0xe883; 
0x00000000004a6653: inc ebx; fdivr st(7); call rdi; 
0x00000000004a6677: inc ebx; fdivr st(7); inc ebx; fdivr st(7); call rdi; 
0x0000000000458b7a: inc ebx; nop dword ptr [rax]; mov eax, 8; syscall; 
0x0000000000458e28: inc ebx; nop word ptr [rax + rax]; mov eax, 0x20; syscall; 
0x000000000045989f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x000000000048484f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x000000000045986f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000045afb2: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x63; syscall; 
0x0000000000496498: inc edi; sbb byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000474aa7: inc edi; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x00000000004a9d53: inc edx; add byte ptr [rax], al; add dl, ah; fdivr st(7); call rsp; 
0x00000000004aafa3: inc edx; fdivr st(7); call rsi; 
0x00000000004aafc7: inc edx; fdivr st(7); inc edx; fdivr st(7); call rsi; 
0x00000000004aefa3: inc edx; pop rcx; stc; call qword ptr [rdx + 0x59]; 
0x00000000004aefa3: inc edx; pop rcx; stc; call qword ptr [rdx + 0x59]; stc; jmp rdx; 
0x00000000004ab40f: inc esi; add byte ptr [rax], al; add bh, dl; fdivr st(7); call qword ptr [rbx + 0x11]; 
0x00000000004ab3e7: inc esi; add byte ptr [rax], al; add bh, dl; fdivr st(7); call rdi; 
0x00000000004af437: inc esi; jge 0xaf434; call qword ptr [rsi + 0x7d]; 
0x00000000004af437: inc esi; jge 0xaf434; call qword ptr [rsi + 0x7d]; stc; jmp rsi; 
0x00000000004aef3f: inc esi; push rsi; stc; call qword ptr [rsi + 0x56]; 
0x00000000004aef3f: inc esi; push rsi; stc; call qword ptr [rsi + 0x56]; stc; jmp rsi; 
0x00000000004a2a8f: inc esi; ret; 
0x00000000004ab31b: inc esp; add byte ptr [rax], al; add ah, dl; fdivr st(7); call rsi; 
0x00000000004af563: inc esp; jg 0xaf560; call qword ptr [rdi + rdi*2 - 7]; jmp rsp; 
0x00000000004af06b: inc esp; pop rax; stc; call qword ptr [rax + rbx*2 - 7]; jmp rsp; 
0x00000000004a1bfb: inc esp; sub dh, dh; call qword ptr [rax + 0x2b]; 
0x0000000000455c69: inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000455c66: inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000455c63: inc rax; inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000004cd818: insb byte ptr [rdi], dx; add byte ptr [rax], al; add byte ptr [rax - 0x1fffff8a], al; pop rcx; stc; jmp qword ptr [rdi + 0x11]; 
0x00000000004339ab: insb byte ptr [rdi], dx; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x000000000043a144: insb byte ptr [rdi], dx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004c7644: insb byte ptr [rdi], dx; and ah, dh; call qword ptr [rdi]; 
0x0000000000469cc4: insb byte ptr [rdi], dx; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000004c435e: insb byte ptr [rdi], dx; insd dword ptr [rdi], dx; pop rbx; ret 0x6f9; 
0x0000000000480cfb: insb byte ptr [rdi], dx; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x000000000040afd4: insb byte ptr [rdi], dx; or dword ptr [rax], eax; ret; 
0x00000000004aef8c: insb byte ptr [rdi], dx; push rbp; stc; call qword ptr [rdx]; 
0x000000000046cbe5: insb byte ptr [rdi], dx; ret 0x4c40; 
0x0000000000499ab0: insb byte ptr [rdi], dx; sbb ah, bh; jmp qword ptr [rsi - 0x70]; 
0x00000000004624a6: insd dword ptr [rdi], dx; add al, 0; add bh, dh; ret 0xf800; 
0x0000000000418bdf: insd dword ptr [rdi], dx; add al, 0; add byte ptr [rbx - 0x7bf0fe08], al; ret 4; 
0x000000000041d75e: insd dword ptr [rdi], dx; add byte ptr [rax + 0x39], cl; ret; 
0x000000000041d757: insd dword ptr [rdi], dx; add byte ptr [rax - 0x39], cl; rcl byte ptr [rax], 0x83; insd dword ptr [rdi], dx; add byte ptr [rax + 0x39], cl; ret; 
0x000000000047f8d6: insd dword ptr [rdi], dx; add byte ptr [rax - 0x39], cl; ret 0x7c60; 
0x000000000041ed3e: insd dword ptr [rdi], dx; add byte ptr [rax - 0x39], cl; ret 0x8308; 
0x00000000004011b2: insd dword ptr [rdi], dx; add byte ptr [rax - 0x75], cl; add byte ptr [rbx - 0x171076d8], cl; rol byte ptr [rax - 0x3f7b0000], 0x89; ret; 
0x0000000000422ae3: insd dword ptr [rdi], dx; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000422469: insd dword ptr [rdi], dx; add byte ptr [rax - 0x77], cl; ret 0x294d; 
0x000000000046f3f7: insd dword ptr [rdi], dx; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x00000000004335bb: insd dword ptr [rdi], dx; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x0000000000482430: insd dword ptr [rdi], dx; add byte ptr [rcx], dh; rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x000000000049c8ca: insd dword ptr [rdi], dx; call 0xfffffffff07f541c; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049ca48: insd dword ptr [rdi], dx; call 0xfffffffff07f559a; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049cb94: insd dword ptr [rdi], dx; call 0xfffffffff07f56e6; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049cbe0: insd dword ptr [rdi], dx; call 0xfffffffff07f5732; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049cd6f: insd dword ptr [rdi], dx; call 0xfffffffff07f58c1; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049cecf: insd dword ptr [rdi], dx; call 0xfffffffff07f5a21; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049cf20: insd dword ptr [rdi], dx; call 0xfffffffff07f5a72; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049f3f2: insd dword ptr [rdi], dx; js 0x9f46c; ret 0x8b48; 
0x000000000040afc4: insd dword ptr [rdi], dx; or dword ptr [rax], eax; ret; 
0x00000000004c435f: insd dword ptr [rdi], dx; pop rbx; ret 0x6f9; 
0x00000000004c270d: insd dword ptr [rdi], dx; ret 0xb9b9; 
0x00000000004c361f: insd dword ptr [rdi], dx; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x000000000041031a: int 0; add byte ptr [rax], al; add rsp, 0x98; ret; 
0x00000000004c735a: int 0; add byte ptr [rax], r8b; add ah, al; adc dword ptr [rax], eax; add byte ptr [rsp + rcx - 0xc], bl; jmp qword ptr [rax + 9]; 
0x00000000004c3a84: int 0x6b; ret; 
0x000000000047786a: int 0x80; 
0x0000000000491b1e: int 0x90; jmp rdx; 
0x00000000004c24c6: int 0xdd; je 0xc248f; xor al, 0xd8; ret; 
0x00000000004c1933: int 0xe0; fdivr st(4); test al, 0x97; xchg eax, esp; ret; 
0x00000000004a2749: int 0xf6; jmp qword ptr [rsi]; 
0x000000000041369c: int 0xfe; dec dword ptr [rcx - 0x77]; ret 0x149; 
0x0000000000441f88: int 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043c14f: int 8; add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000434fd8: int1; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000483576: int1; call rbx; 
0x00000000004aecc1: int1; clc; inc eax; clc; call qword ptr [rax]; 
0x00000000004a02e7: int1; clc; push rbx; ret; 
0x00000000004617ec: int1; cli; inc dword ptr [rcx - 0x77]; ret; 
0x0000000000447cc1: int1; dec byte ptr [rax + 0x6f]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x0000000000456bc2: int1; dec byte ptr [rax + 0x7f]; jg 0x56bcb; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000456d68: int1; dec byte ptr [rax + 0x7f]; jg 0x56d71; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x00000000004569ec: int1; dec byte ptr [rax + 0x7f]; jl 0x56a09; cld; vzeroupper; ret; 
0x00000000004ad20d: int1; idiv bh; sal eax, 0xf6; call rsp; 
0x00000000004476a1: int1; jl 0x476ec; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000455e2d: int1; jl 0x55e78; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455e34: int1; jl 0x55e7f; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455e3b: int1; jl 0x55e86; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000455e4e: int1; jl 0x55e99; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455e55: int1; jl 0x55ea0; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455e5c: int1; jl 0x55ea7; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000455e69: int1; jl 0x55eb4; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455e6f: int1; jl 0x55eba; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000455f36: int1; jl 0x55f81; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455f3d: int1; jl 0x55f88; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455f44: int1; jl 0x55f8f; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000455f8e: int1; jl 0x55fd9; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000455f95: int1; jl 0x55fe0; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000455f9c: int1; jl 0x55fe7; adc dword ptr [rsi + 3], edx; ret; 
0x000000000045602b: int1; jl 0x56076; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000456032: int1; jl 0x5607d; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000456039: int1; jl 0x56084; adc dword ptr [rsi + 7], edx; ret; 
0x00000000004572c5: int1; jmp rcx; 
0x000000000048101b: int1; jne 0x81010; lea eax, [rdx + rdi]; ret; 
0x00000000004573e9: int1; mov eax, eax; ret; 
0x0000000000443c6b: int1; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043f09f: int1; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000443c63: int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043f217: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f233: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000455203: int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x00000000004573d0: int1; pop rbx; mov eax, eax; ret; 
0x000000000042a573: int1; ret 0x2a; 
0x00000000004af9f9: int1; stc; call qword ptr [rax]; 
0x00000000004af9f9: int1; stc; call qword ptr [rax]; stc; jmp qword ptr [rax - 0xc]; 
0x0000000000455207: int1; sub eax, edx; ret; 
0x000000000043b161: int1; sub rax, rcx; je 0x3b170; sbb eax, eax; or eax, 1; ret; 
0x000000000049752b: int1; sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x97510; mov eax, 1; ret; 
0x000000000044e07d: iretd; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004ab2bc: iretd; add byte ptr [rax], al; add al, ch; fdivr st(7); jmp qword ptr [rdx]; 
0x000000000048cc0d: iretd; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004a1547: iretd; add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; pop rax; or byte ptr [rbp - 0x77], cl; ret; 
0x000000000048b08a: iretd; call 0x59880; test eax, eax; js 0x8b0a2; pop rbx; ret; 
0x00000000004cc889: iretd; clc; jmp qword ptr [rcx]; 
0x0000000000482703: iretd; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000422e91: iretd; cmp rax, rdi; jbe 0x22f98; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004a41ec: iretd; fdivr st(7); dec edi; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004a41f0: iretd; fdivr st(7); jmp qword ptr [rdx]; 
0x0000000000400946: iretd; inc dword ptr [rbx + 0x438d01c1]; call rbx; 
0x000000000045612a: iretd; jb 0x56294; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000456485: iretd; jb 0x56651; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004568d0: iretd; jb 0x56b0c; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000040ff35: iretd; mov gs, word ptr [rax + rax]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004c24a1: iretd; movsb byte ptr [rdi], byte ptr [rsi]; in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x00000000004902ca: iretd; movsx eax, cl; neg eax; ret; 
0x00000000004350a2: iretd; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000432926: iretd; nop word ptr [rax + rax]; mov rsi, rbp; mov rdi, rax; call rcx; 
0x00000000004a0d6a: iretd; ret 0; 
0x00000000004c38ad: iretd; ret 0x8b36; 
0x000000000040f891: iretd; ret; 
0x00000000004d02f9: iretd; sti; jmp qword ptr [rsi + 5]; 
0x00000000004cd158: iretd; xor esi, ebx; jmp qword ptr [rbx]; 
0x0000000000410d68: ja 0x10b08; lea rdx, [rip + 0x9c30f]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000410eec: ja 0x10c11; lea rdx, [rip + 0x9c1b7]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000410fd8: ja 0x10c3f; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x00000000004110b9: ja 0x10c50; lea rdx, [rip + 0x9c042]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000414aad: ja 0x14a85; mov byte ptr [rcx], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000041c247: ja 0x1c473; lea r10, [rip + 0x90fc4]; movzx edi, dl; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x000000000041bf61: ja 0x1c5e5; lea rdi, [rip + 0x91272]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000420d73: ja 0x20dcd; mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000004325d7: ja 0x32750; lea rdx, [rip + 0x7c22c]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000403909: ja 0x3918; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000004046b9: ja 0x4760; mov eax, dword ptr [r15 + 0x20]; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x0000000000447b73: ja 0x47b6e; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000453357: ja 0x5335b; ret; 
0x0000000000453373: ja 0x53379; mov dword ptr [rdi], ecx; ret; 
0x00000000004533b4: ja 0x533be; mov qword ptr [rdi], rcx; ret; 
0x0000000000453439: ja 0x5344b; ret; 
0x000000000045348f: ja 0x534a5; ret; 
0x0000000000453511: ja 0x5352b; ret; 
0x0000000000453977: ja 0x5397b; lea rax, [rdi + 2]; ret; 
0x0000000000453993: ja 0x53999; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000004539e4: ja 0x539ee; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x0000000000453ac9: ja 0x53adb; lea rax, [rdi + 0x10]; ret; 
0x0000000000453b3f: ja 0x53b55; lea rax, [rdi + 0x14]; ret; 
0x0000000000453bc1: ja 0x53bdb; lea rax, [rdi + 0x18]; ret; 
0x0000000000456144: ja 0x5616c; jb 0x5614d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004560fd: ja 0x5617d; movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000456310: ja 0x56332; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000004563de: ja 0x56400; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000004564a4: ja 0x564e1; jb 0x564ad; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004566e8: ja 0x5672a; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x0000000000456804: ja 0x56846; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x00000000004568f4: ja 0x56949; jb 0x568fd; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000456bbf: ja 0x56bc3; vmovdqu64 zmmword ptr [rdi + 0xc0], zmm7; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000456d65: ja 0x56d69; vmovdqu64 zmmword ptr [rdi + 0xc0], zmm7; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000456e22: ja 0x56e2f; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000456dd2: ja 0x56e38; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000456e3c: ja 0x56e54; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000456ec3: ja 0x56eda; jb 0x56ec9; mov byte ptr [rdi], cl; ret; 
0x0000000000456f7a: ja 0x56f8a; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000456f2a: ja 0x56f93; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000457031: ja 0x5705f; jb 0x57037; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000457113: ja 0x57127; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000004570b3: ja 0x57130; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000004571f9: ja 0x57235; jb 0x571ff; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x00000000004581dc: ja 0x58200; hlt; mov edi, edx; mov eax, r8d; syscall; 
0x0000000000458406: ja 0x586c0; lea rdx, [rip + 0x57c09]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000458786: ja 0x587b8; mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x00000000004587d5: ja 0x58808; mov edi, eax; mov rsi, rdx; mov eax, 5; syscall; 
0x000000000045b494: ja 0x5b4a6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000045bc20: ja 0x5bc44; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000045c9bc: ja 0x5c990; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000045c945: ja 0x5c990; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x00000000004695ca: ja 0x696b0; movsxd rsi, dword ptr [r8 + r9*4]; add rsi, r8; jmp rsi; 
0x0000000000469ac9: ja 0x69c10; movsxd rdi, dword ptr [r11 + rsi*4]; add rdi, r11; jmp rdi; 
0x000000000046d47a: ja 0x6d494; mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x00000000004755b2: ja 0x75590; mov eax, r9d; ret; 
0x000000000047e085: ja 0x7e0b0; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000047e1e9: ja 0x7e5a0; lea rcx, [rip + 0x403ae]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000047e820: ja 0x7e8b0; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000047e934: ja 0x7e968; lea rdi, [rip + 0x3fdef]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000047e99e: ja 0x7ece0; lea rdx, [rip + 0x3fe3d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000482df8: ja 0x82e42; add eax, edi; sub rax, rdx; vzeroupper; ret; 
0x00000000004085d2: ja 0x8308; lea rdx, [rip + 0x996b9]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000483fb8: ja 0x84002; add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000004840f2: ja 0x840b7; nop word ptr cs:[rax + rax]; nop; mov eax, 0xc9; syscall; 
0x00000000004848a6: ja 0x848d8; mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x00000000004848f8: ja 0x84930; mov edi, eax; mov r10d, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x000000000048b530: ja 0x8c883; lea rcx, [rip + 0x34243]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000049228e: ja 0x922d9; shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000495c28: ja 0x95c10; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000049783a: ja 0x97844; mov rdi, qword ptr [rdi]; call 0x99ac0; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000049790e: ja 0x97918; mov rdi, qword ptr [rdi]; call 0x997c0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000499d65: ja 0x99d6a; add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000049a3b1: ja 0x9ac61; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x000000000049b3ff: ja 0x9b519; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000049b937: ja 0x9b519; movzx r11d, r11b; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x000000000049bd04: ja 0x9bd3d; mov eax, dword ptr [rbp + 8]; movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 
0x00000000004ae945: ja 0xae93f; inc eax; js 0xae943; jmp qword ptr [rax + 0x68]; 
0x00000000004af61d: ja 0xaf618; jmp qword ptr [rax]; 
0x00000000004af759: ja 0xaf754; call qword ptr [rdi + rsi*2 - 7]; call rsp; 
0x00000000004af75d: ja 0xaf758; call rsp; 
0x00000000004afb89: ja 0xafb85; ljmp [rax - 0x3f000589]; ja 0xafb8d; jmp rax; 
0x00000000004afb8d: ja 0xafb89; inc eax; ja 0xafb8d; jmp rax; 
0x00000000004afb91: ja 0xafb8d; jmp rax; 
0x00000000004afb99: ja 0xafb95; push qword ptr [rax]; ja 0xafb99; call qword ptr [rax + 0x77]; 
0x00000000004afb9d: ja 0xafb99; call qword ptr [rax + 0x77]; 
0x00000000004afbd1: ja 0xafbcd; call qword ptr [rbx]; 
0x00000000004afc11: ja 0xafc0d; call rbx; 
0x0000000000400b29: ja 0xb58; add byte ptr [rcx], al; pop rbp; ret; 
0x00000000004c3da4: ja 0xc3d29; ret 0x48f; 
0x00000000004cbe89: ja 0xcbe83; jmp qword ptr [rdi + 6]; 
0x000000000040cc91: ja 0xcca8; lea rdx, [rip + 0x957de]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000425df7: jae 0x25e31; cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000427b3d: jae 0x27b60; movzx eax, byte ptr [rax]; ret; 
0x00000000004325d9: jae 0x325dc; add byte ptr [rax], al; lea rdx, [rip + 0x7c22c]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000433779: jae 0x337b4; add al, byte ptr [rax]; lea rax, [rip + 0x2390c]; cmovne rax, rdx; ret; 
0x000000000043b0d5: jae 0x3b370; xor eax, eax; vzeroupper; ret; 
0x0000000000444ab5: jae 0x44b50; lea r11, [rip + 0x6a90e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000456ebe: jae 0x56ed3; cmp dl, 1; ja 0x56eda; jb 0x56ec9; mov byte ptr [rdi], cl; ret; 
0x000000000045870d: jae 0x58710; ret; 
0x0000000000458e3d: jae 0x58e40; ret; 
0x000000000045967d: jae 0x59680; ret; 
0x000000000045974f: jae 0x59752; ret; 
0x000000000045985d: jae 0x59860; ret; 
0x000000000045988d: jae 0x59890; ret; 
0x00000000004598bd: jae 0x598c0; ret; 
0x000000000045af70: jae 0x5af73; ret; 
0x000000000045afa0: jae 0x5afa3; ret; 
0x000000000045afcd: jae 0x5afd0; ret; 
0x00000000004680f3: jae 0x680f1; jmp qword ptr [rsi + 0x2e]; 
0x000000000046a46e: jae 0x6a4b0; xor eax, eax; pop rbx; ret; 
0x00000000004804e6: jae 0x8043b; mov eax, dword ptr [rsi]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048483d: jae 0x84840; ret; 
0x000000000048ed9b: jae 0x8ed41; xor eax, eax; ret; 
0x0000000000493fd7: jae 0x93fd5; jmp qword ptr [rsi + 0xf]; 
0x00000000004946ba: jae 0x946b0; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x0000000000494781: jae 0x9478f; mov rdx, qword ptr [rip + 0x244a4e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000497534: jae 0x97510; mov eax, 1; ret; 
0x00000000004979ed: jae 0x979f0; ret; 
0x000000000049edab: jae 0x9edaf; add byte ptr [rdi], cl; mov dh, 0xc9; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000004ae935: jae 0xae92f; inc dword ptr [rax + 0x74]; clc; jmp qword ptr [rax + 0x75]; 
0x00000000004af63d: jae 0xaf638; jmp qword ptr [rax]; 
0x00000000004af6b9: jae 0xaf6b4; push qword ptr [rdx + 0x73]; stc; push rdx; jb 0xaf6bc; jmp qword ptr [rdx + 0x72]; 
0x00000000004af6bd: jae 0xaf6b8; push rdx; jb 0xaf6bc; jmp qword ptr [rdx + 0x72]; 
0x00000000004af779: jae 0xaf774; call qword ptr [rbx + rsi*2 - 7]; call rsp; 
0x00000000004af77d: jae 0xaf778; call rsp; 
0x00000000004af83d: jae 0xaf838; push qword ptr [rax + 0x20fff972]; jb 0xaf840; call qword ptr [rax + 0xfff971]; jno 0xaf848; jmp qword ptr [rax + 0x53]; 
0x00000000004c2362: jae 0xc233b; jo 0xc23d7; mov ebp, 0xfb67d10d; ret; 
0x00000000004c31fe: jae 0xc31d3; push rsi; pop rdx; je 0xc31c8; ret 0xacfc; 
0x00000000004c9842: jae 0xc984e; ret; 
0x00000000004d0704: jae 0xd070a; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x000000000040ecfe: jae 0xed09; add cl, ch; ret 0xffdf; 
0x000000000041bf6a: jb 0x1bf7e; or dword ptr [rax], eax; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000427afe: jb 0x27b12; sub eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000042d0a7: jb 0x2d088; mov byte ptr [rsi + rbx], cl; mov rax, rsi; pop rbx; ret; 
0x000000000042f5eb: jb 0x2f617; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000004335aa: jb 0x335ac; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x00000000004476e7: jb 0x476fd; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000447714: jb 0x47725; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000447728: jb 0x47736; mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000447739: jb 0x4774b; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000044774e: jb 0x47754; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000455e66: jb 0x55e76; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455e79: jb 0x55e85; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000455e92: jb 0x55e9e; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000455ea5: jb 0x55ead; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000455eb0: jb 0x55eba; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000455ebd: jb 0x55ec1; mov byte ptr [rdi], cl; ret; 
0x00000000004560c4: jb 0x560c9; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000456146: jb 0x5614d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000045612b: jb 0x56294; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004564a6: jb 0x564ad; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000456486: jb 0x56651; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004568f6: jb 0x568fd; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004568d1: jb 0x56b0c; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000456ec5: jb 0x56ec9; mov byte ptr [rdi], cl; ret; 
0x0000000000457033: jb 0x57037; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x00000000004571fb: jb 0x571ff; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000045947d: jb 0x5947c; dec dword ptr [rax - 0x77]; ret; 
0x00000000004596ce: jb 0x596cb; jmp qword ptr [rsi + 0x2e]; 
0x000000000045b48e: jb 0x5b4d0; cmp rcx, qword ptr [rax + 0x18]; ja 0x5b4a6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x0000000000479684: jb 0x7967f; jmp qword ptr [rsi + 0xf]; 
0x00000000004ae931: jb 0xae92b; jmp qword ptr [rax]; 
0x00000000004af645: jb 0xaf640; inc dword ptr [rax]; jb 0xaf644; push qword ptr [rax + 0x71]; stc; jmp rsi; 
0x00000000004af649: jb 0xaf644; push qword ptr [rax + 0x71]; stc; jmp rsi; 
0x00000000004af6c1: jb 0xaf6bc; jmp qword ptr [rdx + 0x72]; 
0x00000000004af6c5: jb 0xaf6c0; call rdx; 
0x00000000004af6bc: jb 0xaf731; stc; push rdx; jb 0xaf6bc; jmp qword ptr [rdx + 0x72]; 
0x00000000004af841: jb 0xaf83c; jmp qword ptr [rax]; 
0x00000000004af845: jb 0xaf840; call qword ptr [rax + 0xfff971]; jno 0xaf848; jmp qword ptr [rax + 0x53]; 
0x00000000004cd495: jb 0xcd497; add byte ptr [rax], ch; sub bh, cl; call qword ptr [rax]; 
0x00000000004105d4: jbe 0x105e6; syscall; 
0x000000000041df38: jbe 0x1df50; mov rax, -0x40; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000041ef25: jbe 0x1ef98; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x000000000041fb7f: jbe 0x1fbc9; add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000422e95: jbe 0x22f98; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000042321c: jbe 0x23400; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004258a4: jbe 0x25900; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000042599a: jbe 0x259b0; mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000425aab: jbe 0x25a12; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000425afb: jbe 0x25bb0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000425d23: jbe 0x25db8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000425ea1: jbe 0x25ed8; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000425f1a: jbe 0x25f40; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000426086: jbe 0x26098; mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000426caa: jbe 0x26ce0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000426d41: jbe 0x26d60; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000428a52: jbe 0x28a57; sub eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000437b67: jbe 0x37b74; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004392c7: jbe 0x392d4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000043a2a7: jbe 0x3a2b4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000043a34f: jbe 0x3a5f0; add rax, rdi; add rax, rcx; ret; 
0x000000000043a5b6: jbe 0x3a5f0; add rax, rdi; ret; 
0x000000000043a5c6: jbe 0x3a5f0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000043a5d6: jbe 0x3a5f0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000043a5e6: jbe 0x3a5f0; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000043aa07: jbe 0x3aa60; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000043aa27: jbe 0x3aa60; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000043aa47: jbe 0x3aa60; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000043a9f7: jbe 0x3aa60; add rax, rdi; vzeroupper; ret; 
0x0000000000465222: jbe 0x6521a; ret; 
0x0000000000406aac: jbe 0x6ab8; cmp ecx, eax; setb al; ret; 
0x000000000046c658: jbe 0x6c670; mov rax, -0x40; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000046d627: jbe 0x6ec45; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000046e0e6: jbe 0x6ec5d; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000046dda2: jbe 0x6ecc1; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000046dbcd: jbe 0x6ecd9; mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000047991a: jbe 0x7a690; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000047c489: jbe 0x7d850; mov dword ptr [rbp - 0x4e0], r9d; mov rdx, r14; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000048013a: jbe 0x80170; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004802d8: jbe 0x802fe; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000480488: jbe 0x804b2; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000480b91: jbe 0x80bbb; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000480e03: jbe 0x80e24; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000480f1f: jbe 0x80f50; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000480fb9: jbe 0x80fd0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004810a0: jbe 0x810c6; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000482e17: jbe 0x82e70; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000482e37: jbe 0x82e70; add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000482e57: jbe 0x82e70; add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000482df7: jbe 0x82e70; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000483fb7: jbe 0x84030; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000490348: jbe 0x90330; cmp r8d, eax; je 0x90296; sub eax, r8d; ret; 
0x00000000004097b3: jbe 0x97c0; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x000000000049d469: jbe 0x9d480; cmp dil, 0x30; jne 0x9d498; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000049e2c9: jbe 0x9e2e0; cmp dil, 0x30; jne 0x9e2f8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000040a523: jbe 0xa530; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x00000000004af625: jbe 0xaf620; jmp qword ptr [rax]; 
0x00000000004af761: jbe 0xaf75c; call qword ptr [rsi + rsi*2 - 7]; call rsp; 
0x00000000004af765: jbe 0xaf760; call rsp; 
0x00000000004afbc9: jbe 0xafbc5; inc dword ptr [rip - 0x1000588]; ja 0xafbcd; call qword ptr [rbx]; 
0x000000000040b113: jbe 0xb120; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x000000000040bccb: jbe 0xbd2d; or dword ptr [rax], eax; ret; 
0x000000000040bd23: jbe 0xbd30; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x00000000004c2619: jbe 0xc264e; movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x0000000000400ca0: jbe 0xc8a; mov eax, 0xfffffff2; ret; 
0x00000000004cd81d: jbe 0xcd81f; add al, ah; pop rcx; stc; jmp qword ptr [rdi + 0x11]; 
0x00000000004b008c: jbe 0xffffffff8500008c; cli; jmp qword ptr [rdi - 0x7a]; 
0x0000000000410318: je 0x103eb; add rsp, 0x98; ret; 
0x00000000004010f3: je 0x1108; mov eax, 0xffffffea; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000401161: je 0x1170; mov eax, dword ptr [rax]; add rsp, 8; ret; 
0x000000000040123b: je 0x1248; pop rbx; pop rbp; pop r12; ret; 
0x0000000000412557: je 0x1255d; add byte ptr [rax - 0x7d], cl; cmp eax, 0x2c39fe; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004012a9: je 0x12b8; add rsp, 8; mov eax, edi; pop rbx; pop rbp; ret; 
0x0000000000401300: je 0x1310; mov eax, edi; pop rbx; ret; 
0x0000000000401358: je 0x1368; pop rbx; mov eax, edi; pop rbp; pop r12; ret; 
0x00000000004013a8: je 0x13b8; pop rbx; mov eax, edi; pop rbp; pop r12; ret; 
0x000000000041467e: je 0x14686; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x00000000004015c7: je 0x15d8; test r8, r8; jne 0x15d8; mov eax, 0xffffffea; ret; 
0x0000000000401747: je 0x1758; test r8, r8; jne 0x1758; mov eax, 0xffffffea; ret; 
0x00000000004019bc: je 0x19e0; call 0x24d0; test eax, eax; js 0x19d0; add rsp, 0x18; ret; 
0x0000000000401a1a: je 0x1a28; mov eax, edi; add rsp, 0x18; ret; 
0x0000000000401a76: je 0x1a80; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000401c11: je 0x1c20; xor eax, eax; add rsp, 0x18; ret; 
0x000000000042101d: je 0x20f8e; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000420f8c: je 0x20ff8; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000004216dd: je 0x21703; cmp byte ptr [rax + 0x29], cl; ret; 
0x00000000004023bc: je 0x23e8; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004023d3: je 0x2408; add rsp, 8; mov eax, 0xfffffff2; pop rbx; pop rbp; ret; 
0x00000000004245c8: je 0x245b3; retf 0xfffc; jmp qword ptr [rsi - 0x70]; 
0x0000000000425a6b: je 0x259e8; mov eax, 0xffffffff; ret; 
0x00000000004259c2: je 0x259e8; or al, 0x48; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000425c5b: je 0x25bd8; mov eax, 0xffffffff; ret; 
0x0000000000426cb5: je 0x26cba; and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000426d97: je 0x26da8; cmp rsi, rcx; jne 0x26d90; lea eax, [rdx + rdi]; ret; 
0x0000000000427b34: je 0x27b48; mov rax, qword ptr [rdi + 8]; cmp rax, rdx; jae 0x27b60; movzx eax, byte ptr [rax]; ret; 
0x0000000000427b75: je 0x27b88; xor eax, eax; cmp esi, -1; setne al; neg eax; ret; 
0x0000000000428a4e: je 0x28a60; mov dword ptr [rip + 0x2b0376], 0; ret; 
0x0000000000428a44: je 0x28aa2; mov eax, dword ptr [rip + 0x2b0384]; test eax, eax; je 0x28a60; mov dword ptr [rip + 0x2b0376], 0; ret; 
0x000000000042be06: je 0x2be2c; and byte ptr [rcx + rcx*4 + 0x5c], cl; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000431cb2: je 0x31cd8; sub byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x00000000004321a3: je 0x321b0; lea rax, [rdx - 0x10]; ret; 
0x000000000043219e: je 0x321c8; test rax, rax; je 0x321b0; lea rax, [rdx - 0x10]; ret; 
0x0000000000433721: je 0x33740; test eax, eax; lea rdx, [rip + 0x23834]; lea rax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x0000000000434e69: je 0x34e80; bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000435099: je 0x34f35; bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000043a28a: je 0x3a28d; xchg eax, edx; sub eax, edx; ret; 
0x000000000043a4bc: je 0x3a50d; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000043a55e: je 0x3a5af; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x000000000043a658: je 0x3a670; bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x000000000043a79a: je 0x3a7eb; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000043ab13: je 0x3ab30; tzcnt eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x000000000043b111: je 0x3b12a; vpmovmskb eax, ymm2; sub eax, -1; jne 0x3b120; vzeroupper; ret; 
0x000000000043b165: je 0x3b170; sbb eax, eax; or eax, 1; ret; 
0x000000000043b209: je 0x3b1dc; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x3b120; ret; 
0x000000000043b247: je 0x3b260; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x3b120; ret; 
0x000000000043b356: je 0x3b36f; vpmovmskb eax, ymm2; sub eax, -1; jne 0x3b120; vzeroupper; ret; 
0x000000000043c787: je 0x3c78b; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000040040e: je 0x412; call rax; 
0x000000000040040e: je 0x412; call rax; add rsp, 8; ret; 
0x000000000044f531: je 0x4f540; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000044f9a1: je 0x4f9c0; tzcnt eax, eax; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x000000000044fb4c: je 0x4fb2e; pmovmskb edx, xmm4; test edx, edx; je 0x4fb5a; bsf eax, edx; ret; 
0x000000000044fb54: je 0x4fb5a; bsf eax, edx; ret; 
0x000000000044fbfd: je 0x4fc10; bsf rax, rdx; ret; 
0x000000000044fb9c: je 0x4fc20; bsf rax, rdx; ret; 
0x0000000000455d64: je 0x55d40; movsxd rax, ecx; add rax, rdi; sub rax, rsi; ret; 
0x00000000004560bb: je 0x560c8; lea rdx, [rsi + rcx]; cmp rdi, rdx; jb 0x560c9; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004561d3: je 0x561ec; ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x00000000004569e8: je 0x56a01; std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x000000000045737d: je 0x572a2; lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000045732d: je 0x572a2; mov eax, ecx; shr eax, 6; and eax, 0x3fffc00; pop rbx; ret; 
0x000000000045787e: je 0x57888; xor eax, eax; ret; 
0x0000000000457879: je 0x57890; cmp eax, 2; je 0x57888; xor eax, eax; ret; 
0x0000000000457cf5: je 0x57cfb; add dword ptr [rax + 0x10], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045896e: je 0x589a0; mov edx, esi; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000458d08: je 0x58d30; mov eax, 0x48; syscall; 
0x0000000000458f03: je 0x58ead; mov r12, rdi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x000000000045b0a9: je 0x5b0ac; ret; 
0x000000000045b10d: je 0x5b110; ret; 
0x000000000045b4f9: je 0x5b520; xor esi, esi; lea rdi, [rip + 0x550c1]; mov eax, 0x15; syscall; 
0x000000000045bb2c: je 0x5bb38; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x000000000045bb27: je 0x5bb38; test rdx, rdx; je 0x5bb38; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x000000000045c874: je 0x5c880; mov dword ptr [rip + 0x27923c], edx; pop rbx; ret; 
0x00000000004600ec: je 0x60112; sub byte ptr [rax - 0x75], cl; jl 0x60117; and byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x0000000000461e1e: je 0x61e44; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x00000000004623d3: je 0x623f9; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000463405: je 0x6342b; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000465162: je 0x65188; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004663a2: je 0x663c8; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000467a4a: je 0x67a59; call 0x91140; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000004687da: je 0x687de; call rsi; 
0x00000000004688d6: je 0x688da; call rax; 
0x0000000000469cdb: je 0x69cdf; call rax; 
0x0000000000406a2c: je 0x6a67; cmp ecx, 1; jne 0x6ae7; mov eax, 1; ret; 
0x00000000004755a9: je 0x755c0; movsx r8d, byte ptr [rsi]; cmp edi, r8d; ja 0x75590; mov eax, r9d; ret; 
0x00000000004783fc: je 0x78422; and byte ptr [rax + 1], cl; ret; 
0x00000000004078bc: je 0x78d0; cmp rax, rcx; jne 0x78b0; xor eax, eax; ret; 
0x000000000047e65e: je 0x7e1d8; lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000047ecfe: je 0x7e98d; lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000047fe96: je 0x7fee0; add esp, 0x20; pop rbx; ret; 
0x000000000048035d: je 0x80370; mov eax, 0xffffffff; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048055d: je 0x80570; mov eax, 0xffffffff; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000480d09: je 0x80d10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000480d43: je 0x80da0; pop rbp; pop r12; ret; 
0x0000000000480dcf: je 0x80e2c; pop rbp; pop r12; ret; 
0x0000000000480f2a: je 0x80f2f; and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000480f51: je 0x80f77; or al, 0xe8; xlatb; or al, 0xfa; dec dword ptr [rbx - 0x14f3db8c]; ret 0x5590; 
0x0000000000480f5a: je 0x80f80; or al, 0xeb; ret 0x5590; 
0x0000000000480f86: je 0x80f8b; and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000481017: je 0x81028; cmp rcx, rsi; jne 0x81010; lea eax, [rdx + rdi]; ret; 
0x0000000000482570: je 0x82730; bsr rax, rax; add rax, rdi; ret; 
0x00000000004827f4: je 0x82730; bsr rax, rsi; add rax, rdi; ret; 
0x00000000004825fe: je 0x82730; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000048298f: je 0x82944; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000004829b4: je 0x829d0; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000482ae4: je 0x82af3; sar rdx, cl; test rdx, rdx; je 0x82b10; bsf rax, rdx; ret; 
0x0000000000482aec: je 0x82b10; bsf rax, rdx; ret; 
0x0000000000482a7c: je 0x82b20; bsf rax, rdx; ret; 
0x000000000048356e: je 0x83594; sbb byte ptr [rax - 0x77], cl; out dx, eax; mov r9, r14; call rbx; 
0x00000000004837ac: je 0x837d0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000483740: je 0x837e0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000483b39: je 0x83b50; mov cl, dl; and cl, 0xf; je 0x83b60; ret; 
0x0000000000483b40: je 0x83b60; ret; 
0x0000000000483b55: je 0x83b70; add rax, 2; ret; 
0x000000000048497d: je 0x849b8; mov eax, dword ptr [rip + 0x254ee7]; test eax, eax; jne 0x849e6; mov eax, 0x101; syscall; 
0x0000000000484a0b: je 0x84a31; adc byte ptr [rbx - 0x47e7db84], cl; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000484a9d: je 0x84ac8; mov eax, 0x101; syscall; 
0x000000000048500a: je 0x850d8; xor eax, eax; leave; ret; 
0x00000000004085a8: je 0x85ce; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000048afe8: je 0x8afac; and al, 0; nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x000000000048db76: je 0x8db7b; mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x000000000048e615: je 0x8e618; lock inc dword ptr [r9 + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x000000000048e962: je 0x8e988; and byte ptr [rcx], dh; fisttp dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x94; ret; 
0x000000000049034d: je 0x90296; sub eax, r8d; ret; 
0x0000000000491b55: je 0x91b40; cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x00000000004090c8: je 0x9220; cmp edi, 0xc0000008; jne 0x9270; mov rax, 0x6d2de0; ret; 
0x0000000000409108: je 0x9250; cmp edi, 0x16; jne 0x9270; mov rax, 0x6d2f60; ret; 
0x0000000000409160: je 0x9260; cmp edi, 0xe0000008; jne 0x9270; mov rax, 0x6d2e60; ret; 
0x00000000004939ca: je 0x939b4; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000493d73: je 0x93d83; lea rax, [rip + 0x245364]; mov qword ptr [rip + 0x245345], rax; add rsp, 8; ret; 
0x00000000004941d3: je 0x941df; lea rdx, [rip + 0x2439c4]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000494482: je 0x94490; pop rbx; pop rbp; pop r12; ret; 
0x0000000000494988: je 0x949ae; or byte ptr [rax + 1], cl; ret; 
0x0000000000409595: je 0x95b0; cmp eax, 2; jne 0x95a8; lea eax, [rsi*8 + 0x14]; ret; 
0x0000000000495c73: je 0x95bdf; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x00000000004095db: je 0x9600; cmp eax, 2; jne 0x95f0; lea eax, [rsi*8 + 0x10]; ret; 
0x00000000004960ec: je 0x960f8; mov rax, qword ptr [r12]; add rax, qword ptr [rdx + 8]; call rax; 
0x0000000000409627: je 0x962e; mov rdi, rsi; jmp rax; 
0x0000000000409647: je 0x964d; mov edi, esi; jmp rax; 
0x0000000000409672: je 0x96a8; mov rbp, rsi; mov rbx, rdi; mov edi, eax; call rdx; 
0x000000000040968a: je 0x96a8; mov rdi, rax; call rdx; 
0x0000000000409681: je 0x96a8; mov rdx, qword ptr [rbx + 0x10]; test rdx, rdx; je 0x96a8; mov rdi, rax; call rdx; 
0x00000000004096e8: je 0x96bf; mov rbx, rsi; mov rdi, rsi; call rax; 
0x0000000000496fe0: je 0x96ff0; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000040974d: je 0x9770; mov rsi, rbx; mov rdi, r12; call rdx; 
0x0000000000499eed: je 0x99f13; adc byte ptr [rcx - 0x77], cl; ret; 
0x000000000049a2e3: je 0x9a2eb; cmp dil, 0x10; jne 0x9a308; xor eax, eax; ret; 
0x000000000049a2cb: je 0x9a2eb; cmp dil, 0x30; jne 0x9a308; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000049a3ad: je 0x9a410; cmp al, 0x2f; ja 0x9ac61; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x000000000049c488: je 0x9c46c; add rsp, 0x18; ret; 
0x000000000049c471: je 0x9c490; add rsp, 0x18; ret; 
0x000000000049c54f: je 0x9c560; cmp byte ptr [rdi + rsi + 0xd8], 0; je 0x9c560; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x000000000049c559: je 0x9c560; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x000000000049c5f3: je 0x9c600; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000049cf47: je 0x9cf58; mov rsi, rdi; mov edi, 1; jmp rax; 
0x000000000049d2fb: je 0x9d310; xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000049d483: je 0x9d48b; cmp dil, 0x10; jne 0x9d49e; xor eax, eax; ret; 
0x000000000049d467: je 0x9d490; jbe 0x9d480; cmp dil, 0x30; jne 0x9d498; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000049e2e3: je 0x9e2eb; cmp dil, 0x10; jne 0x9e2fe; xor eax, eax; ret; 
0x000000000049e2c7: je 0x9e2f0; jbe 0x9e2e0; cmp dil, 0x30; jne 0x9e2f8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000049ed53: je 0x9ed5b; cmp dil, 0x10; jne 0x9ed78; xor eax, eax; ret; 
0x00000000004a00f3: je 0xa00fc; call rax; 
0x00000000004a00ea: je 0xa0101; mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0xa00fc; call rax; 
0x00000000004a0347: je 0xa0331; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000400aa9: je 0xab8; pop rbp; mov edi, 0x6d7c10; jmp rax; 
0x00000000004ae939: je 0xae933; jmp qword ptr [rax + 0x75]; 
0x00000000004af635: je 0xaf630; jmp qword ptr [rax]; 
0x00000000004af771: je 0xaf76c; call qword ptr [rsp + rsi*2 - 7]; call rsp; 
0x00000000004af775: je 0xaf770; call rsp; 
0x0000000000400aeb: je 0xaf8; pop rbp; mov edi, 0x6d7c10; jmp rax; 
0x0000000000400b1a: je 0xb26; mov edi, 0x4c61c8; call 0x9eac0; mov byte ptr [rip + 0x2d77f3], 1; pop rbp; ret; 
0x00000000004c24c8: je 0xc248f; xor al, 0xd8; ret; 
0x00000000004c3202: je 0xc31c8; ret 0xacfc; 
0x00000000004c522a: je 0xc522c; ret; 
0x00000000004c7610: je 0xc7626; add byte ptr [rax], al; cmp al, 0x20; hlt; jmp qword ptr [rax]; 
0x00000000004cb879: je 0xcb871; jmp qword ptr [rbx]; 
0x000000000040f8df: je 0xf8eb; mov eax, dword ptr [rax + rbx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040ff3b: je 0xff61; adc byte ptr [rbx + 0x480c247c], cl; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x0000000000401f05: jg 0x1f7b; or bl, dh; ret; 
0x0000000000425e32: jg 0x25e6c; add byte ptr [rcx + rcx - 0xd], dh; ret; 
0x0000000000428426: jg 0x2849f; or byte ptr [rax + 0x4f058948], dl; in al, 0x2a; add bl, dh; ret; 
0x000000000043ce7e: jg 0x3cecf; ror byte ptr [rax - 0x7d], 0xef; lea r11, [rip + 0x71cc4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d01d: jg 0x3d01f; add rsi, rdx; lea r11, [rip + 0x71b27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d0be: jg 0x3d0c0; lea r11, [rip + 0x71a89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d16d: jg 0x3d16f; add rsi, rdx; lea r11, [rip + 0x719d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d20e: jg 0x3d210; lea r11, [rip + 0x71939]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d2bd: jg 0x3d2bf; add rsi, rdx; lea r11, [rip + 0x71887]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d35e: jg 0x3d360; lea r11, [rip + 0x717e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d40d: jg 0x3d40f; add rsi, rdx; lea r11, [rip + 0x71737]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d4ae: jg 0x3d4b0; lea r11, [rip + 0x71699]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d55d: jg 0x3d55f; add rsi, rdx; lea r11, [rip + 0x715e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d5fe: jg 0x3d600; lea r11, [rip + 0x71549]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d6ad: jg 0x3d6af; add rsi, rdx; lea r11, [rip + 0x71497]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d7fd: jg 0x3d7ff; add rsi, rdx; lea r11, [rip + 0x71347]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d89e: jg 0x3d8a0; lea r11, [rip + 0x712a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d955: jg 0x3d957; lea r11, [rip + 0x711f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043da9d: jg 0x3da9f; add rsi, rdx; lea r11, [rip + 0x710a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043db3e: jg 0x3db40; lea r11, [rip + 0x71009]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dbed: jg 0x3dbef; add rsi, rdx; lea r11, [rip + 0x70f57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dc8e: jg 0x3dc90; lea r11, [rip + 0x70eb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dd3d: jg 0x3dd3f; add rsi, rdx; lea r11, [rip + 0x70e07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ddde: jg 0x3dde0; lea r11, [rip + 0x70d69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043de8d: jg 0x3de8f; add rsi, rdx; lea r11, [rip + 0x70cb7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043df2e: jg 0x3df30; lea r11, [rip + 0x70c19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dfdd: jg 0x3dfdf; add rsi, rdx; lea r11, [rip + 0x70b67]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e12d: jg 0x3e12f; add rsi, rdx; lea r11, [rip + 0x70a17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e1ce: jg 0x3e1d0; lea r11, [rip + 0x70979]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e27d: jg 0x3e27f; add rsi, rdx; lea r11, [rip + 0x708c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e31e: jg 0x3e320; lea r11, [rip + 0x70829]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ec89: jg 0x3ecda; ret; 
0x000000000043ed0f: jg 0x3ed58; ret; 
0x000000000043ee89: jg 0x3eeda; ret 0x894c; 
0x000000000043ef0f: jg 0x3ef58; ret 0x894c; 
0x000000000043f84e: jg 0x3f89f; ror byte ptr [rax - 0x7d], 0xef; lea r11, [rip + 0x6f4b4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f9ed: jg 0x3f9ef; add rsi, rdx; lea r11, [rip + 0x6f317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fa8e: jg 0x3fa90; lea r11, [rip + 0x6f279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fb3d: jg 0x3fb3f; add rsi, rdx; lea r11, [rip + 0x6f1c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fbde: jg 0x3fbe0; lea r11, [rip + 0x6f129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fc8d: jg 0x3fc8f; add rsi, rdx; lea r11, [rip + 0x6f077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fd2e: jg 0x3fd30; lea r11, [rip + 0x6efd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fddd: jg 0x3fddf; add rsi, rdx; lea r11, [rip + 0x6ef27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fe7e: jg 0x3fe80; lea r11, [rip + 0x6ee89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ff2d: jg 0x3ff2f; add rsi, rdx; lea r11, [rip + 0x6edd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ffce: jg 0x3ffd0; lea r11, [rip + 0x6ed39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044007d: jg 0x4007f; add rsi, rdx; lea r11, [rip + 0x6ec87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044011e: jg 0x40120; lea r11, [rip + 0x6ebe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004401cd: jg 0x401cf; add rsi, rdx; lea r11, [rip + 0x6eb37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044026e: jg 0x40270; lea r11, [rip + 0x6ea99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440325: jg 0x40327; lea r11, [rip + 0x6e9e2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004403be: jg 0x403c0; lea r11, [rip + 0x6e949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044046d: jg 0x4046f; add rsi, rdx; lea r11, [rip + 0x6e897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004405bd: jg 0x405bf; add rsi, rdx; lea r11, [rip + 0x6e747]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044065e: jg 0x40660; lea r11, [rip + 0x6e6a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044070d: jg 0x4070f; add rsi, rdx; lea r11, [rip + 0x6e5f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044085d: jg 0x4085f; add rsi, rdx; lea r11, [rip + 0x6e4a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004408fe: jg 0x40900; lea r11, [rip + 0x6e409]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004409ad: jg 0x409af; add rsi, rdx; lea r11, [rip + 0x6e357]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440a4e: jg 0x40a50; lea r11, [rip + 0x6e2b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440afd: jg 0x40aff; add rsi, rdx; lea r11, [rip + 0x6e207]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440b9e: jg 0x40ba0; lea r11, [rip + 0x6e169]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440c4d: jg 0x40c4f; add rsi, rdx; lea r11, [rip + 0x6e0b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440cee: jg 0x40cf0; lea r11, [rip + 0x6e019]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441659: jg 0x416aa; ret; 
0x00000000004416df: jg 0x41728; ret; 
0x0000000000441859: jg 0x418aa; ret 0x894c; 
0x00000000004418df: jg 0x41928; ret 0x894c; 
0x0000000000441f7e: jg 0x41f40; sub rdx, 0x40; lea r11, [rip + 0x6cd85]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443c48: jg 0x43c91; loope 0x43c3f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000443cbf: jg 0x43d08; ret 0xff2; 
0x0000000000443d4f: jg 0x43d98; ret; 
0x0000000000443df8: jg 0x43e41; in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000443e78: jg 0x43ec1; in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000443ef8: jg 0x43f41; out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000443f78: jg 0x43fc1; out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000004441f8: jg 0x44241; in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000444278: jg 0x442c1; in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000444308: jg 0x44351; out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000444388: jg 0x443d1; out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004443fc: jg 0x44405; ret; 
0x0000000000444456: jg 0x44467; ret; 
0x0000000000444451: jg 0x4449a; psllq mm1, qword ptr [rdi]; jg 0x44467; ret; 
0x00000000004444c6: jg 0x444d7; ret; 
0x0000000000444536: jg 0x44547; ret; 
0x0000000000444523: jg 0x4456c; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444531: jg 0x4457a; or eax, 0xf7f0ff3; ret; 
0x00000000004445a6: jg 0x445b7; ret; 
0x00000000004445a1: jg 0x445ea; or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x0000000000444616: jg 0x44627; ret; 
0x0000000000444611: jg 0x4465a; or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000444686: jg 0x44697; ret; 
0x0000000000444681: jg 0x446ca; or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x00000000004446f6: jg 0x44707; ret; 
0x00000000004446f1: jg 0x4473a; or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000444766: jg 0x44777; ret; 
0x0000000000444761: jg 0x447aa; or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x00000000004447d6: jg 0x447e7; ret; 
0x0000000000444846: jg 0x44857; ret; 
0x00000000004448b6: jg 0x448c7; ret; 
0x00000000004448a3: jg 0x448ec; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004448b1: jg 0x448fa; add eax, 0xf7f0ff3; ret; 
0x0000000000444926: jg 0x44937; ret; 
0x0000000000444921: jg 0x4496a; add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x0000000000444996: jg 0x449a7; ret; 
0x0000000000444991: jg 0x449da; add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000444a06: jg 0x44a17; ret; 
0x0000000000444a01: jg 0x44a4a; add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000444a76: jg 0x44a87; ret; 
0x0000000000444a71: jg 0x44aba; add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000446768: jg 0x467b1; loope 0x4675f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000004467df: jg 0x46828; ret 0xff2; 
0x000000000044686f: jg 0x468b8; ret; 
0x0000000000446918: jg 0x46961; in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000446998: jg 0x469e1; in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000446a18: jg 0x46a61; out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000446a98: jg 0x46ae1; out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000446d18: jg 0x46d61; in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000446d98: jg 0x46de1; in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000446e28: jg 0x46e71; out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000446ea8: jg 0x46ef1; out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000446f1c: jg 0x46f25; ret; 
0x0000000000446f76: jg 0x46f87; ret; 
0x0000000000446f71: jg 0x46fba; psllq mm1, qword ptr [rdi]; jg 0x46f87; ret; 
0x0000000000446fe6: jg 0x46ff7; ret; 
0x0000000000447056: jg 0x47067; ret; 
0x0000000000447043: jg 0x4708c; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000447051: jg 0x4709a; or eax, 0xf7f0ff3; ret; 
0x00000000004470c6: jg 0x470d7; ret; 
0x00000000004470c1: jg 0x4710a; or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x0000000000447136: jg 0x47147; ret; 
0x0000000000447131: jg 0x4717a; or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x00000000004471a6: jg 0x471b7; ret; 
0x00000000004471a1: jg 0x471ea; or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000447216: jg 0x47227; ret; 
0x0000000000447211: jg 0x4725a; or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000447286: jg 0x47297; ret; 
0x0000000000447281: jg 0x472ca; or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x00000000004472f6: jg 0x47307; ret; 
0x0000000000447366: jg 0x47377; ret; 
0x00000000004473d6: jg 0x473e7; ret; 
0x00000000004473c3: jg 0x4740c; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004473d1: jg 0x4741a; add eax, 0xf7f0ff3; ret; 
0x0000000000447446: jg 0x47457; ret; 
0x0000000000447441: jg 0x4748a; add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x00000000004474b6: jg 0x474c7; ret; 
0x00000000004474b1: jg 0x474fa; add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000447526: jg 0x47537; ret; 
0x0000000000447521: jg 0x4756a; add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000447596: jg 0x475a7; ret; 
0x0000000000447591: jg 0x475da; add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x00000000004476d0: jg 0x476d9; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x00000000004476f4: jg 0x476fd; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000447708: jg 0x47711; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000447b7a: jg 0x47b74; ret; 
0x0000000000453426: jg 0x5342f; ret; 
0x0000000000453436: jg 0x5343f; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000045344a: jg 0x53453; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000453469: jg 0x53472; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000453479: jg 0x53482; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000453489: jg 0x53492; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000004534aa: jg 0x534b3; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000004534ca: jg 0x534d3; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004534ea: jg 0x534f3; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000045350a: jg 0x53513; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000045352e: jg 0x53537; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000045354d: jg 0x53556; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000045356d: jg 0x53576; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000045358b: jg 0x53594; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004535ab: jg 0x535b4; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004535cb: jg 0x535d4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004535eb: jg 0x535f4; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000453ab6: jg 0x53abf; lea rax, [rdi + 0xf]; ret; 
0x0000000000453ac6: jg 0x53acf; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000453ada: jg 0x53ae3; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000453af9: jg 0x53b02; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000453b19: jg 0x53b22; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000453b39: jg 0x53b42; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000453b5a: jg 0x53b63; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x0000000000453b7a: jg 0x53b83; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000453b9a: jg 0x53ba3; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000453bba: jg 0x53bc3; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000453bde: jg 0x53be7; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000453bfd: jg 0x53c06; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000453c1d: jg 0x53c26; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000453c3b: jg 0x53c44; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000453c5b: jg 0x53c64; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x0000000000453c7b: jg 0x53c84; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x0000000000453c3f: jg 0x53c98; or eax, 0x1c478d48; ret; 
0x0000000000453c9b: jg 0x53ca4; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x0000000000455e87: jg 0x55e90; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000455e7d: jg 0x55e96; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000456314: jg 0x56346; movups xmmword ptr [r11], xmm8; ret; 
0x00000000004563e2: jg 0x56414; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000456423: jg 0x5642c; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000045645f: jg 0x56468; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x00000000004564ba: jg 0x564c3; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000456586: jg 0x5658f; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000045664b: jg 0x56670; vzeroupper; ret; 
0x0000000000456645: jg 0x56688; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x0000000000456640: jg 0x566bb; rol ch, 0x7e; jg 0x56688; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x00000000004566f2: jg 0x566f7; vzeroupper; ret; 
0x00000000004566ed: jg 0x5674f; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000045677e: jg 0x567a3; vzeroupper; ret; 
0x0000000000456778: jg 0x567bb; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x0000000000456773: jg 0x567ee; rol ch, 0x7e; jg 0x567bb; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000045680e: jg 0x56813; vzeroupper; ret; 
0x000000000045685c: jg 0x56865; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x0000000000456809: jg 0x5686b; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x00000000004568a8: jg 0x568b1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x000000000045690a: jg 0x56913; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000456922: jg 0x5692b; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000456a18: jg 0x56a21; vmovdqu64 zmmword ptr [rdi + 0x40], zmm1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x0000000000456b06: jg 0x56b2b; vzeroupper; ret; 
0x0000000000456aff: jg 0x56b42; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000456af1: jg 0x56b64; jmp qword ptr [rdx - 0xf]; 
0x0000000000456bc6: jg 0x56bcb; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000456bcc: jg 0x56bd1; vzeroupper; ret; 
0x0000000000456b8c: jg 0x56bd7; jmp qword ptr [rdx - 0x2f]; 
0x0000000000456c9f: jg 0x56cc4; vzeroupper; ret; 
0x0000000000456c98: jg 0x56cdb; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000456c8a: jg 0x56cfd; jmp qword ptr [rdx - 0xf]; 
0x0000000000456d6c: jg 0x56d71; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000456d72: jg 0x56d77; vzeroupper; ret; 
0x0000000000456ddc: jg 0x56de5; ret; 
0x0000000000456e2c: jg 0x56e35; ret; 
0x0000000000456e40: jg 0x56e49; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000456e44: jg 0x56e8d; adc bl, dh; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000456f34: jg 0x56f3d; vzeroupper; ret; 
0x0000000000456f84: jg 0x56f8d; vzeroupper; ret; 
0x0000000000456f9e: jg 0x56fa7; vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x0000000000457043: jg 0x5704c; vzeroupper; ret; 
0x00000000004570c1: jg 0x570ca; vzeroupper; ret; 
0x0000000000457121: jg 0x5712a; vzeroupper; ret; 
0x000000000045713d: jg 0x57146; vmovdqu64 zmmword ptr [rdi + 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x000000000045720b: jg 0x57214; vzeroupper; ret; 
0x0000000000457219: jg 0x57222; vzeroupper; ret; 
0x0000000000457270: jg 0x572ab; ret 0x2b77; 
0x00000000004573e7: jg 0x573e0; int1; mov eax, eax; ret; 
0x000000000045b4c2: jg 0x5b4a6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000045c86a: jg 0x5c86e; add byte ptr [rcx], bh; ret; 
0x000000000045c889: jg 0x5c88d; add byte ptr [rcx], dh; sar byte ptr [rcx], cl; ret; 
0x0000000000463338: jg 0x632c3; ret 0xdb76; 
0x000000000046e7a2: jg 0x6e7b3; test byte ptr [rip - 0x7c000011], al; ret; 
0x0000000000478d72: jg 0x78d83; test byte ptr [rip - 0x7c000003], dl; ret; 
0x000000000047a1ea: jg 0x7a1fb; test byte ptr [rbp - 0x7c000018], bl; ret; 
0x000000000047a2e7: jg 0x7a2f8; test byte ptr [rax - 0x7c000019], ah; ret; 
0x0000000000488973: jg 0x8896d; jmp qword ptr [rsi + 0x2e]; 
0x0000000000491b15: jg 0x91b3f; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x00000000004939c9: jg 0x93a3f; call 0x93c97; add byte ptr [rax], al; mov eax, 1; ret; 
0x0000000000499d32: jg 0x99d34; add byte ptr [rcx + 0x7fffe1], al; add byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x0000000000499d38: jg 0x99d3a; add byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x000000000049fbdc: jg 0x9fc01; add byte ptr [rcx + rcx*4 + 0x2d], cl; ret 0x237e; 
0x00000000004af3e9: jg 0xaf3e4; push qword ptr [rax]; jg 0xaf3e8; inc eax; jle 0xaf3ec; call qword ptr [rax + 0x7e]; 
0x00000000004af3ed: jg 0xaf3e8; inc eax; jle 0xaf3ec; call qword ptr [rax + 0x7e]; 
0x00000000004af3ed: jg 0xaf3e8; inc eax; jle 0xaf3ec; call qword ptr [rax + 0x7e]; stc; jmp rax; 
0x00000000004af429: jg 0xaf424; call qword ptr [rsi]; 
0x00000000004af4ad: jg 0xaf4a8; call qword ptr [rdx + 0x22fff97e]; jle 0xaf4b0; push qword ptr [rdx + 0x42fff97d]; jge 0xaf4b8; call rdx; 
0x00000000004af565: jg 0xaf560; call qword ptr [rdi + rdi*2 - 7]; jmp rsp; 
0x00000000004af569: jg 0xaf564; jmp rsp; 
0x00000000004af5e5: jg 0xaf5e0; inc dword ptr [rax + 0x7f]; stc; call rax; 
0x00000000004af5e5: jg 0xaf5e0; inc dword ptr [rax + 0x7f]; stc; call rax; jle 0xaf5e8; jmp qword ptr [rax + 0x7e]; 
0x00000000004af5e9: jg 0xaf5e4; call rax; 
0x00000000004af5e9: jg 0xaf5e4; call rax; jle 0xaf5e8; jmp qword ptr [rax + 0x7e]; 
0x000000000040bc23: jg 0xbc86; or dword ptr [rax], eax; ret; 
0x00000000004cba39: jg 0xcba31; jmp qword ptr [rbx]; 
0x00000000004cba51: jg 0xcba49; jmp qword ptr [rbx]; 
0x000000000040e9fe: jg 0xea09; add cl, ch; ret 0xffe2; 
0x00000000004018df: jge 0x18eb; add byte ptr [rax], al; test eax, eax; js 0x18f0; add rsp, 0x18; ret; 
0x000000000041cc1a: jge 0x1cc1c; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000042eb8b: jge 0x2ebb7; add byte ptr [rax - 0x73], cl; add eax, 0xfffff57b; mov qword ptr [rip + 0x2a7d04], rax; ret; 
0x000000000043b0d2: jge 0x3b0eb; call 0x29933e8; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000456d29: jge 0x56d73; out 0x49, eax; jmp qword ptr [rdx - 0x2f]; 
0x0000000000496c32: jge 0x96c7c; cmp dword ptr [rip + 0x23f33d], 0; jne 0x96c3f; pop rbx; ret; 
0x000000000049bd01: jge 0x9bd0b; add eax, 0x458b3777; or byte ptr [rcx + 0x63], cl; add al, 0x86; add rax, r14; jmp rax; 
0x000000000049c8d2: jge 0x9c8cc; leave; ret; 
0x000000000049ca50: jge 0x9ca4a; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049cb9c: jge 0x9cb96; leave; ret; 
0x000000000049cbe8: jge 0x9cbe2; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049cd77: jge 0x9cd71; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049ced7: jge 0x9ced1; leave; ret; 
0x000000000049cf28: jge 0x9cf22; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d2f8: jge 0x9d303; jp 0x9d370; adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004af439: jge 0xaf434; call qword ptr [rsi + 0x7d]; 
0x00000000004af439: jge 0xaf434; call qword ptr [rsi + 0x7d]; stc; jmp rsi; 
0x00000000004af43d: jge 0xaf438; jmp rsi; 
0x00000000004af4b9: jge 0xaf4b4; inc dword ptr [rdx + 0x7d]; stc; call rdx; 
0x00000000004af4b9: jge 0xaf4b4; inc dword ptr [rdx + 0x7d]; stc; call rdx; jl 0xaf4bc; jmp qword ptr [rdx + 0x7c]; 
0x00000000004af4bd: jge 0xaf4b8; call rdx; 
0x00000000004af4bd: jge 0xaf4b8; call rdx; jl 0xaf4bc; jmp qword ptr [rdx + 0x7c]; 
0x00000000004af57d: jge 0xaf578; push qword ptr [rsp + rdi*2 + 0x7c44fff9]; stc; call rsp; 
0x00000000004af5f9: jge 0xaf5f4; call qword ptr [rax]; 
0x000000000040b0cb: jge 0xb139; or dword ptr [rax], eax; ret; 
0x00000000004b1dd5: jge 0xb1dd2; call rsp; 
0x0000000000410371: jl 0x10397; sub byte ptr [rdi], al; add dword ptr [rax], eax; add byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000413756: jl 0x1377c; sub byte ptr [rax - 0x7d], cl; ret; 
0x000000000041c148: jl 0x1c16e; or byte ptr [rcx - 0x77], cl; ret 0x8b4c; 
0x000000000041ed3d: jl 0x1edac; add byte ptr [rax - 0x39], cl; ret 0x8308; 
0x00000000004024f0: jl 0x2563; add eax, 0x1ff8c100; and eax, 0xfffffffe; add rsp, 0x18; ret; 
0x0000000000426302: jl 0x26319; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000042dd5b: jl 0x2dd53; ret 0x7508; 
0x000000000044765f: jl 0x476a9; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000447666: jl 0x476b0; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000044766d: jl 0x476b7; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000447674: jl 0x476be; adc dword ptr [rcx - 1], edi; ret; 
0x000000000044769c: jl 0x476e6; adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004476a2: jl 0x476ec; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004476a9: jl 0x476f3; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004476b0: jl 0x476fa; adc dword ptr [rcx - 1], ebx; ret; 
0x0000000000447899: jl 0x478e3; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004478a0: jl 0x478ea; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004478a7: jl 0x478f1; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004478ae: jl 0x478f8; adc dword ptr [rcx - 1], edi; ret; 
0x0000000000447a07: jl 0x47a51; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000447a0e: jl 0x47a58; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000447a15: jl 0x47a5f; adc dword ptr [rcx + 7], edi; ret; 
0x0000000000447b62: jl 0x47bac; adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000447b69: jl 0x47bb3; adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000447b70: jl 0x47bba; adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000447b77: jl 0x47bc1; adc dword ptr [rdi - 8], edi; ret; 
0x0000000000455e27: jl 0x55e71; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455e2e: jl 0x55e78; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455e35: jl 0x55e7f; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455e3c: jl 0x55e86; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000455e49: jl 0x55e93; adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455e4f: jl 0x55e99; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455e56: jl 0x55ea0; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455e5d: jl 0x55ea7; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000455e6a: jl 0x55eb4; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455e70: jl 0x55eba; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000455f30: jl 0x55f7a; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455f37: jl 0x55f81; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455f3e: jl 0x55f88; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455f45: jl 0x55f8f; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000455f89: jl 0x55fd3; adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000455f8f: jl 0x55fd9; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000455f96: jl 0x55fe0; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000455f9d: jl 0x55fe7; adc dword ptr [rsi + 3], edx; ret; 
0x000000000045602c: jl 0x56076; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000456033: jl 0x5607d; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000045603a: jl 0x56084; adc dword ptr [rsi + 7], edx; ret; 
0x00000000004569f0: jl 0x56a09; cld; vzeroupper; ret; 
0x0000000000458410: jl 0x58417; add byte ptr [rax + 0x63], cl; add al, 0x9a; add rax, rdx; jmp rax; 
0x00000000004058c7: jl 0x58ed; cmp byte ptr [rcx - 0x76e3db94], cl; ret; 
0x0000000000459107: jl 0x5912d; adc byte ptr [rdi], cl; xchg eax, esp; ret 0x2044; 
0x0000000000459a92: jl 0x59ab8; or byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x000000000045b4bc: jl 0x5b4a6; cmp rcx, qword ptr [rax + 0x18]; jg 0x5b4a6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x00000000004600f1: jl 0x60117; and byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x00000000004623d8: jl 0x623fe; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000046340a: jl 0x63430; cmp byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x000000000046521d: jl 0x65243; add byte ptr [rsi + rsi*2 - 0xa], sil; ret; 
0x000000000046594d: jl 0x65973; or al, 0xe9; ret; 
0x000000000046645d: jl 0x66483; add byte ptr [rdx + rdi*2 - 0xa], sil; ret; 
0x0000000000468632: jl 0x68658; sbb al, ch; outsb dx, byte ptr ss:[rsi]; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000004699eb: jl 0x69a11; cmovns eax, dword ptr [rbx + 0x149f0e7]; ror byte ptr [rax - 0x77], 1; ret 0x894c; 
0x000000000046a8b7: jl 0x6a8dd; and byte ptr [rax + 1], cl; ret; 
0x000000000046ad2e: jl 0x6ad54; or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x000000000046b076: jl 0x6b09c; xor byte ptr [rax + 0x39], cl; ret 0x8d48; 
0x000000000046f3f6: jl 0x6f465; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x00000000004748e9: jl 0x74958; add byte ptr [rax - 0x39], cl; ret 0x8308; 
0x0000000000476a3b: jl 0x76a61; add byte ptr [rcx + 0xf], al; xchg eax, esp; ret; 
0x0000000000478125: jl 0x7814b; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000047ac59: jl 0x7acc8; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000484a0f: jl 0x84a35; sbb byte ptr [rax + 0x101], bh; syscall; 
0x0000000000487f77: jl 0x87f9d; cmovs eax, dword ptr [rbx - 0x4a170f19]; test bh, dh; dec dword ptr [rax - 0x77]; ret; 
0x00000000004895aa: jl 0x895b2; and al, ch; push -0x49; jmp qword ptr [rsi + 0xf]; 
0x000000000048aa05: jl 0x8aa2b; or byte ptr [rax - 0x7d], cl; ret 0x101; 
0x00000000004919f5: jl 0x91a1b; sbb byte ptr [rax - 0x75], cl; push rsp; and al, 0x10; call rdx; 
0x0000000000493700: jl 0x936fe; jmp qword ptr [rsi + 0x2e]; 
0x0000000000497840: jl 0x97864; add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x00000000004991f3: jl 0x99180; adc byte ptr [r13 - 0x267bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x00000000004af405: jl 0xaf400; jmp qword ptr [rax]; 
0x00000000004af4c1: jl 0xaf4bc; jmp qword ptr [rdx + 0x7c]; 
0x00000000004af581: jl 0xaf57c; inc dword ptr [rsp + rdi*2 - 7]; call rsp; 
0x00000000004af585: jl 0xaf580; call rsp; 
0x00000000004af601: jl 0xaf5fc; push qword ptr [rax]; jl 0xaf600; inc eax; jnp 0xaf604; call qword ptr [rax + 0x7b]; 
0x00000000004af605: jl 0xaf600; inc eax; jnp 0xaf604; call qword ptr [rax + 0x7b]; 
0x00000000004c5c6c: jl 0xc5cbc; std; call rsp; 
0x00000000004c9f18: jl 0xc9f57; add byte ptr [rax], al; sal ebp, 1; jmp qword ptr [rdi + 2]; 
0x00000000004cb979: jl 0xcb971; jmp qword ptr [rbx]; 
0x00000000004cb991: jl 0xcb989; call qword ptr [rsi]; 
0x00000000004cc5c4: jl 0xcc589; clc; jmp qword ptr [rax]; 
0x00000000004ce318: jl 0xce29b; add byte ptr [rax], al; fdivp st(1); call qword ptr [rdx]; 
0x00000000004d0818: jl 0xd07c0; add byte ptr [rax], al; test dh, dh; sti; call rdx; 
0x00000000004d1718: jl 0xd16cf; add byte ptr [rax], al; in al, 0x60; cld; jmp qword ptr [rdx]; 
0x000000000040ff3f: jl 0xff65; or al, 0x48; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x000000000041bf63: jle 0x1bf6b; add byte ptr [rax], al; lea rdi, [rip + 0x91272]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000425fba: jle 0x25fbd; call qword ptr [rbx + 0x18]; 
0x000000000043b205: jle 0x3b21d; vpcmpeqb xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x3b120; ret; 
0x000000000044fb9e: jle 0x4fba0; add byte ptr [rax], al; bsf rax, rdx; ret; 
0x0000000000455d11: jle 0x55d48; movsxd rax, ecx; ret; 
0x0000000000455ea0: jle 0x55e63; cmp dl, 4; jb 0x55ead; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x00000000004560fe: jle 0x5610f; adc byte ptr [rsi], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000456644: jle 0x566c5; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x0000000000456777: jle 0x567f8; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x0000000000467a62: jle 0x67a6c; sub eax, 1; mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x00000000004727b0: jle 0x726a6; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000048508f: jle 0x850a5; jne 0x850c2; jne 0x84fbd; mov eax, 1; leave; ret; 
0x000000000048e8ee: jle 0x8e8fb; cli; dec dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000049e962: jle 0x9e90e; and eax, dword ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000004af3f1: jle 0xaf3ec; call qword ptr [rax + 0x7e]; 
0x00000000004af3f1: jle 0xaf3ec; call qword ptr [rax + 0x7e]; stc; jmp rax; 
0x00000000004af3f5: jle 0xaf3f0; jmp rax; 
0x00000000004af431: jle 0xaf42c; push qword ptr [rsi]; jle 0xaf430; inc esi; jge 0xaf434; call qword ptr [rsi + 0x7d]; 
0x00000000004af435: jle 0xaf430; inc esi; jge 0xaf434; call qword ptr [rsi + 0x7d]; 
0x00000000004af435: jle 0xaf430; inc esi; jge 0xaf434; call qword ptr [rsi + 0x7d]; stc; jmp rsi; 
0x00000000004af4b1: jle 0xaf4ac; jmp qword ptr [rdx]; 
0x00000000004af4b5: jle 0xaf4b0; push qword ptr [rdx + 0x42fff97d]; jge 0xaf4b8; call rdx; 
0x00000000004af575: jle 0xaf570; call qword ptr [rbp + rdi*2 + 0x7d24fff9]; stc; push qword ptr [rsp + rdi*2 + 0x7c44fff9]; stc; call rsp; 
0x00000000004af5ed: jle 0xaf5e8; jmp qword ptr [rax + 0x7e]; 
0x00000000004c381a: jle 0xc37b5; mov edi, 0x99b51319; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x0000000000400c98: jle 0xc8a; lea edx, [rdi + 3]; cmp edx, 1; jbe 0xc8a; mov eax, 0xfffffff2; ret; 
0x00000000004cdfd5: jle 0xcdfd7; add al, bh; ret 0xfff9; 
0x00000000004cdfed: jle 0xcdfef; add byte ptr [rax], al; ret; 
0x00000000004ce001: jle 0xce003; add byte ptr [rbx + rax*8], cl; stc; call qword ptr [rcx]; 
0x00000000004ce015: jle 0xce017; add byte ptr [rax], bl; ret; 
0x00000000004ce029: jle 0xce02b; add byte ptr [rbx + rax*8], ah; stc; call qword ptr [rax]; 
0x00000000004ce075: jle 0xce077; add al, bl; ret; 
0x00000000004aeeab: jmp qword ptr [rax + 0x13]; 
0x00000000004aed6f: jmp qword ptr [rax + 0x21]; 
0x00000000004aed33: jmp qword ptr [rax + 0x23]; 
0x00000000004aedd7: jmp qword ptr [rax + 0x24]; 
0x00000000004aee3b: jmp qword ptr [rax + 0x25]; 
0x00000000004aedbf: jmp qword ptr [rax + 0x28]; 
0x00000000004afa1f: jmp qword ptr [rax + 0x39]; 
0x00000000004afa5b: jmp qword ptr [rax + 0x3a]; 
0x00000000004afab3: jmp qword ptr [rax + 0x3f]; 
0x00000000004afad7: jmp qword ptr [rax + 0x40]; 
0x00000000004afaf7: jmp qword ptr [rax + 0x41]; 
0x00000000004af84f: jmp qword ptr [rax + 0x53]; 
0x00000000004af0f7: jmp qword ptr [rax + 0x57]; 
0x00000000004aeedf: jmp qword ptr [rax + 0x5a]; 
0x00000000004ae94b: jmp qword ptr [rax + 0x68]; 
0x00000000004ae91b: jmp qword ptr [rax + 0x6c]; 
0x00000000004ae93b: jmp qword ptr [rax + 0x75]; 
0x00000000004b1d87: jmp qword ptr [rax + 0x78]; 
0x00000000004af5ef: jmp qword ptr [rax + 0x7e]; 
0x00000000004aee57: jmp qword ptr [rax + 0xc]; 
0x00000000004d15a3: jmp qword ptr [rax + 1]; 
0x00000000004aebe3: jmp qword ptr [rax + 2]; 
0x00000000004aec67: jmp qword ptr [rax + 3]; 
0x00000000004aebe7: jmp qword ptr [rax + 4]; 
0x00000000004aec6b: jmp qword ptr [rax + 5]; 
0x00000000004aebeb: jmp qword ptr [rax + 6]; 
0x000000000040bbd3: jmp qword ptr [rax + 9]; 
0x00000000004aecdf: jmp qword ptr [rax - 0x19]; 
0x00000000004aeb0f: jmp qword ptr [rax - 0x21]; 
0x00000000004aeb3b: jmp qword ptr [rax - 0x24]; 
0x00000000004af9a3: jmp qword ptr [rax - 0x28]; 
0x00000000004aea47: jmp qword ptr [rax - 0x29]; 
0x00000000004af983: jmp qword ptr [rax - 0x35]; 
0x00000000004b095b: jmp qword ptr [rax - 0x4c]; 
0x00000000004ae9db: jmp qword ptr [rax - 0x53]; 
0x00000000004af927: jmp qword ptr [rax - 0x65]; 
0x00000000004ae997: jmp qword ptr [rax - 0x6a]; 
0x00000000004af3d7: jmp qword ptr [rax - 0x7f]; 
0x00000000004aeccb: jmp qword ptr [rax - 0xb]; 
0x00000000004af9ff: jmp qword ptr [rax - 0xc]; 
0x00000000004ad207: jmp qword ptr [rax - 0xf]; 
0x00000000004aeb53: jmp qword ptr [rax - 5]; 
0x00000000004caf37: jmp qword ptr [rax]; 
0x00000000004aa317: jmp qword ptr [rbp + 0xe]; 
0x00000000004c7e4b: jmp qword ptr [rbp + 2]; 
0x00000000004a7473: jmp qword ptr [rbp]; 
0x00000000004ab49f: jmp qword ptr [rbx + 0x11]; 
0x00000000004cbebb: jmp qword ptr [rbx + 0x17]; 
0x00000000004ab1c7: jmp qword ptr [rbx + 0xf000001]; 
0x00000000004a7d43: jmp qword ptr [rbx + 1]; 
0x00000000004cba83: jmp qword ptr [rbx + 2]; 
0x00000000004cea83: jmp qword ptr [rbx + 8]; 
0x00000000004c0ee6: jmp qword ptr [rbx - 0x40]; 
0x000000000046a0bd: jmp qword ptr [rbx - 7]; 
0x00000000004d21b3: jmp qword ptr [rbx]; 
0x00000000004a1993: jmp qword ptr [rcx + 0x63]; 
0x00000000004ab9bf: jmp qword ptr [rcx + 0x8000001]; 
0x00000000004d003b: jmp qword ptr [rcx + 0xe]; 
0x00000000004a75e7: jmp qword ptr [rcx + 1]; 
0x00000000004c688b: jmp qword ptr [rcx + 2]; 
0x0000000000488968: jmp qword ptr [rcx + 3]; 
0x00000000004d1af3: jmp qword ptr [rcx + 9]; 
0x00000000004c1843: jmp qword ptr [rcx - 0x69]; 
0x00000000004d1757: jmp qword ptr [rcx]; 
0x00000000004cd823: jmp qword ptr [rdi + 0x11]; 
0x00000000004cbc07: jmp qword ptr [rdi + 0x2b]; 
0x00000000004c60e3: jmp qword ptr [rdi + 0x5a]; 
0x00000000004aaf1f: jmp qword ptr [rdi + 0x6000001]; 
0x00000000004b0f53: jmp qword ptr [rdi + 0x63]; 
0x000000000048ddeb: jmp qword ptr [rdi + 0x6d]; 
0x0000000000474d76: jmp qword ptr [rdi + 0x74]; 
0x00000000004750f8: jmp qword ptr [rdi + 0x75]; 
0x00000000004c9f1f: jmp qword ptr [rdi + 2]; 
0x00000000004cbe8b: jmp qword ptr [rdi + 6]; 
0x00000000004b0093: jmp qword ptr [rdi - 0x7a]; 
0x00000000004c658f: jmp qword ptr [rdi]; 
0x00000000004c84a7: jmp qword ptr [rdx + 0x36]; 
0x00000000004479e2: jmp qword ptr [rdx + 0x51]; 
0x00000000004af193: jmp qword ptr [rdx + 0x52]; 
0x00000000004aefcb: jmp qword ptr [rdx + 0x55]; 
0x0000000000447b43: jmp qword ptr [rdx + 0x71]; 
0x00000000004af6c3: jmp qword ptr [rdx + 0x72]; 
0x00000000004af4c3: jmp qword ptr [rdx + 0x7c]; 
0x00000000004aa98b: jmp qword ptr [rdx + 0xe000001]; 
0x00000000004d1f6b: jmp qword ptr [rdx + 1]; 
0x00000000004d0e37: jmp qword ptr [rdx + 5]; 
0x0000000000447afb: jmp qword ptr [rdx - 0x2f]; 
0x00000000004c1890: jmp qword ptr [rdx - 0x71]; 
0x00000000004c39b3: jmp qword ptr [rdx - 0x78]; 
0x0000000000447641: jmp qword ptr [rdx - 0xf]; 
0x00000000004cf0f3: jmp qword ptr [rdx]; 
0x00000000004012e5: jmp qword ptr [rsi + 0x2e]; 
0x00000000004ad0e3: jmp qword ptr [rsi + 0x3f]; 
0x0000000000406f7a: jmp qword ptr [rsi + 0x41]; 
0x0000000000455aa3: jmp qword ptr [rsi + 0x44]; 
0x000000000044231f: jmp qword ptr [rsi + 0x45]; 
0x000000000048dfdf: jmp qword ptr [rsi + 0x48]; 
0x00000000004aef27: jmp qword ptr [rsi + 0x59]; 
0x0000000000474d92: jmp qword ptr [rsi + 0x75]; 
0x00000000004cda0b: jmp qword ptr [rsi + 0xa]; 
0x0000000000401261: jmp qword ptr [rsi + 0xf]; 
0x00000000004c71bb: jmp qword ptr [rsi + 1]; 
0x00000000004d02fb: jmp qword ptr [rsi + 5]; 
0x00000000004d041b: jmp qword ptr [rsi + 7]; 
0x00000000004a253b: jmp qword ptr [rsi - 0x2e]; 
0x00000000004a261f: jmp qword ptr [rsi - 0x31]; 
0x00000000004a2793: jmp qword ptr [rsi - 0x34]; 
0x00000000004a28df: jmp qword ptr [rsi - 0x37]; 
0x0000000000405bf9: jmp qword ptr [rsi - 0x39]; 
0x00000000004a29f7: jmp qword ptr [rsi - 0x3a]; 
0x00000000004a2ab3: jmp qword ptr [rsi - 0x3d]; 
0x000000000049dfbf: jmp qword ptr [rsi - 0x3f]; 
0x00000000004a2bd7: jmp qword ptr [rsi - 0x40]; 
0x00000000004a2ccb: jmp qword ptr [rsi - 0x43]; 
0x00000000004a2ddf: jmp qword ptr [rsi - 0x46]; 
0x00000000004a2f13: jmp qword ptr [rsi - 0x49]; 
0x00000000004a3043: jmp qword ptr [rsi - 0x4c]; 
0x00000000004a319b: jmp qword ptr [rsi - 0x4f]; 
0x00000000004a33a7: jmp qword ptr [rsi - 0x52]; 
0x00000000004a365b: jmp qword ptr [rsi - 0x55]; 
0x0000000000400fed: jmp qword ptr [rsi - 0x70]; 
0x00000000004778cc: jmp qword ptr [rsi - 0x7b]; 
0x0000000000459321: jmp qword ptr [rsi - 0x7d]; 
0x000000000047396d: jmp qword ptr [rsi - 0x7f]; 
0x00000000004af41f: jmp qword ptr [rsi - 0x80]; 
0x00000000004d1ce3: jmp qword ptr [rsi]; 
0x0000000000400ab1: jmp rax; 
0x000000000048f4c1: jmp rbx; 
0x0000000000431822: jmp rcx; 
0x000000000041c25e: jmp rdi; 
0x000000000040467f: jmp rdx; 
0x00000000004695d7: jmp rsi; 
0x000000000047cbbd: jmp rsp; 
0x000000000040fe28: jne 0x10040; call qword ptr [rbx + 0x10]; 
0x0000000000414acc: jne 0x14ad8; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000040151e: jne 0x1547; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004015cc: jne 0x15d8; mov eax, 0xffffffea; ret; 
0x00000000004016a5: jne 0x172d; add rsp, 0xc8; ret; 
0x000000000040174c: jne 0x1758; mov eax, 0xffffffea; ret; 
0x0000000000401835: jne 0x18bd; add rsp, 0xc8; ret; 
0x0000000000401aec: jne 0x1b87; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000041c8eb: jne 0x1c90c; add rsp, 0x118; ret; 
0x000000000041d676: jne 0x1d5a0; mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000041e462: jne 0x1e46c; add rsp, 0xd8; ret; 
0x000000000041e754: jne 0x1e75f; add rsp, 0xd0; pop rbx; ret; 
0x000000000041e8e3: jne 0x1e8ef; add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x0000000000401d9d: jne 0x1ee3; add rsp, 0x20; pop rbx; ret; 
0x000000000041fb7e: jne 0x1fbf6; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000004205a4: jne 0x205ad; mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x0000000000420c0e: jne 0x20cbd; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000422688: jne 0x22691; mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x00000000004254a7: jne 0x25566; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000425788: jne 0x257d4; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000004269a9: jne 0x26c56; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000426d51: jne 0x26d0f; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000426d9c: jne 0x26d90; lea eax, [rdx + rdi]; ret; 
0x00000000004276f3: jne 0x27700; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000004283c7: jne 0x283ad; sub al, byte ptr [rax]; ret; 
0x0000000000429310: jne 0x29318; add rsp, 0x20; pop rbx; ret; 
0x0000000000431f1a: jne 0x31e9f; ret; 
0x0000000000432227: jne 0x32210; sub rax, 0x10; ret; 
0x00000000004350cc: jne 0x350b0; xor eax, eax; sub eax, ecx; ret; 
0x000000000040371e: jne 0x3708; xor ebx, ebx; mov rax, rbx; pop rbx; ret; 
0x000000000043a4c5: jne 0x3a5a0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000043a567: jne 0x3a5c0; xor eax, eax; ret; 
0x000000000043a537: jne 0x3a5e0; xor eax, eax; ret; 
0x000000000043a7a3: jne 0x3a7f0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000043a9e3: jne 0x3aa00; xor eax, eax; vzeroupper; ret; 
0x000000000043a9a6: jne 0x3aa40; xor eax, eax; vzeroupper; ret; 
0x0000000000403ad6: jne 0x3af5; add rsp, 0x48; ret; 
0x000000000043b214: jne 0x3b120; ret; 
0x000000000043b11a: jne 0x3b120; vzeroupper; ret; 
0x000000000043c5c7: jne 0x3c9f3; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000043c06d: jne 0x3c9f3; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000043bfc1: jne 0x3c9f3; xor eax, eax; ret; 
0x000000000043c0b8: jne 0x3c9ff; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000043bfe9: jne 0x3c9ff; xor eax, eax; ret; 
0x000000000043c2ba: jne 0x3ca0a; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000043c14d: jne 0x3ca20; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000403b52: jne 0x3e24; add rsp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x0000000000403e79: jne 0x3e9d; add rsp, 0x10; pop rbx; ret; 
0x0000000000453e40: jne 0x53d30; lea rax, [rdi + 0xb]; ret; 
0x0000000000453dfa: jne 0x53d30; lea rax, [rdi + 0xf]; ret; 
0x0000000000453da5: jne 0x53d30; lea rax, [rdi + 3]; ret; 
0x0000000000453d77: jne 0x53d30; lea rax, [rdi + 7]; ret; 
0x0000000000453d22: jne 0x53d34; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000453d9c: jne 0x53f10; test dl, 4; jne 0x53d30; lea rax, [rdi + 3]; ret; 
0x0000000000453e7e: jne 0x53f40; test al, 0x40; jne 0x53f50; lea rax, [rdi + 7]; ret; 
0x0000000000453e86: jne 0x53f50; lea rax, [rdi + 7]; ret; 
0x0000000000453d6e: jne 0x53f50; test dl, 0x40; jne 0x53d30; lea rax, [rdi + 7]; ret; 
0x0000000000453e37: jne 0x53f80; test dh, 4; jne 0x53d30; lea rax, [rdi + 0xb]; ret; 
0x0000000000453ed0: jne 0x53fb0; test ah, 0x40; jne 0x53fc0; lea rax, [rdi + 0xf]; ret; 
0x0000000000453ed9: jne 0x53fc0; lea rax, [rdi + 0xf]; ret; 
0x0000000000453df1: jne 0x53fc0; test dh, 0x40; jne 0x53d30; lea rax, [rdi + 0xf]; ret; 
0x00000000004551d5: jne 0x55250; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000455504: jne 0x55710; xor eax, eax; ret; 
0x0000000000455664: jne 0x55725; cmp eax, ecx; jne 0x55725; xor eax, eax; ret; 
0x0000000000455721: jne 0x55725; cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x0000000000455700: jne 0x55725; movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x55725; xor eax, eax; ret; 
0x00000000004555b1: jne 0x55725; xor eax, eax; ret; 
0x0000000000455831: jne 0x55820; ret; 
0x0000000000455828: jne 0x55840; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x55820; ret; 
0x00000000004558e1: jne 0x558d0; ret; 
0x00000000004558d8: jne 0x558f0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x558d0; ret; 
0x0000000000455a51: jne 0x55a40; lea rax, [rcx - 1]; ret; 
0x0000000000455a48: jne 0x55a60; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x55a40; lea rax, [rcx - 1]; ret; 
0x0000000000455ba1: jne 0x55b90; sub rax, 1; ret; 
0x0000000000455b98: jne 0x55bb0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x55b90; sub rax, 1; ret; 
0x0000000000457014: jne 0x56ff7; vzeroupper; ret; 
0x00000000004571d7: jne 0x571b2; vzeroupper; ret; 
0x00000000004579af: jne 0x579d4; add rsp, 0x20; pop rbx; ret; 
0x000000000045846b: jne 0x58400; mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000458767: jne 0x58779; add rsp, 0x28; ret; 
0x0000000000458858: jne 0x588bb; mov edx, esi; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000458885: jne 0x58939; add rsp, 0x68; ret; 
0x0000000000458997: jne 0x589db; add rsp, 0x58; ret; 
0x00000000004589e8: jne 0x58a00; xor eax, eax; syscall; 
0x0000000000458ab8: jne 0x58ad0; mov eax, 1; syscall; 
0x0000000000458c2b: jne 0x58bf7; lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000458beb: jne 0x58c28; mov eax, dword ptr [rip + 0x280c79]; test eax, eax; jne 0x58c58; mov eax, 0x48; syscall; 
0x0000000000458bf5: jne 0x58c58; mov eax, 0x48; syscall; 
0x0000000000458c18: jne 0x58cc9; add rsp, 0x78; ret; 
0x0000000000458d27: jne 0x58d73; add rsp, 0x68; ret; 
0x0000000000458d88: jne 0x58da0; mov eax, 3; syscall; 
0x0000000000459716: jne 0x59727; add rsp, 0x28; ret; 
0x0000000000400595: jne 0x598; ret; 
0x000000000045ae3a: jne 0x5ae46; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000045aeca: jne 0x5aed6; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000045b052: jne 0x5b044; pop rdx; pop r10; ret; 
0x000000000045b042: jne 0x5b04c; nop; mov eax, 0xca; syscall; 
0x000000000045b09f: jne 0x5b088; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x5b0ac; ret; 
0x000000000045b102: jne 0x5b0f0; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x5b110; ret; 
0x000000000045b2a3: jne 0x5b2af; add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x000000000045d4fc: jne 0x5d4ab; add rsp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x000000000045e3c3: jne 0x5e355; call 0x5c8b0; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000045e3cf: jne 0x5e361; call rsi; 
0x000000000045e8d1: jne 0x5e971; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x000000000045f32f: jne 0x5f342; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000004064ee: jne 0x64d8; mov eax, dword ptr [rsi + 0x14]; cmp dword ptr [rdi + 0x14], eax; sete al; ret; 
0x0000000000466e1f: jne 0x66edf; add rsp, 0xb8; pop rbx; pop r12; ret; 
0x0000000000406768: jne 0x6773; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000467d19: jne 0x67cf0; mov byte ptr [rbp], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000406840: jne 0x68d6; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000040695f: jne 0x6948; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046a3df: jne 0x6a3e6; add rsp, 0x18; ret; 
0x000000000046a627: jne 0x6a673; add rsp, 0x148; ret; 
0x0000000000406a31: jne 0x6ae7; mov eax, 1; ret; 
0x0000000000406cf1: jne 0x6cac; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004076eb: jne 0x7700; cmp dword ptr [rdi + 0x38], 1; sbb eax, eax; and eax, 0xffffffea; ret; 
0x000000000040773a: jne 0x7760; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000478022: jne 0x7802c; add rsp, 0xd8; ret; 
0x00000000004078c1: jne 0x78b0; xor eax, eax; ret; 
0x00000000004079d8: jne 0x79df; add rsp, 0x18; ret; 
0x0000000000407d74: jne 0x7d20; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000480cfa: jne 0x80d68; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x000000000048101c: jne 0x81010; lea eax, [rdx + rdi]; ret; 
0x0000000000481128: jne 0x81140; sub rdx, qword ptr [rcx + 0x10]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x00000000004812a9: jne 0x812b8; mov ecx, dword ptr [rdx + 0x48]; cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x0000000000481358: jne 0x813aa; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x00000000004829e3: jne 0x829e9; xor rax, rax; ret; 
0x0000000000482de3: jne 0x82e10; mov rax, r8; vzeroupper; ret; 
0x0000000000482daa: jne 0x82e50; mov rax, r8; vzeroupper; ret; 
0x000000000048304d: jne 0x83161; add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x00000000004836a3: jne 0x836a9; xor rax, rax; ret; 
0x0000000000483fa3: jne 0x83fd0; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000483f6d: jne 0x84010; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x00000000004847f0: jne 0x8482a; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000484987: jne 0x849e6; mov eax, 0x101; syscall; 
0x00000000004849aa: jne 0x84a69; add rsp, 0x78; ret; 
0x0000000000484abc: jne 0x84b03; add rsp, 0x58; ret; 
0x0000000000484b3f: jne 0x84b49; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000484bee: jne 0x84c0b; add rsp, 0x38; ret; 
0x0000000000485087: jne 0x84fbd; cmp word ptr [rsi + 0x14], 0x2f75; jne 0x84fbd; mov eax, 1; leave; ret; 
0x0000000000485093: jne 0x84fbd; mov eax, 1; leave; ret; 
0x0000000000485091: jne 0x850c2; jne 0x84fbd; mov eax, 1; leave; ret; 
0x000000000048b717: jne 0x8b9a6; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x000000000048bc2c: jne 0x8bc40; mov r15, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000048c03f: jne 0x8c616; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000048d333: jne 0x8d270; lea rsi, [rbp - 0x430]; movsxd rdx, r12d; mov edi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x000000000048db2a: jne 0x8dacb; mov eax, dword ptr [rdx + 4]; ret; 
0x000000000048e6be: jne 0x8e6d0; lea rax, [rsi + 1]; mov qword ptr [rip + 0x24ad45], rax; ret; 
0x000000000048e777: jne 0x8e78c; mov byte ptr [rip + 0x24b0a8], 0; mov qword ptr [rip + 0x24ac89], rax; add rsp, 8; ret; 
0x000000000048e7b7: jne 0x8e7c8; mov rax, qword ptr [rip + 0x24ac50]; ret; 
0x00000000004902c9: jne 0x9029a; movsx eax, cl; neg eax; ret; 
0x000000000049109a: jne 0x910a2; add rsp, 0x20; pop rbx; ret; 
0x0000000000491195: jne 0x911c3; add rsp, 0x38; ret; 
0x0000000000491255: jne 0x9127e; add rsp, 0x68; ret; 
0x00000000004913b6: jne 0x913ee; add rsp, 0x78; ret; 
0x0000000000491685: jne 0x916ae; add rsp, 0x68; ret; 
0x00000000004919ef: jne 0x91a40; mov ebx, eax; mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x0000000000491a35: jne 0x91a55; add rsp, 0x110; pop rbx; ret; 
0x0000000000491ab6: jne 0x91ac1; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000004091f6: jne 0x9270; mov rax, 0x6d2d60; ret; 
0x00000000004091c3: jne 0x9270; mov rax, 0x6d2da0; ret; 
0x00000000004090d4: jne 0x9270; mov rax, 0x6d2de0; ret; 
0x0000000000409140: jne 0x9270; mov rax, 0x6d2e20; ret; 
0x000000000040916c: jne 0x9270; mov rax, 0x6d2e60; ret; 
0x0000000000409206: jne 0x9270; mov rax, 0x6d2f20; ret; 
0x0000000000409111: jne 0x9270; mov rax, 0x6d2f60; ret; 
0x00000000004091de: jne 0x9270; mov rax, 0x6d52c0; ret; 
0x00000000004936c1: jne 0x936fe; leave; ret; 
0x00000000004938f0: jne 0x93908; test rsi, rsi; jne 0x93920; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000004938f5: jne 0x93920; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000004939c3: jne 0x939b4; cmp cx, 0x7fff; je 0x939b4; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000493b61: jne 0x93b48; mov rax, rsi; ret; 
0x0000000000493be5: jne 0x93bc0; mov rax, rsi; ret; 
0x0000000000493c88: jne 0x93d44; add rsp, 0x30; pop rbx; ret; 
0x0000000000493e49: jne 0x93fd5; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000494262: jne 0x94308; mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x000000000049436d: jne 0x94374; add rsp, 0x38; ret; 
0x0000000000494450: jne 0x94464; add rsp, 0x38; ret; 
0x0000000000494a50: jne 0x94a55; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x0000000000495025: jne 0x95031; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000409497: jne 0x9561; mov rax, 0x6d5400; pop rbx; ret; 
0x000000000040959a: jne 0x95a8; lea eax, [rsi*8 + 0x14]; ret; 
0x00000000004095e0: jne 0x95f0; lea eax, [rsi*8 + 0x10]; ret; 
0x0000000000496c3b: jne 0x96c3f; pop rbx; ret; 
0x0000000000496c31: jne 0x96cb0; cmp qword ptr [rip + 0x23f33d], 0; jne 0x96c3f; pop rbx; ret; 
0x00000000004977cb: jne 0x977dc; add rsp, 0x38; ret; 
0x00000000004978d9: jne 0x978ec; add rsp, 0x40; pop rbx; ret; 
0x00000000004979c0: jne 0x979d4; add rsp, 0x50; pop rbx; ret; 
0x00000000004097c2: jne 0x97c4; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000499334: jne 0x9932d; jmp qword ptr [rsi + 0xf]; 
0x0000000000499e30: jne 0x99d60; add rsp, 0x38; ret; 
0x0000000000499f7f: jne 0x9a059; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000049a2d1: jne 0x9a308; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000049a2e9: jne 0x9a308; xor eax, eax; ret; 
0x000000000049c46a: jne 0x9c480; cmp qword ptr [r9 + 0x38], 0; je 0x9c490; add rsp, 0x18; ret; 
0x000000000049c4f3: jne 0x9c510; lea rdx, [rip + 0x23cd04]; cmp byte ptr [rdx + rsi], 8; jne 0x9c51c; mov rax, qword ptr [rax]; ret; 
0x000000000049c500: jne 0x9c51c; mov rax, qword ptr [rax]; ret; 
0x000000000049c56f: jne 0x9c575; mov qword ptr [rax], rdx; ret; 
0x000000000049c8ce: jne 0x9c8c0; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049ca4c: jne 0x9ca3e; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049cb98: jne 0x9cb8a; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049cbe4: jne 0x9cbd6; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049cd73: jne 0x9cd65; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049ced3: jne 0x9cec5; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049cf24: jne 0x9cf16; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000049d3bc: jne 0x9d399; movzx eax, byte ptr [rax]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000049d444: jne 0x9d455; mov eax, 8; ret; 
0x000000000049d46f: jne 0x9d498; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000049d489: jne 0x9d49e; xor eax, eax; ret; 
0x000000000049e2cf: jne 0x9e2f8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000049e2e9: jne 0x9e2fe; xor eax, eax; ret; 
0x000000000049ed59: jne 0x9ed78; xor eax, eax; ret; 
0x000000000049f325: jne 0x9f310; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049f370: jne 0x9f348; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049f4b5: jne 0x9f498; pop rbx; ret; 
0x000000000049f5c3: jne 0x9f5a8; pop rbx; pop rbp; pop r12; ret; 
0x00000000004a017d: jne 0xa0160; pop rbx; pop rbp; pop r12; ret; 
0x00000000004a0301: jne 0xa0310; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040a532: jne 0xa534; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004ae93d: jne 0xae937; inc dword ptr [rax - 0x5f00078a]; ja 0xae93f; inc eax; js 0xae943; jmp qword ptr [rax + 0x68]; 
0x00000000004af62d: jne 0xaf628; jmp qword ptr [rax]; 
0x00000000004af769: jne 0xaf764; call qword ptr [rbp + rsi*2 - 7]; call rsp; 
0x00000000004af76d: jne 0xaf768; call rsp; 
0x000000000040b122: jne 0xb124; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000040bcbb: jne 0xbd1d; or dword ptr [rax], eax; ret; 
0x000000000040bcc3: jne 0xbd25; or dword ptr [rax], eax; ret; 
0x000000000040bd32: jne 0xbd34; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004cd6e1: jne 0xcd6e3; add byte ptr [rcx + rax*2], bl; stc; call rcx; 
0x00000000004cd775: jne 0xcd777; add byte ptr [rax + 0x4a], ch; stc; call qword ptr [rdi]; 
0x0000000000400ccb: jne 0xce0; mov eax, 1; mov dword ptr [rip + 0x2d7698], eax; add rsp, 8; ret; 
0x00000000004d0738: jne 0xd073e; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x0000000000400d93: jne 0xdc2; add byte ptr [rbp - 0xcf98b40], al; ret; 
0x000000000041ef26: jno 0x1ef70; mov edi, ebx; call qword ptr [rbp + 0x60]; 
0x000000000043399a: jno 0x3399c; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x000000000043c27e: jno 0x3c287; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000447670: jno 0x47670; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004478aa: jno 0x478aa; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000447a11: jno 0x47a19; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000447b61: jno 0x47bdf; adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000447b68: jno 0x47be6; adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000447b6f: jno 0x47bed; adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000447b76: jno 0x47bf4; adc qword ptr [rdi - 8], rdi; ret; 
0x0000000000456284: jno 0x56276; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000456372: jno 0x56364; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000045663c: jno 0x5661e; vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000045676f: jno 0x56751; vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x0000000000456afc: jno 0x56afc; jg 0x56b42; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000456c95: jno 0x56c95; jg 0x56cdb; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x00000000004688cb: jno 0x688a0; add byte ptr es:[rax - 0x75], cl; add al, 0xe8; test rax, rax; je 0x688da; call rax; 
0x000000000046e0e8: jno 0x6e0f5; add byte ptr [rax], al; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000048e7b2: jno 0x8e764; and al, 0; add byte ptr [rbp + 0xf], dh; mov rax, qword ptr [rip + 0x24ac50]; ret; 
0x0000000000492184: jno 0x921cf; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x00000000004aea88: jno 0xaea68; clc; call qword ptr [rcx]; 
0x00000000004af64d: jno 0xaf648; jmp rsi; 
0x00000000004af6c9: jno 0xaf6c4; inc dword ptr [rdx + 0x71]; stc; call rdx; 
0x00000000004af6cd: jno 0xaf6c8; call rdx; 
0x00000000004af7c9: jno 0xaf7c4; lcall [rdx]; jno 0xaf7c8; ljmp [rdx + 0x50fff970]; js 0xaf7d0; call rax; 
0x00000000004af7cd: jno 0xaf7c8; ljmp [rdx + 0x50fff970]; js 0xaf7d0; call rax; 
0x00000000004af809: jno 0xaf804; call qword ptr [rax]; 
0x00000000004af849: jno 0xaf844; inc dword ptr [rax]; jno 0xaf848; jmp qword ptr [rax + 0x53]; 
0x00000000004af84d: jno 0xaf848; jmp qword ptr [rax + 0x53]; 
0x000000000040bceb: jno 0xbd4d; or dword ptr [rax], eax; ret; 
0x00000000004c2359: jno 0xc22ef; mov ah, 0x5e; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xc23d7; mov ebp, 0xfb67d10d; ret; 
0x00000000004cbe71: jno 0xcbe6b; jmp qword ptr [rbx]; 
0x0000000000400d83: jno 0xd90; or al, byte ptr [rax]; ret; 
0x0000000000433981: jnp 0x339ad; add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x000000000045ed40: jnp 0x5ed82; add byte ptr [rsp - 0x18], dh; fst qword ptr [rdi]; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000004846c4: jnp 0x846ca; sub rsp, 0x80; call 0x5b060; add rsp, 0x80; pop rbx; ret; 
0x00000000004af3d1: jnp 0xaf3cc; call rax; 
0x00000000004af40d: jnp 0xaf408; inc dword ptr [rsi + 0x7b]; stc; push qword ptr [rsi + 0x46fff981]; cmp ecx, 0xf980d6ff; jmp qword ptr [rsi - 0x80]; 
0x00000000004af411: jnp 0xaf40c; push qword ptr [rsi + 0x46fff981]; cmp ecx, 0xf980d6ff; jmp qword ptr [rsi - 0x80]; 
0x00000000004af5d1: jnp 0xaf5cc; push qword ptr [rax - 0x7f]; stc; inc dword ptr [rax]; cmp ecx, 0xf98090ff; jmp qword ptr [rax]; 
0x00000000004af609: jnp 0xaf604; call qword ptr [rax + 0x7b]; 
0x00000000004c21e5: jnp 0xc21a0; ret; 
0x00000000004c3a7e: jnp 0xc3a96; mov dl, 0x9f; sub edi, esi; int 0x6b; ret; 
0x00000000004c7e49: jnp 0xc7e3f; jmp qword ptr [rbp + 2]; 
0x00000000004c8f69: jnp 0xc8f60; jmp qword ptr [rdx + 1]; 
0x0000000000401048: jns 0x102a; xor eax, eax; pop rbx; ret; 
0x000000000043361f: jns 0x33621; add byte ptr [rsi + rax*8 - 0xd], dh; ret; 
0x0000000000433673: jns 0x3369f; add al, byte ptr [rax]; lea rax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x0000000000447677: jns 0x47678; ret; 
0x00000000004478b1: jns 0x478b2; ret; 
0x0000000000447a18: jns 0x47a21; ret; 
0x000000000044df27: jns 0x4df8c; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044df78: jns 0x4dfdd; rcr dword ptr [rdx], 0xf; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044e077: jns 0x4e0dc; rcr dword ptr [rdx], 0xf; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044e216: jns 0x4e27b; rcr dword ptr [rdx], 0xf; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044e467: jns 0x4e4cc; rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000044e608: jns 0x4e66d; rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044e707: jns 0x4e76c; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044e758: jns 0x4e7bd; rcr dword ptr [rdx], 0xf; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044e857: jns 0x4e8bc; rcr dword ptr [rdx], 0xf; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044ec47: jns 0x4ecac; rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000044ef38: jns 0x4ef9d; rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044f037: jns 0x4f09c; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000456288: jns 0x5626a; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000456376: jns 0x56358; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000456641: jns 0x56603; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x0000000000456774: jns 0x56736; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x0000000000456af9: jns 0x56af9; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000456c92: jns 0x56c92; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000458bef: jns 0x58bfd; sub byte ptr [rax], al; test eax, eax; jne 0x58c58; mov eax, 0x48; syscall; 
0x0000000000468623: jns 0x685de; jmp qword ptr [rsi + 0x2e]; 
0x00000000004910a3: jns 0x91047; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000049a1be: jns 0x9a1c3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000049c46e: jns 0x9c4a8; add byte ptr [rbp + rbx + 0x48], dh; add esp, 0x18; ret; 
0x000000000049d1de: jns 0x9d1e3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000049edde: jns 0x9ede3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x00000000004b1d81: jns 0xb1d7e; jmp qword ptr [rax]; 
0x00000000004b1d85: jns 0xb1d82; jmp qword ptr [rax + 0x78]; 
0x00000000004c12ee: jns 0xc1282; ret 0xf869; 
0x000000000041d5b6: jo 0x1d5d8; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000041fbba: jo 0x1fbf4; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000420bd5: jo 0x20c0f; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000421c33: jo 0x21c78; sub eax, dword ptr [rax]; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x0000000000423974: jo 0x239be; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000004239a4: jo 0x239ee; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000045b4b2: jo 0x5b4d4; ret; 
0x000000000047991c: jo 0x7992b; add byte ptr [rax], al; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000047fe4a: jo 0x7fe5c; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000047fe8f: jo 0x7fec1; cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x00000000004802d6: jo 0x802f0; jbe 0x802fe; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000480486: jo 0x804a0; jbe 0x804b2; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000483056: jo 0x830b3; pop rbp; pop r12; ret; 
0x000000000048326d: jo 0x832ca; pop rbp; pop r12; ret; 
0x0000000000491574: jo 0x915d1; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000040a4db: jo 0xa4f4; add byte ptr [rax], al; test eax, eax; cmovns eax, edx; add rsp, 8; ret; 
0x00000000004ae92d: jo 0xae927; inc dword ptr [rax]; jb 0xae92b; jmp qword ptr [rax]; 
0x00000000004ae9b4: jo 0xae956; clc; jmp rax; 
0x00000000004ae9d8: jo 0xae986; clc; jmp qword ptr [rax - 0x53]; 
0x00000000004aea44: jo 0xaea1c; clc; jmp qword ptr [rax - 0x29]; 
0x00000000004aeb90: jo 0xaeb8b; clc; push qword ptr [rax]; sti; clc; call qword ptr [rax]; 
0x00000000004aebfc: jo 0xaebfc; clc; call qword ptr [rax]; 
0x00000000004aebfc: jo 0xaebfc; clc; call qword ptr [rax]; stc; jmp qword ptr [rax]; 
0x00000000004aec14: jo 0xaec10; clc; call qword ptr [rax - 4]; 
0x00000000004aec30: jo 0xaec2a; clc; push qword ptr [rax]; cli; clc; call qword ptr [rax]; 
0x00000000004aec78: jo 0xaec75; clc; call qword ptr [rax - 3]; 
0x00000000004aecc0: jo 0xaecb3; clc; inc eax; clc; call qword ptr [rax]; 
0x00000000004aecd4: jo 0xaecb9; clc; inc eax; in al, 0xf8; call qword ptr [rax]; 
0x00000000004aed14: jo 0xaed39; stc; call qword ptr [rax + 0x25]; 
0x00000000004aee8c: jo 0xaeeab; stc; push qword ptr [rax - 0x7f0006f8]; or edi, ecx; call rax; 
0x00000000004aeea0: jo 0xaeeb1; stc; inc eax; adc cl, bh; call qword ptr [rax]; 
0x00000000004af144: jo 0xaf192; stc; jmp rax; 
0x00000000004af348: jo 0xaf395; stc; jmp rax; 
0x00000000004af5d4: jo 0xaf557; stc; inc dword ptr [rax]; cmp ecx, 0xf98090ff; jmp qword ptr [rax]; 
0x00000000004af64c: jo 0xaf6bf; stc; jmp rsi; 
0x00000000004af7d1: jo 0xaf7cc; call qword ptr [rax + 0x78]; 
0x00000000004af7d1: jo 0xaf7cc; call qword ptr [rax + 0x78]; stc; call rax; 
0x00000000004af9f4: jo 0xaf9e6; stc; inc eax; int1; stc; call qword ptr [rax]; 
0x00000000004afa60: jo 0xafa9c; cli; call qword ptr [rax - 0x4f0005c6]; cmp bh, dl; call rax; 
0x00000000004afa80: jo 0xafabd; cli; call qword ptr [rax - 0x4f0005c5]; cmp edi, edx; call rax; 
0x000000000040b0e3: jo 0xb151; or dword ptr [rax], eax; ret; 
0x00000000004be444: jo 0xbe442; sti; push qword ptr [rax - 4]; sti; call qword ptr [rax - 3]; 
0x00000000004be448: jo 0xbe446; sti; call qword ptr [rax - 3]; 
0x00000000004be470: jo 0xbe46e; sti; jmp qword ptr [rax]; 
0x00000000004be478: jo 0xbe476; sti; push qword ptr [rax - 4]; sti; call qword ptr [rax]; 
0x00000000004be47c: jo 0xbe47a; sti; call qword ptr [rax]; 
0x00000000004c2364: jo 0xc23d7; mov ebp, 0xfb67d10d; ret; 
0x00000000004c88a0: jo 0xc88f4; cmc; jmp qword ptr [rax]; 
0x000000000040c8f3: jo 0xc949; or dword ptr [rax], eax; ret; 
0x00000000004cb16c: jo 0xcb171; ret 0xa01; 
0x00000000004cbed0: jo 0xcbe6a; clc; call qword ptr [rbx + 4]; 
0x00000000004cc70c: jo 0xcc773; add byte ptr [rax], al; and bh, al; clc; jmp qword ptr [rcx]; 
0x00000000004ccd40: jo 0xccd28; clc; call qword ptr [rcx]; 
0x00000000004cf0f0: jo 0xcf112; sti; jmp qword ptr [rdx]; 
0x00000000004d15f0: jo 0xd164d; cld; jmp qword ptr [rbp]; 
0x00000000004d24b0: jo 0xd247a; cld; jmp qword ptr [rcx]; 
0x000000000049c550: jo 0xe1fd12; add byte ptr [rax], al; add byte ptr [rbp + rax + 0x48], dh; mov dword ptr [rdi + rsi*8], edx; ret; 
0x0000000000466462: jp 0x6645a; ret; 
0x00000000004680f2: jp 0x68167; cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000476933: jp 0x76939; add byte ptr [rcx + 0x29], cl; ret; 
0x000000000049d2fa: jp 0x9d370; adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004a9768: jp 0xa9776; add byte ptr [rax], al; mov eax, dword ptr [rcx]; add byte ptr [rax], al; ret; 
0x00000000004ae98d: jp 0xae987; inc dword ptr [rax - 0xf00076d]; xchg eax, esp; clc; jmp qword ptr [rax - 0x6a]; 
0x00000000004c2025: jp 0xc2080; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000004c60e8: jp 0xc6144; std; call qword ptr [rcx + 0x5c]; 
0x00000000004cdbf9: jp 0xcdbfb; add ah, ah; popfq; stc; call qword ptr [rdx]; 
0x00000000004cdc79: jp 0xcdc7b; add byte ptr [rsi + rbx*4], dl; stc; jmp rax; 
0x0000000000401079: js 0x10c0; add rsp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x00000000004018e5: js 0x18f0; add rsp, 0x18; ret; 
0x000000000040195b: js 0x1968; add rsp, 8; ret; 
0x000000000040198b: js 0x1998; add rsp, 8; ret; 
0x00000000004019c5: js 0x19d0; add rsp, 0x18; ret; 
0x0000000000401bc2: js 0x1bd8; xor eax, eax; mov dword ptr [rip + 0x2d4538], 0; pop rbx; ret; 
0x0000000000401c0c: js 0x1c50; cmp eax, 1; je 0x1c20; xor eax, eax; add rsp, 0x18; ret; 
0x000000000041d6b5: js 0x1d6d7; call rdx; 
0x0000000000401f68: js 0x2010; add rsp, 8; ret; 
0x0000000000421d38: js 0x21d70; mov qword ptr [rbx + 0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000433657: js 0x3364f; add eax, 0x2a57f2; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x00000000004337b7: js 0x337af; add eax, 0x2a5692; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x00000000004338f7: js 0x338ef; add eax, 0x2a5552; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x0000000000459653: js 0x59634; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000470c24: js 0x70c4f; add byte ptr es:[rax - 0x75], cl; add al, 0xc6; xor esi, esi; jmp rax; 
0x0000000000407dd6: js 0x7de8; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000407e26: js 0x7e30; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000480b8f: js 0x80ba9; jbe 0x80bbb; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000480ce9: js 0x80d1b; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x000000000048b092: js 0x8b0a2; pop rbx; ret; 
0x000000000048ba34: js 0x8ba55; add byte ptr [rax], al; mov r11, qword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x00000000004091f7: js 0x9241; mov eax, 0x6d2d60; ret; 
0x000000000049c726: js 0x9c72a; add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000049c733: js 0x9c737; add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000049f3f3: js 0x9f46c; ret 0x8b48; 
0x00000000004ae949: js 0xae943; jmp qword ptr [rax + 0x68]; 
0x00000000004af755: js 0xaf750; jmp rsp; 
0x00000000004af7d5: js 0xaf7d0; call rax; 
0x00000000004b00b4: js 0xb003b; cli; call rsp; 
0x00000000004b1d89: js 0xb1d86; call qword ptr [rax]; 
0x00000000004cbe88: js 0xcbf01; clc; jmp qword ptr [rdi + 6]; 
0x00000000004ce014: js 0xce094; add byte ptr [rax], al; sbb bl, al; stc; call qword ptr [rcx]; 
0x00000000004d0414: js 0xd03b8; add byte ptr [rax], al; mov al, bl; sti; jmp qword ptr [rsi + 7]; 
0x00000000004d08e8: js 0xd08e3; sti; jmp qword ptr [rsi]; 
0x00000000004d1678: js 0xd16d8; cld; call qword ptr [rbx]; 
0x000000000047a973: lahf; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x00000000004613e1: lahf; add dword ptr [rax], eax; add al, ch; cmc; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000004656b5: lahf; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xb2eb; 
0x000000000042e3ef: lahf; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x00000000004ae9b1: lahf; clc; push qword ptr [rax - 0x60]; clc; jmp rax; 
0x00000000004aa6e0: lahf; fdivr st(7); call qword ptr [rsi]; 
0x000000000041f3bd: lahf; mov byte ptr [rbx], ch; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004c3823: lahf; mov dh, 0xc7; ret 0xe71f; 
0x000000000048db2b: lahf; mov eax, dword ptr [rdx + 4]; ret; 
0x000000000044e9ad: lahf; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000046e23f: lahf; or dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000042804f: lahf; ret 0x3949; 
0x0000000000428102: lahf; ret 0x48e9; 
0x0000000000459b21: lahf; ret 0x8545; 
0x00000000004c107d: lahf; ret 0x871e; 
0x0000000000457269: lahf; ret 0xea81; 
0x000000000049bae1: lahf; ret 0xf45; 
0x0000000000459c6b: lahf; ret; 
0x00000000004c3a81: lahf; sub edi, esi; int 0x6b; ret; 
0x000000000044f03d: lar eax, word ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004aeb4f: lcall [rax + 0x60fff8f9]; sti; clc; inc dword ptr [rax - 3]; clc; jmp qword ptr [rax]; 
0x00000000004b092f: lcall [rax - 0x4b]; cli; push qword ptr [rax]; mov ch, 0xfa; call qword ptr [rax]; 
0x00000000004a57f7: lcall [rax - 0x67000028]; fdivr st(7); call qword ptr [rcx]; 
0x000000000040126d: lcall [rbp + 0x41]; pop rsp; ret; 
0x00000000004b0147: lcall [rbp - 0x7a]; cli; jmp rcx; 
0x0000000000407859: lcall [rbx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x0000000000429f02: lcall [rbx + 0x48]; mov eax, edi; pop rbp; pop r12; ret; 
0x0000000000401654: lcall [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x00000000004212a5: lcall [rbx + 0x5d]; pop r12; pop r13; ret; 
0x00000000004015b4: lcall [rbx + 0x5d]; pop r12; ret; 
0x0000000000401498: lcall [rbx + 0x5d]; ret; 
0x000000000048f156: lcall [rbx + 0x64]; mov eax, dword ptr [rax]; ret; 
0x000000000040a0b8: lcall [rbx - 0x77]; call 0x415ce21d; pop rbp; ret; 
0x000000000040acc0: lcall [rbx - 0x77]; call 0x415cee25; pop rbp; ret; 
0x000000000040adc8: lcall [rbx - 0x77]; call 0x415cef2d; pop rbp; ret; 
0x000000000040b9e0: lcall [rbx - 0x77]; call 0x415cfb45; pop rbp; ret; 
0x000000000040c5f0: lcall [rbx - 0x77]; call 0x415d0755; pop rbp; ret; 
0x00000000004aa30b: lcall [rbx]; fdivr st(7); call qword ptr [rsi + 0x1b000001]; fdivr st(7); jmp qword ptr [rbp + 0xe]; 
0x00000000004a93eb: lcall [rcx + 0x3000001]; fdivr st(7); jmp rdx; 
0x00000000004a57b3: lcall [rcx - 0x66000028]; fdivr st(7); call qword ptr [rax]; 
0x00000000004b01e3: lcall [rcx]; xchg dl, bh; push qword ptr [rsi - 0x3f00057b]; test edx, edi; jmp rcx; 
0x00000000004b0efb: lcall [rdi - 0x43]; cli; jmp qword ptr [rdi]; 
0x00000000004b0f47: lcall [rdi - 0x46]; cli; lcall [rdx + rdi*4 - 0x414f0006]; cli; jmp qword ptr [rdi + 0x63]; 
0x00000000004a94b7: lcall [rdx + 0x2000001]; fdivr st(7); call qword ptr [rsi]; 
0x00000000004b0f4b: lcall [rdx + rdi*4 - 0x414f0006]; cli; jmp qword ptr [rdi + 0x63]; 
0x00000000004b0f17: lcall [rdx + rdi*4 - 0x42260006]; cli; jmp qword ptr [rax]; 
0x00000000004af7cb: lcall [rdx]; jno 0xaf7c8; ljmp [rdx + 0x50fff970]; js 0xaf7d0; call rax; 
0x00000000004ad10b: lcall [rsi + 0x40]; idiv bh; cmp al, 0x40; idiv bh; xor dword ptr [rax - 0xa], eax; jmp qword ptr [rsi]; 
0x00000000004a9b9f: lcall [rsi + 0xa000001]; fdivr st(7); jmp qword ptr [rcx]; 
0x00000000004a257b: lcall [rsi - 0x2f]; idiv bh; sal esi, 1; ljmp [rsi]; sal esi, 1; call qword ptr [rsi]; 
0x00000000004aea17: lcall [rsi - 0x5f000729]; fdivr st(0); call rcx; 
0x00000000004a2adb: lcall [rsi]; ret; 
0x00000000004443ec: lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000444676: lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444606: lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444596: lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444526: lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004444b6: lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444446: lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444a66: lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004449f6: lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444986: lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444916: lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004448a6: lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444836: lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004447c6: lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444756: lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004446e6: lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000443bd6: lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000044437c: lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004442fc: lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000044426c: lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004441ec: lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000044416c: lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004440ec: lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000044406c: lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443fec: lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443f6c: lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443eec: lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443e6c: lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443dec: lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443d5c: lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443ccc: lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443c3c: lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443bcc: lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x00000000004443f6: lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000444381: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000444301: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000444271: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004441f1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000444171: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004440f1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000444071: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443ff1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443f71: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443ef1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443e71: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443df1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443d61: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443cd1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443c41: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000044467b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044460b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044459b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044452b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004444bb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044444b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444a6b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004449fb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044498b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044491b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004448ab: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044483b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004447cb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044475b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004446eb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000426dab: lea eax, [r8 - 1]; ret; 
0x000000000049a1dc: lea eax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x000000000043a594: lea eax, [rax + rdi + 0x10]; ret; 
0x000000000043a5a4: lea eax, [rax + rdi + 0x20]; ret; 
0x000000000043a574: lea eax, [rax + rdi - 0x10]; ret; 
0x000000000048aa6d: lea eax, [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x0000000000426dac: lea eax, [rax - 1]; ret; 
0x000000000048270d: lea eax, [rcx + rsi]; ret; 
0x0000000000455a54: lea eax, [rcx - 1]; ret; 
0x0000000000453acc: lea eax, [rdi + 0x10]; ret; 
0x0000000000453ae1: lea eax, [rdi + 0x11]; ret; 
0x0000000000453aff: lea eax, [rdi + 0x12]; ret; 
0x0000000000453b1f: lea eax, [rdi + 0x13]; ret; 
0x0000000000453b42: lea eax, [rdi + 0x14]; ret; 
0x0000000000453b61: lea eax, [rdi + 0x15]; ret; 
0x0000000000453b81: lea eax, [rdi + 0x16]; ret; 
0x0000000000453ba1: lea eax, [rdi + 0x17]; ret; 
0x0000000000453bc4: lea eax, [rdi + 0x18]; ret; 
0x0000000000453be9: lea eax, [rdi + 0x19]; ret; 
0x0000000000453c07: lea eax, [rdi + 0x1a]; ret; 
0x0000000000453c27: lea eax, [rdi + 0x1b]; ret; 
0x0000000000453c43: lea eax, [rdi + 0x1c]; ret; 
0x0000000000453c63: lea eax, [rdi + 0x1d]; ret; 
0x0000000000453c83: lea eax, [rdi + 0x1e]; ret; 
0x0000000000453ca3: lea eax, [rdi + 0x1f]; ret; 
0x0000000000453a1d: lea eax, [rdi + 0xa]; ret; 
0x0000000000453a3d: lea eax, [rdi + 0xb]; ret; 
0x0000000000453a5f: lea eax, [rdi + 0xc]; ret; 
0x0000000000453a7f: lea eax, [rdi + 0xd]; ret; 
0x0000000000453a9f: lea eax, [rdi + 0xe]; ret; 
0x0000000000453ab9: lea eax, [rdi + 0xf]; ret; 
0x0000000000453967: lea eax, [rdi + 1]; ret; 
0x000000000045397a: lea eax, [rdi + 2]; ret; 
0x0000000000453985: lea eax, [rdi + 3]; ret; 
0x0000000000453998: lea eax, [rdi + 4]; ret; 
0x00000000004539ad: lea eax, [rdi + 5]; ret; 
0x00000000004539cb: lea eax, [rdi + 6]; ret; 
0x00000000004539d7: lea eax, [rdi + 7]; ret; 
0x00000000004539ea: lea eax, [rdi + 8]; ret; 
0x00000000004539ff: lea eax, [rdi + 9]; ret; 
0x000000000043a5c9: lea eax, [rdi + rax + 0x10]; ret; 
0x000000000044f8b7: lea eax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000043a5d9: lea eax, [rdi + rax + 0x20]; ret; 
0x000000000043a4d3: lea eax, [rdi + rax + 0x30]; ret; 
0x000000000044f8d7: lea eax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000044f915: lea eax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000482955: lea eax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000044f31c: lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000044f77d: lea eax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000044f537: lea eax, [rdi + rax]; ret; 
0x0000000000455daa: lea eax, [rdi + rcx]; sub rax, rsi; ret; 
0x0000000000482609: lea eax, [rdi + rsi]; ret; 
0x00000000004755c0: lea eax, [rdi - 1]; xor edx, edx; div r8d; add r9d, eax; mov eax, r9d; ret; 
0x0000000000453953: lea eax, [rdi]; ret; 
0x0000000000452f3d: lea eax, [rdx + 0xa]; ret; 
0x0000000000452f5d: lea eax, [rdx + 0xb]; ret; 
0x0000000000452f7f: lea eax, [rdx + 0xc]; ret; 
0x0000000000452f9f: lea eax, [rdx + 0xd]; ret; 
0x0000000000452fbf: lea eax, [rdx + 0xe]; ret; 
0x0000000000452e4f: lea eax, [rdx + 0xf]; ret; 
0x0000000000452e77: lea eax, [rdx + 1]; ret; 
0x0000000000452e8d: lea eax, [rdx + 2]; ret; 
0x0000000000452ea5: lea eax, [rdx + 3]; ret; 
0x0000000000452ebb: lea eax, [rdx + 4]; ret; 
0x0000000000452ecd: lea eax, [rdx + 5]; ret; 
0x0000000000452eeb: lea eax, [rdx + 6]; ret; 
0x000000000049a1d1: lea eax, [rdx + 7]; and rax, 0xfffffffffffffff8; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x0000000000452df7: lea eax, [rdx + 7]; ret; 
0x0000000000452efd: lea eax, [rdx + 8]; ret; 
0x0000000000452f1d: lea eax, [rdx + 9]; ret; 
0x0000000000426d9e: lea eax, [rdx + rdi]; ret; 
0x0000000000457383: lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x00000000004321a6: lea eax, [rdx - 0x10]; ret; 
0x0000000000452e65: lea eax, [rdx]; ret; 
0x00000000004339d8: lea eax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x0000000000432cb8: lea eax, [rip + 0x1ce62]; cmove rax, rdx; ret; 
0x000000000043358f: lea eax, [rip + 0x221ab]; cmove rax, rdx; ret; 
0x0000000000433918: lea eax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x00000000004337d8: lea eax, [rip + 0x22862]; cmovne rax, rdx; ret; 
0x0000000000433678: lea eax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x000000000043397f: lea eax, [rip + 0x22a7b]; cmovne rax, rdx; ret; 
0x000000000043383f: lea eax, [rip + 0x22bab]; cmovne rax, rdx; ret; 
0x00000000004336df: lea eax, [rip + 0x22d1b]; cmovne rax, rdx; ret; 
0x000000000043395e: lea eax, [rip + 0x22ecc]; cmovne rax, rdx; ret; 
0x0000000000432c3f: lea eax, [rip + 0x22f9b]; cmovne rax, rdx; ret; 
0x000000000043381e: lea eax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x00000000004336be: lea eax, [rip + 0x2316c]; cmovne rax, rdx; ret; 
0x000000000043372d: lea eax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x000000000043377e: lea eax, [rip + 0x2390c]; cmovne rax, rdx; ret; 
0x0000000000493d91: lea eax, [rip + 0x245349]; mov qword ptr [rip + 0x24532a], rax; ret; 
0x0000000000493d76: lea eax, [rip + 0x245364]; mov qword ptr [rip + 0x245345], rax; add rsp, 8; ret; 
0x000000000047c096: lea eax, [rip + 0x258004]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047c043: lea eax, [rip + 0x258057]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047bb16: lea eax, [rip + 0x258084]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047beb5: lea eax, [rip + 0x2581e5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047be70: lea eax, [rip + 0x25822a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047be2b: lea eax, [rip + 0x25826f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047bddc: lea eax, [rip + 0x2582be]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047b440: lea eax, [rip + 0x25895a]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000047052f: lea eax, [rip + 0x262f6b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004708de: lea eax, [rip + 0x2630bc]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470890: lea eax, [rip + 0x26310a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004707e1: lea eax, [rip + 0x2631b9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470785: lea eax, [rip + 0x263215]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004704e5: lea eax, [rip + 0x2634b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470497: lea eax, [rip + 0x263503]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470036: lea eax, [rip + 0x263664]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004688c9: lea eax, [rip + 0x26d371]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x688da; call rax; 
0x000000000049eda8: lea eax, [rip + 0x2738a]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000045c841: lea eax, [rip + 0x27aaf9]; ret; 
0x000000000049a188: lea eax, [rip + 0x2ba5a]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000040f9c2: lea eax, [rip + 0x2c89b8]; ret; 
0x000000000049450f: lea eax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x00000000004339a8: lea eax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x00000000004335b8: lea eax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x0000000000481c18: lea eax, [rip + 0x902]; cmove rax, rdx; ret; 
0x000000000040c901: lea eax, [rip + 0x95450]; ret; 
0x000000000040c8e9: lea eax, [rip + 0x9545d]; ret; 
0x000000000040c8f9: lea eax, [rip + 0x95461]; ret; 
0x000000000040c8c9: lea eax, [rip + 0x95465]; ret; 
0x000000000040c8d9: lea eax, [rip + 0x95466]; ret; 
0x000000000040c8f1: lea eax, [rip + 0x95470]; ret; 
0x000000000040c891: lea eax, [rip + 0x95483]; ret; 
0x000000000040c899: lea eax, [rip + 0x95484]; ret; 
0x000000000040c889: lea eax, [rip + 0x95486]; ret; 
0x000000000040c919: lea eax, [rip + 0x95494]; ret; 
0x000000000040c911: lea eax, [rip + 0x954a2]; ret; 
0x000000000040c861: lea eax, [rip + 0x954a7]; ret; 
0x000000000040c851: lea eax, [rip + 0x954ac]; ret; 
0x000000000040c841: lea eax, [rip + 0x954b0]; ret; 
0x000000000040c909: lea eax, [rip + 0x954b1]; ret; 
0x000000000040c821: lea eax, [rip + 0x954bc]; ret; 
0x000000000040c8b1: lea eax, [rip + 0x954c1]; ret; 
0x000000000040c8e1: lea eax, [rip + 0x954c6]; ret; 
0x000000000040c811: lea eax, [rip + 0x954c7]; ret; 
0x000000000040c8a9: lea eax, [rip + 0x954d0]; ret; 
0x000000000040c7f1: lea eax, [rip + 0x954d8]; ret; 
0x000000000040c801: lea eax, [rip + 0x954e4]; ret; 
0x000000000040c7e1: lea eax, [rip + 0x954ef]; ret; 
0x000000000040c881: lea eax, [rip + 0x9550a]; ret; 
0x000000000040c879: lea eax, [rip + 0x95519]; ret; 
0x000000000040c871: lea eax, [rip + 0x95528]; ret; 
0x000000000040c831: lea eax, [rip + 0x9556f]; ret; 
0x000000000040bcf1: lea eax, [rip + 0x96060]; ret; 
0x000000000040bcd9: lea eax, [rip + 0x9606d]; ret; 
0x000000000040bce9: lea eax, [rip + 0x96071]; ret; 
0x000000000040bcb9: lea eax, [rip + 0x96075]; ret; 
0x000000000040bcc9: lea eax, [rip + 0x96076]; ret; 
0x000000000040bce1: lea eax, [rip + 0x96080]; ret; 
0x000000000040bc81: lea eax, [rip + 0x96093]; ret; 
0x000000000040bc89: lea eax, [rip + 0x96094]; ret; 
0x000000000040bc79: lea eax, [rip + 0x96096]; ret; 
0x000000000040bd09: lea eax, [rip + 0x960a4]; ret; 
0x000000000040bd01: lea eax, [rip + 0x960b2]; ret; 
0x000000000040bc51: lea eax, [rip + 0x960b7]; ret; 
0x000000000040bc41: lea eax, [rip + 0x960bc]; ret; 
0x000000000040bc31: lea eax, [rip + 0x960c0]; ret; 
0x000000000040bcf9: lea eax, [rip + 0x960c1]; ret; 
0x000000000040bc11: lea eax, [rip + 0x960cc]; ret; 
0x000000000040bca1: lea eax, [rip + 0x960d1]; ret; 
0x000000000040bcd1: lea eax, [rip + 0x960d6]; ret; 
0x000000000040bc01: lea eax, [rip + 0x960d7]; ret; 
0x000000000040bc99: lea eax, [rip + 0x960e0]; ret; 
0x000000000040bbe1: lea eax, [rip + 0x960e8]; ret; 
0x000000000040bbf1: lea eax, [rip + 0x960f4]; ret; 
0x000000000040bbd1: lea eax, [rip + 0x960ff]; ret; 
0x000000000040bc71: lea eax, [rip + 0x9611a]; ret; 
0x000000000040bc69: lea eax, [rip + 0x96129]; ret; 
0x000000000040bc61: lea eax, [rip + 0x96138]; ret; 
0x000000000040bc21: lea eax, [rip + 0x9617f]; ret; 
0x000000000040b0e1: lea eax, [rip + 0x96c70]; ret; 
0x000000000040b0c9: lea eax, [rip + 0x96c7d]; ret; 
0x000000000040b0d9: lea eax, [rip + 0x96c81]; ret; 
0x000000000040b0a9: lea eax, [rip + 0x96c85]; ret; 
0x000000000040b0b9: lea eax, [rip + 0x96c86]; ret; 
0x000000000040b0d1: lea eax, [rip + 0x96c90]; ret; 
0x000000000040b071: lea eax, [rip + 0x96ca3]; ret; 
0x000000000040b079: lea eax, [rip + 0x96ca4]; ret; 
0x000000000040b069: lea eax, [rip + 0x96ca6]; ret; 
0x000000000040b0f9: lea eax, [rip + 0x96cb4]; ret; 
0x000000000040b0f1: lea eax, [rip + 0x96cc2]; ret; 
0x000000000040b041: lea eax, [rip + 0x96cc7]; ret; 
0x000000000040b031: lea eax, [rip + 0x96ccc]; ret; 
0x000000000040b021: lea eax, [rip + 0x96cd0]; ret; 
0x000000000040b0e9: lea eax, [rip + 0x96cd1]; ret; 
0x000000000040b001: lea eax, [rip + 0x96cdc]; ret; 
0x000000000040b091: lea eax, [rip + 0x96ce1]; ret; 
0x000000000040b0c1: lea eax, [rip + 0x96ce6]; ret; 
0x000000000040aff1: lea eax, [rip + 0x96ce7]; ret; 
0x000000000040b089: lea eax, [rip + 0x96cf0]; ret; 
0x000000000040afd1: lea eax, [rip + 0x96cf8]; ret; 
0x000000000040afe1: lea eax, [rip + 0x96d04]; ret; 
0x000000000040afc1: lea eax, [rip + 0x96d0f]; ret; 
0x000000000040b061: lea eax, [rip + 0x96d2a]; ret; 
0x000000000040b059: lea eax, [rip + 0x96d39]; ret; 
0x000000000040b051: lea eax, [rip + 0x96d48]; ret; 
0x000000000040b011: lea eax, [rip + 0x96d8f]; ret; 
0x000000000040a3e1: lea eax, [rip + 0x979b1]; ret; 
0x000000000040a3d9: lea eax, [rip + 0x979c0]; ret; 
0x000000000040a3d1: lea eax, [rip + 0x979cf]; ret; 
0x000000000040a3a9: lea eax, [rip + 0x979d7]; ret; 
0x000000000040a351: lea eax, [rip + 0x979dd]; ret; 
0x000000000040a361: lea eax, [rip + 0x979de]; ret; 
0x000000000040a371: lea eax, [rip + 0x979e0]; ret; 
0x000000000040a379: lea eax, [rip + 0x979e1]; ret; 
0x000000000040a331: lea eax, [rip + 0x979e3]; ret; 
0x000000000040a339: lea eax, [rip + 0x979e4]; ret; 
0x000000000040a321: lea eax, [rip + 0x979e7]; ret; 
0x000000000040a3a1: lea eax, [rip + 0x979ea]; ret; 
0x000000000040a311: lea eax, [rip + 0x979ec]; ret; 
0x000000000040a301: lea eax, [rip + 0x979f0]; ret; 
0x000000000040a3b9: lea eax, [rip + 0x979fa]; ret; 
0x000000000040a2e1: lea eax, [rip + 0x979fc]; ret; 
0x000000000040a2d1: lea eax, [rip + 0x97a07]; ret; 
0x000000000040a3b1: lea eax, [rip + 0x97a09]; ret; 
0x000000000040a2b1: lea eax, [rip + 0x97a18]; ret; 
0x000000000040a2f1: lea eax, [rip + 0x97a1e]; ret; 
0x000000000040a2c1: lea eax, [rip + 0x97a24]; ret; 
0x000000000040a2a1: lea eax, [rip + 0x97a2f]; ret; 
0x0000000000400d81: lea eax, [rip + 0xa0b71]; ret; 
0x0000000000482f38: lea eax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x000000000040c8c1: lea eax, [rip + 0xb81b8]; ret; 
0x000000000040bcb1: lea eax, [rip + 0xb8dc8]; ret; 
0x000000000040b0a1: lea eax, [rip + 0xb99d8]; ret; 
0x000000000040a349: lea eax, [rip + 0xba730]; ret; 
0x0000000000481be8: lea eax, [rip + 0xdf2]; cmove rax, rdx; ret; 
0x000000000042eb81: lea eax, [rip - 0x14a7]; mov qword ptr [rip + 0x2a7d1a], rax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2a7d04], rax; ret; 
0x0000000000482f97: lea eax, [rip - 0x2c0ad]; cmp edx, 0x1000; lea rdx, [rip - 0x2bf3a]; cmove rax, rdx; ret; 
0x000000000042eb8f: lea eax, [rip - 0xa85]; mov qword ptr [rip + 0x2a7d04], rax; ret; 
0x000000000048e6c1: lea eax, [rsi + 1]; mov qword ptr [rip + 0x24ad45], rax; ret; 
0x00000000004095b0: lea eax, [rsi*8 + 0x10]; ret; 
0x000000000040959c: lea eax, [rsi*8 + 0x14]; ret; 
0x0000000000446695: lea eax, [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000420bdc: lea eax, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000458cff: lea eax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; je 0x58d30; mov eax, 0x48; syscall; 
0x000000000046eec1: lea ebp, [rdx]; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x000000000041cd41: lea ebx, [rdi + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000473c4d: lea ebx, [rdi + rdi*8 - 1]; jmp qword ptr [rsi + 0xf]; 
0x0000000000453936: lea ebx, [rip + 0x5c154]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453901: lea ebx, [rip + 0x5c189]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004538d5: lea ebx, [rip + 0x5c1b5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004538bf: lea ebx, [rip + 0x5c1cb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045389d: lea ebx, [rip + 0x5c1ed]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453878: lea ebx, [rip + 0x5c212]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045385b: lea ebx, [rip + 0x5c22f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453803: lea ebx, [rip + 0x5c287]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453316: lea ebx, [rip + 0x5c6f4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004532e1: lea ebx, [rip + 0x5c729]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004532b5: lea ebx, [rip + 0x5c755]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045329f: lea ebx, [rip + 0x5c76b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045327d: lea ebx, [rip + 0x5c78d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453258: lea ebx, [rip + 0x5c7b2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045323b: lea ebx, [rip + 0x5c7cf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004531e3: lea ebx, [rip + 0x5c827]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000446692: lea ebx, [rip + 0x68d38]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000446334: lea ebx, [rip + 0x69096]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004464df: lea ebx, [rip + 0x6912b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004461b4: lea ebx, [rip + 0x69216]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000446277: lea ebx, [rip + 0x69393]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000446034: lea ebx, [rip + 0x69396]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004460f7: lea ebx, [rip + 0x69513]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445eb4: lea ebx, [rip + 0x69516]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445f77: lea ebx, [rip + 0x69693]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445d34: lea ebx, [rip + 0x69696]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445df8: lea ebx, [rip + 0x69812]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445bb4: lea ebx, [rip + 0x69816]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445c77: lea ebx, [rip + 0x69993]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445a34: lea ebx, [rip + 0x69996]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445af7: lea ebx, [rip + 0x69b13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004458b4: lea ebx, [rip + 0x69b16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445977: lea ebx, [rip + 0x69c93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445734: lea ebx, [rip + 0x69c96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004457f7: lea ebx, [rip + 0x69e13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004455b4: lea ebx, [rip + 0x69e16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445677: lea ebx, [rip + 0x69f93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445434: lea ebx, [rip + 0x69f96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004454f7: lea ebx, [rip + 0x6a113]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004452b4: lea ebx, [rip + 0x6a116]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445377: lea ebx, [rip + 0x6a293]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445134: lea ebx, [rip + 0x6a296]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004451f7: lea ebx, [rip + 0x6a413]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444fb4: lea ebx, [rip + 0x6a416]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445077: lea ebx, [rip + 0x6a593]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444e34: lea ebx, [rip + 0x6a596]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444cbb: lea ebx, [rip + 0x6a70f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444ef7: lea ebx, [rip + 0x6a713]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444d77: lea ebx, [rip + 0x6a893]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444abc: lea ebx, [rip + 0x6a90e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444c3a: lea ebx, [rip + 0x6a9d0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444ade: lea ebx, [rip + 0x6ab2c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443b7e: lea ebx, [rip + 0x6b34c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443854: lea ebx, [rip + 0x6b676]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004439eb: lea ebx, [rip + 0x6b71f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004436d4: lea ebx, [rip + 0x6b7f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443797: lea ebx, [rip + 0x6b973]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443554: lea ebx, [rip + 0x6b976]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443617: lea ebx, [rip + 0x6baf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004433d4: lea ebx, [rip + 0x6baf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443497: lea ebx, [rip + 0x6bc73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443254: lea ebx, [rip + 0x6bc76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443318: lea ebx, [rip + 0x6bdf2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004430d4: lea ebx, [rip + 0x6bdf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443197: lea ebx, [rip + 0x6bf73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442f54: lea ebx, [rip + 0x6bf76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443017: lea ebx, [rip + 0x6c0f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442dd4: lea ebx, [rip + 0x6c0f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442e97: lea ebx, [rip + 0x6c273]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442c54: lea ebx, [rip + 0x6c276]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442d17: lea ebx, [rip + 0x6c3f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442ad4: lea ebx, [rip + 0x6c3f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442b97: lea ebx, [rip + 0x6c573]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442954: lea ebx, [rip + 0x6c576]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442a17: lea ebx, [rip + 0x6c6f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004427d4: lea ebx, [rip + 0x6c6f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442897: lea ebx, [rip + 0x6c873]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442654: lea ebx, [rip + 0x6c876]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442717: lea ebx, [rip + 0x6c9f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004424d4: lea ebx, [rip + 0x6c9f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442597: lea ebx, [rip + 0x6cb73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442354: lea ebx, [rip + 0x6cb76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004421db: lea ebx, [rip + 0x6ccef]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442417: lea ebx, [rip + 0x6ccf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441f85: lea ebx, [rip + 0x6cd85]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441ec8: lea ebx, [rip + 0x6ce42]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442297: lea ebx, [rip + 0x6ce73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441ffb: lea ebx, [rip + 0x6cecf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441ddd: lea ebx, [rip + 0x6cf2d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044215a: lea ebx, [rip + 0x6cfb0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441d12: lea ebx, [rip + 0x6cff8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441fe8: lea ebx, [rip + 0x6d122]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440cf1: lea ebx, [rip + 0x6e019]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440c53: lea ebx, [rip + 0x6e0b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440ba1: lea ebx, [rip + 0x6e169]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440b03: lea ebx, [rip + 0x6e207]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440a51: lea ebx, [rip + 0x6e2b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004409b3: lea ebx, [rip + 0x6e357]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440901: lea ebx, [rip + 0x6e409]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440863: lea ebx, [rip + 0x6e4a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004407b1: lea ebx, [rip + 0x6e559]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440713: lea ebx, [rip + 0x6e5f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440661: lea ebx, [rip + 0x6e6a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004405c3: lea ebx, [rip + 0x6e747]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440511: lea ebx, [rip + 0x6e7f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440473: lea ebx, [rip + 0x6e897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004403c1: lea ebx, [rip + 0x6e949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440328: lea ebx, [rip + 0x6e9e2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440271: lea ebx, [rip + 0x6ea99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004401d3: lea ebx, [rip + 0x6eb37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440121: lea ebx, [rip + 0x6ebe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440083: lea ebx, [rip + 0x6ec87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ffd1: lea ebx, [rip + 0x6ed39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ff33: lea ebx, [rip + 0x6edd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fe81: lea ebx, [rip + 0x6ee89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fde3: lea ebx, [rip + 0x6ef27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fd31: lea ebx, [rip + 0x6efd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fc93: lea ebx, [rip + 0x6f077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fbe1: lea ebx, [rip + 0x6f129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fb43: lea ebx, [rip + 0x6f1c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fa91: lea ebx, [rip + 0x6f279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f9f3: lea ebx, [rip + 0x6f317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f947: lea ebx, [rip + 0x6f3c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f856: lea ebx, [rip + 0x6f4b4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f797: lea ebx, [rip + 0x6f573]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f72d: lea ebx, [rip + 0x6f5dd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f63e: lea ebx, [rip + 0x6f6cc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f404: lea ebx, [rip + 0x6f746]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f579: lea ebx, [rip + 0x6f791]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f32a: lea ebx, [rip + 0x6f820]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e321: lea ebx, [rip + 0x70829]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e283: lea ebx, [rip + 0x708c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e1d1: lea ebx, [rip + 0x70979]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e133: lea ebx, [rip + 0x70a17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e081: lea ebx, [rip + 0x70ac9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dfe3: lea ebx, [rip + 0x70b67]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043df31: lea ebx, [rip + 0x70c19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043de93: lea ebx, [rip + 0x70cb7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dde1: lea ebx, [rip + 0x70d69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dd43: lea ebx, [rip + 0x70e07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dc91: lea ebx, [rip + 0x70eb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dbf3: lea ebx, [rip + 0x70f57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043db41: lea ebx, [rip + 0x71009]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043daa3: lea ebx, [rip + 0x710a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d9f1: lea ebx, [rip + 0x71159]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d958: lea ebx, [rip + 0x711f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d8a1: lea ebx, [rip + 0x712a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d803: lea ebx, [rip + 0x71347]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d751: lea ebx, [rip + 0x713f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d6b3: lea ebx, [rip + 0x71497]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d601: lea ebx, [rip + 0x71549]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d563: lea ebx, [rip + 0x715e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d4b1: lea ebx, [rip + 0x71699]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d413: lea ebx, [rip + 0x71737]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d361: lea ebx, [rip + 0x717e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d2c3: lea ebx, [rip + 0x71887]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d211: lea ebx, [rip + 0x71939]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d173: lea ebx, [rip + 0x719d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d0c1: lea ebx, [rip + 0x71a89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d023: lea ebx, [rip + 0x71b27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cf77: lea ebx, [rip + 0x71bd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ce86: lea ebx, [rip + 0x71cc4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cdc7: lea ebx, [rip + 0x71d83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cd5d: lea ebx, [rip + 0x71ded]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cc6e: lea ebx, [rip + 0x71edc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cba9: lea ebx, [rip + 0x71fa1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043be64: lea ebx, [rip + 0x72ba6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bdea: lea ebx, [rip + 0x72c20]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bd5b: lea ebx, [rip + 0x72caf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bb50: lea ebx, [rip + 0x72eba]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043ba1e: lea ebx, [rip + 0x72fec]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b958: lea ebx, [rip + 0x730b2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b8da: lea ebx, [rip + 0x73130]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b843: lea ebx, [rip + 0x731c7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b647: lea ebx, [rip + 0x733c3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b516: lea ebx, [rip + 0x734f4]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b407: lea ebx, [rip + 0x73603]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000004c1931: lea ebx, [rsi - 0x3271f33]; test al, 0x97; xchg eax, esp; ret; 
0x000000000048310b: lea ecx, [rax + 1]; call rbx; 
0x00000000004832a6: lea ecx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000047e665: lea ecx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x00000000004531ee: lea ecx, [rbx + rcx]; jmp rcx; 
0x000000000042e088: lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000048db24: lea ecx, [rdx + 4]; cmp rcx, r8; jne 0x8dacb; mov eax, dword ptr [rdx + 4]; ret; 
0x0000000000439450: lea ecx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x00000000004321b6: lea ecx, [rdx - 8]; cmovne rax, rcx; ret; 
0x000000000049c561: lea ecx, [rip + 0x23cc99]; mov rax, qword ptr [rdi + rsi*8]; cmp byte ptr [rcx + rsi], 8; jne 0x9c575; mov qword ptr [rax], rdx; ret; 
0x000000000048b537: lea ecx, [rip + 0x34243]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000047e1f0: lea ecx, [rip + 0x403ae]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000044f269: lea ecx, [rip + 0x63b91]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000044de54: lea ecx, [rip + 0x64fa6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000044dbf9: lea ecx, [rip + 0x65201]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000044c324: lea ecx, [rip + 0x66ad6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000040cc18: lea ecx, [rip + 0x97182]; jmp rax; 
0x00000000004078ea: lea ecx, [rip + 0x9a338]; mov esi, esi; movsxd rax, dword ptr [rcx + rsi*4]; add rax, rcx; jmp rax; 
0x000000000045b42a: lea ecx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000456125: lea ecx, [rsi + rdx]; cmp rdi, r9; jb 0x56294; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000456480: lea ecx, [rsi + rdx]; cmp rdi, r9; jb 0x56651; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004568cb: lea ecx, [rsi + rdx]; cmp rdi, r9; jb 0x56b0c; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000481440: lea ecx, [rsp + 0x10]; mov rdi, r12; call rbx; 
0x000000000048135b: lea ecx, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000048322e: lea ecx, [rsp + 0x20]; call rbx; 
0x000000000048341c: lea ecx, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x0000000000483106: lea ecx, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x00000000004788f7: lea edi, [rax + 0x48fffff6]; mov edi, dword ptr [rbp - 0x8d0]; call rax; 
0x00000000004846c3: lea edi, [rbx + 4]; sub rsp, 0x80; call 0x5b060; add rsp, 0x80; pop rbx; ret; 
0x000000000045bb2f: lea edi, [rcx + rax + 0x20]; jmp rdx; 
0x00000000004560ca: lea edi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000441f7d: lea edi, [rdi - 0x40]; sub rdx, 0x40; lea r11, [rip + 0x6cd85]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000470580: lea edi, [rip + 0x26301a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000490448: lea edi, [rip + 0x2f52c]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000048cbf1: lea edi, [rip + 0x32d83]; mov eax, 0x15; syscall; 
0x000000000048be5f: lea edi, [rip + 0x339b3]; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000047e937: lea edi, [rip + 0x3fdef]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000045b4fe: lea edi, [rip + 0x550c1]; mov eax, 0x15; syscall; 
0x000000000041d8cd: lea edi, [rip + 0x8fdba]; mov edx, 0x6c; call 0x10920; xor eax, eax; ret; 
0x000000000041bf68: lea edi, [rip + 0x91272]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000425fb9: lea edi, [rsi + 1]; call qword ptr [rbx + 0x18]; 
0x00000000004276c1: lea edx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x00000000004097aa: lea edx, [rax + 0xe0]; cmp edx, 0x18; jbe 0x97c0; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x000000000040a51a: lea edx, [rax + 0xe0]; cmp edx, 0x18; jbe 0xa530; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x000000000040b10a: lea edx, [rax + 0xe0]; cmp edx, 0x18; jbe 0xb120; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x000000000040bd1a: lea edx, [rax + 0xe0]; cmp edx, 0x18; jbe 0xbd30; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x000000000040a459: lea edx, [rax + 0xfa0]; test eax, eax; cmovns eax, edx; add rsp, 8; ret; 
0x000000000047e669: lea edx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000043cbb4: lea edx, [rbx + rdx]; jmp rdx; 
0x0000000000400c9a: lea edx, [rdi + 3]; cmp edx, 1; jbe 0xc8a; mov eax, 0xfffffff2; ret; 
0x0000000000440ce8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e019]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440b98: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e169]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440a48: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e2b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004408f8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e409]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440658: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e6a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004403b8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440268: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6ea99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440118: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6ebe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ffc8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6ed39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fe78: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6ee89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fd28: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6efd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fbd8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6f129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fa88: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6f279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e318: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x70829]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e1c8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x70979]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043df28: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x70c19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ddd8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x70d69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dc88: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x70eb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043db38: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71009]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d898: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x712a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d5f8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71549]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d4a8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71699]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d358: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x717e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d208: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71939]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d0b8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71a89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000494508: lea edx, [rip + 0x102]; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x00000000004339c7: lea edx, [rip + 0x1bf63]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x0000000000433911: lea edx, [rip + 0x227d9]; lea rax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x00000000004337d1: lea edx, [rip + 0x22909]; lea rax, [rip + 0x22862]; cmovne rax, rdx; ret; 
0x0000000000433671: lea edx, [rip + 0x22a79]; lea rax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x0000000000433978: lea edx, [rip + 0x22ac2]; lea rax, [rip + 0x22a7b]; cmovne rax, rdx; ret; 
0x0000000000433838: lea edx, [rip + 0x22bf2]; lea rax, [rip + 0x22bab]; cmovne rax, rdx; ret; 
0x00000000004336d8: lea edx, [rip + 0x22d62]; lea rax, [rip + 0x22d1b]; cmovne rax, rdx; ret; 
0x0000000000433957: lea edx, [rip + 0x22f23]; lea rax, [rip + 0x22ecc]; cmovne rax, rdx; ret; 
0x0000000000432c38: lea edx, [rip + 0x23042]; lea rax, [rip + 0x22f9b]; cmovne rax, rdx; ret; 
0x0000000000433817: lea edx, [rip + 0x23053]; lea rax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x0000000000433726: lea edx, [rip + 0x23834]; lea rax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x0000000000433777: lea edx, [rip + 0x23973]; lea rax, [rip + 0x2390c]; cmovne rax, rdx; ret; 
0x000000000049c4f6: lea edx, [rip + 0x23cd04]; cmp byte ptr [rdx + rsi], 8; jne 0x9c51c; mov rax, qword ptr [rax]; ret; 
0x00000000004941d6: lea edx, [rip + 0x2439c4]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000494246: lea edx, [rip + 0x30fe0]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000047e9a5: lea edx, [rip + 0x3fe3d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000045840d: lea edx, [rip + 0x57c09]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000044f2b7: lea edx, [rip + 0x63b43]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044f29d: lea edx, [rip + 0x63b5d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044dc47: lea edx, [rip + 0x651b3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044dc2d: lea edx, [rip + 0x651cd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044c097: lea edx, [rip + 0x66d63]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044c07d: lea edx, [rip + 0x66d7d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000449f47: lea edx, [rip + 0x68eb3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000449f2d: lea edx, [rip + 0x68ecd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000433997: lea edx, [rip + 0x7133]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x00000000004325de: lea edx, [rip + 0x7c22c]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000041c24e: lea edx, [rip + 0x90fc4]; movzx edi, dl; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x000000000040cc94: lea edx, [rip + 0x957de]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004085d9: lea edx, [rip + 0x996b9]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000040853f: lea edx, [rip + 0x99733]; mov r12d, eax; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x00000000004110c0: lea edx, [rip + 0x9c042]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000410ef3: lea edx, [rip + 0x9c1b7]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000410d6f: lea edx, [rip + 0x9c30f]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000402036: lea edx, [rip + 0x9f914]; mov edi, edi; movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; jmp rax; 
0x0000000000481c07: lea edx, [rip + 0xc03]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x902]; cmove rax, rdx; ret; 
0x0000000000482f27: lea edx, [rip + 0xcd3]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000482fa4: lea edx, [rip - 0x2bf3a]; cmove rax, rdx; ret; 
0x0000000000433588: lea edx, [rip - 0x36e]; lea rax, [rip + 0x221ab]; cmove rax, rdx; ret; 
0x00000000004560be: lea edx, [rsi + rcx]; cmp rdi, rdx; jb 0x560c9; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000458c2e: lea edx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000458d31: lea edx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000004097a9: lea edx, es:[rax + 0xe0]; cmp edx, 0x18; jbe 0x97c0; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x000000000040a519: lea edx, es:[rax + 0xe0]; cmp edx, 0x18; jbe 0xa530; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x000000000040b109: lea edx, es:[rax + 0xe0]; cmp edx, 0x18; jbe 0xb120; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x000000000040bd19: lea edx, es:[rax + 0xe0]; cmp edx, 0x18; jbe 0xbd30; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x0000000000481357: lea esi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000481439: lea esi, [rbp + 0x90]; lea r9, [rsp + 0x10]; mov rdi, r12; call rbx; 
0x0000000000481533: lea esi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000048d33a: lea esi, [rbp - 0x430]; movsxd rdx, r12d; mov edi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x00000000004105c3: lea esi, [rcx + rbx]; mov qword ptr [rsi + 8], rax; mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000420d72: lea esi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000047aeed: lea esi, [rip + 0x258dad]; jmp rax; 
0x0000000000470c22: lea esi, [rip + 0x262978]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x00000000004705ca: lea esi, [rip + 0x262fd0]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x000000000047e136: lea esi, [rip + 0x403ac]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000457291: lea esi, [rip + 0x588e9]; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x00000000004572b3: lea esi, [rip + 0x588eb]; shr eax, 0xc; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000004560cf: lea esi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000045c9b5: lea esp, [rbp + 1]; cmp rax, 0x17; ja 0x5c990; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000041d773: lea esp, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000048d646: lea esp, [rbx + rdi*8 - 0x76b30001]; ret 0x2948; 
0x000000000041c24d: lea r10, [rip + 0x90fc4]; movzx edi, dl; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x0000000000453935: lea r11, [rip + 0x5c154]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453900: lea r11, [rip + 0x5c189]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004538d4: lea r11, [rip + 0x5c1b5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004538be: lea r11, [rip + 0x5c1cb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045389c: lea r11, [rip + 0x5c1ed]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453877: lea r11, [rip + 0x5c212]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045385a: lea r11, [rip + 0x5c22f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453802: lea r11, [rip + 0x5c287]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453315: lea r11, [rip + 0x5c6f4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004532e0: lea r11, [rip + 0x5c729]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004532b4: lea r11, [rip + 0x5c755]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045329e: lea r11, [rip + 0x5c76b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045327c: lea r11, [rip + 0x5c78d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453257: lea r11, [rip + 0x5c7b2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045323a: lea r11, [rip + 0x5c7cf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004531e2: lea r11, [rip + 0x5c827]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000446691: lea r11, [rip + 0x68d38]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000446333: lea r11, [rip + 0x69096]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004464de: lea r11, [rip + 0x6912b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004461b3: lea r11, [rip + 0x69216]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000446276: lea r11, [rip + 0x69393]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000446033: lea r11, [rip + 0x69396]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004460f6: lea r11, [rip + 0x69513]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445eb3: lea r11, [rip + 0x69516]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445f76: lea r11, [rip + 0x69693]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445d33: lea r11, [rip + 0x69696]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445df7: lea r11, [rip + 0x69812]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445bb3: lea r11, [rip + 0x69816]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445c76: lea r11, [rip + 0x69993]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445a33: lea r11, [rip + 0x69996]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445af6: lea r11, [rip + 0x69b13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004458b3: lea r11, [rip + 0x69b16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445976: lea r11, [rip + 0x69c93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445733: lea r11, [rip + 0x69c96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004457f6: lea r11, [rip + 0x69e13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004455b3: lea r11, [rip + 0x69e16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445676: lea r11, [rip + 0x69f93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445433: lea r11, [rip + 0x69f96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004454f6: lea r11, [rip + 0x6a113]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004452b3: lea r11, [rip + 0x6a116]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445376: lea r11, [rip + 0x6a293]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445133: lea r11, [rip + 0x6a296]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004451f6: lea r11, [rip + 0x6a413]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444fb3: lea r11, [rip + 0x6a416]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445076: lea r11, [rip + 0x6a593]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444e33: lea r11, [rip + 0x6a596]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444cba: lea r11, [rip + 0x6a70f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444ef6: lea r11, [rip + 0x6a713]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444d76: lea r11, [rip + 0x6a893]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444abb: lea r11, [rip + 0x6a90e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444c39: lea r11, [rip + 0x6a9d0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444add: lea r11, [rip + 0x6ab2c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443b7d: lea r11, [rip + 0x6b34c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443853: lea r11, [rip + 0x6b676]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004439ea: lea r11, [rip + 0x6b71f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004436d3: lea r11, [rip + 0x6b7f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443796: lea r11, [rip + 0x6b973]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443553: lea r11, [rip + 0x6b976]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443616: lea r11, [rip + 0x6baf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004433d3: lea r11, [rip + 0x6baf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443496: lea r11, [rip + 0x6bc73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443253: lea r11, [rip + 0x6bc76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443317: lea r11, [rip + 0x6bdf2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004430d3: lea r11, [rip + 0x6bdf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443196: lea r11, [rip + 0x6bf73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442f53: lea r11, [rip + 0x6bf76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443016: lea r11, [rip + 0x6c0f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442dd3: lea r11, [rip + 0x6c0f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442e96: lea r11, [rip + 0x6c273]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442c53: lea r11, [rip + 0x6c276]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442d16: lea r11, [rip + 0x6c3f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442ad3: lea r11, [rip + 0x6c3f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442b96: lea r11, [rip + 0x6c573]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442953: lea r11, [rip + 0x6c576]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442a16: lea r11, [rip + 0x6c6f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004427d3: lea r11, [rip + 0x6c6f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442896: lea r11, [rip + 0x6c873]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442653: lea r11, [rip + 0x6c876]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442716: lea r11, [rip + 0x6c9f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004424d3: lea r11, [rip + 0x6c9f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442596: lea r11, [rip + 0x6cb73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442353: lea r11, [rip + 0x6cb76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004421da: lea r11, [rip + 0x6ccef]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442416: lea r11, [rip + 0x6ccf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441f84: lea r11, [rip + 0x6cd85]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441ec7: lea r11, [rip + 0x6ce42]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442296: lea r11, [rip + 0x6ce73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441ffa: lea r11, [rip + 0x6cecf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441ddc: lea r11, [rip + 0x6cf2d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442159: lea r11, [rip + 0x6cfb0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441d11: lea r11, [rip + 0x6cff8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441fe7: lea r11, [rip + 0x6d122]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440cf0: lea r11, [rip + 0x6e019]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440c52: lea r11, [rip + 0x6e0b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440ba0: lea r11, [rip + 0x6e169]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440b02: lea r11, [rip + 0x6e207]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440a50: lea r11, [rip + 0x6e2b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004409b2: lea r11, [rip + 0x6e357]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440900: lea r11, [rip + 0x6e409]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440862: lea r11, [rip + 0x6e4a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004407b0: lea r11, [rip + 0x6e559]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440712: lea r11, [rip + 0x6e5f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440660: lea r11, [rip + 0x6e6a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004405c2: lea r11, [rip + 0x6e747]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440510: lea r11, [rip + 0x6e7f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440472: lea r11, [rip + 0x6e897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004403c0: lea r11, [rip + 0x6e949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440327: lea r11, [rip + 0x6e9e2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440270: lea r11, [rip + 0x6ea99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004401d2: lea r11, [rip + 0x6eb37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440120: lea r11, [rip + 0x6ebe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440082: lea r11, [rip + 0x6ec87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ffd0: lea r11, [rip + 0x6ed39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ff32: lea r11, [rip + 0x6edd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fe80: lea r11, [rip + 0x6ee89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fde2: lea r11, [rip + 0x6ef27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fd30: lea r11, [rip + 0x6efd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fc92: lea r11, [rip + 0x6f077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fbe0: lea r11, [rip + 0x6f129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fb42: lea r11, [rip + 0x6f1c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fa90: lea r11, [rip + 0x6f279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f9f2: lea r11, [rip + 0x6f317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f946: lea r11, [rip + 0x6f3c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f855: lea r11, [rip + 0x6f4b4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f796: lea r11, [rip + 0x6f573]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f72c: lea r11, [rip + 0x6f5dd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f63d: lea r11, [rip + 0x6f6cc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f403: lea r11, [rip + 0x6f746]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f578: lea r11, [rip + 0x6f791]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f329: lea r11, [rip + 0x6f820]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e320: lea r11, [rip + 0x70829]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e282: lea r11, [rip + 0x708c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e1d0: lea r11, [rip + 0x70979]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e132: lea r11, [rip + 0x70a17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e080: lea r11, [rip + 0x70ac9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dfe2: lea r11, [rip + 0x70b67]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043df30: lea r11, [rip + 0x70c19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043de92: lea r11, [rip + 0x70cb7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dde0: lea r11, [rip + 0x70d69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dd42: lea r11, [rip + 0x70e07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dc90: lea r11, [rip + 0x70eb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dbf2: lea r11, [rip + 0x70f57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043db40: lea r11, [rip + 0x71009]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043daa2: lea r11, [rip + 0x710a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d9f0: lea r11, [rip + 0x71159]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d957: lea r11, [rip + 0x711f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d8a0: lea r11, [rip + 0x712a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d802: lea r11, [rip + 0x71347]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d750: lea r11, [rip + 0x713f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d6b2: lea r11, [rip + 0x71497]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d600: lea r11, [rip + 0x71549]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d562: lea r11, [rip + 0x715e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d4b0: lea r11, [rip + 0x71699]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d412: lea r11, [rip + 0x71737]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d360: lea r11, [rip + 0x717e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d2c2: lea r11, [rip + 0x71887]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d210: lea r11, [rip + 0x71939]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d172: lea r11, [rip + 0x719d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d0c0: lea r11, [rip + 0x71a89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d022: lea r11, [rip + 0x71b27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cf76: lea r11, [rip + 0x71bd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ce85: lea r11, [rip + 0x71cc4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cdc6: lea r11, [rip + 0x71d83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cd5c: lea r11, [rip + 0x71ded]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cc6d: lea r11, [rip + 0x71edc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cba8: lea r11, [rip + 0x71fa1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043be63: lea r11, [rip + 0x72ba6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bde9: lea r11, [rip + 0x72c20]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bd5a: lea r11, [rip + 0x72caf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bb4f: lea r11, [rip + 0x72eba]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043ba1d: lea r11, [rip + 0x72fec]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b957: lea r11, [rip + 0x730b2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b8d9: lea r11, [rip + 0x73130]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b842: lea r11, [rip + 0x731c7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b646: lea r11, [rip + 0x733c3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b515: lea r11, [rip + 0x734f4]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b406: lea r11, [rip + 0x73603]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000045c9b4: lea r12, [r13 + 1]; cmp rax, 0x17; ja 0x5c990; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000041d772: lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000425fb8: lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x000000000049eda7: lea r8, [rip + 0x2738a]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000049a187: lea r8, [rip + 0x2ba5a]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x0000000000420bdb: lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000456124: lea r9, [rsi + rdx]; cmp rdi, r9; jb 0x56294; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000045647f: lea r9, [rsi + rdx]; cmp rdi, r9; jb 0x56651; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004568ca: lea r9, [rsi + rdx]; cmp rdi, r9; jb 0x56b0c; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000048143f: lea r9, [rsp + 0x10]; mov rdi, r12; call rbx; 
0x000000000048135a: lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000048322d: lea r9, [rsp + 0x20]; call rbx; 
0x000000000048341b: lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x0000000000483105: lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000049a1db: lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x000000000043a593: lea rax, [rax + rdi + 0x10]; ret; 
0x000000000043a5a3: lea rax, [rax + rdi + 0x20]; ret; 
0x000000000043a573: lea rax, [rax + rdi - 0x10]; ret; 
0x000000000048aa6c: lea rax, [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000048270c: lea rax, [rcx + rsi]; ret; 
0x0000000000455a53: lea rax, [rcx - 1]; ret; 
0x0000000000453acb: lea rax, [rdi + 0x10]; ret; 
0x0000000000453ae0: lea rax, [rdi + 0x11]; ret; 
0x0000000000453afe: lea rax, [rdi + 0x12]; ret; 
0x0000000000453b1e: lea rax, [rdi + 0x13]; ret; 
0x0000000000453b41: lea rax, [rdi + 0x14]; ret; 
0x0000000000453b60: lea rax, [rdi + 0x15]; ret; 
0x0000000000453b80: lea rax, [rdi + 0x16]; ret; 
0x0000000000453ba0: lea rax, [rdi + 0x17]; ret; 
0x0000000000453bc3: lea rax, [rdi + 0x18]; ret; 
0x0000000000453be8: lea rax, [rdi + 0x19]; ret; 
0x0000000000453c06: lea rax, [rdi + 0x1a]; ret; 
0x0000000000453c26: lea rax, [rdi + 0x1b]; ret; 
0x0000000000453c42: lea rax, [rdi + 0x1c]; ret; 
0x0000000000453c62: lea rax, [rdi + 0x1d]; ret; 
0x0000000000453c82: lea rax, [rdi + 0x1e]; ret; 
0x0000000000453ca2: lea rax, [rdi + 0x1f]; ret; 
0x0000000000453a1c: lea rax, [rdi + 0xa]; ret; 
0x0000000000453a3c: lea rax, [rdi + 0xb]; ret; 
0x0000000000453a5e: lea rax, [rdi + 0xc]; ret; 
0x0000000000453a7e: lea rax, [rdi + 0xd]; ret; 
0x0000000000453a9e: lea rax, [rdi + 0xe]; ret; 
0x0000000000453ab8: lea rax, [rdi + 0xf]; ret; 
0x0000000000453966: lea rax, [rdi + 1]; ret; 
0x0000000000453979: lea rax, [rdi + 2]; ret; 
0x0000000000453984: lea rax, [rdi + 3]; ret; 
0x0000000000453997: lea rax, [rdi + 4]; ret; 
0x00000000004539ac: lea rax, [rdi + 5]; ret; 
0x00000000004539ca: lea rax, [rdi + 6]; ret; 
0x00000000004539d6: lea rax, [rdi + 7]; ret; 
0x00000000004539e9: lea rax, [rdi + 8]; ret; 
0x00000000004539fe: lea rax, [rdi + 9]; ret; 
0x000000000043a5c8: lea rax, [rdi + rax + 0x10]; ret; 
0x000000000044f8b6: lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000043a5d8: lea rax, [rdi + rax + 0x20]; ret; 
0x000000000043a4d2: lea rax, [rdi + rax + 0x30]; ret; 
0x000000000044f8d6: lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000044f914: lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000482954: lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000044f31b: lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000044f77c: lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000044f536: lea rax, [rdi + rax]; ret; 
0x0000000000455da9: lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x0000000000482608: lea rax, [rdi + rsi]; ret; 
0x0000000000453952: lea rax, [rdi]; ret; 
0x0000000000452f3c: lea rax, [rdx + 0xa]; ret; 
0x0000000000452f5c: lea rax, [rdx + 0xb]; ret; 
0x0000000000452f7e: lea rax, [rdx + 0xc]; ret; 
0x0000000000452f9e: lea rax, [rdx + 0xd]; ret; 
0x0000000000452fbe: lea rax, [rdx + 0xe]; ret; 
0x0000000000452e4e: lea rax, [rdx + 0xf]; ret; 
0x0000000000452e76: lea rax, [rdx + 1]; ret; 
0x0000000000452e8c: lea rax, [rdx + 2]; ret; 
0x0000000000452ea4: lea rax, [rdx + 3]; ret; 
0x0000000000452eba: lea rax, [rdx + 4]; ret; 
0x0000000000452ecc: lea rax, [rdx + 5]; ret; 
0x0000000000452eea: lea rax, [rdx + 6]; ret; 
0x000000000049a1d0: lea rax, [rdx + 7]; and rax, 0xfffffffffffffff8; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x0000000000452df6: lea rax, [rdx + 7]; ret; 
0x0000000000452efc: lea rax, [rdx + 8]; ret; 
0x0000000000452f1c: lea rax, [rdx + 9]; ret; 
0x00000000004321a5: lea rax, [rdx - 0x10]; ret; 
0x0000000000452e64: lea rax, [rdx]; ret; 
0x00000000004339d7: lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x0000000000432cb7: lea rax, [rip + 0x1ce62]; cmove rax, rdx; ret; 
0x000000000043358e: lea rax, [rip + 0x221ab]; cmove rax, rdx; ret; 
0x0000000000433917: lea rax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x00000000004337d7: lea rax, [rip + 0x22862]; cmovne rax, rdx; ret; 
0x0000000000433677: lea rax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x000000000043397e: lea rax, [rip + 0x22a7b]; cmovne rax, rdx; ret; 
0x000000000043383e: lea rax, [rip + 0x22bab]; cmovne rax, rdx; ret; 
0x00000000004336de: lea rax, [rip + 0x22d1b]; cmovne rax, rdx; ret; 
0x000000000043395d: lea rax, [rip + 0x22ecc]; cmovne rax, rdx; ret; 
0x0000000000432c3e: lea rax, [rip + 0x22f9b]; cmovne rax, rdx; ret; 
0x000000000043381d: lea rax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x00000000004336bd: lea rax, [rip + 0x2316c]; cmovne rax, rdx; ret; 
0x000000000043372c: lea rax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x000000000043377d: lea rax, [rip + 0x2390c]; cmovne rax, rdx; ret; 
0x0000000000493d90: lea rax, [rip + 0x245349]; mov qword ptr [rip + 0x24532a], rax; ret; 
0x0000000000493d75: lea rax, [rip + 0x245364]; mov qword ptr [rip + 0x245345], rax; add rsp, 8; ret; 
0x000000000047c095: lea rax, [rip + 0x258004]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047c042: lea rax, [rip + 0x258057]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047bb15: lea rax, [rip + 0x258084]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047beb4: lea rax, [rip + 0x2581e5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047be6f: lea rax, [rip + 0x25822a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047be2a: lea rax, [rip + 0x25826f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047bddb: lea rax, [rip + 0x2582be]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047b43f: lea rax, [rip + 0x25895a]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000047052e: lea rax, [rip + 0x262f6b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004708dd: lea rax, [rip + 0x2630bc]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047088f: lea rax, [rip + 0x26310a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004707e0: lea rax, [rip + 0x2631b9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470784: lea rax, [rip + 0x263215]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004704e4: lea rax, [rip + 0x2634b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470496: lea rax, [rip + 0x263503]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470035: lea rax, [rip + 0x263664]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004688c8: lea rax, [rip + 0x26d371]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x688da; call rax; 
0x000000000045c840: lea rax, [rip + 0x27aaf9]; ret; 
0x000000000040f9c1: lea rax, [rip + 0x2c89b8]; ret; 
0x000000000049450e: lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x00000000004339a7: lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x00000000004335b7: lea rax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x0000000000481c17: lea rax, [rip + 0x902]; cmove rax, rdx; ret; 
0x000000000040c900: lea rax, [rip + 0x95450]; ret; 
0x000000000040c8e8: lea rax, [rip + 0x9545d]; ret; 
0x000000000040c8f8: lea rax, [rip + 0x95461]; ret; 
0x000000000040c8c8: lea rax, [rip + 0x95465]; ret; 
0x000000000040c8d8: lea rax, [rip + 0x95466]; ret; 
0x000000000040c8f0: lea rax, [rip + 0x95470]; ret; 
0x000000000040c890: lea rax, [rip + 0x95483]; ret; 
0x000000000040c898: lea rax, [rip + 0x95484]; ret; 
0x000000000040c888: lea rax, [rip + 0x95486]; ret; 
0x000000000040c918: lea rax, [rip + 0x95494]; ret; 
0x000000000040c910: lea rax, [rip + 0x954a2]; ret; 
0x000000000040c860: lea rax, [rip + 0x954a7]; ret; 
0x000000000040c850: lea rax, [rip + 0x954ac]; ret; 
0x000000000040c840: lea rax, [rip + 0x954b0]; ret; 
0x000000000040c908: lea rax, [rip + 0x954b1]; ret; 
0x000000000040c820: lea rax, [rip + 0x954bc]; ret; 
0x000000000040c8b0: lea rax, [rip + 0x954c1]; ret; 
0x000000000040c8e0: lea rax, [rip + 0x954c6]; ret; 
0x000000000040c810: lea rax, [rip + 0x954c7]; ret; 
0x000000000040c8a8: lea rax, [rip + 0x954d0]; ret; 
0x000000000040c7f0: lea rax, [rip + 0x954d8]; ret; 
0x000000000040c800: lea rax, [rip + 0x954e4]; ret; 
0x000000000040c7e0: lea rax, [rip + 0x954ef]; ret; 
0x000000000040c880: lea rax, [rip + 0x9550a]; ret; 
0x000000000040c878: lea rax, [rip + 0x95519]; ret; 
0x000000000040c870: lea rax, [rip + 0x95528]; ret; 
0x000000000040c830: lea rax, [rip + 0x9556f]; ret; 
0x000000000040bcf0: lea rax, [rip + 0x96060]; ret; 
0x000000000040bcd8: lea rax, [rip + 0x9606d]; ret; 
0x000000000040bce8: lea rax, [rip + 0x96071]; ret; 
0x000000000040bcb8: lea rax, [rip + 0x96075]; ret; 
0x000000000040bcc8: lea rax, [rip + 0x96076]; ret; 
0x000000000040bce0: lea rax, [rip + 0x96080]; ret; 
0x000000000040bc80: lea rax, [rip + 0x96093]; ret; 
0x000000000040bc88: lea rax, [rip + 0x96094]; ret; 
0x000000000040bc78: lea rax, [rip + 0x96096]; ret; 
0x000000000040bd08: lea rax, [rip + 0x960a4]; ret; 
0x000000000040bd00: lea rax, [rip + 0x960b2]; ret; 
0x000000000040bc50: lea rax, [rip + 0x960b7]; ret; 
0x000000000040bc40: lea rax, [rip + 0x960bc]; ret; 
0x000000000040bc30: lea rax, [rip + 0x960c0]; ret; 
0x000000000040bcf8: lea rax, [rip + 0x960c1]; ret; 
0x000000000040bc10: lea rax, [rip + 0x960cc]; ret; 
0x000000000040bca0: lea rax, [rip + 0x960d1]; ret; 
0x000000000040bcd0: lea rax, [rip + 0x960d6]; ret; 
0x000000000040bc00: lea rax, [rip + 0x960d7]; ret; 
0x000000000040bc98: lea rax, [rip + 0x960e0]; ret; 
0x000000000040bbe0: lea rax, [rip + 0x960e8]; ret; 
0x000000000040bbf0: lea rax, [rip + 0x960f4]; ret; 
0x000000000040bbd0: lea rax, [rip + 0x960ff]; ret; 
0x000000000040bc70: lea rax, [rip + 0x9611a]; ret; 
0x000000000040bc68: lea rax, [rip + 0x96129]; ret; 
0x000000000040bc60: lea rax, [rip + 0x96138]; ret; 
0x000000000040bc20: lea rax, [rip + 0x9617f]; ret; 
0x000000000040b0e0: lea rax, [rip + 0x96c70]; ret; 
0x000000000040b0c8: lea rax, [rip + 0x96c7d]; ret; 
0x000000000040b0d8: lea rax, [rip + 0x96c81]; ret; 
0x000000000040b0a8: lea rax, [rip + 0x96c85]; ret; 
0x000000000040b0b8: lea rax, [rip + 0x96c86]; ret; 
0x000000000040b0d0: lea rax, [rip + 0x96c90]; ret; 
0x000000000040b070: lea rax, [rip + 0x96ca3]; ret; 
0x000000000040b078: lea rax, [rip + 0x96ca4]; ret; 
0x000000000040b068: lea rax, [rip + 0x96ca6]; ret; 
0x000000000040b0f8: lea rax, [rip + 0x96cb4]; ret; 
0x000000000040b0f0: lea rax, [rip + 0x96cc2]; ret; 
0x000000000040b040: lea rax, [rip + 0x96cc7]; ret; 
0x000000000040b030: lea rax, [rip + 0x96ccc]; ret; 
0x000000000040b020: lea rax, [rip + 0x96cd0]; ret; 
0x000000000040b0e8: lea rax, [rip + 0x96cd1]; ret; 
0x000000000040b000: lea rax, [rip + 0x96cdc]; ret; 
0x000000000040b090: lea rax, [rip + 0x96ce1]; ret; 
0x000000000040b0c0: lea rax, [rip + 0x96ce6]; ret; 
0x000000000040aff0: lea rax, [rip + 0x96ce7]; ret; 
0x000000000040b088: lea rax, [rip + 0x96cf0]; ret; 
0x000000000040afd0: lea rax, [rip + 0x96cf8]; ret; 
0x000000000040afe0: lea rax, [rip + 0x96d04]; ret; 
0x000000000040afc0: lea rax, [rip + 0x96d0f]; ret; 
0x000000000040b060: lea rax, [rip + 0x96d2a]; ret; 
0x000000000040b058: lea rax, [rip + 0x96d39]; ret; 
0x000000000040b050: lea rax, [rip + 0x96d48]; ret; 
0x000000000040b010: lea rax, [rip + 0x96d8f]; ret; 
0x000000000040a3e0: lea rax, [rip + 0x979b1]; ret; 
0x000000000040a3d8: lea rax, [rip + 0x979c0]; ret; 
0x000000000040a3d0: lea rax, [rip + 0x979cf]; ret; 
0x000000000040a3a8: lea rax, [rip + 0x979d7]; ret; 
0x000000000040a350: lea rax, [rip + 0x979dd]; ret; 
0x000000000040a360: lea rax, [rip + 0x979de]; ret; 
0x000000000040a370: lea rax, [rip + 0x979e0]; ret; 
0x000000000040a378: lea rax, [rip + 0x979e1]; ret; 
0x000000000040a330: lea rax, [rip + 0x979e3]; ret; 
0x000000000040a338: lea rax, [rip + 0x979e4]; ret; 
0x000000000040a320: lea rax, [rip + 0x979e7]; ret; 
0x000000000040a3a0: lea rax, [rip + 0x979ea]; ret; 
0x000000000040a310: lea rax, [rip + 0x979ec]; ret; 
0x000000000040a300: lea rax, [rip + 0x979f0]; ret; 
0x000000000040a3b8: lea rax, [rip + 0x979fa]; ret; 
0x000000000040a2e0: lea rax, [rip + 0x979fc]; ret; 
0x000000000040a2d0: lea rax, [rip + 0x97a07]; ret; 
0x000000000040a3b0: lea rax, [rip + 0x97a09]; ret; 
0x000000000040a2b0: lea rax, [rip + 0x97a18]; ret; 
0x000000000040a2f0: lea rax, [rip + 0x97a1e]; ret; 
0x000000000040a2c0: lea rax, [rip + 0x97a24]; ret; 
0x000000000040a2a0: lea rax, [rip + 0x97a2f]; ret; 
0x0000000000400d80: lea rax, [rip + 0xa0b71]; ret; 
0x0000000000482f37: lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x000000000040c8c0: lea rax, [rip + 0xb81b8]; ret; 
0x000000000040bcb0: lea rax, [rip + 0xb8dc8]; ret; 
0x000000000040b0a0: lea rax, [rip + 0xb99d8]; ret; 
0x000000000040a348: lea rax, [rip + 0xba730]; ret; 
0x0000000000481be7: lea rax, [rip + 0xdf2]; cmove rax, rdx; ret; 
0x000000000042eb80: lea rax, [rip - 0x14a7]; mov qword ptr [rip + 0x2a7d1a], rax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2a7d04], rax; ret; 
0x0000000000482f96: lea rax, [rip - 0x2c0ad]; cmp edx, 0x1000; lea rdx, [rip - 0x2bf3a]; cmove rax, rdx; ret; 
0x000000000042eb8e: lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2a7d04], rax; ret; 
0x000000000048e6c0: lea rax, [rsi + 1]; mov qword ptr [rip + 0x24ad45], rax; ret; 
0x0000000000458cfe: lea rax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; je 0x58d30; mov eax, 0x48; syscall; 
0x000000000041cd40: lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000004531ed: lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000048310a: lea rcx, [rax + 1]; call rbx; 
0x00000000004832a5: lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000047e664: lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000048db23: lea rcx, [rdx + 4]; cmp rcx, r8; jne 0x8dacb; mov eax, dword ptr [rdx + 4]; ret; 
0x000000000043944f: lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x00000000004321b5: lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x000000000049c560: lea rcx, [rip + 0x23cc99]; mov rax, qword ptr [rdi + rsi*8]; cmp byte ptr [rcx + rsi], 8; jne 0x9c575; mov qword ptr [rax], rdx; ret; 
0x000000000048b536: lea rcx, [rip + 0x34243]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000047e1ef: lea rcx, [rip + 0x403ae]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000044f268: lea rcx, [rip + 0x63b91]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000044de53: lea rcx, [rip + 0x64fa6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000044dbf8: lea rcx, [rip + 0x65201]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000044c323: lea rcx, [rip + 0x66ad6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000040cc17: lea rcx, [rip + 0x97182]; jmp rax; 
0x00000000004078e9: lea rcx, [rip + 0x9a338]; mov esi, esi; movsxd rax, dword ptr [rcx + rsi*4]; add rax, rcx; jmp rax; 
0x000000000045b429: lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x00000000004846c2: lea rdi, [rbx + 4]; sub rsp, 0x80; call 0x5b060; add rsp, 0x80; pop rbx; ret; 
0x000000000045bb2e: lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x00000000004560c9: lea rdi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000441f7c: lea rdi, [rdi - 0x40]; sub rdx, 0x40; lea r11, [rip + 0x6cd85]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000047057f: lea rdi, [rip + 0x26301a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000490447: lea rdi, [rip + 0x2f52c]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000048cbf0: lea rdi, [rip + 0x32d83]; mov eax, 0x15; syscall; 
0x000000000048be5e: lea rdi, [rip + 0x339b3]; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000047e936: lea rdi, [rip + 0x3fdef]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000045b4fd: lea rdi, [rip + 0x550c1]; mov eax, 0x15; syscall; 
0x000000000041d8cc: lea rdi, [rip + 0x8fdba]; mov edx, 0x6c; call 0x10920; xor eax, eax; ret; 
0x000000000041bf67: lea rdi, [rip + 0x91272]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000043cbb3: lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004276c0: lea rdx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000047e668: lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000440ce7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e019]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440b97: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e169]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440a47: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e2b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004408f7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e409]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440657: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e6a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004403b7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440267: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6ea99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440117: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6ebe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ffc7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6ed39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fe77: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6ee89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fd27: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6efd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fbd7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6f129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fa87: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6f279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e317: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x70829]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e1c7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x70979]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043df27: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x70c19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ddd7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x70d69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dc87: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x70eb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043db37: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71009]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d897: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x712a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d5f7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71549]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d4a7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71699]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d357: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x717e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d207: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71939]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d0b7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71a89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000494507: lea rdx, [rip + 0x102]; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x00000000004339c6: lea rdx, [rip + 0x1bf63]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x0000000000433910: lea rdx, [rip + 0x227d9]; lea rax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x00000000004337d0: lea rdx, [rip + 0x22909]; lea rax, [rip + 0x22862]; cmovne rax, rdx; ret; 
0x0000000000433670: lea rdx, [rip + 0x22a79]; lea rax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x0000000000433977: lea rdx, [rip + 0x22ac2]; lea rax, [rip + 0x22a7b]; cmovne rax, rdx; ret; 
0x0000000000433837: lea rdx, [rip + 0x22bf2]; lea rax, [rip + 0x22bab]; cmovne rax, rdx; ret; 
0x00000000004336d7: lea rdx, [rip + 0x22d62]; lea rax, [rip + 0x22d1b]; cmovne rax, rdx; ret; 
0x0000000000433956: lea rdx, [rip + 0x22f23]; lea rax, [rip + 0x22ecc]; cmovne rax, rdx; ret; 
0x0000000000432c37: lea rdx, [rip + 0x23042]; lea rax, [rip + 0x22f9b]; cmovne rax, rdx; ret; 
0x0000000000433816: lea rdx, [rip + 0x23053]; lea rax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x0000000000433725: lea rdx, [rip + 0x23834]; lea rax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x0000000000433776: lea rdx, [rip + 0x23973]; lea rax, [rip + 0x2390c]; cmovne rax, rdx; ret; 
0x000000000049c4f5: lea rdx, [rip + 0x23cd04]; cmp byte ptr [rdx + rsi], 8; jne 0x9c51c; mov rax, qword ptr [rax]; ret; 
0x00000000004941d5: lea rdx, [rip + 0x2439c4]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000494245: lea rdx, [rip + 0x30fe0]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000047e9a4: lea rdx, [rip + 0x3fe3d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000045840c: lea rdx, [rip + 0x57c09]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000044f2b6: lea rdx, [rip + 0x63b43]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044f29c: lea rdx, [rip + 0x63b5d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044dc46: lea rdx, [rip + 0x651b3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044dc2c: lea rdx, [rip + 0x651cd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044c096: lea rdx, [rip + 0x66d63]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044c07c: lea rdx, [rip + 0x66d7d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000449f46: lea rdx, [rip + 0x68eb3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000449f2c: lea rdx, [rip + 0x68ecd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000433996: lea rdx, [rip + 0x7133]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x00000000004325dd: lea rdx, [rip + 0x7c22c]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000040cc93: lea rdx, [rip + 0x957de]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004085d8: lea rdx, [rip + 0x996b9]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000040853e: lea rdx, [rip + 0x99733]; mov r12d, eax; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x00000000004110bf: lea rdx, [rip + 0x9c042]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000410ef2: lea rdx, [rip + 0x9c1b7]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000410d6e: lea rdx, [rip + 0x9c30f]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000402035: lea rdx, [rip + 0x9f914]; mov edi, edi; movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; jmp rax; 
0x0000000000481c06: lea rdx, [rip + 0xc03]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x902]; cmove rax, rdx; ret; 
0x0000000000482f26: lea rdx, [rip + 0xcd3]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000482fa3: lea rdx, [rip - 0x2bf3a]; cmove rax, rdx; ret; 
0x0000000000433587: lea rdx, [rip - 0x36e]; lea rax, [rip + 0x221ab]; cmove rax, rdx; ret; 
0x00000000004560bd: lea rdx, [rsi + rcx]; cmp rdi, rdx; jb 0x560c9; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000458c2d: lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000458d30: lea rdx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000481356: lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000481438: lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x10]; mov rdi, r12; call rbx; 
0x0000000000481532: lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000048d339: lea rsi, [rbp - 0x430]; movsxd rdx, r12d; mov edi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x00000000004105c2: lea rsi, [rcx + rbx]; mov qword ptr [rsi + 8], rax; mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000420d71: lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000047aeec: lea rsi, [rip + 0x258dad]; jmp rax; 
0x0000000000470c21: lea rsi, [rip + 0x262978]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x00000000004705c9: lea rsi, [rip + 0x262fd0]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x000000000047e135: lea rsi, [rip + 0x403ac]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000457290: lea rsi, [rip + 0x588e9]; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x00000000004572b2: lea rsi, [rip + 0x588eb]; shr eax, 0xc; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000004560ce: lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000004a88c4: leave; add byte ptr [rax], al; add al, ah; fdivr st(7); jmp qword ptr [rbx]; 
0x00000000004a8890: leave; add byte ptr [rax], al; add al, ah; fdivr st(7); jmp rax; 
0x0000000000424a48: leave; and byte ptr [rcx + 0xc7640f], cl; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000455da4: leave; cmp cl, byte ptr [rax + 0x63]; leave; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x00000000004c8451: leave; hlt; jmp qword ptr [rax]; 
0x00000000004015c6: leave; je 0x15d8; test r8, r8; jne 0x15d8; mov eax, 0xffffffea; ret; 
0x0000000000401746: leave; je 0x1758; test r8, r8; jne 0x1758; mov eax, 0xffffffea; ret; 
0x0000000000455830: leave; jne 0x55820; ret; 
0x00000000004558e0: leave; jne 0x558d0; ret; 
0x0000000000455ba0: leave; jne 0x55b90; sub rax, 1; ret; 
0x000000000048b716: leave; jne 0x8b9a6; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x000000000048c03e: leave; jne 0x8c616; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000455da8: leave; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x000000000043b18f: leave; mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x000000000049a190: leave; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000045db4f: leave; movzx eax, al; xor edx, edx; add eax, 1; push rax; call rbx; 
0x0000000000434fdc: leave; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000047b406: leave; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043e083: leave; or al, byte ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000045cbbf: leave; ret 0x27; 
0x0000000000400bf0: leave; ret; 
0x00000000004c1ae1: leave; retf 0x6ee8; sahf; ret 0x38ae; 
0x00000000004af981: leave; stc; jmp qword ptr [rax - 0x35]; 
0x000000000048db72: leave; test rsi, rsi; je 0x8db7b; mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x000000000048322a: leave; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x00000000004aed0f: ljmp [rax + 0x70fff921]; and edi, ecx; call qword ptr [rax + 0x25]; 
0x00000000004afb8b: ljmp [rax - 0x3f000589]; ja 0xafb8d; jmp rax; 
0x00000000004b0097: ljmp [rax]; test edx, edi; jmp rcx; 
0x00000000004aef8b: ljmp [rbp + rdx*2 - 7]; call qword ptr [rdx]; 
0x00000000004a4d2f: ljmp [rbp - 0x52000028]; fdivr st(7); jmp rcx; 
0x00000000004a4d27: ljmp [rbp - 0x52000028]; fdivr st(7); ljmp [rbp - 0x52000028]; fdivr st(7); jmp rcx; 
0x00000000004a75e3: ljmp [rbx]; fdivr st(7); jmp qword ptr [rcx + 1]; 
0x00000000004a75df: ljmp [rbx]; fdivr st(7); ljmp [rbx]; fdivr st(7); jmp qword ptr [rcx + 1]; 
0x000000000047b8f4: ljmp [rcx]; ror byte ptr [rax - 0x7d], 1; mov ebp, 0xfffffae8; add byte ptr [rcx - 0x77], al; ret 0x1674; 
0x00000000004af0c7: ljmp [rdx + 0x3afff955]; push rbp; stc; jmp rax; 
0x00000000004af7cf: ljmp [rdx + 0x50fff970]; js 0xaf7d0; call rax; 
0x00000000004be6bf: ljmp [rdx + rax]; cld; call rsp; 
0x00000000004be6b3: ljmp [rdx + rax]; cld; jmp rsp; 
0x00000000004be6bb: ljmp [rdx + rax]; cld; ljmp [rdx + rax]; cld; call rsp; 
0x00000000004a713b: ljmp [rdx - 0x55000028]; fdivr st(7); call qword ptr [rsi]; 
0x00000000004a7627: ljmp [rdx]; fdivr st(7); jmp qword ptr [rax + 1]; 
0x00000000004a7623: ljmp [rdx]; fdivr st(7); ljmp [rdx]; fdivr st(7); jmp qword ptr [rax + 1]; 
0x00000000004b002f: ljmp [rsi - 0x7b]; cli; jmp rcx; 
0x00000000004a323b: ljmp [rsi]; mov al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi]; 
0x00000000004a30af: ljmp [rsi]; mov bl, 0xf6; call qword ptr [rsi]; 
0x00000000004a2b3b: ljmp [rsi]; ret 0xfff6; 
0x00000000004a2583: ljmp [rsi]; sal esi, 1; call qword ptr [rsi]; 
0x000000000043b7ce: lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000048e617: lock inc dword ptr [r9 + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x000000000041f220: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004551b0: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add dh, dh; ret 0x7501; 
0x00000000004d0e31: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; sub al, 0x1c; cld; jmp qword ptr [rdx + 5]; 
0x000000000048896d: lodsb al, byte ptr [rsi]; add dword ptr [rax], eax; add al, ch; stosb byte ptr [rdi], al; jg 0x8896d; jmp qword ptr [rsi + 0x2e]; 
0x000000000047e138: lodsb al, byte ptr [rsi]; add eax, dword ptr [rax + rax]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000048e784: lodsb al, byte ptr [rsi]; and al, 0; add rsp, 8; ret; 
0x000000000048e7bd: lodsb al, byte ptr [rsi]; and al, 0; ret; 
0x00000000004cc09d: lodsb al, byte ptr [rsi]; clc; call qword ptr [rdx]; 
0x00000000004ae9d9: lodsb al, byte ptr [rsi]; clc; jmp qword ptr [rax - 0x53]; 
0x00000000004c4350: lodsb al, byte ptr [rsi]; fldcw word ptr [rcx - 0x7f58d21b]; mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x0000000000439604: lodsb al, byte ptr [rsi]; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004c3fbd: lodsb al, byte ptr [rsi]; or byte ptr [rdi + 0x26], al; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000047a2de: lodsb al, byte ptr [rsi]; out 0xff, eax; inc dword ptr [rcx - 5]; jg 0x7a2f8; test byte ptr [rax - 0x7c000019], ah; ret; 
0x000000000040c853: lodsb al, byte ptr [rsi]; push rsp; or dword ptr [rax], eax; ret; 
0x00000000004b02ec: lodsb al, byte ptr [rsi]; test edx, edi; jmp rcx; 
0x00000000004a7468: lodsd eax, dword ptr [rsi]; add byte ptr [rax], al; add byte ptr [rdx - 0x6d000028], dl; fdivr st(7); jmp qword ptr [rbp]; 
0x00000000004d0f6d: lodsd eax, dword ptr [rsi]; add byte ptr [rax], al; sub esp, edi; call qword ptr [rax]; 
0x000000000045d4fd: lodsd eax, dword ptr [rsi]; add rsp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x000000000048e6bb: lodsd eax, dword ptr [rsi]; and al, 0; jne 0x8e6d0; lea rax, [rsi + 1]; mov qword ptr [rip + 0x24ad45], rax; ret; 
0x000000000048e6c8: lodsd eax, dword ptr [rsi]; and al, 0; ret; 
0x00000000004c0edb: lodsd eax, dword ptr [rsi]; and al, 0x36; adc eax, 0x42d35a1d; cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x00000000004ae9dd: lodsd eax, dword ptr [rsi]; clc; call qword ptr [rax - 0x52]; 
0x00000000004cc0d9: lodsd eax, dword ptr [rsi]; clc; call qword ptr [rax]; 
0x00000000004cc101: lodsd eax, dword ptr [rsi]; clc; call qword ptr [rdx]; 
0x00000000004cc0ed: lodsd eax, dword ptr [rsi]; clc; jmp rbx; 
0x00000000004a4d34: lodsd eax, dword ptr [rsi]; fdivr st(7); jmp rcx; 
0x00000000004a4d2c: lodsd eax, dword ptr [rsi]; fdivr st(7); ljmp [rbp - 0x52000028]; fdivr st(7); jmp rcx; 
0x00000000004922f2: lodsd eax, dword ptr [rsi]; ret; 
0x000000000049f764: lodsd eax, dword ptr [rsi]; sti; jmp qword ptr [rsi + 0xf]; 
0x00000000004c2478: lodsd eax, dword ptr [rsi]; xor eax, 0x444be0a8; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x000000000043f097: loope 0x3f0e5; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f0df: loope 0x3f12d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f11d: loope 0x3f16b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f155: loope 0x3f1a3; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f193: loope 0x3f1e1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f1cb: loope 0x3f219; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f1f3: loope 0x3f241; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000440ba4: loope 0x40bac; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441a67: loope 0x41ab5; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000441aaf: loope 0x41afd; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000441aed: loope 0x41b3b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000441b25: loope 0x41b73; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000441b63: loope 0x41bb1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000441b9b: loope 0x41be9; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000441bc3: loope 0x41c11; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000443c4a: loope 0x43c3f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000044676a: loope 0x4675f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000044fcac: loope 0x4fcce; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000004532ae: loope 0x53240; bsf rdx, rdx; lea r11, [rip + 0x5c755]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453325: loope 0x5338d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000004538ce: loope 0x53860; bsf rdx, rdx; lea r11, [rip + 0x5c1b5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453945: loope 0x539ad; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000453edb: loope 0x53edd; add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x00000000004578ce: loope 0x578c3; ret; 
0x000000000045d51e: loope 0x5d523; pop rbx; shl eax, cl; pop rbp; pop r12; ret; 
0x0000000000406a2a: loope 0x6a38; je 0x6a67; cmp ecx, 1; jne 0x6ae7; mov eax, 1; ret; 
0x000000000047ac85: loope 0x7acd0; mov esi, ecx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000482be8: loope 0x82c0a; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000482f80: loope 0x82f82; or al, 2; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x0000000000483b3e: loope 0x83b4f; je 0x83b60; ret; 
0x000000000048be2b: loope 0x8be2c; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000492187: loope 0x921d5; mov dword ptr [rdi], ecx; ret; 
0x00000000004921b8: loope 0x92206; mov dword ptr [rdi - 8], ecx; ret; 
0x000000000049222d: loope 0x9227b; mov dword ptr [rdi - 0x10], ecx; ret; 
0x0000000000499d36: loope 0x99d37; jg 0x99d3a; add byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x000000000049c88a: loope 0x9c8d5; mov edx, dword ptr [rsp]; mov esi, 1; mov edi, 1; call rax; 
0x000000000049f4b6: loope 0x9f513; ret; 
0x00000000004a017e: loope 0xa01db; pop rbp; pop r12; ret; 
0x000000000040a37b: loope 0xa3f6; or dword ptr [rax], eax; ret; 
0x000000000040a393: loope 0xa40e; or dword ptr [rax], eax; ret; 
0x00000000004b0078: loope 0xafffe; cli; jmp rcx; 
0x00000000004b00a4: loope 0xb002a; cli; jmp rcx; 
0x00000000004b00e0: loope 0xb0066; cli; jmp rcx; 
0x00000000004b00f0: loope 0xb0076; cli; jmp rcx; 
0x00000000004b00f4: loope 0xb007a; cli; jmp rcx; 
0x00000000004b00f8: loope 0xb007e; cli; jmp rcx; 
0x00000000004b00fc: loope 0xb0082; cli; jmp rcx; 
0x00000000004b0100: loope 0xb0086; cli; jmp rcx; 
0x00000000004b0104: loope 0xb008a; cli; jmp rcx; 
0x00000000004b0108: loope 0xb008e; cli; push qword ptr [rdx]; test edx, edi; jmp rcx; 
0x00000000004b0110: loope 0xb0096; cli; jmp rcx; 
0x00000000004b0114: loope 0xb009a; cli; jmp rcx; 
0x00000000004b0118: loope 0xb009e; cli; jmp rcx; 
0x00000000004b011c: loope 0xb00a2; cli; jmp rcx; 
0x00000000004b0120: loope 0xb00a6; cli; jmp rcx; 
0x00000000004b0234: loope 0xb01ba; cli; jmp rcx; 
0x00000000004b0238: loope 0xb01be; cli; jmp rcx; 
0x00000000004b023c: loope 0xb01c2; cli; push rsp; test dl, bh; jmp rcx; 
0x00000000004b0244: loope 0xb01ca; cli; jmp rcx; 
0x00000000004b0248: loope 0xb01ce; cli; jmp rcx; 
0x00000000004b024c: loope 0xb01d2; cli; jmp rcx; 
0x00000000004b0250: loope 0xb01d6; cli; jmp rcx; 
0x00000000004b0254: loope 0xb01da; cli; jmp rcx; 
0x00000000004b0258: loope 0xb01de; cli; jmp rcx; 
0x00000000004b025c: loope 0xb01e2; cli; jmp rcx; 
0x00000000004b0260: loope 0xb01e6; cli; jmp rcx; 
0x00000000004b0264: loope 0xb01ea; cli; jmp rcx; 
0x00000000004b0268: loope 0xb01ee; cli; jmp rcx; 
0x00000000004b026c: loope 0xb01f2; cli; jmp rcx; 
0x00000000004b0270: loope 0xb01f6; cli; jmp rcx; 
0x00000000004b0274: loope 0xb01fa; cli; jmp rcx; 
0x00000000004b0278: loope 0xb01fe; cli; jmp rcx; 
0x00000000004b0294: loope 0xb021a; cli; push rsp; test dl, bh; jmp rcx; 
0x00000000004b029c: loope 0xb0222; cli; jmp rcx; 
0x00000000004b02a0: loope 0xb0226; cli; jmp rcx; 
0x00000000004b02a4: loope 0xb022a; cli; jmp rcx; 
0x00000000004b02a8: loope 0xb022e; cli; push rsp; test dl, bh; jmp rcx; 
0x00000000004b02b0: loope 0xb0236; cli; jmp rcx; 
0x00000000004b02b4: loope 0xb023a; cli; jmp rcx; 
0x00000000004b02b8: loope 0xb023e; cli; jmp rcx; 
0x00000000004b02bc: loope 0xb0242; cli; jmp rcx; 
0x00000000004b02c0: loope 0xb0246; cli; jmp rcx; 
0x00000000004b02c4: loope 0xb024a; cli; jmp rcx; 
0x00000000004b02c8: loope 0xb024e; cli; jmp rcx; 
0x00000000004b02cc: loope 0xb0252; cli; jmp rcx; 
0x00000000004b02d0: loope 0xb0256; cli; jmp rcx; 
0x00000000004b02d4: loope 0xb025a; cli; jmp rcx; 
0x00000000004b02f0: loope 0xb0276; cli; jmp rcx; 
0x00000000004b02f4: loope 0xb027a; cli; jmp rcx; 
0x00000000004b02f8: loope 0xb027e; cli; jmp rcx; 
0x00000000004b03e4: loope 0xb036a; cli; jmp rcx; 
0x00000000004b03e8: loope 0xb036e; cli; jmp rcx; 
0x00000000004b03ec: loope 0xb0372; cli; jmp rcx; 
0x00000000004b03f0: loope 0xb0376; cli; jmp rcx; 
0x000000000040b093: loope 0xb101; or dword ptr [rax], eax; ret; 
0x0000000000494249: lsl eax, dword ptr [rax]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004d15ed: mov ah, 0; add byte ptr [rax + 0x5b], dh; cld; jmp qword ptr [rbp]; 
0x00000000004d1675: mov ah, 0; add byte ptr [rax + 0x5e], bh; cld; call qword ptr [rbx]; 
0x00000000004d159d: mov ah, 0; add byte ptr [rax], ah; pop rdx; cld; jmp qword ptr [rax + 1]; 
0x00000000004c7250: mov ah, 0x10; add byte ptr [rax], al; in al, dx; or esp, esi; call qword ptr [rbx + 1]; 
0x00000000004c134a: mov ah, 0x13; ret; 
0x00000000004a145a: mov ah, 0x24; cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x00000000004a0b6a: mov ah, 0x24; cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x00000000004c235b: mov ah, 0x5e; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xc23d7; mov ebp, 0xfb67d10d; ret; 
0x000000000045966d: mov ah, 0x66; nop; mov eax, 0x10; syscall; 
0x000000000040b0fb: mov ah, 0x6c; or dword ptr [rax], eax; ret; 
0x00000000004af580: mov ah, 0x7c; stc; inc dword ptr [rsp + rdi*2 - 7]; call rsp; 
0x00000000004c17f0: mov ah, 0xa5; ret; 
0x00000000004c0bf4: mov ah, 0xb5; mov dh, 0xb7; mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x00000000004a3041: mov ah, 0xf6; jmp qword ptr [rsi - 0x4c]; 
0x00000000004cc275: mov ah, 0xf8; call qword ptr [rbp + 1]; 
0x00000000004ae9fd: mov ah, 0xf8; call rax; 
0x00000000004b0959: mov ah, 0xfa; jmp qword ptr [rax - 0x4c]; 
0x0000000000458408: mov ah, 2; add byte ptr [rax], al; lea rdx, [rip + 0x57c09]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000004d1af1: mov ah, bh; jmp qword ptr [rcx + 9]; 
0x00000000004c1144: mov ah, bl; push rsi; ret; 
0x00000000004c7f99: mov ah, dh; call qword ptr [rbx + 1]; 
0x00000000004c7f81: mov ah, dh; call qword ptr [rcx]; 
0x00000000004d1275: mov al, 0; add al, cl; xor al, 0xfc; call qword ptr [rax]; 
0x00000000004d1225: mov al, 0; add byte ptr [rax + 0x33], cl; cld; call qword ptr [rdi]; 
0x0000000000406a33: mov al, 0; add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000040754b: mov al, 0; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rbx + 0xc0]; movups xmmword ptr [rax + 0xc0], xmm0; pop rbx; ret; 
0x000000000049a2d6: mov al, 0; add byte ptr [rax], al; ret; 
0x00000000004aee34: mov al, 0x21; stc; inc dword ptr [rax + 0x60fff923]; and eax, 0x2750fff9; stc; jmp qword ptr [rax]; 
0x00000000004c844c: mov al, 0x22; add byte ptr [rax], al; add cl, cl; hlt; jmp qword ptr [rax]; 
0x000000000048e7b3: mov al, 0x24; add byte ptr [rax], al; jne 0x8e7c8; mov rax, qword ptr [rip + 0x24ac50]; ret; 
0x000000000048e77c: mov al, 0x24; add byte ptr [rax], al; mov qword ptr [rip + 0x24ac89], rax; add rsp, 8; ret; 
0x00000000004afa34: mov al, 0x39; cli; inc eax; cmp edx, edi; call rax; 
0x00000000004afa68: mov al, 0x3a; cli; call rax; 
0x00000000004afa88: mov al, 0x3b; cli; call rax; 
0x00000000004af2d8: mov al, 0x51; stc; jmp qword ptr [rax]; 
0x000000000040c843: mov al, 0x54; or dword ptr [rax], eax; ret; 
0x00000000004af0ec: mov al, 0x58; stc; inc dword ptr [rax + 0x58]; stc; call rax; 
0x00000000004aeed4: mov al, 0x5b; stc; inc dword ptr [rax + 0x5b]; stc; call rax; 
0x00000000004af840: mov al, 0x72; stc; jmp qword ptr [rax]; 
0x00000000004af5e4: mov al, 0x7f; stc; inc dword ptr [rax + 0x7f]; stc; call rax; 
0x00000000004ae9a4: mov al, 0x9a; clc; jmp qword ptr [rax]; 
0x00000000004aea08: mov al, 0xb7; clc; jmp rax; 
0x00000000004b0f50: mov al, 0xbe; cli; jmp qword ptr [rdi + 0x63]; 
0x000000000049f26c: mov al, 0xc0; sti; call qword ptr [rbp + 0x53]; 
0x000000000044f8ff: mov al, 0xc5; std; xlatb; ret; 
0x00000000004aea14: mov al, 0xd8; clc; lcall [rsi - 0x5f000729]; fdivr st(0); call rcx; 
0x00000000004679a8: mov al, 0xe8; ret 0xfc7a; 
0x00000000004c658d: mov al, 0xf3; jmp qword ptr [rdi]; 
0x00000000004a323d: mov al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi]; 
0x00000000004aec10: mov al, 0xf8; clc; push qword ptr [rax - 6]; clc; call qword ptr [rax - 4]; 
0x00000000004ae9e9: mov al, 0xf8; jmp qword ptr [rax]; 
0x00000000004d1fe1: mov al, 0xfc; call qword ptr [rbx]; 
0x00000000004aee90: mov al, 8; stc; inc dword ptr [rax - 0x2f0006f5]; or al, 0xf9; jmp qword ptr [rax]; 
0x00000000004d0418: mov al, bl; sti; jmp qword ptr [rsi + 7]; 
0x000000000042e089: mov al, byte ptr [rax + 2]; add byte ptr [rax], al; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000047e822: mov al, byte ptr [rax]; add byte ptr [rax], al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000472d9b: mov al, byte ptr [rbx - 0x76ffffe6]; ret 0xc389; 
0x0000000000452e86: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004516d6: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x0000000000452eb4: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000004516f4: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000452e60: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x00000000004516b0: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x000000000043b190: mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x0000000000452ec4: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x0000000000451704: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000452e70: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x0000000000452e80: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004516d0: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x00000000004516c0: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x0000000000444a11: mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x0000000000456172: mov bh, 0x36; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x000000000040cc5f: mov bh, 0x44; add al, byte ptr [r9]; ret 0xb60f; 
0x0000000000466dcf: mov bh, 0x47; or cl, byte ptr [rax + 0x39]; ret 0x1176; 
0x0000000000453d78: mov bh, 0x48; lea eax, [rdi + 7]; ret; 
0x000000000040bc53: mov bh, 0x60; or dword ptr [rax], eax; ret; 
0x00000000004c2624: mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x00000000004c0bf7: mov bh, 0xb8; mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x0000000000410ef5: mov bh, 0xc1; or dword ptr [rax], eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004226f9: mov bh, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0x7c60; 
0x00000000004a2f0d: mov bh, 0xf6; push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi - 0x49]; 
0x00000000004aea09: mov bh, 0xf8; jmp rax; 
0x0000000000472b58: mov bh, 4; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x0000000000472b81: mov bh, 4; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x33e8; 
0x00000000004436d7: mov bh, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004b0f44: mov bh, byte ptr [rbp - 0x45a00006]; cli; lcall [rdx + rdi*4 - 0x414f0006]; cli; jmp qword ptr [rdi + 0x63]; 
0x00000000004919ea: mov bh, ch; inc dword ptr [rbp - 0x76b08a40]; ret; 
0x000000000045566e: mov bl, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000048be61: mov bl, 0x39; add eax, dword ptr [rax]; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x0000000000469ad2: mov bl, 0x4c; add edi, ebx; jmp rdi; 
0x00000000004c0bf3: mov bl, 0xb4; mov ch, 0xb6; mov bh, 0xb8; mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x0000000000424ea3: mov bl, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0x7c60; 
0x0000000000428571: mov bl, 0xe2; sub al, byte ptr [rax]; ret; 
0x00000000004a30b1: mov bl, 0xf6; call qword ptr [rsi]; 
0x00000000004a30ad: mov bl, 0xf6; ljmp [rsi]; mov bl, 0xf6; call qword ptr [rsi]; 
0x00000000004a307d: mov bl, 0xf6; push qword ptr [rax]; test al, 0xf6; call rsi; 
0x00000000004ae9f9: mov bl, 0xf8; jmp rax; 
0x00000000004ae9f5: mov bl, 0xf8; push rax; mov bl, 0xf8; jmp rax; 
0x00000000004b090d: mov bl, 0xfa; inc dword ptr [rbx + rsi*4 - 6]; inc dword ptr [rbx + rsi*4 - 6]; inc dword ptr [rbx + rsi*4 - 6]; inc dword ptr [rbx + rsi*4 - 6]; jmp rax; 
0x00000000004b0911: mov bl, 0xfa; inc dword ptr [rbx + rsi*4 - 6]; inc dword ptr [rbx + rsi*4 - 6]; inc dword ptr [rbx + rsi*4 - 6]; jmp rax; 
0x00000000004b0915: mov bl, 0xfa; inc dword ptr [rbx + rsi*4 - 6]; inc dword ptr [rbx + rsi*4 - 6]; jmp rax; 
0x00000000004b0919: mov bl, 0xfa; inc dword ptr [rbx + rsi*4 - 6]; jmp rax; 
0x00000000004b091d: mov bl, 0xfa; jmp rax; 
0x0000000000443b81: mov bl, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000045d79a: mov byte ptr [r8 - 0x7d], r9b; ret 0x4830; 
0x000000000040346a: mov byte ptr [rax + 0x26], 1; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x18], rdx; add rsp, 8; ret; 
0x000000000045b49a: mov byte ptr [rax + 0x28], 1; ret; 
0x00000000004d1224: mov byte ptr [rax + 0x33480000], dh; cld; call qword ptr [rdi]; 
0x0000000000455287: mov byte ptr [rax + 0x75], 0xc5; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000408b68: mov byte ptr [rax + 0xc], 0; xor eax, eax; ret; 
0x0000000000410312: mov byte ptr [rax + rax], al; cmp eax, -1; je 0x103eb; add rsp, 0x98; ret; 
0x00000000004943c4: mov byte ptr [rax + rax], cl; add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000045fec3: mov byte ptr [rax - 0x7c], 0xf6; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000045d79b: mov byte ptr [rax - 0x7d], cl; ret 0x4830; 
0x0000000000482fa6: mov byte ptr [rax - 3], 0xff; cmove rax, rdx; ret; 
0x00000000004ab334: mov byte ptr [rax], 0; add ah, al; add byte ptr [rax], al; add ah, dl; fdivr st(7); call rsp; 
0x00000000004ab410: mov byte ptr [rax], 0; add bh, dl; fdivr st(7); call qword ptr [rbx + 0x11]; 
0x00000000004ab3dc: mov byte ptr [rax], 0; add bh, dl; fdivr st(7); call rdi; 
0x00000000004cea7d: mov byte ptr [rax], al; add byte ptr [rax - 3], al; cli; jmp qword ptr [rbx + 8]; 
0x000000000045ae3f: mov byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000040fb94: mov byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004114a1: mov byte ptr [rbp + rcx*4 + 0x7c], cl; ret 0x4de8; 
0x000000000046f673: mov byte ptr [rbp - 0x4f8], 0x20; mov ecx, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000046d3e1: mov byte ptr [rbp - 0x918], al; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000046d3e0: mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x00000000004788f6: mov byte ptr [rbp - 0x948], cl; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x00000000004788f5: mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x00000000004788ec: mov byte ptr [rbp - 0x94c], al; mov rsi, r14; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x00000000004788eb: mov byte ptr [rbp - 0x94c], r8b; mov rsi, r14; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x0000000000467d1b: mov byte ptr [rbp], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004c7e48: mov byte ptr [rbx - 0xc], bh; jmp qword ptr [rbp + 2]; 
0x000000000041f3be: mov byte ptr [rbx], ch; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000040a49b: mov byte ptr [rbx], dl; add byte ptr [rax], al; test eax, eax; cmovns eax, edx; add rsp, 8; ret; 
0x000000000042b734: mov byte ptr [rcx + 0x3948002a], dh; ret; 
0x000000000047e2f7: mov byte ptr [rcx + 0xf], 0x4f; ret; 
0x00000000004695d3: mov byte ptr [rcx + rax - 0x3a], cl; jmp rsi; 
0x000000000049a194: mov byte ptr [rcx + rax - 0x40], cl; jmp rax; 
0x0000000000414aaf: mov byte ptr [rcx], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000048ed91: mov byte ptr [rcx], 0x48; shl esi, 4; cmp rcx, qword ptr [rdi + rsi]; jae 0x8ed41; xor eax, eax; ret; 
0x00000000004902c5: mov byte ptr [rcx], 0x84; sal byte ptr [rbp - 0x31], cl; movsx eax, cl; neg eax; ret; 
0x000000000040a914: mov byte ptr [rcx], ah; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xffffff94; ret; 
0x00000000004101f4: mov byte ptr [rcx], bh; ret 0x860f; 
0x000000000046e153: mov byte ptr [rcx], cl; or dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000453ac8: mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000453438: mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000453b3e: mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000045348e: mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000453bc0: mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000453510: mov byte ptr [rdi + 0x18], dh; ret; 
0x0000000000453976: mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000453356: mov byte ptr [rdi + 2], dh; ret; 
0x0000000000453992: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x0000000000453372: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x00000000004539e3: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000004533b3: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000043e62b: mov byte ptr [rdi - 1], dl; ret; 
0x0000000000421ce0: mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x00000000004cc124: mov byte ptr [rdi], bl; add byte ptr [rax], bl; scasb al, byte ptr [rdi]; clc; call qword ptr [rbx]; 
0x0000000000447752: mov byte ptr [rdi], cl; ret; 
0x0000000000457035: mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000453950: mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000453330: mov byte ptr [rdi], dh; ret; 
0x0000000000444a83: mov byte ptr [rdi], dl; ret; 
0x0000000000401f69: mov byte ptr [rdx + 0x48000000], ah; add esp, 8; ret; 
0x0000000000452e89: mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004516d9: mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x0000000000452eb7: mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000004516f7: mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x00000000004551ab: mov byte ptr [rdx + rdx*8 + 0xac840f], 0; add dh, dh; ret 0x7501; 
0x0000000000452e62: mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x00000000004516b2: mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x000000000049ad00: mov byte ptr [rip + 0x23e509], 8; ret; 
0x000000000049acf9: mov byte ptr [rip + 0x23e50f], 8; mov byte ptr [rip + 0x23e509], 8; ret; 
0x000000000049acf2: mov byte ptr [rip + 0x23e515], 8; mov byte ptr [rip + 0x23e50f], 8; mov byte ptr [rip + 0x23e509], 8; ret; 
0x000000000049aceb: mov byte ptr [rip + 0x23e51b], 8; mov byte ptr [rip + 0x23e515], 8; mov byte ptr [rip + 0x23e50f], 8; mov byte ptr [rip + 0x23e509], 8; ret; 
0x000000000048e779: mov byte ptr [rip + 0x24b0a8], 0; mov qword ptr [rip + 0x24ac89], rax; add rsp, 8; ret; 
0x0000000000400b26: mov byte ptr [rip + 0x2d77f3], 1; pop rbp; ret; 
0x0000000000453319: mov byte ptr [rip + 0xc634900], 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004572b6: mov byte ptr [rip + 0xce8c100], al; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000457346: mov byte ptr [rip + 0xce8c100], al; mov edx, eax; and edx, 0xf; movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x00000000004cf024: mov byte ptr [rsi + 0x1e480000], cl; sti; jmp qword ptr [rbx]; 
0x000000000042d0a9: mov byte ptr [rsi + rbx], cl; mov rax, rsi; pop rbx; ret; 
0x00000000004427d7: mov byte ptr [rsi], 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000493b5f: mov byte ptr [rsi], al; jne 0x93b48; mov rax, rsi; ret; 
0x0000000000493be3: mov byte ptr [rsi], al; jne 0x93bc0; mov rax, rsi; ret; 
0x000000000042be00: mov byte ptr [rsp + 0x28], dl; mov qword ptr [rsp + 0x20], rsi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x00000000004114a0: mov byte ptr gs:[rbp + rcx*4 + 0x7c], cl; ret 0x4de8; 
0x00000000004c1142: mov ch, 0x31; mov ah, bl; push rsi; ret; 
0x00000000004704e7: mov ch, 0x34; add byte ptr es:[rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x00000000004c2483: mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x000000000048143a: mov ch, 0x90; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x10; mov rdi, r12; call rbx; 
0x0000000000481534: mov ch, 0x90; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x00000000004c381f: mov ch, 0x99; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000004c41ca: mov ch, 0xab; ret; 
0x000000000046dbd8: mov ch, 0xb0; idiv bh; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff758; call qword ptr [rcx + 0x38]; 
0x00000000004c0bf5: mov ch, 0xb6; mov bh, 0xb8; mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x00000000004538d7: mov ch, 0xc1; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004807c7: mov ch, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0x7c60; 
0x0000000000406a66: mov ch, 0xf3; ret; 
0x00000000004a2ffd: mov ch, 0xf6; jmp qword ptr [rsi]; 
0x00000000004a2f95: mov ch, 0xf6; jmp rsi; 
0x00000000004b0935: mov ch, 0xfa; call qword ptr [rax]; 
0x00000000004b0929: mov ch, 0xfa; inc dword ptr [rax + 0x58fffab5]; mov ch, 0xfa; push qword ptr [rax]; mov ch, 0xfa; call qword ptr [rax]; 
0x00000000004b092d: mov ch, 0xfa; lcall [rax - 0x4b]; cli; push qword ptr [rax]; mov ch, 0xfa; call qword ptr [rax]; 
0x00000000004b0931: mov ch, 0xfa; push qword ptr [rax]; mov ch, 0xfa; call qword ptr [rax]; 
0x00000000004d21b1: mov ch, 0xfc; jmp qword ptr [rbx]; 
0x000000000043c346: mov ch, 6; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000483b50: mov ch, dh; and ch, 0xf; je 0x83b70; add rax, 2; ret; 
0x00000000004d12e5: mov cl, 0; add byte ptr [rax + 0x36], bl; cld; call qword ptr [rbx + 1]; 
0x000000000049e08c: mov cl, 0x23; add byte ptr [rax - 0x7d], cl; and al, 0x10; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000042b735: mov cl, 0x2a; add byte ptr [rax + 0x39], cl; ret; 
0x00000000004078f5: mov cl, 0x48; add eax, ecx; jmp rax; 
0x000000000040c90b: mov cl, 0x54; or dword ptr [rax], eax; ret; 
0x000000000040a3e3: mov cl, 0x79; or dword ptr [rax], eax; ret; 
0x00000000004a025f: mov cl, 0x8d; and eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000400beb: mov cl, 0xcb; add dword ptr [rax], eax; nop; leave; ret; 
0x00000000004aea7c: mov cl, 0xdc; clc; inc dword ptr [rcx - 0x23]; clc; call rcx; 
0x00000000004a3199: mov cl, 0xf6; jmp qword ptr [rsi - 0x4f]; 
0x00000000004ae9ed: mov cl, 0xf8; call qword ptr [rax]; 
0x000000000047e1eb: mov cl, 3; add byte ptr [rax], al; lea rcx, [rip + 0x403ae]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000467cb0: mov cl, bh; dec dword ptr [rax - 0x7b]; sal byte ptr [rbx + 0x48], 0xc7; ret 0xfff0; 
0x00000000004af905: mov cl, bh; jmp rax; 
0x0000000000449f35: mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x000000000040e6fe: mov cl, byte ptr [rcx]; add cl, ch; ret 0xffe5; 
0x000000000043b194: mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x0000000000447750: mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000483b3b: mov cl, dl; and cl, 0xf; je 0x83b60; ret; 
0x00000000004c38ac: mov cs, edi; ret 0x8b36; 
0x0000000000477822: mov cs, word ptr [rdx - 0x77000000]; ror byte ptr [rcx - 0x77], cl; ret; 
0x000000000044e4be: mov cs, word ptr [rip - 0x7cb80000]; ret 0xe910; 
0x000000000044773e: mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000453ad4: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000453444: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000453bd8: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000453528: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000043ea74: mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000004449a4: mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x0000000000453970: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000453350: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000044773d: mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000493c8a: mov dh, 0; add byte ptr [rax], al; add rsp, 0x30; pop rbx; ret; 
0x00000000004d17e9: mov dh, 0; add byte ptr [rdx - 4], ah; jmp rsp; 
0x000000000049d3bf: mov dh, 0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000425ab2: mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000421f8f: mov dh, 0; pop r12; pop r13; pop r14; ret; 
0x0000000000427b40: mov dh, 0; ret; 
0x0000000000432221: mov dh, 0x14; add dword ptr [rax + rdi - 0x3e], eax; jne 0x32210; sub rax, 0x10; ret; 
0x0000000000444a81: mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x000000000043ace4: mov dh, 0x16; sub eax, edx; ret; 
0x0000000000425fb3: mov dh, 0x36; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x00000000004262fd: mov dh, 0x3c; adc byte ptr [rax - 0x78], al; jl 0x26319; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000047e30c: mov dh, 0x40; add dword ptr [rcx - 0x77], eax; ret 0xe883; 
0x000000000041c719: mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b79f8c], eax; ret 0xfff0; 
0x0000000000465b92: mov dh, 0x41; dec dword ptr [rax - 0x7d]; ret 0x8801; 
0x0000000000433410: mov dh, 0x44; add eax, 0xe0c148ff; add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x0000000000478c4b: mov dh, 0x46; or al, 0x83; ret; 
0x00000000004822ed: mov dh, 0x47; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000040cc5b: mov dh, 0x47; add ecx, dword ptr [rdi]; mov bh, 0x44; add al, byte ptr [r9]; ret 0xb60f; 
0x0000000000455241: mov dh, 0x47; cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000455231: mov dh, 0x47; hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x0000000000455201: mov dh, 0x47; int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x0000000000455221: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x0000000000455211: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000046d849: mov dh, 0x47; or al, 0x83; ret; 
0x00000000004c25e2: mov dh, 0x4e; ret 0x474c; 
0x000000000043340a: mov dh, 0x54; add eax, 0xb60f4100; add eax, 0xe0c148ff; add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x0000000000455245: mov dh, 0x56; cmc; sub eax, edx; ret; 
0x0000000000455235: mov dh, 0x56; hlt; sub eax, edx; ret; 
0x0000000000455205: mov dh, 0x56; int1; sub eax, edx; ret; 
0x0000000000455215: mov dh, 0x56; sub eax, edx; ret; 
0x00000000004aef1c: mov dh, 0x5a; stc; inc dword ptr [rsi + 0x5a]; stc; call rsi; 
0x0000000000472ab8: mov dh, 0x67; or al, 0x89; ret 0xc689; 
0x0000000000414c4a: mov dh, 0x73; add dword ptr [rax - 0x77], ecx; ret; 
0x000000000041dbb4: mov dh, 0x73; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000004af414: mov dh, 0x81; stc; inc dword ptr [rsi - 0x7f]; stc; call rsi; 
0x00000000004b01e8: mov dh, 0x85; cli; inc eax; test edx, edi; jmp rcx; 
0x00000000004880ef: mov dh, 0x87; adc eax, 0x89000003; ret 0xe8c0; 
0x00000000004665c7: mov dh, 0x94; and al, 0x84; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], r9d; ret; 
0x00000000004665e5: mov dh, 0x94; and al, 0x85; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9b, byte ptr [rax + 0x39]; ret; 
0x0000000000466603: mov dh, 0x94; and al, 0x86; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9d, dword ptr [rax + 0x39]; ret; 
0x00000000004c0bf6: mov dh, 0xb7; mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x0000000000484b42: mov dh, 0xc0; add rsp, 0x58; ret; 
0x000000000049b406: mov dh, 0xc0; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000047e088: mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000049781d: mov dh, 0xc0; neg eax; ret; 
0x00000000004940ca: mov dh, 0xc0; pop rbx; pop rbp; pop r12; ret; 
0x000000000043ad04: mov dh, 0xc0; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000045db51: mov dh, 0xc0; xor edx, edx; add eax, 1; push rax; call rbx; 
0x0000000000457321: mov dh, 0xc1; pop rbx; ret; 
0x00000000004572d1: mov dh, 0xc2; and dh, 0xf0; mov edx, 0; cmove rax, rdx; pop rbx; ret; 
0x00000000004248b2: mov dh, 0xc5; pop rbx; pop rbp; pop r12; ret; 
0x0000000000456df5: mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000045fec2: mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000004c3824: mov dh, 0xc7; ret 0xe71f; 
0x000000000049a18f: mov dh, 0xc9; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x0000000000457361: mov dh, 0xd1; mov eax, 0; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x000000000043ad0a: mov dh, 0xd2; sub eax, edx; ret; 
0x00000000004b9870: mov dh, 0xd; add byte ptr [rax], al; mov ecx, 0xbc00000d; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x0000000000458ab2: mov dh, 0xd; sub byte ptr [rax], al; test eax, eax; jne 0x58ad0; mov eax, 1; syscall; 
0x000000000049b93f: mov dh, 0xdb; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x00000000004aeac4: mov dh, 0xdd; clc; call qword ptr [rsi - 0x22]; 
0x00000000004c4357: mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x0000000000456149: mov dh, 0xe; mov byte ptr [rdi], cl; ret; 
0x0000000000434e21: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000043b1a4: mov dh, 0xe; sub eax, ecx; ret; 
0x0000000000402092: mov dh, 0xf6; mov dword ptr [rip + 0x2d4086], esi; ret; 
0x0000000000402082: mov dh, 0xf6; mov dword ptr [rip + 0x2d4092], esi; ret; 
0x0000000000402072: mov dh, 0xf6; mov dword ptr [rip + 0x2d4096], esi; ret; 
0x0000000000402062: mov dh, 0xf6; mov dword ptr [rip + 0x2d40a2], esi; ret; 
0x0000000000401f32: mov dh, 0xf6; mov dword ptr [rip + 0x2d41da], esi; ret; 
0x0000000000401f22: mov dh, 0xf6; mov dword ptr [rip + 0x2d41ee], esi; ret; 
0x0000000000401f12: mov dh, 0xf6; mov dword ptr [rip + 0x2d420a], esi; ret; 
0x000000000041c255: mov dh, 0xfa; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x000000000049702f: mov dh, 0xff; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000042f1b4: mov dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000401cd2: mov dh, 0xff; mov dword ptr [rip + 0x2d442e], edi; ret; 
0x000000000049ea57: mov dh, 0xff; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004971bc: mov dh, 0xff; nop; add rsp, 8; ret; 
0x0000000000425ac1: mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000421fa1: mov dh, 2; ret; 
0x0000000000493b59: mov dh, 4; adc byte ptr [rax - 0x7b], cl; dec dword ptr [rax + 0x48e57506]; mov eax, esi; ret; 
0x0000000000443857: mov dh, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044f2b4: mov dh, 7; lea rdx, [rip + 0x63b43]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044dc44: mov dh, 7; lea rdx, [rip + 0x651b3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044c094: mov dh, 7; lea rdx, [rip + 0x66d63]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000449f44: mov dh, 7; lea rdx, [rip + 0x68eb3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043b1a1: mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000043ace1: mov dh, 7; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000434e24: mov dh, 7; sub eax, ecx; ret; 
0x000000000049edaa: mov dh, byte ptr [rbx + 2]; add byte ptr [rdi], cl; mov dh, 0xc9; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000004578cc: mov dh, byte ptr [rcx - 0xd]; ret; 
0x00000000004d13d1: mov dl, 0; add ah, ch; cmp edi, esp; call qword ptr [rax]; 
0x000000000049df47: mov dl, 0x23; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000407a10: mov dl, 0x48; add eax, edx; jmp rax; 
0x00000000004af1c8: mov dl, 0x4b; stc; jmp qword ptr [rdx]; 
0x00000000004aefc0: mov dl, 0x56; stc; inc dword ptr [rdx + 0x56]; stc; call rdx; 
0x000000000040bd03: mov dl, 0x60; or dword ptr [rax], eax; ret; 
0x0000000000484a6a: mov dl, 0x68; std; jmp qword ptr [rsi - 0x70]; 
0x00000000004af4b8: mov dl, 0x7d; stc; inc dword ptr [rdx + 0x7d]; stc; call rdx; 
0x00000000004c3a80: mov dl, 0x9f; sub edi, esi; int 0x6b; ret; 
0x00000000004076e9: mov dl, 0xa1; jne 0x7700; cmp dword ptr [rdi + 0x38], 1; sbb eax, eax; and eax, 0xffffffea; ret; 
0x00000000004c0bf2: mov dl, 0xb3; mov ah, 0xb5; mov dh, 0xb7; mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x000000000048c7fa: mov dl, 0xb9; cld; jmp qword ptr [rsi - 0x70]; 
0x0000000000406468: mov dl, 0xc2; mov edx, eax; shr edx, 0x10; xor eax, edx; ret; 
0x000000000045325a: mov dl, 0xc7; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004c670d: mov dl, 0xf3; call qword ptr [rcx]; 
0x00000000004c66ad: mov dl, 0xf3; jmp qword ptr [rbx]; 
0x00000000004c668d: mov dl, 0xf3; jmp qword ptr [rdx]; 
0x00000000004a30f1: mov dl, 0xf6; call qword ptr [rsi - 0x4e]; 
0x00000000004a30f1: mov dl, 0xf6; call qword ptr [rsi - 0x4e]; idiv bh; mov dl, 0xf6; jmp qword ptr [rsi]; 
0x00000000004a30f9: mov dl, 0xf6; jmp qword ptr [rsi]; 
0x00000000004a30b9: mov dl, 0xf6; jmp rsi; 
0x00000000004ae9f1: mov dl, 0xf8; inc dword ptr [rax]; mov bl, 0xf8; push rax; mov bl, 0xf8; jmp rax; 
0x0000000000411e81: mov dl, 9; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x000000000043e6b0: mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004aea90: mov ds, edi; clc; jmp qword ptr [rsi]; 
0x0000000000471c95: mov ds, word ptr [rax + rax + 0x63490000]; ret 0x8944; 
0x0000000000447746: mov dword ptr [r9 - 2], ecx; ret; 
0x0000000000447731: mov dword ptr [r9 - 4], ecx; ret; 
0x000000000045b431: mov dword ptr [rax + 0x10], ecx; mov qword ptr [rax + 8], rdx; ret; 
0x000000000040346f: mov dword ptr [rax + 0x10], edx; mov qword ptr [rax + 0x18], rdx; add rsp, 8; ret; 
0x000000000047fe09: mov dword ptr [rax + 0x10], edx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000047fe49: mov dword ptr [rax + 0x10], esi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000403473: mov dword ptr [rax + 0x18], edx; add rsp, 8; ret; 
0x0000000000480e48: mov dword ptr [rax + 0x18], edx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x000000000045b497: mov dword ptr [rax + 0x20], ecx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000045b4b1: mov dword ptr [rax + 0x20], esi; ret; 
0x0000000000480e44: mov dword ptr [rax + 0x28], edx; mov qword ptr [rax + 0x18], rdx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x00000000004039b8: mov dword ptr [rax + 0x30], edx; mov rax, rbx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000404814: mov dword ptr [rax + 0x30], edx; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047fe8e: mov dword ptr [rax + 0x30], esi; cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000480d3e: mov dword ptr [rax + 0x38], esp; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000047fe0d: mov dword ptr [rax + 0x40], ecx; ret; 
0x0000000000480eca: mov dword ptr [rax + 0x48], 0; pop rbx; ret; 
0x000000000043f635: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, [rip + 0x6f6cc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f570: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, [rip + 0x6f791]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cc65: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, [rip + 0x71edc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cba0: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, [rip + 0x71fa1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000045fdf4: mov dword ptr [rax + 0x4c], ecx; movsx ecx, byte ptr [rdx + 0x1a]; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000480ec2: mov dword ptr [rax + 0x50], 0; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x000000000045fdff: mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000045fe02: mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000429080: mov dword ptr [rax + 8], ebx; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000047fdfe: mov dword ptr [rax + 8], ecx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000047fe42: mov dword ptr [rax + 8], edx; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000045b435: mov dword ptr [rax + 8], edx; ret; 
0x00000000004a0aa5: mov dword ptr [rax + rax], 0x348d4800; ret 0xc183; 
0x000000000040f9be: mov dword ptr [rax + rax], ebp; lea rax, [rip + 0x2c89b8]; ret; 
0x000000000040f9b5: mov dword ptr [rax + rax], ebp; mov eax, dword ptr [rdx + rsi]; mov dword ptr [rip + 0x2c89c7], eax; lea rax, [rip + 0x2c89b8]; ret; 
0x000000000040f9c5: mov dword ptr [rax + rax], ebp; ret; 
0x00000000004942dd: mov dword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000004587c0: mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004756cd: mov dword ptr [rax], 0x16; mov eax, edx; ret; 
0x00000000004597d8: mov dword ptr [rax], 0x16; mov rax, -1; ret; 
0x000000000041df42: mov dword ptr [rax], 0x16; xor eax, eax; ret; 
0x0000000000484c60: mov dword ptr [rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000042d0da: mov dword ptr [rax], 0xc; mov rax, rsi; ret; 
0x0000000000420fe5: mov dword ptr [rax], 9; mov eax, 0xffffffff; ret; 
0x00000000004939eb: mov dword ptr [rax], eax; mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x00000000004939a9: mov dword ptr [rax], eax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000049428d: mov dword ptr [rax], edi; pop rbx; ret; 
0x00000000004941dd: mov dword ptr [rax], edx; add rsp, 8; ret; 
0x000000000048033d: mov dword ptr [rax], edx; mov eax, dword ptr [rsi]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047fe06: mov dword ptr [rax], edx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000047fe46: mov dword ptr [rax], edx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000429b02: mov dword ptr [rax], edx; mov rax, rdx; add rsp, 8; ret; 
0x0000000000494281: mov dword ptr [rax], edx; pop rbx; ret; 
0x000000000049c572: mov dword ptr [rax], edx; ret; 
0x0000000000484c4d: mov dword ptr [rax], edx; xor eax, eax; ret; 
0x0000000000406bff: mov dword ptr [rbp + 0x18], ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049c720: mov dword ptr [rbp + 8], eax; add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x00000000004675ea: mov dword ptr [rbp - 0x48], eax; call 0x5c8b0; mov rdi, r14; call rbx; 
0x00000000004675e9: mov dword ptr [rbp - 0x48], r8d; call 0x5c8b0; mov rdi, r14; call rbx; 
0x000000000047c034: mov dword ptr [rbp - 0x4b0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x258057]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047c02e: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x4b0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x258057]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047bb01: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x4c8], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x258084]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047be5b: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x4f0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x25822a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047bea0: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x500], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2581e5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047bdc7: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x508], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2582be]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047c081: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x510], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x258004]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047b435: mov dword ptr [rbp - 0x4b8], edx; movzx ecx, byte ptr [rdi + rax]; lea rax, [rip + 0x25895a]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000047bb07: mov dword ptr [rbp - 0x4c8], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x258084]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047ac8a: mov dword ptr [rbp - 0x4c8], ecx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000047aee2: mov dword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x258dad]; jmp rax; 
0x000000000046f687: mov dword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000046f956: mov dword ptr [rbp - 0x4d8], ecx; sub r15, r11; mov rsi, r11; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000047c313: mov dword ptr [rbp - 0x4e0], ecx; mov rdx, r14; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000047c490: mov dword ptr [rbp - 0x4e0], ecx; mov rdx, r14; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000047c312: mov dword ptr [rbp - 0x4e0], r9d; mov rdx, r14; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000047c48f: mov dword ptr [rbp - 0x4e0], r9d; mov rdx, r14; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000046ff12: mov dword ptr [rbp - 0x4e8], ecx; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000047aedb: mov dword ptr [rbp - 0x4e8], edi; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x258dad]; jmp rax; 
0x000000000046f680: mov dword ptr [rbp - 0x4e8], edi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000046ff11: mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000047be61: mov dword ptr [rbp - 0x4f0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x25822a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047be1c: mov dword ptr [rbp - 0x4f8], 0x20; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x25826f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046f872: mov dword ptr [rbp - 0x4f8], ecx; mov dword ptr [rbp - 0x508], r9d; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000047bea6: mov dword ptr [rbp - 0x500], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2581e5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047b352: mov dword ptr [rbp - 0x500], eax; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000047bdcd: mov dword ptr [rbp - 0x508], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2582be]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047b345: mov dword ptr [rbp - 0x508], ecx; mov rdx, r14; mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000046f879: mov dword ptr [rbp - 0x508], ecx; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000047b344: mov dword ptr [rbp - 0x508], r9d; mov rdx, r14; mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000046f878: mov dword ptr [rbp - 0x508], r9d; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000047c087: mov dword ptr [rbp - 0x510], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x258004]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000049044f: mov dword ptr [rbp - 0x70], eax; mov eax, 0x15; syscall; 
0x000000000045e3c2: mov dword ptr [rbp - 0x70], esi; call 0x5c8b0; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x00000000004848fb: mov dword ptr [rbp - 0x77], 0xca8948c2; mov eax, 0x106; syscall; 
0x000000000046d3da: mov dword ptr [rbp - 0x93c], ecx; mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000046d3d9: mov dword ptr [rbp - 0x93c], r9d; mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x00000000004788e5: mov dword ptr [rbp - 0x950], ebx; mov byte ptr [rbp - 0x94c], r8b; mov rsi, r14; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x00000000004788e4: mov dword ptr [rbp - 0x950], r11d; mov byte ptr [rbp - 0x94c], r8b; mov rsi, r14; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x00000000004678be: mov dword ptr [rbp - 0x98], edx; call 0x5c8b0; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x0000000000494560: mov dword ptr [rbp], eax; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000409696: mov dword ptr [rbp], eax; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000481076: mov dword ptr [rbp], eax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004275e9: mov dword ptr [rbp], eax; mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000481c75: mov dword ptr [rbp], eax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000467a52: mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000421db7: mov dword ptr [rbx + 0x10], eax; mov rax, rbx; pop rbx; ret; 
0x00000000004910de: mov dword ptr [rbx + 0x10], eax; pop rax; pop rdx; pop rbx; ret; 
0x000000000042219f: mov dword ptr [rbx + 0x10], eax; xor eax, eax; pop rbx; ret; 
0x000000000048edee: mov dword ptr [rbx + 0x10], edx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000421daf: mov dword ptr [rbx + 0x18], eax; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000491013: mov dword ptr [rbx + 0x18], eax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000497845: mov dword ptr [rbx + 0x18], eax; pop rbx; ret; 
0x000000000048edea: mov dword ptr [rbx + 0x18], esp; mov qword ptr [rbx + 0x10], rdx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000497919: mov dword ptr [rbx + 0x20], eax; pop rbx; ret; 
0x0000000000467b7f: mov dword ptr [rbx + 0x20], edx; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000407bf3: mov dword ptr [rbx + 0x28], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000425df6: mov dword ptr [rbx + 0x38], esi; cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000046a46d: mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x0000000000425e6d: mov dword ptr [rbx + 0x40], esp; mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000425951: mov dword ptr [rbx + 0x50], 0; pop rbx; ret; 
0x000000000048107a: mov dword ptr [rbx + 0x60], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004275ed: mov dword ptr [rbx + 0x60], ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000423972: mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047fe94: mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000480d41: mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000421d3b: mov dword ptr [rbx + 0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004230c0: mov dword ptr [rbx + 0x90], eax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000049c15b: mov dword ptr [rbx + 0x98], eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000421e2e: mov dword ptr [rbx + 0xd8], ecx; mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x0000000000490275: mov dword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000004819cc: mov dword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x0000000000421860: mov dword ptr [rbx + 8], eax; mov edx, 1; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x0000000000421db3: mov dword ptr [rbx + 8], eax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x000000000042219b: mov dword ptr [rbx + 8], eax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000048e8d9: mov dword ptr [rbx + 8], eax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000425ce5: mov dword ptr [rbx + 8], eax; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000467a67: mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x00000000004688c5: mov dword ptr [rbx + rbp*8], eax; lea rax, [rip + 0x26d371]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x688da; call rax; 
0x00000000004687d0: mov dword ptr [rbx + rsi*8], esi; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x687de; call rsi; 
0x000000000045e853: mov dword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049026e: mov dword ptr [rbx], 0; mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000048f130: mov dword ptr [rbx], 0; or dword ptr [rip + 0x2480eb], 1; pop rbx; ret; 
0x0000000000471c90: mov dword ptr [rbx], 0x8e0f0000; pushfq; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8944; 
0x0000000000494a53: mov dword ptr [rbx], eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000425dfc: mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000040393e: mov dword ptr [rbx], eax; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000004997b9: mov dword ptr [rbx], eax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000425e70: mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000041f2a6: mov dword ptr [rbx], ebp; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000421cb5: mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000480e4b: mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x0000000000426530: mov dword ptr [rbx], edx; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000004258e2: mov dword ptr [rbx], edx; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004819c9: mov dword ptr [rbx], esp; mov qword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x00000000004268f5: mov dword ptr [rcx + 0x130], eax; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000004268ed: mov dword ptr [rcx + 0x50], 0; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000493b56: mov dword ptr [rcx + 0xf], 0x481004b6; test edi, edi; mov byte ptr [rsi], al; jne 0x93b48; mov rax, rsi; ret; 
0x000000000040fb4e: mov dword ptr [rcx + rax*2], 0x72f2a30f; ret 0xfe83; 
0x0000000000472768: mov dword ptr [rcx + rdx*8], eax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000460155: mov dword ptr [rcx - 0x7d], 0x940f07fc; ret 0x1f0f; 
0x0000000000447747: mov dword ptr [rcx - 2], ecx; ret; 
0x0000000000447732: mov dword ptr [rcx - 4], ecx; ret; 
0x0000000000447721: mov dword ptr [rcx - 8], ecx; ret; 
0x00000000004902c1: mov dword ptr [rcx], 0x1c68348; test dl, dl; jne 0x9029a; movsx eax, cl; neg eax; ret; 
0x000000000045871a: mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000046a2bc: mov dword ptr [rcx], edx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000042585b: mov dword ptr [rdi + 0x10], eax; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000428534: mov dword ptr [rdi + 0x10], eax; pop rbx; pop rbp; ret; 
0x0000000000453add: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x11]; ret; 
0x0000000000453b1b: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000453b9d: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x17]; ret; 
0x0000000000453b3b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000045348b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000453bbd: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000045350d: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000045344d: mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000453c00: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000453550: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000453c20: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000453570: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000453be1: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000453531: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000407a87: mov dword ptr [rdi + 0x14], eax; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000453c03: mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000453553: mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000425833: mov dword ptr [rdi + 0x18], eax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000453be5: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x19]; ret; 
0x0000000000453c23: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000042585f: mov dword ptr [rdi + 0x18], ecx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000453535: mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000407aff: mov dword ptr [rdi + 0x24], eax; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000428531: mov dword ptr [rdi + 0x24], ebp; mov dword ptr [rdi + 0x10], eax; pop rbx; pop rbp; ret; 
0x000000000048aa70: mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000048aa77: mov dword ptr [rdi + 0x308], eax; ret; 
0x000000000042582f: mov dword ptr [rdi + 0x48], edx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000425863: mov dword ptr [rdi + 0x48], edx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000049c5b1: mov dword ptr [rdi + 0x98], esi; ret; 
0x0000000000426607: mov dword ptr [rdi + 0xa0], 0xffffffff; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000426612: mov dword ptr [rdi + 0xa8], 0; ret; 
0x0000000000407a4f: mov dword ptr [rdi + 0xc], eax; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000453b5d: mov dword ptr [rdi + 0xe], ecx; lea rax, [rdi + 0x15]; ret; 
0x00000000004534ad: mov dword ptr [rdi + 0xe], ecx; ret; 
0x0000000000453afb: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000453b7d: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x16]; ret; 
0x000000000045346b: mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000004448c5: mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000444708: mov dword ptr [rdi + 1], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000004449a8: mov dword ptr [rdi + 1], edx; mov word ptr [rdi], cx; ret; 
0x0000000000444855: mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000444698: mov dword ptr [rdi + 2], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000004539c7: mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000004447e5: mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000444628: mov dword ptr [rdi + 3], edx; mov qword ptr [rdi], rcx; ret; 
0x0000000000453397: mov dword ptr [rdi + 3], edx; ret; 
0x00000000004539a9: mov dword ptr [rdi + 4], edx; lea rax, [rdi + 5]; ret; 
0x00000000004445b8: mov dword ptr [rdi + 4], edx; mov qword ptr [rdi], rcx; ret; 
0x0000000000453389: mov dword ptr [rdi + 4], edx; ret; 
0x0000000000453a5b: mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x0000000000444548: mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000004533fb: mov dword ptr [rdi + 5], edx; ret; 
0x0000000000453a7b: mov dword ptr [rdi + 6], edx; lea rax, [rdi + 0xd]; ret; 
0x00000000004444d8: mov dword ptr [rdi + 6], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000045340b: mov dword ptr [rdi + 6], edx; ret; 
0x0000000000453a19: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x0000000000453a9b: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xe]; ret; 
0x0000000000444468: mov dword ptr [rdi + 7], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000004533d9: mov dword ptr [rdi + 7], edx; ret; 
0x0000000000493aae: mov dword ptr [rdi + 8], eax; mov eax, 2; ret; 
0x0000000000425837: mov dword ptr [rdi + 8], eax; ret; 
0x0000000000492338: mov dword ptr [rdi + 8], eax; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000493af3: mov dword ptr [rdi + 8], ecx; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000004922c4: mov dword ptr [rdi + 8], ecx; ret; 
0x0000000000493a8f: mov dword ptr [rdi + 8], ecx; sub eax, r10d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000453a39: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000004539fb: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 9]; ret; 
0x00000000004938a0: mov dword ptr [rdi + 8], edx; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000493764: mov dword ptr [rdi + 8], edx; mov eax, ecx; adc eax, eax; ret; 
0x00000000004533cb: mov dword ptr [rdi + 8], edx; ret; 
0x000000000049288d: mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000456edb: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], cx; ret; 
0x0000000000457060: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], cx; vzeroupper; ret; 
0x0000000000456175: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], si; ret; 
0x0000000000456ed3: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], ecx; ret; 
0x0000000000457055: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x0000000000456165: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x0000000000456ecb: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rcx; ret; 
0x000000000045704a: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x0000000000456157: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rsi; ret; 
0x000000000049c55c: mov dword ptr [rdi + rsi*8], edx; ret; 
0x000000000043e375: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043e3b3: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000049222f: mov dword ptr [rdi - 0x10], ecx; ret; 
0x000000000043e528: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e624: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043e570: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e6f8: mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e8d8: mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043eac8: mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ec99: mov dword ptr [rdi - 0x15], ebx; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043ee99: mov dword ptr [rdi - 0x16], ebx; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f099: mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e371: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043e3af: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e524: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e620: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043e56c: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e6f4: mov dword ptr [rdi - 0x1a], edx; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e8d4: mov dword ptr [rdi - 0x1b], edx; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043eac4: mov dword ptr [rdi - 0x1c], edx; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ec95: mov dword ptr [rdi - 0x1d], edx; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043ee95: mov dword ptr [rdi - 0x1e], edx; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f095: mov dword ptr [rdi - 0x1f], edx; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e36d: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043e3ab: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e520: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e61c: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043e568: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e6f0: mov dword ptr [rdi - 0x22], ecx; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e8d0: mov dword ptr [rdi - 0x23], ecx; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043eac0: mov dword ptr [rdi - 0x24], ecx; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ec91: mov dword ptr [rdi - 0x25], ecx; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043ee91: mov dword ptr [rdi - 0x26], ecx; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f091: mov dword ptr [rdi - 0x27], ecx; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e369: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043e3a7: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e6fc: mov dword ptr [rdi - 0xa], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000443f18: mov dword ptr [rdi - 0xa], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043e8dc: mov dword ptr [rdi - 0xb], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000443e98: mov dword ptr [rdi - 0xb], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043eacc: mov dword ptr [rdi - 0xc], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000443e18: mov dword ptr [rdi - 0xc], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043ec9d: mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000443d89: mov dword ptr [rdi - 0xd], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043ee9d: mov dword ptr [rdi - 0xe], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000443cf9: mov dword ptr [rdi - 0xe], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043f09d: mov dword ptr [rdi - 0xf], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000443c69: mov dword ptr [rdi - 0xf], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043ea7d: mov dword ptr [rdi - 2], ecx; ret; 
0x000000000043e895: mov dword ptr [rdi - 2], edx; ret; 
0x000000000043ea79: mov dword ptr [rdi - 3], edx; mov word ptr [rdi - 2], cx; ret; 
0x000000000043ee59: mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043e52f: mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ee56: mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043f056: mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043f256: mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000492228: mov dword ptr [rdi - 8], eax; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000043e379: mov dword ptr [rdi - 8], ecx; ret; 
0x000000000043e3b7: mov dword ptr [rdi - 8], edx; ret; 
0x000000000043e52c: mov dword ptr [rdi - 9], eax; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e628: mov dword ptr [rdi - 9], ecx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043e574: mov dword ptr [rdi - 9], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000443f98: mov dword ptr [rdi - 9], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000045b062: mov dword ptr [rdi], 0; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x00000000004097d0: mov dword ptr [rdi], 0x66; xor eax, eax; ret; 
0x00000000004097c0: mov dword ptr [rdi], 0x75; xor eax, eax; ret; 
0x000000000049c193: mov dword ptr [rdi], eax; clc; jmp qword ptr [rsi + 0xf]; 
0x0000000000422093: mov dword ptr [rdi], eax; mov rax, -0x40; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000048e828: mov dword ptr [rdi], eax; mov rax, qword ptr [rip + 0x24abd7]; mov qword ptr [rsi], rax; ret; 
0x00000000004921b4: mov dword ptr [rdi], eax; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000004922be: mov dword ptr [rdi], eax; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000493aee: mov dword ptr [rdi], eax; sub eax, esi; mov qword ptr [rdi + 8], r9; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000477e4a: mov dword ptr [rdi], ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000492221: mov dword ptr [rdi], ebx; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000492331: mov dword ptr [rdi], ebx; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000453995: mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000004539e7: mov dword ptr [rdi], ecx; lea rax, [rdi + 8]; ret; 
0x0000000000453974: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000453354: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000004539c5: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x0000000000453395: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000453a17: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000004533d7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000453a37: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000004533e7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000455ea7: mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000424a4a: mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000453a58: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000004533f8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000453a78: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000453408: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000453a98: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000453418: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000004539a6: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000453386: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000004539f8: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000004533c8: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000455eb3: mov dword ptr [rdi], ecx; mov word ptr [rsi - 2], cx; ret; 
0x000000000044446c: mov dword ptr [rdi], ecx; ret; 
0x000000000045704f: mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x0000000000453964: mov dword ptr [rdi], edx; lea rax, [rdi + 1]; ret; 
0x0000000000453982: mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x00000000004539d4: mov dword ptr [rdi], edx; lea rax, [rdi + 7]; ret; 
0x0000000000420fe2: mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000444774: mov dword ptr [rdi], edx; ret; 
0x000000000044772f: mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000493936: mov dword ptr [rdi], esi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000044771e: mov dword ptr [rdi], esi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000447743: mov dword ptr [rdi], esi; mov word ptr [r9 - 2], cx; ret; 
0x000000000045615c: mov dword ptr [rdi], esi; ret; 
0x0000000000421e35: mov dword ptr [rdx + 0x130], edi; pop rbx; ret; 
0x0000000000406bdc: mov dword ptr [rdx + 0xd0], ecx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000452ee7: mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x0000000000451717: mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x0000000000452ec9: mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x0000000000451709: mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x0000000000452f7b: mov dword ptr [rdx + 5], eax; lea rax, [rdx + 0xc]; ret; 
0x0000000000452ef9: mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000451729: mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000452f9b: mov dword ptr [rdx + 6], eax; lea rax, [rdx + 0xd]; ret; 
0x0000000000452f19: mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000451739: mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000452f39: mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000452fbb: mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xe]; ret; 
0x0000000000451749: mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000403731: mov dword ptr [rdx + 8], eax; call 0x2f470; mov rax, rbx; pop rbx; ret; 
0x0000000000452f59: mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000452e4b: mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xf]; ret; 
0x000000000045169b: mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000004938f7: mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000493b00: mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x00000000004939ed: mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x000000000048b719: mov dword ptr [rdx], eax; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x0000000000452e74: mov dword ptr [rdx], eax; lea rax, [rdx + 1]; ret; 
0x0000000000452ea2: mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x0000000000452df4: mov dword ptr [rdx], eax; lea rax, [rdx + 7]; ret; 
0x0000000000452e84: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004516d4: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x0000000000452eb2: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000004516f2: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000452ec2: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x0000000000451702: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x00000000004587aa: mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000493938: mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000493a95: mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000452ee2: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x0000000000451712: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x0000000000452ef4: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000451724: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000452f14: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000451734: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000452f34: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000451744: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000452f54: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000451754: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000458a5a: mov dword ptr [rdx], eax; mov rax, -1; ret; 
0x0000000000452f74: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000451764: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000452f94: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000451784: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000452fb4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x00000000004517a4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000452e44: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000451694: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000451644: mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x000000000049426d: mov dword ptr [rdx], eax; pop rbx; ret; 
0x00000000004276c8: mov dword ptr [rdx], eax; ret; 
0x0000000000407903: mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x00000000004a025d: mov dword ptr [rip + 0x238db1], 0; add rsp, 8; ret; 
0x000000000049f9d8: mov dword ptr [rip + 0x239506], 0; add rsp, 8; ret; 
0x000000000049f4af: mov dword ptr [rip + 0x23989b], ebx; jne 0x9f498; pop rbx; ret; 
0x000000000049e960: mov dword ptr [rip + 0x23aa7e], 1; ret; 
0x000000000049e850: mov dword ptr [rip + 0x23ab8e], 1; ret; 
0x0000000000493d98: mov dword ptr [rip + 0x24532a], eax; ret; 
0x0000000000493d7d: mov dword ptr [rip + 0x245345], eax; add rsp, 8; ret; 
0x0000000000490eb9: mov dword ptr [rip + 0x2481ed], 0; add rsp, 8; ret; 
0x000000000048e781: mov dword ptr [rip + 0x24ac89], eax; add rsp, 8; ret; 
0x000000000048e6c5: mov dword ptr [rip + 0x24ad45], eax; ret; 
0x000000000045c876: mov dword ptr [rip + 0x27923c], edx; pop rbx; ret; 
0x000000000045af39: mov dword ptr [rip + 0x27c271], eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000042eb96: mov dword ptr [rip + 0x2a7d04], eax; ret; 
0x000000000042eb88: mov dword ptr [rip + 0x2a7d1a], eax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2a7d04], rax; ret; 
0x000000000042eba0: mov dword ptr [rip + 0x2aa226], 0; ret; 
0x000000000042eb7a: mov dword ptr [rip + 0x2aa238], eax; lea rax, [rip - 0x14a7]; mov qword ptr [rip + 0x2a7d1a], rax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2a7d04], rax; ret; 
0x00000000004285ae: mov dword ptr [rip + 0x2ae298], eax; ret; 
0x00000000004285a4: mov dword ptr [rip + 0x2ae2a6], 1; mov dword ptr [rip + 0x2ae298], eax; ret; 
0x000000000042856f: mov dword ptr [rip + 0x2ae2b3], eax; ret; 
0x000000000042854f: mov dword ptr [rip + 0x2ae2cb], eax; ret; 
0x0000000000428564: mov dword ptr [rip + 0x2ae2e6], 1; mov qword ptr [rip + 0x2ae2b3], rax; ret; 
0x0000000000428544: mov dword ptr [rip + 0x2ae306], 1; mov qword ptr [rip + 0x2ae2cb], rax; ret; 
0x0000000000428445: mov dword ptr [rip + 0x2ae43d], eax; ret; 
0x00000000004283d5: mov dword ptr [rip + 0x2ae45d], eax; ret; 
0x00000000004283c5: mov dword ptr [rip + 0x2ae475], eax; ret; 
0x0000000000428a50: mov dword ptr [rip + 0x2b0376], 0; ret; 
0x00000000004285c4: mov dword ptr [rip + 0x2b082a], eax; ret; 
0x0000000000427afc: mov dword ptr [rip + 0x2b1272], 0; ret; 
0x0000000000427a92: mov dword ptr [rip + 0x2b12e0], edx; add dword ptr [rip + 0x2b12d5], 1; ret; 
0x000000000040f9bb: mov dword ptr [rip + 0x2c89c7], eax; lea rax, [rip + 0x2c89b8]; ret; 
0x000000000040f9b2: mov dword ptr [rip + 0x2c89c8], eax; mov eax, dword ptr [rdx + rsi]; mov dword ptr [rip + 0x2c89c7], eax; lea rax, [rip + 0x2c89b8]; ret; 
0x000000000040fb8b: mov dword ptr [rip + 0x2c92ef], eax; add rsp, 0x88; pop rbx; ret; 
0x0000000000402094: mov dword ptr [rip + 0x2d4086], esi; ret; 
0x0000000000402084: mov dword ptr [rip + 0x2d4092], esi; ret; 
0x0000000000402074: mov dword ptr [rip + 0x2d4096], esi; ret; 
0x0000000000402064: mov dword ptr [rip + 0x2d40a2], esi; ret; 
0x0000000000401f34: mov dword ptr [rip + 0x2d41da], esi; ret; 
0x0000000000401f24: mov dword ptr [rip + 0x2d41ee], esi; ret; 
0x0000000000401f14: mov dword ptr [rip + 0x2d420a], esi; ret; 
0x0000000000401cd4: mov dword ptr [rip + 0x2d442e], edi; ret; 
0x0000000000401c8c: mov dword ptr [rip + 0x2d447a], eax; mov qword ptr [rip + 0x2d447b], rax; mov qword ptr [rip + 0x2d447c], rax; mov qword ptr [rip + 0x2d447d], rax; add rsp, 8; ret; 
0x0000000000401c93: mov dword ptr [rip + 0x2d447b], eax; mov qword ptr [rip + 0x2d447c], rax; mov qword ptr [rip + 0x2d447d], rax; add rsp, 8; ret; 
0x0000000000401c9a: mov dword ptr [rip + 0x2d447c], eax; mov qword ptr [rip + 0x2d447d], rax; add rsp, 8; ret; 
0x0000000000401ca1: mov dword ptr [rip + 0x2d447d], eax; add rsp, 8; ret; 
0x0000000000401bed: mov dword ptr [rip + 0x2d4511], 1; pop rbx; ret; 
0x0000000000401bc6: mov dword ptr [rip + 0x2d4538], 0; pop rbx; ret; 
0x0000000000400e52: mov dword ptr [rip + 0x2d7518], ebx; xor eax, eax; pop rbx; ret; 
0x0000000000400cd2: mov dword ptr [rip + 0x2d7698], eax; add rsp, 8; ret; 
0x00000000004005a5: mov dword ptr [rip + 0x2d8b49], 0; pop rax; ret; 
0x00000000004105d3: mov dword ptr [rsi + 0x10], esi; syscall; 
0x00000000004105c7: mov dword ptr [rsi + 8], eax; mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000455eb6: mov dword ptr [rsi - 2], ecx; ret; 
0x0000000000455ea9: mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000487c91: mov dword ptr [rsi], 0xffffffff; xor eax, eax; ret; 
0x0000000000420473: mov dword ptr [rsi], eax; call qword ptr [rbp + 0x30]; 
0x000000000049c59e: mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000048e832: mov dword ptr [rsi], eax; ret; 
0x000000000046a2b1: mov dword ptr [rsi], ecx; mov rcx, -0x18; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000048db79: mov dword ptr [rsi], edi; mov rax, rcx; ret; 
0x00000000004105cb: mov dword ptr [rsi], esi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000042be0a: mov dword ptr [rsp + 0x10], ebx; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000042bec7: mov dword ptr [rsp + 0x10], edx; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000048d8e1: mov dword ptr [rsp + 0x18], eax; call 0x8d210; add rsp, 0xd8; ret; 
0x0000000000458cfa: mov dword ptr [rsp + 0x18], eax; lea rax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; je 0x58d30; mov eax, 0x48; syscall; 
0x0000000000458d04: mov dword ptr [rsp + 0x20], eax; je 0x58d30; mov eax, 0x48; syscall; 
0x000000000042be05: mov dword ptr [rsp + 0x20], esi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000484b66: mov dword ptr [rsp + 0x28], eax; xor eax, eax; mov rdx, rsp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x0000000000458dc1: mov dword ptr [rsp + 0xc], eax; call 0x5b0e0; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x000000000042be0f: mov dword ptr [rsp + 8], eax; call rcx; 
0x000000000041fb2f: mov dword ptr [rsp + 8], eax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x00000000004205ae: mov dword ptr [rsp + 8], ecx; mov rdi, r15; call rax; 
0x0000000000499d61: mov dword ptr [rsp], eax; call 0x9a0e0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000498fb5: mov dword ptr [rsp], eax; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000498f63: mov dword ptr [rsp], eax; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000423363: mov dword ptr [rsp], eax; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000422692: mov dword ptr [rsp], ecx; mov rdi, rbx; call rax; 
0x00000000004587bf: mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004756cc: mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x00000000004597d7: mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000041df41: mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000484c5f: mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000042d0d9: mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x0000000000420fe4: mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000484c4c: mov dword ptr fs:[rax], edx; xor eax, eax; ret; 
0x0000000000458719: mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000004587a9: mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000458a59: mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000456164: mov dword ptr ss:[rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x00000000004449a0: mov dx, word ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x00000000004539a2: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000453382: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000004539f3: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000004533c3: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000043e890: mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000043ea70: mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000453960: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000453340: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000499e41: mov eax, 0; add byte ptr [rax - 0x7ab70000], al; ret 0x840f; 
0x0000000000457363: mov eax, 0; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x000000000040ccdc: mov eax, 0; cmovne rbx, rax; mov rax, rbx; pop rbx; ret; 
0x0000000000400c64: mov eax, 0; leave; ret; 
0x0000000000400405: mov eax, 0; test rax, rax; je 0x412; call rax; 
0x00000000004588dd: mov eax, 0x101; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000045885c: mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000484989: mov eax, 0x101; syscall; 
0x0000000000484902: mov eax, 0x106; syscall; 
0x000000000045739b: mov eax, 0x10; pop rbx; ret; 
0x0000000000459670: mov eax, 0x10; syscall; 
0x0000000000459670: mov eax, 0x10; syscall; cmp rax, -0xfff; jae 0x59680; ret; 
0x00000000004595a7: mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000048d349: mov eax, 0x14; syscall; 
0x000000000045b504: mov eax, 0x15; syscall; 
0x00000000004328d0: mov eax, 0x16; ret; 
0x0000000000458700: mov eax, 0x18; syscall; 
0x0000000000458700: mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x58710; ret; 
0x000000000045af63: mov eax, 0x19; syscall; 
0x000000000045af63: mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x5af73; ret; 
0x00000000004598b0: mov eax, 0x1c; syscall; 
0x00000000004598b0: mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x598c0; ret; 
0x00000000004573a9: mov eax, 0x20; pop rbx; ret; 
0x0000000000458e30: mov eax, 0x20; syscall; 
0x0000000000458e30: mov eax, 0x20; syscall; cmp rax, -0xfff; jae 0x58e40; ret; 
0x00000000004979e0: mov eax, 0x26; syscall; 
0x00000000004979e0: mov eax, 0x26; syscall; cmp rax, -0xfff; jae 0x979f0; ret; 
0x0000000000494730: mov eax, 0x27; syscall; 
0x0000000000494730: mov eax, 0x27; syscall; ret; 
0x00000000004573a2: mov eax, 0x30; pop rbx; ret; 
0x0000000000484830: mov eax, 0x3f; syscall; 
0x0000000000484830: mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x84840; ret; 
0x00000000004573b7: mov eax, 0x40; pop rbx; ret; 
0x00000000004c173b: mov eax, 0x45155e93; ret 0x591c; 
0x0000000000458bf7: mov eax, 0x48; syscall; 
0x00000000004788f8: mov eax, 0x48fffff6; mov edi, dword ptr [rbp - 0x8d0]; call rax; 
0x0000000000458f0b: mov eax, 0x4f; syscall; 
0x0000000000466e28: mov eax, 0x5b000000; pop r12; ret; 
0x00000000004236e7: mov eax, 0x5b000000; pop rbp; pop r12; pop r13; ret; 
0x00000000004573b0: mov eax, 0x60; pop rbx; ret; 
0x0000000000490a11: mov eax, 0x62696c67; movsxd rbp, dword ptr [rip + 0x3349646c]; push rbp; or byte ptr [rcx + 0x33], cl; add byte ptr [r8 + 9], r9b; ret 0x840f; 
0x000000000045afc0: mov eax, 0x63; syscall; 
0x000000000045afc0: mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x5afd0; ret; 
0x0000000000484860: mov eax, 0x66; syscall; 
0x0000000000484860: mov eax, 0x66; syscall; ret; 
0x0000000000484880: mov eax, 0x68; syscall; 
0x0000000000484880: mov eax, 0x68; syscall; ret; 
0x0000000000484870: mov eax, 0x6b; syscall; 
0x0000000000484870: mov eax, 0x6b; syscall; ret; 
0x0000000000484890: mov eax, 0x6c; syscall; 
0x0000000000484890: mov eax, 0x6c; syscall; ret; 
0x00000000004094c1: mov eax, 0x6d2ca0; pop rbx; ret; 
0x0000000000409231: mov eax, 0x6d2ca0; ret; 
0x00000000004094d1: mov eax, 0x6d2ce0; pop rbx; ret; 
0x0000000000409211: mov eax, 0x6d2ce0; ret; 
0x00000000004094e1: mov eax, 0x6d2d20; pop rbx; ret; 
0x0000000000409181: mov eax, 0x6d2d20; ret; 
0x0000000000409511: mov eax, 0x6d2d60; pop rbx; ret; 
0x00000000004091f9: mov eax, 0x6d2d60; ret; 
0x0000000000409501: mov eax, 0x6d2da0; pop rbx; ret; 
0x00000000004091ca: mov eax, 0x6d2da0; ret; 
0x0000000000409523: mov eax, 0x6d2de0; pop rbx; ret; 
0x00000000004090db: mov eax, 0x6d2de0; ret; 
0x000000000040951a: mov eax, 0x6d2e20; pop rbx; ret; 
0x0000000000409147: mov eax, 0x6d2e20; ret; 
0x0000000000409535: mov eax, 0x6d2e60; pop rbx; ret; 
0x0000000000409173: mov eax, 0x6d2e60; ret; 
0x000000000040952c: mov eax, 0x6d2ea0; pop rbx; ret; 
0x0000000000409221: mov eax, 0x6d2ea0; ret; 
0x0000000000409578: mov eax, 0x6d2ee0; pop rbx; ret; 
0x0000000000409279: mov eax, 0x6d2ee0; ret; 
0x0000000000409550: mov eax, 0x6d2f20; pop rbx; ret; 
0x0000000000409209: mov eax, 0x6d2f20; ret; 
0x000000000040956f: mov eax, 0x6d2f60; pop rbx; ret; 
0x0000000000409118: mov eax, 0x6d2f60; ret; 
0x0000000000409566: mov eax, 0x6d2fa0; pop rbx; ret; 
0x00000000004091b1: mov eax, 0x6d2fa0; ret; 
0x00000000004094b1: mov eax, 0x6d52c0; pop rbx; ret; 
0x00000000004091e5: mov eax, 0x6d52c0; ret; 
0x00000000004094f1: mov eax, 0x6d5300; pop rbx; ret; 
0x00000000004091a1: mov eax, 0x6d5300; ret; 
0x0000000000409547: mov eax, 0x6d5340; pop rbx; ret; 
0x0000000000409191: mov eax, 0x6d5340; ret; 
0x000000000040953e: mov eax, 0x6d5380; pop rbx; ret; 
0x0000000000409241: mov eax, 0x6d5380; ret; 
0x0000000000409559: mov eax, 0x6d53c0; pop rbx; ret; 
0x0000000000409251: mov eax, 0x6d53c0; ret; 
0x000000000040949e: mov eax, 0x6d5400; pop rbx; ret; 
0x0000000000409261: mov eax, 0x6d5400; ret; 
0x0000000000401191: mov eax, 0x6d6130; mov rax, qword ptr [rax]; mov eax, dword ptr [rax]; ret; 
0x000000000045738d: mov eax, 0x80; pop rbx; ret; 
0x00000000004d1a6d: mov eax, 0x84500000; cld; call qword ptr [rdx]; 
0x0000000000498d6f: mov eax, 0x89000003; fmul dword ptr [rbx + rcx*4 + 0x34]; ret 0xf41; 
0x000000000047bef1: mov eax, 0x8900001d; ret 0x349; 
0x0000000000496044: mov eax, 0x89fd8945; ret 0xe283; 
0x00000000004b0ef4: mov eax, 0x90fffabf; mov edi, 0xbd5ffffa; cli; jmp qword ptr [rdi]; 
0x000000000045af93: mov eax, 0x9d; syscall; 
0x000000000045af93: mov eax, 0x9d; syscall; cmp rax, -0xfff; jae 0x5afa3; ret; 
0x00000000004105cd: mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000459880: mov eax, 0xa; syscall; 
0x0000000000459880: mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x59890; ret; 
0x0000000000459850: mov eax, 0xb; syscall; 
0x0000000000459850: mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x59860; ret; 
0x00000000004bd310: mov eax, 0xba000004; add al, 0; add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x000000000041c8a2: mov eax, 0xba; syscall; 
0x00000000004c0bf8: mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x0000000000484100: mov eax, 0xc9; syscall; 
0x0000000000484100: mov eax, 0xc9; syscall; ret; 
0x000000000045b045: mov eax, 0xca; syscall; 
0x000000000045b072: mov eax, 0xca; syscall; pop rdx; pop rsi; ret; 
0x000000000045b119: mov eax, 0xca; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x00000000004cd154: mov eax, 0xcf00006f; xor esi, ebx; jmp qword ptr [rbx]; 
0x0000000000458475: mov eax, 0xe5; syscall; 
0x0000000000468ef8: mov eax, 0xe8c78948; bsf edi, edx; inc dword ptr [rbx - 0x76be0008]; ret 0x840f; 
0x000000000041c8d0: mov eax, 0xe; syscall; 
0x000000000041c8ae: mov eax, 0xea; syscall; 
0x000000000043c4d9: mov eax, 0xf66b8b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000046a491: mov eax, 0xf; syscall; 
0x0000000000484a68: mov eax, 0xfd68b2e8; jmp qword ptr [rsi - 0x70]; 
0x00000000004675ec: mov eax, 0xff52bee8; dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x0000000000493a89: mov eax, 0xffffbfd1; mov qword ptr [rdi + 8], r9; sub eax, r10d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000004939ab: mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000409bd0: mov eax, 0xffffff20; ret; 
0x0000000000409dc0: mov eax, 0xffffff21; ret; 
0x0000000000409db0: mov eax, 0xffffff22; ret; 
0x0000000000409da0: mov eax, 0xffffff23; ret; 
0x0000000000409d90: mov eax, 0xffffff2a; ret; 
0x0000000000409d80: mov eax, 0xffffff2b; ret; 
0x0000000000409d70: mov eax, 0xffffff2c; ret; 
0x0000000000409d60: mov eax, 0xffffff2d; ret; 
0x0000000000409d50: mov eax, 0xffffff34; ret; 
0x0000000000409d40: mov eax, 0xffffff35; ret; 
0x0000000000409d30: mov eax, 0xffffff36; ret; 
0x0000000000409d20: mov eax, 0xffffff37; ret; 
0x0000000000409cc0: mov eax, 0xffffff88; ret; 
0x0000000000409c90: mov eax, 0xffffff89; ret; 
0x0000000000409bf0: mov eax, 0xffffff8a; ret; 
0x0000000000409c80: mov eax, 0xffffff8b; ret; 
0x0000000000409cb0: mov eax, 0xffffff8c; ret; 
0x0000000000409c40: mov eax, 0xffffff8d; ret; 
0x0000000000409ce0: mov eax, 0xffffff8e; ret; 
0x0000000000409cf0: mov eax, 0xffffff8f; ret; 
0x0000000000409c70: mov eax, 0xffffff90; ret; 
0x0000000000409cd0: mov eax, 0xffffff91; ret; 
0x0000000000409c60: mov eax, 0xffffff92; ret; 
0x0000000000409ca0: mov eax, 0xffffff93; ret; 
0x0000000000409d10: mov eax, 0xffffff94; ret; 
0x0000000000409c20: mov eax, 0xffffff95; ret; 
0x0000000000409c30: mov eax, 0xffffff96; ret; 
0x0000000000409be0: mov eax, 0xffffff97; ret; 
0x0000000000409c50: mov eax, 0xffffff98; ret; 
0x0000000000409c10: mov eax, 0xffffff99; ret; 
0x0000000000409c00: mov eax, 0xffffff9a; ret; 
0x0000000000409d00: mov eax, 0xffffff9b; ret; 
0x0000000000402028: mov eax, 0xffffffa1; ret; 
0x000000000046a2d1: mov eax, 0xffffffa8; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000004107a1: mov eax, 0xffffffc0; add rax, qword ptr fs:[0]; ret; 
0x00000000004587b9: mov eax, 0xffffffc0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004597d1: mov eax, 0xffffffc0; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000041df3b: mov eax, 0xffffffc0; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000484c59: mov eax, 0xffffffc0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000422096: mov eax, 0xffffffc0; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000004756c1: mov eax, 0xffffffc0; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x0000000000424a41: mov eax, 0xffffffc0; or ecx, 0x20; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000420fd9: mov eax, 0xffffffc0; or edx, 0x20; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000048f151: mov eax, 0xffffffc0; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x0000000000407872: mov eax, 0xffffffdf; ret; 
0x000000000046a331: mov eax, 0xffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000046a311: mov eax, 0xffffffe8; add rax, qword ptr fs:[0]; ret; 
0x00000000004010f5: mov eax, 0xffffffea; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000401269: mov eax, 0xffffffea; pop rbp; pop r12; ret; 
0x00000000004015b0: mov eax, 0xffffffea; pop rbx; pop rbp; pop r12; ret; 
0x0000000000400ff0: mov eax, 0xffffffea; pop rbx; ret; 
0x0000000000401000: mov eax, 0xffffffea; ret; 
0x0000000000407868: mov eax, 0xffffffef; pop rbx; pop rbp; pop r12; ret; 
0x0000000000406d04: mov eax, 0xffffffef; pop rbx; pop rbp; ret; 
0x000000000046a2f1: mov eax, 0xfffffff0; add rax, qword ptr fs:[0]; ret; 
0x00000000004023d9: mov eax, 0xfffffff2; pop rbx; pop rbp; ret; 
0x0000000000400ca2: mov eax, 0xfffffff2; ret; 
0x0000000000407a20: mov eax, 0xfffffff3; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000403a44: mov eax, 0xfffffff4; pop rbp; pop r12; ret; 
0x00000000004023f9: mov eax, 0xfffffff4; pop rbx; pop rbp; ret; 
0x000000000048035f: mov eax, 0xffffffff; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004212a1: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000046bf3e: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x0000000000401494: mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000004221b3: mov eax, 0xffffffff; pop rbx; ret; 
0x000000000040962e: mov eax, 0xffffffff; ret; 
0x000000000047f3a7: mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000485099: mov eax, 1; leave; ret; 
0x0000000000400ccd: mov eax, 1; mov dword ptr [rip + 0x2d7698], eax; add rsp, 8; ret; 
0x0000000000493915: mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x000000000047bace: mov eax, 1; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000426532: mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000495c7d: mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000048f140: mov eax, 1; pop rbx; ret; 
0x0000000000406a37: mov eax, 1; ret; 
0x0000000000458aba: mov eax, 1; syscall; 
0x0000000000483953: mov eax, 2; ret; 
0x0000000000483bb1: mov eax, 3; ret; 
0x0000000000458d8a: mov eax, 3; syscall; 
0x0000000000483bc1: mov eax, 4; ret; 
0x000000000045878e: mov eax, 4; syscall; 
0x0000000000483bd1: mov eax, 5; ret; 
0x00000000004587dc: mov eax, 5; syscall; 
0x0000000000483be1: mov eax, 6; ret; 
0x00000000004848ae: mov eax, 6; syscall; 
0x0000000000483bf1: mov eax, 7; ret; 
0x0000000000457394: mov eax, 8; pop rbx; ret; 
0x000000000045dba0: mov eax, 8; ret; 
0x0000000000458b80: mov eax, 8; syscall; 
0x00000000004597ac: mov eax, 9; syscall; 
0x00000000004046bf: mov eax, dword ptr [r15 + 0x20]; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x0000000000480cfd: mov eax, dword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x0000000000480e06: mov eax, dword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004802db: mov eax, dword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000420b3a: mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000047f915: mov eax, dword ptr [rax + 0x130]; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000041d67d: mov eax, dword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000420b41: mov eax, dword ptr [rax + 0x20]; jmp rax; 
0x00000000004747c7: mov eax, dword ptr [rax + 0x38]; mov r14, r15; mov rdx, r13; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x00000000004812d4: mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000498dbc: mov eax, dword ptr [rax + 8]; add rax, qword ptr [r14]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000490ed1: mov eax, dword ptr [rax + 8]; ret; 
0x0000000000490ee1: mov eax, dword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x00000000004688d0: mov eax, dword ptr [rax + rbp*8]; test rax, rax; je 0x688da; call rax; 
0x000000000046d3d6: mov eax, dword ptr [rax + rbx*8]; mov dword ptr [rbp - 0x93c], r9d; mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000040f8e1: mov eax, dword ptr [rax + rbx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047b447: mov eax, dword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000046a2df: mov eax, dword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000047003d: mov eax, dword ptr [rax + rdi*8]; jmp rax; 
0x0000000000401163: mov eax, dword ptr [rax]; add rsp, 8; ret; 
0x000000000049a1d9: mov eax, dword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x0000000000401198: mov eax, dword ptr [rax]; mov eax, dword ptr [rax]; ret; 
0x000000000049a1c1: mov eax, dword ptr [rax]; mov qword ptr [r10], r8; ret; 
0x000000000046a2dc: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000040119a: mov eax, dword ptr [rax]; ret; 
0x0000000000425a55: mov eax, dword ptr [rbp + 0x20]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000425c45: mov eax, dword ptr [rbp + 0x28]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000049bd06: mov eax, dword ptr [rbp + 8]; movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 
0x00000000004109cc: mov eax, dword ptr [rbp + 8]; sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000490442: mov eax, dword ptr [rbp - 0x38]; xor esi, esi; lea rdi, [rip + 0x2f52c]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000048c6a5: mov eax, dword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x000000000048ba40: mov eax, dword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x00000000004936b5: mov eax, dword ptr [rbp - 8]; xor rax, qword ptr fs:[0x28]; jne 0x936fe; leave; ret; 
0x000000000048b861: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000048b71e: mov eax, dword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x0000000000494242: mov eax, dword ptr [rbx + 0x10]; lea rdx, [rip + 0x30fe0]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000042599d: mov eax, dword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004259be: mov eax, dword ptr [rbx + 0x18]; mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004942d9: mov eax, dword ptr [rbx + 0x18]; mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000494289: mov eax, dword ptr [rbx + 0x18]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x0000000000422197: mov eax, dword ptr [rbx + 0x18]; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000000494279: mov eax, dword ptr [rbx + 0x18]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000426089: mov eax, dword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004264a9: mov eax, dword ptr [rbx + 0x48]; add rsp, 0x20; mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x0000000000420b2f: mov eax, dword ptr [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000041bf5e: mov eax, dword ptr [rbx + rax*8]; ja 0x1c5e5; lea rdi, [rip + 0x91272]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000045af36: mov eax, dword ptr [rbx]; mov qword ptr [rip + 0x27c271], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000452ee4: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x0000000000451714: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x0000000000452ec5: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x0000000000451705: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000452ef6: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000451726: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000452f77: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000451767: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000452f16: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000451736: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000452f97: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000451787: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000452f36: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000451746: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000452fb7: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x00000000004517a7: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000452f56: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000451756: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000452e47: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000451697: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000044c32a: mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000044dc02: mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000004aac50: mov eax, dword ptr [rcx]; add byte ptr [rax], al; mov eax, dword ptr [rcx]; add byte ptr [rax], al; ret 0; 
0x00000000004aac54: mov eax, dword ptr [rcx]; add byte ptr [rax], al; ret 0; 
0x00000000004a976c: mov eax, dword ptr [rcx]; add byte ptr [rax], al; ret; 
0x0000000000452ea0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x0000000000452eb0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000004516f0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000452ec0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x0000000000451700: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000452ee0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x0000000000451710: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x00000000004516e0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x0000000000452df1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x0000000000452ef1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000451721: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000452f11: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000451731: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000452f31: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000451741: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000452f51: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000451751: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000452f71: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000451761: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000452f91: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000451781: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000452fb1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x00000000004517a1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000452e41: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000451691: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000451641: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000452e71: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x0000000000452e81: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004516d1: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x00000000004516c1: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000048c046: mov eax, dword ptr [rdi + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000407940: mov eax, dword ptr [rdi + 0x10]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000048112e: mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x00000000004276d0: mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x00000000004276f8: mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000409621: mov eax, dword ptr [rdi + 0x10]; test rax, rax; je 0x962e; mov rdi, rsi; jmp rax; 
0x0000000000407950: mov eax, dword ptr [rdi + 0x14]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x0000000000407960: mov eax, dword ptr [rdi + 0x18]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x0000000000409641: mov eax, dword ptr [rdi + 0x18]; test rax, rax; je 0x964d; mov edi, esi; jmp rax; 
0x0000000000407970: mov eax, dword ptr [rdi + 0x1c]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x0000000000407980: mov eax, dword ptr [rdi + 0x20]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x0000000000469cd2: mov eax, dword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x69cdf; call rax; 
0x00000000004046c0: mov eax, dword ptr [rdi + 0x20]; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x00000000004096e2: mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0x96bf; mov rbx, rsi; mov rdi, rsi; call rax; 
0x00000000004a00ed: mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0xa00fc; call rax; 
0x0000000000407900: mov eax, dword ptr [rdi + 0x24]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x00000000004283a1: mov eax, dword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000004812d1: mov eax, dword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000042582b: mov eax, dword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000427a21: mov eax, dword ptr [rdi + 0x68]; ret; 
0x000000000049c531: mov eax, dword ptr [rdi + 0x90]; ret; 
0x000000000049c581: mov eax, dword ptr [rdi + 0x98]; ret; 
0x000000000049c5c1: mov eax, dword ptr [rdi + 0xa0]; ret; 
0x000000000049c621: mov eax, dword ptr [rdi + 0xa8]; ret; 
0x000000000049c611: mov eax, dword ptr [rdi + 0xb0]; ret; 
0x000000000049c5d1: mov eax, dword ptr [rdi + 0xb8]; ret; 
0x000000000049c591: mov eax, dword ptr [rdi + 0xc0]; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000407930: mov eax, dword ptr [rdi + 0xc]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x0000000000407910: mov eax, dword ptr [rdi + 4]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x0000000000427b37: mov eax, dword ptr [rdi + 8]; cmp rax, rdx; jae 0x27b60; movzx eax, byte ptr [rax]; ret; 
0x0000000000407920: mov eax, dword ptr [rdi + 8]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000049cf41: mov eax, dword ptr [rdi + 8]; test rax, rax; je 0x9cf58; mov rsi, rdi; mov edi, 1; jmp rax; 
0x0000000000470587: mov eax, dword ptr [rdi + rax*8]; jmp rax; 
0x000000000049c568: mov eax, dword ptr [rdi + rsi*8]; cmp byte ptr [rcx + rsi], 8; jne 0x9c575; mov qword ptr [rax], rdx; ret; 
0x000000000043bfe4: mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x3c9ff; xor eax, eax; ret; 
0x00000000004554fc: mov eax, dword ptr [rdi - 4]; mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x55710; xor eax, eax; ret; 
0x000000000043c243: mov eax, dword ptr [rdi - 4]; mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x3c9ff; xor eax, eax; ret; 
0x000000000043c541: mov eax, dword ptr [rdi - 8]; cmp rcx, rax; jne 0x3c9f3; xor eax, eax; ret; 
0x000000000043bfb7: mov eax, dword ptr [rdi - 8]; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x3c9f3; xor eax, eax; ret; 
0x00000000004276c5: mov eax, dword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x00000000004285a1: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x2ae2a6], 1; mov dword ptr [rip + 0x2ae298], eax; ret; 
0x0000000000428561: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x2ae2e6], 1; mov qword ptr [rip + 0x2ae2b3], rax; ret; 
0x0000000000428541: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x2ae306], 1; mov qword ptr [rip + 0x2ae2cb], rax; ret; 
0x00000000004285c1: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x2b082a], eax; ret; 
0x0000000000428441: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x2ae43d], rax; ret; 
0x00000000004283d1: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x2ae45d], rax; ret; 
0x00000000004283c1: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x2ae475], rax; ret; 
0x00000000004810a3: mov eax, dword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000048db2c: mov eax, dword ptr [rdx + 4]; ret; 
0x0000000000449f36: mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000048ed46: mov eax, dword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000040f9b8: mov eax, dword ptr [rdx + rsi]; mov dword ptr [rip + 0x2c89c7], eax; lea rax, [rip + 0x2c89b8]; ret; 
0x000000000049c158: mov eax, dword ptr [rdx]; mov qword ptr [rbx + 0x98], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000494930: mov eax, dword ptr [rip + 0x244fea]; ret; 
0x000000000048e821: mov eax, dword ptr [rip + 0x247911]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x24abd7]; mov qword ptr [rsi], rax; ret; 
0x000000000048e82b: mov eax, dword ptr [rip + 0x24abd7]; mov qword ptr [rsi], rax; ret; 
0x000000000048e7ba: mov eax, dword ptr [rip + 0x24ac50]; ret; 
0x000000000048497f: mov eax, dword ptr [rip + 0x254ee7]; test eax, eax; jne 0x849e6; mov eax, 0x101; syscall; 
0x0000000000466cd1: mov eax, dword ptr [rip + 0x272201]; ret; 
0x000000000045e7f1: mov eax, dword ptr [rip + 0x27b191]; ret; 
0x000000000045aee0: mov eax, dword ptr [rip + 0x27ea3a]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000458d80: mov eax, dword ptr [rip + 0x280ae6]; test eax, eax; jne 0x58da0; mov eax, 3; syscall; 
0x0000000000458bed: mov eax, dword ptr [rip + 0x280c79]; test eax, eax; jne 0x58c58; mov eax, 0x48; syscall; 
0x0000000000458ab0: mov eax, dword ptr [rip + 0x280db6]; test eax, eax; jne 0x58ad0; mov eax, 1; syscall; 
0x00000000004589e0: mov eax, dword ptr [rip + 0x280e86]; test eax, eax; jne 0x58a00; xor eax, eax; syscall; 
0x0000000000427a01: mov eax, dword ptr [rip + 0x2ae759]; ret; 
0x0000000000428a46: mov eax, dword ptr [rip + 0x2b0384]; test eax, eax; je 0x28a60; mov dword ptr [rip + 0x2b0376], 0; ret; 
0x0000000000402350: mov eax, dword ptr [rip + 0x2d3dae]; ret; 
0x0000000000401f60: mov eax, dword ptr [rip + 0x2d41c2]; test eax, eax; js 0x2010; add rsp, 8; ret; 
0x000000000049d472: mov eax, dword ptr [rsi + 0x10]; ret; 
0x00000000004064f0: mov eax, dword ptr [rsi + 0x14]; cmp dword ptr [rdi + 0x14], eax; sete al; ret; 
0x0000000000406aa6: mov eax, dword ptr [rsi + 0x18]; cmp edx, 1; jbe 0x6ab8; cmp ecx, eax; setb al; ret; 
0x000000000049a301: mov eax, dword ptr [rsi + 0xa8]; ret; 
0x000000000049a2d4: mov eax, dword ptr [rsi + 0xb0]; ret; 
0x000000000049a2f1: mov eax, dword ptr [rsi + 0xb8]; ret; 
0x000000000049d491: mov eax, dword ptr [rsi + 8]; ret; 
0x000000000042046b: mov eax, dword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000047b40c: mov eax, dword ptr [rsi + rax*8]; jmp rax; 
0x00000000004705d1: mov eax, dword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x0000000000470c29: mov eax, dword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x000000000048033f: mov eax, dword ptr [rsi]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049c5f6: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000459a96: mov eax, dword ptr [rsp + 0x10]; call rax; 
0x0000000000420d68: mov eax, dword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000040ff43: mov eax, dword ptr [rsp + 0x18]; call rax; 
0x0000000000420d6d: mov eax, dword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000004623dc: mov eax, dword ptr [rsp + 0x20]; call rax; 
0x0000000000458dca: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x0000000000407e3c: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004079d4: mov eax, dword ptr [rsp + 4]; jne 0x79df; add rsp, 0x18; ret; 
0x0000000000458a3a: mov eax, dword ptr [rsp + 8]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000041cc1d: mov eax, dword ptr [rsp + 8]; call rax; 
0x00000000004960ef: mov eax, dword ptr [rsp]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000049a066: mov eax, dword ptr [rsp]; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000499d6a: mov eax, dword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000048f158: mov eax, dword ptr fs:[rax]; ret; 
0x0000000000429c70: mov eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041c8e9: mov eax, eax; jne 0x1c90c; add rsp, 0x118; ret; 
0x0000000000484a03: mov eax, eax; mov edx, dword ptr [rsp + 0x1c]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000458c6a: mov eax, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x0000000000458ae9: mov eax, eax; mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x0000000000458a19: mov eax, eax; mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x0000000000431acf: mov eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004573d2: mov eax, eax; ret; 
0x0000000000483f74: mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x00000000004581e2: mov eax, eax; syscall; 
0x0000000000482db1: mov eax, eax; vzeroupper; ret; 
0x0000000000459939: mov eax, ebp; mov esi, 3; pop rbp; pop r12; jmp rax; 
0x0000000000431f82: mov eax, ebp; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000041f28b: mov eax, ebp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000040a0ba: mov eax, ebp; pop rbp; pop r12; pop r13; ret; 
0x000000000045a474: mov eax, ebp; pop rbx; pop rbp; jmp rax; 
0x0000000000459922: mov eax, ebp; pop rbx; pop rbp; pop r12; mov esi, 2; jmp rax; 
0x0000000000409fc1: mov eax, ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000409761: mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x00000000004096c3: mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000421acd: mov eax, ebp; syscall; 
0x00000000004938a3: mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x00000000004039bc: mov eax, ebx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000404818: mov eax, ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045b105: mov eax, ebx; and eax, 0xc; cmp eax, 4; je 0x5b110; ret; 
0x0000000000401d9b: mov eax, ebx; jne 0x1ee3; add rsp, 0x20; pop rbx; ret; 
0x0000000000491a33: mov eax, ebx; jne 0x91a55; add rsp, 0x110; pop rbx; ret; 
0x00000000004978d7: mov eax, ebx; jne 0x978ec; add rsp, 0x40; pop rbx; ret; 
0x00000000004979be: mov eax, ebx; jne 0x979d4; add rsp, 0x50; pop rbx; ret; 
0x000000000049c886: mov eax, ebx; mov rcx, r12; mov rdx, qword ptr [r12]; mov esi, 1; mov edi, 1; call rax; 
0x000000000049c1d0: mov eax, ebx; mov rcx, r12; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x000000000041fa68: mov eax, ebx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004011cb: mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x000000000040107f: mov eax, ebx; pop rbx; pop rbp; ret; 
0x0000000000403723: mov eax, ebx; pop rbx; ret; 
0x0000000000493767: mov eax, ecx; adc eax, eax; ret; 
0x0000000000459740: mov eax, ecx; mov r9, qword ptr [rsp + 8]; syscall; 
0x0000000000459740: mov eax, ecx; mov r9, qword ptr [rsp + 8]; syscall; cmp rax, -0xfff; jae 0x59752; ret; 
0x000000000048dbcf: mov eax, ecx; neg rax; test r8b, r8b; cmove rcx, rax; mov rax, rcx; ret; 
0x00000000004755b5: mov eax, ecx; ret; 
0x00000000004572e8: mov eax, ecx; shr eax, 0xe; and eax, 0x3fc00; pop rbx; ret; 
0x0000000000457333: mov eax, ecx; shr eax, 6; and eax, 0x3fffc00; pop rbx; ret; 
0x000000000041c89b: mov eax, ecx; syscall; 
0x0000000000401a1c: mov eax, edi; add rsp, 0x18; ret; 
0x0000000000421cb3: mov eax, edi; mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000040135b: mov eax, edi; pop rbp; pop r12; ret; 
0x00000000004012af: mov eax, edi; pop rbx; pop rbp; ret; 
0x0000000000401302: mov eax, edi; pop rbx; ret; 
0x0000000000400dc0: mov eax, edi; push rbx; mov rbx, rax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000421ce4: mov eax, edi; ret; 
0x0000000000429b05: mov eax, edx; add rsp, 8; ret; 
0x000000000048294c: mov eax, edx; mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000047567e: mov eax, edx; pop rbp; pop r12; ret; 
0x0000000000477c5a: mov eax, edx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000407740: mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000004573d6: mov eax, edx; pop rbx; ret; 
0x0000000000429b11: mov eax, edx; ret; 
0x000000000041003a: mov eax, edx; syscall; 
0x0000000000458784: mov eax, esi; ja 0x587b8; mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x00000000004587d3: mov eax, esi; ja 0x58808; mov edi, eax; mov rsi, rdx; mov eax, 5; syscall; 
0x00000000004848a4: mov eax, esi; ja 0x848d8; mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x000000000041e752: mov eax, esi; jne 0x1e75f; add rsp, 0xd0; pop rbx; ret; 
0x000000000041e8e1: mov eax, esi; jne 0x1e8ef; add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x000000000045b2a1: mov eax, esi; jne 0x5b2af; add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x000000000048db21: mov eax, esi; lea rcx, [rdx + 4]; cmp rcx, r8; jne 0x8dacb; mov eax, dword ptr [rdx + 4]; ret; 
0x0000000000491b17: mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000422f8a: mov eax, esi; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000041f118: mov eax, esi; pop rbp; pop r12; ret; 
0x000000000047f2d4: mov eax, esi; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000042d0ad: mov eax, esi; pop rbx; ret; 
0x000000000041f153: mov eax, esi; ret; 
0x00000000004581d2: mov eax, esi; syscall; 
0x000000000049c2a0: mov eax, esp; mov rcx, rbp; mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000047e408: mov eax, esp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040969a: mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x000000000045b104: mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x5b110; ret; 
0x0000000000409699: mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000431f81: mov eax, r13d; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000421acc: mov eax, r13d; syscall; 
0x000000000041c8e8: mov eax, r8d; jne 0x1c90c; add rsp, 0x118; ret; 
0x00000000004581e1: mov eax, r8d; syscall; 
0x00000000004755b4: mov eax, r9d; ret; 
0x000000000042186e: mov eax, r9d; syscall; 
0x000000000043c1d4: mov ebp, 0x4e6f0ff3; mov ebp, 0xf66bdb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004430d7: mov ebp, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004d1efd: mov ebp, 0xab600000; cld; call qword ptr [rdx + 1]; 
0x00000000004d1f65: mov ebp, 0xae280000; cld; jmp qword ptr [rdx + 1]; 
0x00000000004b0f45: mov ebp, 0xba5ffffa; cli; lcall [rdx + rdi*4 - 0x414f0006]; cli; jmp qword ptr [rdi + 0x63]; 
0x00000000004b9b24: mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x00000000004c0bfd: mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x0000000000425eda: mov ebp, 0xc4ebffff; nop; mov eax, 0xffffffff; ret; 
0x000000000043c1d9: mov ebp, 0xf66bdb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000482578: mov ebp, 0xf80148c0; ret; 
0x00000000004827fc: mov ebp, 0xf80148c6; ret; 
0x00000000004c2366: mov ebp, 0xfb67d10d; ret; 
0x0000000000479928: mov ebp, 0xfffff730; call qword ptr [rbx + 0x38]; 
0x00000000004788fe: mov ebp, 0xfffff730; call rax; 
0x00000000004795f3: mov ebp, 0xfffff730; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000047899c: mov ebp, 0xfffff730; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000046d635: mov ebp, 0xfffff758; call qword ptr [rbx + 0x38]; 
0x000000000046dbdf: mov ebp, 0xfffff758; call qword ptr [rcx + 0x38]; 
0x000000000046d3ec: mov ebp, 0xfffff758; call rax; 
0x000000000046d482: mov ebp, 0xfffff758; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000047b8f9: mov ebp, 0xfffffae8; add byte ptr [rcx - 0x77], al; ret 0x1674; 
0x000000000047aedc: mov ebp, 0xfffffb18; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x258dad]; jmp rax; 
0x000000000046f681: mov ebp, 0xfffffb18; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000046f415: mov ebp, 0xfffffb48; mov rsi, r12; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000048d344: mov ebp, 0xfffffb94; mov eax, 0x14; syscall; 
0x00000000004747d5: mov ebp, 0xffffff40; call rax; 
0x0000000000421ac7: mov ebp, 0xffffff7c; mov eax, r13d; syscall; 
0x000000000049c8c9: mov ebp, dword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049ca47: mov ebp, dword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000004795e8: mov ebp, dword ptr [rbp - 0x8f8]; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000049ca53: mov ebp, dword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000004211d0: mov ebp, dword ptr [rbx + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000420439: mov ebp, dword ptr [rdi + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000491b1d: mov ebp, ecx; nop; jmp rdx; 
0x0000000000407a07: mov ebp, edi; sub rsp, 8; movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x0000000000409675: mov ebp, esi; mov rbx, rdi; mov edi, eax; call rdx; 
0x000000000047b5a3: mov ebx, 0x89000025; ret 0x349; 
0x00000000004d1cdd: mov ebx, 0xa4c00000; cld; jmp qword ptr [rsi]; 
0x000000000045b0a4: mov ebx, 0xafb8341; je 0x5b0ac; ret; 
0x00000000004b0edd: mov ebx, 0xbaf8fffa; cli; jmp rbx; 
0x00000000004c0bfb: mov ebx, 0xbfbebdbc; rol cl, 0xc2; ret; 
0x000000000043c359: mov ebx, 0xf66bbb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000041cf24: mov ebx, 0xfffd29e9; jmp qword ptr [rsi + 0xf]; 
0x0000000000401088: mov ebx, 0xffffffea; add rsp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x00000000004011c6: mov ebx, 0xffffffea; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x000000000047aed5: mov ebx, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x258dad]; jmp rax; 
0x000000000048ba39: mov ebx, dword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x000000000043e4c1: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e4a5: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000490fbd: mov ebx, dword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000490f4b: mov ebx, dword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000421e2f: mov ebx, eax; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov edx, 0x130; pop rbx; ret; 
0x00000000004919f1: mov ebx, eax; mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x0000000000400dc4: mov ebx, eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000480cf8: mov ebx, edi; jne 0x80d68; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x0000000000409678: mov ebx, edi; mov edi, eax; call rdx; 
0x0000000000469cd6: mov ebx, edi; test rax, rax; je 0x69cdf; call rax; 
0x00000000004096eb: mov ebx, esi; mov rdi, rsi; call rax; 
0x00000000004846f0: mov ebx, esi; sub rsp, 8; syscall; 
0x000000000048eead: mov ebx, esp; mov rsi, rbx; syscall; 
0x000000000041c896: mov ecx, 0x27; mov eax, ecx; syscall; 
0x00000000004254a9: mov ecx, 0x48000000; add esp, 0x38; pop rbx; pop rbp; ret; 
0x00000000004849ac: mov ecx, 0x48000000; add esp, 0x78; ret; 
0x00000000004085db: mov ecx, 0x48000996; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004707e3: mov ecx, 0x48002631; mov eax, dword ptr [rax + rdi*8]; jmp rax; 
0x0000000000440a53: mov ecx, 0x490006e2; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dc93: mov ecx, 0x4900070e; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443557: mov ecx, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004d1ad5: mov ecx, 0x87d80000; cld; jmp qword ptr [rcx]; 
0x00000000004d1aed: mov ecx, 0x88300000; cld; jmp qword ptr [rcx + 9]; 
0x00000000004b9874: mov ecx, 0xbc00000d; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x00000000004c0bf9: mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x0000000000484c10: mov ecx, 0xc; mov eax, ecx; syscall; 
0x000000000046a54e: mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000049c482: mov ecx, 0xdf; add byte ptr [rdx + 0x48], dh; add esp, 0x18; ret; 
0x000000000043c459: mov ecx, 0xf66b9b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000431fe4: mov ecx, 0xffff31e9; jmp qword ptr [rsi + 0xf]; 
0x0000000000458711: mov ecx, 0xffffffc0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000046a2b4: mov ecx, 0xffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000046f67a: mov ecx, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000047b44a: mov ecx, 1; jmp rax; 
0x0000000000459801: mov ecx, 9; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x00000000004ca1e4: mov ecx, ds; cmc; call qword ptr [rdi + 1]; 
0x000000000041fbc1: mov ecx, dword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000047fe02: mov ecx, dword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000004c6158: mov ecx, dword ptr [rbp - 0x72c70003]; std; call rax; 
0x0000000000420bd8: mov ecx, dword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000041fbbd: mov ecx, dword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000044773f: mov ecx, dword ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000044772c: mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000044771a: mov ecx, dword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000004812ab: mov ecx, dword ptr [rdx + 0x48]; cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x0000000000449f33: mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000453b14: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000453b34: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000453484: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000453474: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000453b95: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000453bb5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000453505: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004534e5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000453ad5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000453445: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000453bf8: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000453548: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000453c18: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000453568: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000453bd9: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000453529: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000453b55: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004534a5: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000453af4: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000453464: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000453b75: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000004534c5: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000045615f: mov ecx, dword ptr [rsi + rdx - 4]; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000045614f: mov ecx, dword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000043e865: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e881: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ea45: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ea61: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ec25: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ec41: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ee15: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043ee31: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f015: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f031: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f215: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f231: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043ea75: mov ecx, dword ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000004554ff: mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x55710; xor eax, eax; ret; 
0x000000000043c246: mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x3c9ff; xor eax, eax; ret; 
0x000000000043ee53: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043f053: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043f253: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043bfe1: mov ecx, dword ptr [rsi - 4]; mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x3c9ff; xor eax, eax; ret; 
0x0000000000443f14: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000443e94: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000443e14: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000443f94: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043bfbb: mov ecx, dword ptr [rsi - 8]; cmp rcx, rax; jne 0x3c9f3; xor eax, eax; ret; 
0x0000000000443d85: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000443cf5: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000443c65: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043c53d: mov ecx, dword ptr [rsi - 8]; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x3c9f3; xor eax, eax; ret; 
0x000000000043e685: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e6a1: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000453990: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x0000000000453370: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x00000000004539e1: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000004533b1: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000004448c3: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000444853: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004447e3: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004539a0: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000453380: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000004539f1: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000004533c1: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000004539c0: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x0000000000453390: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000453a11: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000004533d1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000453a31: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000004533e1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000444705: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444695: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444625: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004445b5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444545: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004444d5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444465: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000453a51: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000004533f1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000453a71: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000453401: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000453a91: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000453411: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000004449a5: mov ecx, dword ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x0000000000453971: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000453351: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000461e18: mov ecx, dword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000046515c: mov ecx, dword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004623cd: mov ecx, dword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000490fc7: mov ecx, dword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000490f55: mov ecx, dword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000460cbf: mov ecx, dword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000491248: mov ecx, dword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x9127e; add rsp, 0x68; ret; 
0x0000000000491678: mov ecx, dword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x916ae; add rsp, 0x68; ret; 
0x00000000004913a9: mov ecx, dword ptr [rsp + 0x68]; xor rcx, qword ptr fs:[0x28]; jne 0x913ee; add rsp, 0x78; ret; 
0x0000000000459743: mov ecx, dword ptr [rsp + 8]; syscall; 
0x0000000000459743: mov ecx, dword ptr [rsp + 8]; syscall; cmp rax, -0xfff; jae 0x59752; ret; 
0x000000000044772b: mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000453903: mov ecx, eax; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045dadb: mov ecx, ebp; call rbx; 
0x000000000049c2a3: mov ecx, ebp; mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000483413: mov ecx, ebp; xor r8d, r8d; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x0000000000481354: mov ecx, edi; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000481530: mov ecx, edi; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000483565: mov ecx, edi; mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x0000000000456df1: mov ecx, edx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000004264b0: mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x0000000000456132: mov ecx, edx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004264ea: mov ecx, edx; xor edx, edx; jmp rax; 
0x0000000000483575: mov ecx, esi; call rbx; 
0x000000000049752a: mov ecx, esi; sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x97510; mov eax, 1; ret; 
0x000000000049c889: mov ecx, esp; mov rdx, qword ptr [r12]; mov esi, 1; mov edi, 1; call rax; 
0x000000000049c1d3: mov ecx, esp; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x000000000045dace: mov ecx, esp; push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x00000000004339ca: mov edi, 0x250001; or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x00000000004c3fb1: mov edi, 0x3ca045d6; stosb byte ptr [rdi], al; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000046ec3a: mov edi, 0x440f48c0; ret 0xae9; 
0x000000000041d87d: mov edi, 0x4801002b; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000400b1c: mov edi, 0x4c61c8; call 0x9eac0; mov byte ptr [rip + 0x2d77f3], 1; pop rbp; ret; 
0x0000000000442f57: mov edi, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000400aac: mov edi, 0x6d7c10; jmp rax; 
0x000000000041452d: mov edi, 0x8948fffe; ret 0xf748; 
0x0000000000493a8b: mov edi, 0x894cffff; or byte ptr [r9 + r13 - 0x30], r8b; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000004c381c: mov edi, 0x99b51319; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000004b0ef9: mov edi, 0xbd5ffffa; cli; jmp qword ptr [rdi]; 
0x00000000004b0f11: mov edi, 0xbf1afffa; cli; lcall [rdx + rdi*4 - 0x42260006]; cli; jmp qword ptr [rax]; 
0x00000000004b0ef5: mov edi, 0xbf90fffa; cli; lcall [rdi - 0x43]; cli; jmp qword ptr [rdi]; 
0x00000000004a61cc: mov edi, 0xbfffffd8; fdivr st(7); call rdx; 
0x000000000043c009: mov edi, 0xf66bfb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000458864: mov edi, 0xffffff9c; syscall; 
0x00000000004012fb: mov edi, 0xffffffea; je 0x1310; mov eax, edi; pop rbx; ret; 
0x0000000000401a15: mov edi, 0xffffffea; je 0x1a28; mov eax, edi; add rsp, 0x18; ret; 
0x000000000049c1dc: mov edi, 1; call rax; 
0x000000000049cf4c: mov edi, 1; jmp rax; 
0x0000000000458470: mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000041c8cb: mov edi, 2; mov eax, 0xe; syscall; 
0x000000000041d6b4: mov edi, dword ptr [rax + 0x20]; call rdx; 
0x000000000048d343: mov edi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x000000000046f414: mov edi, dword ptr [rbp - 0x4b8]; mov rsi, r12; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000421ac6: mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x000000000046d634: mov edi, dword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000046dbde: mov edi, dword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000046d3eb: mov edi, dword ptr [rbp - 0x8a8]; call rax; 
0x000000000046d481: mov edi, dword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000479927: mov edi, dword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x00000000004788fd: mov edi, dword ptr [rbp - 0x8d0]; call rax; 
0x00000000004795f2: mov edi, dword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000047899b: mov edi, dword ptr [rbp - 0x8d0]; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x00000000004747d4: mov edi, dword ptr [rbp - 0xc0]; call rax; 
0x000000000049c8d1: mov edi, dword ptr [rbp - 8]; leave; ret; 
0x000000000049ca4f: mov edi, dword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000041cc19: mov edi, dword ptr [rbp]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000048bc2f: mov edi, dword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000491b14: mov edi, dword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000497911: mov edi, dword ptr [rdi]; call 0x997c0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000049783d: mov edi, dword ptr [rdi]; call 0x99ac0; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x00000000004c2626: mov edi, dword ptr [rdx]; ret; 
0x0000000000484a0e: mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x00000000004919f4: mov edi, dword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x00000000004600f0: mov edi, dword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000460cc9: mov edi, dword ptr [rsp + 0x30]; call rbx; 
0x0000000000461e22: mov edi, dword ptr [rsp + 0x38]; call rbx; 
0x0000000000463409: mov edi, dword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000465166: mov edi, dword ptr [rsp + 0x40]; call rbx; 
0x00000000004623d7: mov edi, dword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000458c71: mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x000000000040ff3e: mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004260bb: mov edi, dword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004264e1: mov edi, dword ptr [rsp + 8]; add rsp, 0x20; pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x0000000000459a91: mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004259c6: mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000483102: mov edi, dword ptr [rsp]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x0000000000400c5d: mov edi, eax; call 0x1f000; mov eax, 0; leave; ret; 
0x000000000040059d: mov edi, eax; call 0x2f470; mov qword ptr [rip + 0x2d8b49], 0; pop rax; ret; 
0x0000000000420d76: mov edi, eax; call qword ptr [rax + 8]; 
0x0000000000432934: mov edi, eax; call rcx; 
0x000000000040967a: mov edi, eax; call rdx; 
0x000000000041c8a0: mov edi, eax; mov eax, 0xba; syscall; 
0x00000000004848fa: mov edi, eax; mov r10d, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x0000000000458789: mov edi, eax; mov rsi, rdx; mov eax, 4; syscall; 
0x00000000004587d7: mov edi, eax; mov rsi, rdx; mov eax, 5; syscall; 
0x00000000004848a9: mov edi, eax; mov rsi, rdx; mov eax, 6; syscall; 
0x000000000047f791: mov edi, ebp; call qword ptr [rax + 0x38]; 
0x0000000000498ee2: mov edi, ebp; call qword ptr [rax]; 
0x000000000041fb36: mov edi, ebp; call qword ptr [rbp + 0x20]; 
0x0000000000498fbe: mov edi, ebp; call qword ptr [rcx]; 
0x0000000000431cb6: mov edi, ebp; call rax; 
0x0000000000483421: mov edi, ebp; call rbx; 
0x000000000041cd3e: mov edi, ebp; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000004597aa: mov edi, ebp; mov eax, 9; syscall; 
0x000000000042186c: mov edi, ebp; mov eax, r9d; syscall; 
0x0000000000483572: mov edi, ebp; mov r9, r14; call rbx; 
0x000000000041cca9: mov edi, ebp; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000420bd2: mov edi, ebp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000041fbb7: mov edi, ebp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000041d5b8: mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000045a46d: mov edi, ebx; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x0000000000423228: mov edi, ebx; call qword ptr [rax + 0x18]; 
0x0000000000422ba4: mov edi, ebx; call qword ptr [rax + 0x40]; 
0x000000000047f922: mov edi, ebx; call qword ptr [rax + 0x58]; 
0x000000000042336a: mov edi, ebx; call qword ptr [rax + 0x78]; 
0x00000000004258ac: mov edi, ebx; call qword ptr [rbp + 0x18]; 
0x0000000000425f1d: mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x0000000000426cad: mov edi, ebx; call qword ptr [rbp + 0x30]; 
0x000000000041ef28: mov edi, ebx; call qword ptr [rbp + 0x60]; 
0x0000000000425ea4: mov edi, ebx; call qword ptr [rbp + 0x68]; 
0x0000000000422e9f: mov edi, ebx; call qword ptr [rbp + 0x70]; 
0x0000000000422696: mov edi, ebx; call rax; 
0x000000000049f323: mov edi, ebx; jne 0x9f310; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004675e7: mov edi, ebx; mov dword ptr [rbp - 0x48], r8d; call 0x5c8b0; mov rdi, r14; call rbx; 
0x0000000000458aee: mov edi, ebx; mov eax, 1; syscall; 
0x0000000000458dac: mov edi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x0000000000420b36: mov edi, ebx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000425a5d: mov edi, ebx; pop rbx; pop rbp; jmp rax; 
0x00000000004801bf: mov edi, ebx; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000458a1e: mov edi, ebx; xor eax, eax; syscall; 
0x000000000048b089: mov edi, ecx; call 0x59880; test eax, eax; js 0x8b0a2; pop rbx; ret; 
0x000000000047c324: mov edi, edi; call qword ptr [rax + 0x38]; 
0x000000000047b359: mov edi, edi; call qword ptr [rcx + 0x38]; 
0x00000000004205b3: mov edi, edi; call rax; 
0x000000000045e3cb: mov edi, edi; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000040203c: mov edi, edi; movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; jmp rax; 
0x000000000047b14b: mov edi, edi; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000401f50: mov edi, edi; sub rsp, 8; movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; jmp rax; 
0x0000000000493be1: mov edi, edx; mov byte ptr [rsi], al; jne 0x93bc0; mov rax, rsi; ret; 
0x00000000004581d0: mov edi, edx; mov eax, esi; syscall; 
0x00000000004581df: mov edi, edx; mov eax, r8d; syscall; 
0x00000000004678bb: mov edi, edx; mov qword ptr [rbp - 0x98], rdx; call 0x5c8b0; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x000000000048294f: mov edi, esi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000046f887: mov edi, esi; call qword ptr [rax + 0x38]; 
0x00000000004096ee: mov edi, esi; call rax; 
0x00000000004675f3: mov edi, esi; call rbx; 
0x00000000004678d1: mov edi, esi; call rdx; 
0x000000000040962a: mov edi, esi; jmp rax; 
0x000000000046ff0f: mov edi, esi; mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000045e3bf: mov edi, esi; mov qword ptr [rbp - 0x70], rsi; call 0x5c8b0; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000046f963: mov edi, esi; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000046f41e: mov edi, esi; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000481360: mov edi, esp; call rbx; 
0x0000000000409753: mov edi, esp; call rdx; 
0x000000000049276e: mov edi, esp; jmp qword ptr [rsi + 0x2e]; 
0x0000000000425fb6: mov edi, esp; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000458f09: mov edi, esp; mov eax, 0x4f; syscall; 
0x000000000042186b: mov edi, r13d; mov eax, r9d; syscall; 
0x00000000004572d6: mov edx, 0; cmove rax, rdx; pop rbx; ret; 
0x0000000000432b79: mov edx, 0; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000048ed49: mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000044f316: mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000047f788: mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000421e36: mov edx, 0x130; pop rbx; ret; 
0x000000000042ae3f: mov edx, 0x3948002a; ret; 
0x000000000041002f: mov edx, 0x3c; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000466e21: mov edx, 0x48000000; add esp, 0xb8; pop rbx; pop r12; ret; 
0x0000000000482572: mov edx, 0x48000001; bsr eax, eax; add rax, rdi; ret; 
0x000000000043bb52: mov edx, 0x4900072e; movsxd rcx, dword ptr [rbx + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000004433d7: mov edx, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000045aee6: mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x000000000041d8d3: mov edx, 0x6c; call 0x10920; xor eax, eax; ret; 
0x000000000049a18b: mov edx, 0xb60f0002; leave; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000004b0f19: mov edx, 0xbdd9fffa; cli; jmp qword ptr [rax]; 
0x00000000004b0f4d: mov edx, 0xbeb0fffa; cli; jmp qword ptr [rdi + 0x63]; 
0x0000000000459936: mov edx, 0xe889485b; mov esi, 3; pop rbp; pop r12; jmp rax; 
0x000000000041c8a3: mov edx, 0xf000000; add eax, 0x8944c689; ret 0xeab8; 
0x000000000043c3d9: mov edx, 0xf66bab2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000049b111: mov edx, 0xfc0c7; add byte ptr [rax], al; syscall; 
0x00000000004587a1: mov edx, 0xffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000458a51: mov edx, 0xffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000046a2bf: mov edx, 0xffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000045fec7: mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000403464: mov edx, 0xffffffff; mov byte ptr [rax + 0x26], 1; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x18], rdx; add rsp, 8; ret; 
0x00000000004756c7: mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x000000000045c86f: mov edx, 1; je 0x5c880; mov dword ptr [rip + 0x27923c], edx; pop rbx; ret; 
0x000000000045b06d: mov edx, 1; mov eax, 0xca; syscall; 
0x000000000048daac: mov edx, 1; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000048a9c0: mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000421863: mov edx, 1; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000046a6b1: mov edx, 8; mov eax, 0xe; syscall; 
0x000000000046a554: mov edx, 8; mov eax, ecx; syscall; 
0x0000000000404674: mov edx, dword ptr [r15 + 0x10]; movsxd rdx, dword ptr [r14 + rdx*4]; add rdx, r14; jmp rdx; 
0x00000000004276f0: mov edx, dword ptr [rax + 8]; jne 0x27700; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000048015c: mov edx, dword ptr [rax]; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000046ff19: mov edx, dword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x00000000004678ca: mov edx, dword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x000000000049c2a6: mov edx, dword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000409684: mov edx, dword ptr [rbx + 0x10]; test rdx, rdx; je 0x96a8; mov rdi, rax; call rdx; 
0x0000000000494269: mov edx, dword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x000000000042268b: mov edx, dword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x000000000044dbff: mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000044c32d: mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000045b426: mov edx, dword ptr [rcx + rdx]; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000404675: mov edx, dword ptr [rdi + 0x10]; movsxd rdx, dword ptr [r14 + rdx*4]; add rdx, r14; jmp rdx; 
0x0000000000425827: mov edx, dword ptr [rdi + 0x18]; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000046d47d: mov edx, dword ptr [rdi + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000049427d: mov edx, dword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000004205a7: mov edx, dword ptr [rdi + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x00000000004942e4: mov edx, dword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000409747: mov edx, dword ptr [rdx + 0x28]; test rdx, rdx; je 0x9770; mov rsi, rbx; mov rdi, r12; call rdx; 
0x0000000000407bf0: mov edx, dword ptr [rdx + 0xc]; mov dword ptr [rbx + 0x28], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000494784: mov edx, dword ptr [rip + 0x244a4e]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000040ff33: mov edx, dword ptr [rip + 0x2c8ecf]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000453545: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000453565: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000478997: mov edx, dword ptr [rsi + 0x20]; mov rdi, qword ptr [rbp - 0x8d0]; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x00000000004449a1: mov edx, dword ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x00000000004448c0: mov edx, dword ptr [rsi + 1]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000444701: mov edx, dword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444850: mov edx, dword ptr [rsi + 2]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000444691: mov edx, dword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004539c2: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x0000000000453392: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x00000000004447e0: mov edx, dword ptr [rsi + 3]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000444621: mov edx, dword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004539a3: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000453383: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000004445b1: mov edx, dword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000453a54: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000004533f4: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000444541: mov edx, dword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000453a74: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000453404: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000004444d1: mov edx, dword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000453a13: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000004533d3: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000453a94: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000453414: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000444461: mov edx, dword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000453a33: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000004533e3: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000004539f4: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000004533c4: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000443f11: mov edx, dword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000443e91: mov edx, dword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000443e11: mov edx, dword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000443d81: mov edx, dword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000443cf1: mov edx, dword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000443c61: mov edx, dword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043e891: mov edx, dword ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000043ea71: mov edx, dword ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000043ec50: mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e688: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e868: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ea48: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ec28: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e884: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ea64: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ec44: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e6a4: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ee50: mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043f050: mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043f250: mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043e4c5: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043ee19: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f019: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f219: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e4a9: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043ee35: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f035: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f235: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e4e1: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000443f91: mov edx, dword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000453980: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x0000000000444930: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000004539d1: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x0000000000444771: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000453961: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000453341: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004919f9: mov edx, dword ptr [rsp + 0x10]; call rdx; 
0x000000000041cc11: mov edx, dword ptr [rsp + 0x10]; mov rsi, qword ptr [r15]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000483568: mov edx, dword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000041cca1: mov edx, dword ptr [rsp + 0x10]; mov rsi, r15; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000484a05: mov edx, dword ptr [rsp + 0x1c]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000490fc2: mov edx, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000490f50: mov edx, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x00000000004633ff: mov edx, dword ptr [rsp + 0x48]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000422fa3: mov edx, dword ptr [rsp + 8]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000049b933: mov edx, dword ptr [rsp + rax*8 + 0x30]; ja 0x9b519; movzx r11d, r11b; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x000000000049c1d9: mov edx, dword ptr [rsp]; mov edi, 1; call rax; 
0x000000000049c88c: mov edx, dword ptr [rsp]; mov esi, 1; mov edi, 1; call rax; 
0x0000000000458c66: mov edx, dword ptr [rsp]; mov r8d, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x000000000045734c: mov edx, eax; and edx, 0xf; movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x000000000041c8ac: mov edx, eax; mov eax, 0xea; syscall; 
0x0000000000458dae: mov edx, eax; mov eax, 3; syscall; 
0x0000000000423360: mov edx, eax; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000045973d: mov edx, eax; mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x00000000004848fd: mov edx, eax; mov rdx, rcx; mov eax, 0x106; syscall; 
0x000000000040a3f9: mov edx, eax; or edx, 0x40000000; test eax, eax; cmovns eax, edx; add rsp, 8; ret; 
0x000000000040646a: mov edx, eax; shr edx, 0x10; xor eax, edx; ret; 
0x00000000004795f9: mov edx, ebp; call qword ptr [rbx + 0x38]; 
0x0000000000498f60: mov edx, ebp; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000046dbd4: mov edx, ebp; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000045dad3: mov edx, ebp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x0000000000498edd: mov edx, ebp; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x0000000000498fb9: mov edx, ebp; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000498dc3: mov edx, ebp; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000479921: mov edx, ebp; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000047f91c: mov edx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000004747ce: mov edx, ebp; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000046d62e: mov edx, ebp; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000046dda9: mov edx, ebx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000484900: mov edx, ecx; mov eax, 0x106; syscall; 
0x000000000045af61: mov edx, ecx; mov eax, 0x19; syscall; 
0x000000000045af61: mov edx, ecx; mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x5af73; ret; 
0x000000000045af91: mov edx, ecx; mov eax, 0x9d; syscall; 
0x000000000045af91: mov edx, ecx; mov eax, 0x9d; syscall; cmp rax, -0xfff; jae 0x5afa3; ret; 
0x00000000004597ff: mov edx, ecx; mov ecx, 9; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x000000000046f86f: mov edx, ecx; mov qword ptr [rbp - 0x4f8], rcx; mov dword ptr [rbp - 0x508], r9d; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000045973a: mov edx, ecx; mov r10, r8; mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x0000000000421ac1: mov edx, ecx; mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x000000000046f424: mov edx, edi; call qword ptr [rax + 0x38]; 
0x0000000000422b9e: mov edx, edi; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000456df8: mov edx, edi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000047ac95: mov edx, esi; call qword ptr [rax + 0x38]; 
0x0000000000483419: mov edx, esi; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x000000000045885a: mov edx, esi; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x00000000004597a1: mov edx, esi; mov edx, r12d; mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x000000000047c31a: mov edx, esi; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000047b34c: mov edx, esi; mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000047c497: mov edx, esi; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x00000000004588e2: mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x00000000004595a1: mov edx, esi; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x0000000000484b6d: mov edx, esp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x0000000000458ae6: mov edx, esp; mov r8d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x0000000000458a16: mov edx, esp; mov r8d, eax; mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x0000000000420d65: mov edx, esp; mov rax, qword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000004597a4: mov edx, esp; mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x00000000004597a3: mov edx, r12d; mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x000000000041c8ab: mov edx, r8d; mov eax, 0xea; syscall; 
0x00000000004624b2: mov es, word ptr [rax + rax]; add bh, dh; ret 0; 
0x00000000004cf025: mov es, word ptr [rax]; add byte ptr [rax + 0x1e], cl; sti; jmp qword ptr [rbx]; 
0x0000000000458c32: mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000047bdde: mov esi, 0x48002582; mov eax, dword ptr [rax + rdi*8]; jmp rax; 
0x000000000045fdf1: mov esi, 0x4889194a; movsx r9, byte ptr [rdx + 0x1a]; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000045fdfc: mov esi, 0x48891b52; push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x00000000004675ee: mov esi, 0x4cffff52; mov edi, esi; call rbx; 
0x0000000000484b6f: mov esi, 0x5401; mov eax, ecx; syscall; 
0x00000000004c361a: mov esi, 0x5fd2fe07; insd dword ptr [rdi], dx; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x00000000004af750: mov esi, 0x64fff970; js 0xaf750; jmp rsp; 
0x000000000045b03b: mov esi, 0x80; cmp eax, edx; jne 0x5b04c; nop; mov eax, 0xca; syscall; 
0x000000000045b128: mov esi, 0x80; syscall; 
0x000000000048a9c5: mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000045b068: mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000045ef52: mov esi, 0x83480147; ret; 
0x000000000040ccd6: mov esi, 0x85ffff37; sar byte ptr [rax], 0x48; cmovne ebx, eax; mov rax, rbx; pop rbx; ret; 
0x0000000000471751: mov esi, 0x8900000b; ret 0x349; 
0x000000000047b055: mov esi, 0x8900002b; ret 0x349; 
0x0000000000464ad4: mov esi, 0x8941fffa; ret 0x5be9; 
0x0000000000414679: mov esi, 0x8d4dfffe; je 0x14686; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x000000000049c2a9: mov esi, 0xa; mov edi, 1; call rax; 
0x00000000004d1fdd: mov esi, 0xb0100000; cld; call qword ptr [rbx]; 
0x00000000004b0f09: mov esi, 0xba9cfffa; cli; jmp rbx; 
0x000000000045fdf8: mov esi, 0xbe0f1a4a; push rdx; sbb ecx, dword ptr [rcx + 0x50895048]; push rsp; ret; 
0x00000000004a6254: mov esi, 0xbeffffd8; fdivr st(7); call rax; 
0x0000000000402463: mov esi, 0xc0502100; call 0x59670; sar eax, 0x1f; add rsp, 8; and eax, 0xffffff83; ret; 
0x00000000004af96d: mov esi, 0xc0c0fff9; stc; inc eax; ret 0xfff9; 
0x00000000004c0bfe: mov esi, 0xc2c1c0bf; ret; 
0x00000000004755ad: mov esi, 0xc7394406; ja 0x75590; mov eax, r9d; ret; 
0x00000000004631ee: mov esi, 0xe8000001; sub edi, edx; cli; jmp qword ptr [rsi + 0xf]; 
0x0000000000457264: mov esi, 0xf000000; lahf; ret 0xea81; 
0x000000000043c0d9: mov esi, 0xf66beb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004c1486: mov esi, 0xfa1fb992; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x0000000000480e0c: mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000423222: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004258a6: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000426d43: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004705d4: mov esi, 1; jmp rax; 
0x000000000049c88f: mov esi, 1; mov edi, 1; call rax; 
0x000000000047e66c: mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000459928: mov esi, 2; jmp rax; 
0x000000000045993b: mov esi, 3; pop rbp; pop r12; jmp rax; 
0x0000000000458c6c: mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x000000000041d5b5: mov esi, dword ptr [rax + 0x20]; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x00000000004687d4: mov esi, dword ptr [rax + rsi*8]; test rsi, rsi; je 0x687de; call rsi; 
0x000000000049c8cd: mov esi, dword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049ca4b: mov esi, dword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000046f880: mov esi, dword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000047c31d: mov esi, dword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000046ff20: mov esi, dword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000045e3ce: mov esi, dword ptr [rbp - 0x70]; call rsi; 
0x000000000046dbd7: mov esi, dword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000040fe26: mov esi, dword ptr [rbx]; jne 0x10040; call qword ptr [rbx + 0x10]; 
0x0000000000459a8e: mov esi, dword ptr [rbx]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000046d479: mov esi, dword ptr [rdi + 0x18]; mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000049790d: mov esi, dword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x997c0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000497839: mov esi, dword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x99ac0; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000041cc16: mov esi, dword ptr [rdi]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000044773c: mov esi, dword ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000456163: mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000044772a: mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000456154: mov esi, dword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x0000000000447717: mov esi, dword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000484a0a: mov esi, dword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x000000000040ff3a: mov esi, dword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004260b6: mov esi, dword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000045dad6: mov esi, dword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x000000000048356d: mov esi, dword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000042e77e: mov esi, dword ptr [rsp + 0x28]; add rsp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000042eda9: mov esi, dword ptr [rsp + 0x28]; add rsp, 0x18; pop rbx; pop rbp; jmp rax; 
0x00000000004600eb: mov esi, dword ptr [rsp + 0x28]; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000431cb1: mov esi, dword ptr [rsp + 0x28]; mov rdi, rbp; call rax; 
0x0000000000460cc4: mov esi, dword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000461e1d: mov esi, dword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000463404: mov esi, dword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000465161: mov esi, dword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004623d2: mov esi, dword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000042f671: mov esi, dword ptr [rsp + 0x68]; call rax; 
0x00000000004a1459: mov esi, dword ptr [rsp + 0x98]; mov rdi, r13; call rax; 
0x00000000004a0b69: mov esi, dword ptr [rsp + 0x98]; mov rdi, r15; call rax; 
0x00000000004259c1: mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000041c8a9: mov esi, eax; mov edx, r8d; mov eax, 0xea; syscall; 
0x000000000047b34f: mov esi, eax; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000047c49a: mov esi, eax; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x0000000000458aec: mov esi, ebp; mov edi, ebx; mov eax, 1; syscall; 
0x0000000000458a1c: mov esi, ebp; mov edi, ebx; xor eax, eax; syscall; 
0x00000000004830ff: mov esi, ebp; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000046ddac: mov esi, ebp; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000041cd3b: mov esi, ebp; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000432931: mov esi, ebp; mov rdi, rax; call rcx; 
0x00000000004597a7: mov esi, ebp; mov rdi, rbp; mov eax, 9; syscall; 
0x0000000000423367: mov esi, ebp; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000422e9c: mov esi, ebp; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004312e2: mov esi, ebp; pop rbp; pop r12; pop r13; pop r14; jmp rax; 
0x000000000041d6a4: mov esi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000048c69b: mov esi, ebp; xor eax, eax; call 0x8d9b0; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x0000000000421869: mov esi, ebx; mov edi, r13d; mov eax, r9d; syscall; 
0x0000000000409750: mov esi, ebx; mov rdi, r12; call rdx; 
0x000000000046f960: mov esi, ebx; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000048eeb0: mov esi, ebx; syscall; 
0x000000000046a54c: mov esi, ecx; mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000041c8c9: mov esi, ecx; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000047ac87: mov esi, ecx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000046d631: mov esi, ecx; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000047b148: mov esi, ecx; mov rdi, r15; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x00000000004595a5: mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x0000000000458862: mov esi, edi; mov edi, 0xffffff9c; syscall; 
0x000000000049cf4a: mov esi, edi; mov edi, 1; jmp rax; 
0x000000000046d3e8: mov esi, edi; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000041cca6: mov esi, edi; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000004747cb: mov esi, edi; mov rdx, r13; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000045878c: mov esi, edx; mov eax, 4; syscall; 
0x00000000004587da: mov esi, edx; mov eax, 5; syscall; 
0x00000000004848ac: mov esi, edx; mov eax, 6; syscall; 
0x0000000000459737: mov esi, edx; mov rdx, rcx; mov r10, r8; mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x00000000004788f3: mov esi, esi; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x0000000000407a04: mov esi, esi; mov rbp, rdi; sub rsp, 8; movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x00000000004747d1: mov esi, esi; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000047f78e: mov esi, esi; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000422ba1: mov esi, esi; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x00000000004078f0: mov esi, esi; movsxd rax, dword ptr [rcx + rsi*4]; add rax, rcx; jmp rax; 
0x000000000045846e: mov esi, esp; mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000421ac4: mov esi, esp; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x0000000000498ee0: mov esi, esp; mov edi, ebp; call qword ptr [rax]; 
0x0000000000498fbc: mov esi, esp; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000498dc6: mov esi, esp; mov edi, ebp; call rax; 
0x0000000000479924: mov esi, esp; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x00000000004795ef: mov esi, esp; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000046f41b: mov esi, esp; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000047f91f: mov esi, esp; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000004801bc: mov esi, esp; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x00000000004801bb: mov esi, r12d; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000453875: mov esp, 0x1d8d4cd2; adc al, dl; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045389a: mov esp, 0x1d8d4cd2; in eax, dx; rol dword ptr [rip + 0xc634900], 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004538d2: mov esp, 0x1d8d4cd2; mov ch, 0xc1; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453255: mov esp, 0x1d8d4cd2; mov dl, 0xc7; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000041bfeb: mov esp, 0x24448b48; sub byte ptr [rax - 0x7d], cl; ret; 
0x000000000043a571: mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000043a5a1: mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000043a591: mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x00000000004708e0: mov esp, 0x48002630; mov eax, dword ptr [rax + rdi*8]; jmp rax; 
0x000000000044f8b2: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000044f8d2: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000044f910: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000044f892: mov esp, 0x48d231c0; lea eax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000043c2d4: mov esp, 0x4e6f0ff3; mov esp, 0xf66bcb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004af190: mov esp, 0x62fff94a; push rdx; stc; jmp rdx; 
0x0000000000443257: mov esp, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000426d52: mov esp, 0x8c48348; pop rbx; pop rbp; ret; 
0x0000000000453e80: mov esp, 0xa8000000; jne 0x53f50; lea rax, [rdi + 7]; ret; 
0x000000000044f314: mov esp, 0xbac0; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004b0ed5: mov esp, 0xbca7fffa; cli; call qword ptr [rcx - 0x45]; 
0x00000000004bd518: mov esp, 0xbe000005; add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x0000000000483d42: mov esp, 0xc08348c0; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fdf2: mov esp, 0xc08348c0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa92: mov esp, 0xc08348c0; add rax, rdi; vzeroupper; ret; 
0x000000000044fdd2: mov esp, 0xc08348c0; and byte ptr [rax + 1], cl; clc; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa82: mov esp, 0xc08348c0; and byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x000000000043a34a: mov esp, 0xc22948c0; jbe 0x3a5f0; add rax, rdi; add rax, rcx; ret; 
0x000000000043a5b1: mov esp, 0xc22948c0; jbe 0x3a5f0; add rax, rdi; ret; 
0x000000000043a5c1: mov esp, 0xc22948c0; jbe 0x3a5f0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000043a5d1: mov esp, 0xc22948c0; jbe 0x3a5f0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000043a5e1: mov esp, 0xc22948c0; jbe 0x3a5f0; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000043aa02: mov esp, 0xc23948c0; jbe 0x3aa60; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000043aa22: mov esp, 0xc23948c0; jbe 0x3aa60; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000043aa42: mov esp, 0xc23948c0; jbe 0x3aa60; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000043a9f2: mov esp, 0xc23948c0; jbe 0x3aa60; add rax, rdi; vzeroupper; ret; 
0x00000000004caa58: mov esp, 0xc4000048; adc al, 0xf6; call qword ptr [rdx]; 
0x0000000000482df2: mov esp, 0xc63948c0; jbe 0x82e70; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000044f9a5: mov esp, 0xc80148c0; add rax, rdi; vzeroupper; ret; 
0x000000000044fcb3: mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000483858: mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000437b62: mov esp, 0xd32949d2; jbe 0x37b74; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004392c2: mov esp, 0xd32949d2; jbe 0x392d4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000043a2a2: mov esp, 0xd32949d2; jbe 0x3a2b4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000041f4d4: mov esp, 0xd824; add byte ptr [rax - 0x39], cl; ret 0x7c60; 
0x000000000049c552: mov esp, 0xd837; add byte ptr [rax], al; je 0x9c560; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x000000000043c2d9: mov esp, 0xf66bcb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043a65b: mov esp, 0xf80148c0; add rax, rcx; ret; 
0x0000000000483c47: mov esp, 0xf80148c0; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fd07: mov esp, 0xf80148c0; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000043ab17: mov esp, 0xf80148c0; add rax, rcx; vzeroupper; ret; 
0x000000000043a581: mov esp, 0xf80148c0; ret; 
0x0000000000483d02: mov esp, 0xf80148c0; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fdc2: mov esp, 0xf80148c0; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa72: mov esp, 0xf80148c0; vzeroupper; ret; 
0x0000000000468efe: mov esp, 0xf883fffa; inc dword ptr [rcx - 0x77]; ret 0x840f; 
0x000000000049c8c5: mov esp, dword ptr [rbp - 0x20]; mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000491b1a: mov esp, eax; mov rbp, r9; nop; jmp rdx; 
0x0000000000408546: mov esp, eax; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x000000000049ca57: mov esp, ecx; ret; 
0x0000000000458f06: mov esp, edi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x00000000004a0131: mov fs, word ptr [rbx]; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000461c2d: mov fs, word ptr [rbx]; add eax, 0x29480000; ret 0x349; 
0x00000000004661ad: mov gs, esi; add al, 0; add byte ptr [rax + 0x29], cl; ret 0x349; 
0x000000000040ff36: mov gs, word ptr [rax + rax]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000049e852: mov gs, word ptr [rbx + 0x10023]; add byte ptr [rax], al; ret; 
0x000000000049a1c3: mov qword ptr [r10], r8; ret; 
0x000000000047fe8d: mov qword ptr [r8 + 0x30], rsi; cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x00000000004939ea: mov qword ptr [r8], rax; mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x00000000004939a8: mov qword ptr [r8], rax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000429b01: mov qword ptr [r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x0000000000447720: mov qword ptr [r9 - 8], rcx; ret; 
0x000000000045b430: mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x000000000040346e: mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x18], rdx; add rsp, 8; ret; 
0x000000000047fe08: mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000047fe48: mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000403472: mov qword ptr [rax + 0x18], rdx; add rsp, 8; ret; 
0x0000000000480e47: mov qword ptr [rax + 0x18], rdx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x000000000045b496: mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000045b4b0: mov qword ptr [rax + 0x20], rsi; ret; 
0x0000000000480e43: mov qword ptr [rax + 0x28], rdx; mov qword ptr [rax + 0x18], rdx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x00000000004039b7: mov qword ptr [rax + 0x30], rdx; mov rax, rbx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000404813: mov qword ptr [rax + 0x30], rdx; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000480d3d: mov qword ptr [rax + 0x38], r12; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000047fe0c: mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000480ec9: mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000480ec1: mov qword ptr [rax + 0x50], 0; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x000000000042907f: mov qword ptr [rax + 8], rbx; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000047fdfd: mov qword ptr [rax + 8], rcx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000047fe41: mov qword ptr [rax + 8], rdx; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000045b434: mov qword ptr [rax + 8], rdx; ret; 
0x00000000004942dc: mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000049428c: mov qword ptr [rax], rdi; pop rbx; ret; 
0x00000000004941dc: mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x000000000048033c: mov qword ptr [rax], rdx; mov eax, dword ptr [rsi]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047fe05: mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000047fe45: mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000494280: mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000049c571: mov qword ptr [rax], rdx; ret; 
0x0000000000406bfe: mov qword ptr [rbp + 0x18], rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049c71f: mov qword ptr [rbp + 8], rax; add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000047c02d: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x4b0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x258057]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047bb00: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x4c8], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x258084]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047be5a: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x4f0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x25822a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047be9f: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x500], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2581e5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047bdc6: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x508], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2582be]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047c080: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x510], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x258004]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047b434: mov qword ptr [rbp - 0x4b8], rdx; movzx ecx, byte ptr [rdi + rax]; lea rax, [rip + 0x25895a]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000047ac89: mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000047aee1: mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x258dad]; jmp rax; 
0x000000000046f686: mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000046f955: mov qword ptr [rbp - 0x4d8], rcx; sub r15, r11; mov rsi, r11; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000047aeda: mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x258dad]; jmp rax; 
0x000000000046f67f: mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000046f871: mov qword ptr [rbp - 0x4f8], rcx; mov dword ptr [rbp - 0x508], r9d; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000047b351: mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000049044e: mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000045e3c1: mov qword ptr [rbp - 0x70], rsi; call 0x5c8b0; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x00000000004678bd: mov qword ptr [rbp - 0x98], rdx; call 0x5c8b0; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x000000000049455f: mov qword ptr [rbp], rax; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000481075: mov qword ptr [rbp], rax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004275e8: mov qword ptr [rbp], rax; mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000481c74: mov qword ptr [rbp], rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000467a51: mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000421db6: mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x00000000004910dd: mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000042219e: mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000048eded: mov qword ptr [rbx + 0x10], rdx; pop rbx; pop rbp; pop r12; ret; 
0x000000000048ede9: mov qword ptr [rbx + 0x18], r12; mov qword ptr [rbx + 0x10], rdx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000421dae: mov qword ptr [rbx + 0x18], rax; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000491012: mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000497844: mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000497918: mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000467b7e: mov qword ptr [rbx + 0x20], rdx; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000425df5: mov qword ptr [rbx + 0x38], rsi; cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000425e6c: mov qword ptr [rbx + 0x40], r12; mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000425950: mov qword ptr [rbx + 0x50], 0; pop rbx; ret; 
0x0000000000481079: mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004275ec: mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000421d3a: mov qword ptr [rbx + 0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004230bf: mov qword ptr [rbx + 0x90], rax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000049c15a: mov qword ptr [rbx + 0x98], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000421e2d: mov qword ptr [rbx + 0xd8], rcx; mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x0000000000490274: mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000004819cb: mov qword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x000000000042185f: mov qword ptr [rbx + 8], r8; mov edx, 1; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x0000000000421db2: mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x000000000042219a: mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000048e8d8: mov qword ptr [rbx + 8], rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000425ce4: mov qword ptr [rbx + 8], rax; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004687cf: mov qword ptr [rbx + r14*8], rsi; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x687de; call rsi; 
0x00000000004688c4: mov qword ptr [rbx + rbp*8], rax; lea rax, [rip + 0x26d371]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x688da; call rax; 
0x000000000045e852: mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049026d: mov qword ptr [rbx], 0; mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000048f12f: mov qword ptr [rbx], 0; or dword ptr [rip + 0x2480eb], 1; pop rbx; ret; 
0x00000000004819c8: mov qword ptr [rbx], r12; mov qword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x0000000000494a52: mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000040393d: mov qword ptr [rbx], rax; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000004997b8: mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x00000000004268f4: mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000004268ec: mov qword ptr [rcx + 0x50], 0; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000472767: mov qword ptr [rcx + rdx*8], rax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000046a2bb: mov qword ptr [rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000049233e: mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000042585a: mov qword ptr [rdi + 0x10], rax; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000453b9c: mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000453bbc: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000045350c: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004534ec: mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000453bff: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000045354f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000453c1f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000045356f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000453be0: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000453530: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000425832: mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000042585e: mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000048aa76: mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000042582e: mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000425862: mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000049c5b0: mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000426606: mov qword ptr [rdi + 0xa0], -1; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000426611: mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000453b5c: mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004534ac: mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000453b7c: mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000004534cc: mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000444707: mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444697: mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444627: mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004445b7: mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000453a5a: mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x0000000000444547: mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004533fa: mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000453a7a: mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000004444d7: mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000045340a: mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000453a9a: mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000444467: mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000045341a: mov qword ptr [rdi + 7], rdx; ret; 
0x000000000049389f: mov qword ptr [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000493763: mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000492337: mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000493af2: mov qword ptr [rdi + 8], r9; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000004922c3: mov qword ptr [rdi + 8], r9; ret; 
0x0000000000493a8e: mov qword ptr [rdi + 8], r9; sub eax, r10d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000493aad: mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x0000000000425836: mov qword ptr [rdi + 8], rax; ret; 
0x000000000049288c: mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000456eca: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rcx; ret; 
0x0000000000457049: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x0000000000456156: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000049c55b: mov qword ptr [rdi + rsi*8], rdx; ret; 
0x000000000043e374: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043e3b2: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000049222e: mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000043e527: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e623: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043e56f: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e6f7: mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e8d7: mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043eac7: mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ec98: mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043ee98: mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f098: mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e370: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043e3ae: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e523: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e61f: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043e56b: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e6f3: mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e8d3: mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043eac3: mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ec94: mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043ee94: mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f094: mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e36c: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043e3aa: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e51f: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e61b: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043e567: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e6ef: mov qword ptr [rdi - 0x22], r9; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e8cf: mov qword ptr [rdi - 0x23], r9; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043eabf: mov qword ptr [rdi - 0x24], r9; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ec90: mov qword ptr [rdi - 0x25], r9; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043ee90: mov qword ptr [rdi - 0x26], r9; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f090: mov qword ptr [rdi - 0x27], r9; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e368: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043e3a6: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e6fb: mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000443f17: mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043e8db: mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000443e97: mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043eacb: mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000443e17: mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043ec9c: mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000443d88: mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043ee9c: mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000443cf8: mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043f09c: mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000443c68: mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000492227: mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000004921b9: mov qword ptr [rdi - 8], r9; ret; 
0x000000000043e378: mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043e3b6: mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e52b: mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e627: mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043e573: mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000443f97: mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000492220: mov qword ptr [rdi], r11; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000492330: mov qword ptr [rdi], r11; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000477e49: mov qword ptr [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004921b3: mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000004922bd: mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000493aed: mov qword ptr [rdi], r8; sub eax, esi; mov qword ptr [rdi + 8], r9; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000492188: mov qword ptr [rdi], r9; ret; 
0x000000000048e827: mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x24abd7]; mov qword ptr [rsi], rax; ret; 
0x00000000004539e6: mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x0000000000453a16: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000004533d6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000453a36: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000004533e6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000453a57: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000004533f7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000453a77: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000453407: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000453a97: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000453417: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000004539f7: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000004533c7: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000044446b: mov qword ptr [rdi], rcx; ret; 
0x000000000045704e: mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x00000000004539d3: mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x0000000000444773: mov qword ptr [rdi], rdx; ret; 
0x0000000000493935: mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000044771d: mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000045615b: mov qword ptr [rdi], rsi; ret; 
0x0000000000421e34: mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x0000000000406bdb: mov qword ptr [rdx + 0xd0], rcx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000452f7a: mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x000000000045176a: mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000452f9a: mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x000000000045178a: mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000452fba: mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x00000000004517aa: mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000403730: mov qword ptr [rdx + 8], rax; call 0x2f470; mov rax, rbx; pop rbx; ret; 
0x0000000000452e4a: mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x000000000045169a: mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000452df3: mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x0000000000452ef3: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000451723: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000452f13: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000451733: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000452f33: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000451743: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000452f53: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000451753: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000452f73: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000451763: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000452f93: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000451783: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000452fb3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x00000000004517a3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000452e43: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000451693: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000451643: mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000049426c: mov qword ptr [rdx], rax; pop rbx; ret; 
0x00000000004276c7: mov qword ptr [rdx], rax; ret; 
0x00000000004a025c: mov qword ptr [rip + 0x238db1], 0; add rsp, 8; ret; 
0x000000000049f9d7: mov qword ptr [rip + 0x239506], 0; add rsp, 8; ret; 
0x000000000049f4ae: mov qword ptr [rip + 0x23989b], rbx; jne 0x9f498; pop rbx; ret; 
0x0000000000493d97: mov qword ptr [rip + 0x24532a], rax; ret; 
0x0000000000493d7c: mov qword ptr [rip + 0x245345], rax; add rsp, 8; ret; 
0x0000000000490eb8: mov qword ptr [rip + 0x2481ed], 0; add rsp, 8; ret; 
0x000000000048e780: mov qword ptr [rip + 0x24ac89], rax; add rsp, 8; ret; 
0x000000000048e6c4: mov qword ptr [rip + 0x24ad45], rax; ret; 
0x000000000045af38: mov qword ptr [rip + 0x27c271], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000042eb95: mov qword ptr [rip + 0x2a7d04], rax; ret; 
0x000000000042eb87: mov qword ptr [rip + 0x2a7d1a], rax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2a7d04], rax; ret; 
0x000000000042eb79: mov qword ptr [rip + 0x2aa238], rax; lea rax, [rip - 0x14a7]; mov qword ptr [rip + 0x2a7d1a], rax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2a7d04], rax; ret; 
0x000000000042856e: mov qword ptr [rip + 0x2ae2b3], rax; ret; 
0x000000000042854e: mov qword ptr [rip + 0x2ae2cb], rax; ret; 
0x0000000000428444: mov qword ptr [rip + 0x2ae43d], rax; ret; 
0x00000000004283d4: mov qword ptr [rip + 0x2ae45d], rax; ret; 
0x00000000004283c4: mov qword ptr [rip + 0x2ae475], rax; ret; 
0x0000000000427afb: mov qword ptr [rip + 0x2b1272], 0; ret; 
0x0000000000427a91: mov qword ptr [rip + 0x2b12e0], rdx; add dword ptr [rip + 0x2b12d5], 1; ret; 
0x000000000040f9b1: mov qword ptr [rip + 0x2c89c8], rax; mov eax, dword ptr [rdx + rsi]; mov dword ptr [rip + 0x2c89c7], eax; lea rax, [rip + 0x2c89b8]; ret; 
0x000000000040fb8a: mov qword ptr [rip + 0x2c92ef], rax; add rsp, 0x88; pop rbx; ret; 
0x0000000000401c8b: mov qword ptr [rip + 0x2d447a], rax; mov qword ptr [rip + 0x2d447b], rax; mov qword ptr [rip + 0x2d447c], rax; mov qword ptr [rip + 0x2d447d], rax; add rsp, 8; ret; 
0x0000000000401c92: mov qword ptr [rip + 0x2d447b], rax; mov qword ptr [rip + 0x2d447c], rax; mov qword ptr [rip + 0x2d447d], rax; add rsp, 8; ret; 
0x0000000000401c99: mov qword ptr [rip + 0x2d447c], rax; mov qword ptr [rip + 0x2d447d], rax; add rsp, 8; ret; 
0x0000000000401ca0: mov qword ptr [rip + 0x2d447d], rax; add rsp, 8; ret; 
0x00000000004005a4: mov qword ptr [rip + 0x2d8b49], 0; pop rax; ret; 
0x00000000004105d2: mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004105c6: mov qword ptr [rsi + 8], rax; mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000487c90: mov qword ptr [rsi], -1; xor eax, eax; ret; 
0x0000000000420472: mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000048e831: mov qword ptr [rsi], rax; ret; 
0x000000000046a2b0: mov qword ptr [rsi], rcx; mov rcx, -0x18; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000048db78: mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x00000000004105ca: mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000042be09: mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000042bec6: mov qword ptr [rsp + 0x10], rdx; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000048d8e0: mov qword ptr [rsp + 0x18], rax; call 0x8d210; add rsp, 0xd8; ret; 
0x0000000000458cf9: mov qword ptr [rsp + 0x18], rax; lea rax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; je 0x58d30; mov eax, 0x48; syscall; 
0x0000000000458d03: mov qword ptr [rsp + 0x20], rax; je 0x58d30; mov eax, 0x48; syscall; 
0x000000000042be04: mov qword ptr [rsp + 0x20], rsi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000484b65: mov qword ptr [rsp + 0x28], rax; xor eax, eax; mov rdx, rsp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x000000000042be0e: mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000041fb2e: mov qword ptr [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x00000000004205ad: mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x0000000000498fb4: mov qword ptr [rsp], r8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000498f62: mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000423362: mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000499d60: mov qword ptr [rsp], rax; call 0x9a0e0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000422691: mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x0000000000429b00: mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000046a2ba: mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000046a2c5: mov qword ptr fs:[rdx], rax; ret; 
0x000000000046a2af: mov qword ptr fs:[rsi], rcx; mov rcx, -0x18; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000421d39: mov qword ptr ss:[rbx + 0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000456155: mov qword ptr ss:[rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000049b932: mov r10, qword ptr [rsp + rax*8 + 0x30]; ja 0x9b519; movzx r11d, r11b; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x000000000045973c: mov r10, r8; mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x000000000045af60: mov r10, rcx; mov eax, 0x19; syscall; 
0x000000000045af60: mov r10, rcx; mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x5af73; ret; 
0x000000000045af90: mov r10, rcx; mov eax, 0x9d; syscall; 
0x000000000045af90: mov r10, rcx; mov eax, 0x9d; syscall; cmp rax, -0xfff; jae 0x5afa3; ret; 
0x00000000004595a0: mov r10, rsi; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000046a6b0: mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000046a553: mov r10d, 8; mov eax, ecx; syscall; 
0x00000000004597fe: mov r10d, ecx; mov ecx, 9; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x00000000004597a0: mov r10d, r14d; mov edx, r12d; mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x00000000004848fc: mov r10d, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x000000000048ba38: mov r11, qword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x000000000043e4c0: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e4a4: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000490fbc: mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000490f4a: mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x00000000004919f0: mov r11, r8; mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x000000000047aed4: mov r11d, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x258dad]; jmp rax; 
0x000000000049c8c4: mov r12, qword ptr [rbp - 0x20]; mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000458f05: mov r12, rdi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x0000000000408545: mov r12d, eax; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x000000000049c8c8: mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049ca46: mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000004795e7: mov r13, qword ptr [rbp - 0x8f8]; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000049c8cc: mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049ca4a: mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000040fe25: mov r14, qword ptr [rbx]; jne 0x10040; call qword ptr [rbx + 0x10]; 
0x00000000004747ca: mov r14, r15; mov rdx, r13; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000047ac86: mov r14, rcx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000046f413: mov r15, qword ptr [rbp - 0x4b8]; mov rsi, r12; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000049c8d0: mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049ca4e: mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048bc2e: mov r15, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000491b13: mov r15, qword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x00000000004c3fb0: mov r15d, 0x3ca045d6; stosb byte ptr [rdi], al; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000049a1c0: mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000049a1d8: mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x0000000000420d6c: mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000049c29f: mov r8, r12; mov rcx, rbp; mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000045973f: mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x000000000045973f: mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; cmp rax, -0xfff; jae 0x59752; ret; 
0x000000000049c885: mov r8, rbx; mov rcx, r12; mov rdx, qword ptr [r12]; mov esi, 1; mov edi, 1; call rax; 
0x000000000049c1cf: mov r8, rbx; mov rcx, r12; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x000000000048db20: mov r8, rsi; lea rcx, [rdx + 4]; cmp rcx, r8; jne 0x8dacb; mov eax, dword ptr [rdx + 4]; ret; 
0x0000000000468ef7: mov r8d, 0xe8c78948; bsf edi, edx; inc dword ptr [rbx - 0x76be0008]; ret 0x840f; 
0x00000000004675eb: mov r8d, 0xff52bee8; dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x000000000047bacd: mov r8d, 1; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000484a02: mov r8d, eax; mov edx, dword ptr [rsp + 0x1c]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000458c69: mov r8d, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x0000000000458ae8: mov r8d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x0000000000458a18: mov r8d, eax; mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x000000000041fbc0: mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000461e17: mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000046515b: mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004623cc: mov r9, qword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000460cbe: mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000459742: mov r9, qword ptr [rsp + 8]; syscall; 
0x0000000000459742: mov r9, qword ptr [rsp + 8]; syscall; cmp rax, -0xfff; jae 0x59752; ret; 
0x000000000045dada: mov r9, r13; call rbx; 
0x0000000000483574: mov r9, r14; call rbx; 
0x000000000046a2f0: mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x000000000046a310: mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000046a330: mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x00000000004107a0: mov rax, -0x40; add rax, qword ptr fs:[0]; ret; 
0x00000000004587b8: mov rax, -0x40; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004597d0: mov rax, -0x40; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000041df3a: mov rax, -0x40; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000484c58: mov rax, -0x40; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000422095: mov rax, -0x40; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000004756c0: mov rax, -0x40; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x0000000000424a40: mov rax, -0x40; or ecx, 0x20; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000420fd8: mov rax, -0x40; or edx, 0x20; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000048f150: mov rax, -0x40; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x000000000046a2d0: mov rax, -0x58; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000426c60: mov rax, -1; ret; 
0x0000000000400404: mov rax, 0; test rax, rax; je 0x412; call rax; 
0x00000000004094c0: mov rax, 0x6d2ca0; pop rbx; ret; 
0x0000000000409230: mov rax, 0x6d2ca0; ret; 
0x00000000004094d0: mov rax, 0x6d2ce0; pop rbx; ret; 
0x0000000000409210: mov rax, 0x6d2ce0; ret; 
0x00000000004094e0: mov rax, 0x6d2d20; pop rbx; ret; 
0x0000000000409180: mov rax, 0x6d2d20; ret; 
0x0000000000409510: mov rax, 0x6d2d60; pop rbx; ret; 
0x00000000004091f8: mov rax, 0x6d2d60; ret; 
0x0000000000409500: mov rax, 0x6d2da0; pop rbx; ret; 
0x00000000004091c9: mov rax, 0x6d2da0; ret; 
0x0000000000409522: mov rax, 0x6d2de0; pop rbx; ret; 
0x00000000004090da: mov rax, 0x6d2de0; ret; 
0x0000000000409519: mov rax, 0x6d2e20; pop rbx; ret; 
0x0000000000409146: mov rax, 0x6d2e20; ret; 
0x0000000000409534: mov rax, 0x6d2e60; pop rbx; ret; 
0x0000000000409172: mov rax, 0x6d2e60; ret; 
0x000000000040952b: mov rax, 0x6d2ea0; pop rbx; ret; 
0x0000000000409220: mov rax, 0x6d2ea0; ret; 
0x0000000000409577: mov rax, 0x6d2ee0; pop rbx; ret; 
0x0000000000409278: mov rax, 0x6d2ee0; ret; 
0x000000000040954f: mov rax, 0x6d2f20; pop rbx; ret; 
0x0000000000409208: mov rax, 0x6d2f20; ret; 
0x000000000040956e: mov rax, 0x6d2f60; pop rbx; ret; 
0x0000000000409117: mov rax, 0x6d2f60; ret; 
0x0000000000409565: mov rax, 0x6d2fa0; pop rbx; ret; 
0x00000000004091b0: mov rax, 0x6d2fa0; ret; 
0x00000000004094b0: mov rax, 0x6d52c0; pop rbx; ret; 
0x00000000004091e4: mov rax, 0x6d52c0; ret; 
0x00000000004094f0: mov rax, 0x6d5300; pop rbx; ret; 
0x00000000004091a0: mov rax, 0x6d5300; ret; 
0x0000000000409546: mov rax, 0x6d5340; pop rbx; ret; 
0x0000000000409190: mov rax, 0x6d5340; ret; 
0x000000000040953d: mov rax, 0x6d5380; pop rbx; ret; 
0x0000000000409240: mov rax, 0x6d5380; ret; 
0x0000000000409558: mov rax, 0x6d53c0; pop rbx; ret; 
0x0000000000409250: mov rax, 0x6d53c0; ret; 
0x000000000040949d: mov rax, 0x6d5400; pop rbx; ret; 
0x0000000000409260: mov rax, 0x6d5400; ret; 
0x0000000000401190: mov rax, 0x6d6130; mov rax, qword ptr [rax]; mov eax, dword ptr [rax]; ret; 
0x000000000046a490: mov rax, 0xf; syscall; 
0x0000000000483b90: mov rax, 1; ret; 
0x0000000000483ba0: mov rax, 2; ret; 
0x0000000000483bb0: mov rax, 3; ret; 
0x0000000000483bc0: mov rax, 4; ret; 
0x0000000000483bd0: mov rax, 5; ret; 
0x0000000000483be0: mov rax, 6; ret; 
0x0000000000483bf0: mov rax, 7; ret; 
0x00000000004960ee: mov rax, qword ptr [r12]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000048c045: mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000480cfc: mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x0000000000480e05: mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004802da: mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000420b39: mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000047f914: mov rax, qword ptr [rax + 0x130]; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000041d67c: mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000420b40: mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004747c6: mov rax, qword ptr [rax + 0x38]; mov r14, r15; mov rdx, r13; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x00000000004812d3: mov rax, qword ptr [rax + 0x4c]; ret; 
0x0000000000498dbb: mov rax, qword ptr [rax + 8]; add rax, qword ptr [r14]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000490ed0: mov rax, qword ptr [rax + 8]; ret; 
0x0000000000490ee0: mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x000000000046d3d5: mov rax, qword ptr [rax + r11*8]; mov dword ptr [rbp - 0x93c], r9d; mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x00000000004688cf: mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x688da; call rax; 
0x000000000047b446: mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000046a2de: mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000047003c: mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000401197: mov rax, qword ptr [rax]; mov eax, dword ptr [rax]; ret; 
0x000000000046a2db: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000049c502: mov rax, qword ptr [rax]; ret; 
0x0000000000425a54: mov rax, qword ptr [rbp + 0x20]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000425c44: mov rax, qword ptr [rbp + 0x28]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000490441: mov rax, qword ptr [rbp - 0x38]; xor esi, esi; lea rdi, [rip + 0x2f52c]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000048c6a4: mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x000000000048ba3f: mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x00000000004936b4: mov rax, qword ptr [rbp - 8]; xor rax, qword ptr fs:[0x28]; jne 0x936fe; leave; ret; 
0x000000000048b860: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000048b71d: mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x000000000042599c: mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004259bd: mov rax, qword ptr [rbx + 0x18]; mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004942d8: mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000494288: mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x0000000000422196: mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000000494278: mov rax, qword ptr [rbx + 0x18]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000426088: mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004264a8: mov rax, qword ptr [rbx + 0x48]; add rsp, 0x20; mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x0000000000420b2e: mov rax, qword ptr [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000041bf5d: mov rax, qword ptr [rbx + rax*8]; ja 0x1c5e5; lea rdi, [rip + 0x91272]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000045af35: mov rax, qword ptr [rbx]; mov qword ptr [rip + 0x27c271], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000452f76: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000451766: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000452f96: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000451786: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000452fb6: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x00000000004517a6: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000452e46: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000451696: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000452df0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x0000000000452ef0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000451720: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000452f10: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000451730: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000452f30: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000451740: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000452f50: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000451750: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000452f70: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000451760: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000452f90: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000451780: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000452fb0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x00000000004517a0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000452e40: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000451690: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000451640: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000409620: mov rax, qword ptr [rdi + 0x10]; test rax, rax; je 0x962e; mov rdi, rsi; jmp rax; 
0x0000000000409640: mov rax, qword ptr [rdi + 0x18]; test rax, rax; je 0x964d; mov edi, esi; jmp rax; 
0x0000000000469cd1: mov rax, qword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x69cdf; call rax; 
0x00000000004096e1: mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0x96bf; mov rbx, rsi; mov rdi, rsi; call rax; 
0x00000000004a00ec: mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0xa00fc; call rax; 
0x00000000004283a0: mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000004812d0: mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000042582a: mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000427a20: mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049c530: mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000049c580: mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000049c5c0: mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000049c620: mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000049c610: mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000049c5d0: mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000049c590: mov rax, qword ptr [rdi + 0xc0]; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000427b36: mov rax, qword ptr [rdi + 8]; cmp rax, rdx; jae 0x27b60; movzx eax, byte ptr [rax]; ret; 
0x000000000049cf40: mov rax, qword ptr [rdi + 8]; test rax, rax; je 0x9cf58; mov rsi, rdi; mov edi, 1; jmp rax; 
0x0000000000470586: mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000049c567: mov rax, qword ptr [rdi + rsi*8]; cmp byte ptr [rcx + rsi], 8; jne 0x9c575; mov qword ptr [rax], rdx; ret; 
0x000000000043c540: mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x3c9f3; xor eax, eax; ret; 
0x000000000043bfb6: mov rax, qword ptr [rdi - 8]; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x3c9f3; xor eax, eax; ret; 
0x00000000004276c4: mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x00000000004285a0: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2ae2a6], 1; mov dword ptr [rip + 0x2ae298], eax; ret; 
0x0000000000428560: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2ae2e6], 1; mov qword ptr [rip + 0x2ae2b3], rax; ret; 
0x0000000000428540: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2ae306], 1; mov qword ptr [rip + 0x2ae2cb], rax; ret; 
0x00000000004285c0: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2b082a], eax; ret; 
0x0000000000428440: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2ae43d], rax; ret; 
0x00000000004283d0: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2ae45d], rax; ret; 
0x00000000004283c0: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2ae475], rax; ret; 
0x00000000004810a2: mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000048ed45: mov rax, qword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000049c157: mov rax, qword ptr [rdx]; mov qword ptr [rbx + 0x98], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048e820: mov rax, qword ptr [rip + 0x247911]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x24abd7]; mov qword ptr [rsi], rax; ret; 
0x000000000048e82a: mov rax, qword ptr [rip + 0x24abd7]; mov qword ptr [rsi], rax; ret; 
0x000000000048e7b9: mov rax, qword ptr [rip + 0x24ac50]; ret; 
0x0000000000466cd0: mov rax, qword ptr [rip + 0x272201]; ret; 
0x000000000045e7f0: mov rax, qword ptr [rip + 0x27b191]; ret; 
0x0000000000427a00: mov rax, qword ptr [rip + 0x2ae759]; ret; 
0x000000000049d471: mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000049a300: mov rax, qword ptr [rsi + 0xa8]; ret; 
0x000000000049a2d3: mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000049a2f0: mov rax, qword ptr [rsi + 0xb8]; ret; 
0x000000000049d490: mov rax, qword ptr [rsi + 8]; ret; 
0x000000000042046a: mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000047b40b: mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004705d0: mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x0000000000470c28: mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x000000000049c5f5: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000459a95: mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000420d67: mov rax, qword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000040ff42: mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004623db: mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000458a39: mov rax, qword ptr [rsp + 8]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000041cc1c: mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000049a065: mov rax, qword ptr [rsp]; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000499d69: mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000046a2da: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000047e407: mov rax, r12; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000494c6c: mov rax, r13; pop rbp; pop r12; pop r13; ret; 
0x0000000000459e5d: mov rax, r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000422f89: mov rax, r14; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000429c6f: mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000431ace: mov rax, r8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000483f73: mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000482db0: mov rax, r8; vzeroupper; ret; 
0x0000000000459938: mov rax, rbp; mov esi, 3; pop rbp; pop r12; jmp rax; 
0x000000000041f28a: mov rax, rbp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000045a473: mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x0000000000459921: mov rax, rbp; pop rbx; pop rbp; pop r12; mov esi, 2; jmp rax; 
0x000000000041f3a2: mov rax, rbp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004230c6: mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000049c72a: mov rax, rbp; pop rbx; pop rbp; ret; 
0x00000000004039bb: mov rax, rbx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000404817: mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004978d6: mov rax, rbx; jne 0x978ec; add rsp, 0x40; pop rbx; ret; 
0x00000000004979bd: mov rax, rbx; jne 0x979d4; add rsp, 0x50; pop rbx; ret; 
0x0000000000423b11: mov rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000423a44: mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000040390f: mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000403722: mov rax, rbx; pop rbx; ret; 
0x000000000048dbce: mov rax, rcx; neg rax; test r8b, r8b; cmove rcx, rax; mov rax, rcx; ret; 
0x000000000048db7b: mov rax, rcx; ret; 
0x0000000000421cb2: mov rax, rdi; mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000429f04: mov rax, rdi; pop rbp; pop r12; ret; 
0x0000000000421ce3: mov rax, rdi; ret; 
0x0000000000429b04: mov rax, rdx; add rsp, 8; ret; 
0x000000000048463a: mov rax, rdx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004294bc: mov rax, rdx; pop rbx; pop rbp; ret; 
0x00000000004573d5: mov rax, rdx; pop rbx; ret; 
0x0000000000429b10: mov rax, rdx; ret; 
0x0000000000458783: mov rax, rsi; ja 0x587b8; mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x00000000004848a3: mov rax, rsi; ja 0x848d8; mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x000000000041f117: mov rax, rsi; pop rbp; pop r12; ret; 
0x000000000042d0ac: mov rax, rsi; pop rbx; ret; 
0x000000000041f152: mov rax, rsi; ret; 
0x0000000000420438: mov rbp, qword ptr [r15 + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000049ca52: mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000004211cf: mov rbp, qword ptr [rbx + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000491b1c: mov rbp, r9; nop; jmp rdx; 
0x0000000000407a06: mov rbp, rdi; sub rsp, 8; movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x0000000000409674: mov rbp, rsi; mov rbx, rdi; mov edi, eax; call rdx; 
0x0000000000400dc3: mov rbx, rax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000480cf7: mov rbx, rdi; jne 0x80d68; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x0000000000409677: mov rbx, rdi; mov edi, eax; call rdx; 
0x0000000000469cd5: mov rbx, rdi; test rax, rax; je 0x69cdf; call rax; 
0x00000000004096ea: mov rbx, rsi; mov rdi, rsi; call rax; 
0x00000000004846ef: mov rbx, rsi; sub rsp, 8; syscall; 
0x000000000048eeac: mov rbx, rsp; mov rsi, rbx; syscall; 
0x000000000046a2b3: mov rcx, -0x18; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000458710: mov rcx, -0x40; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000047fe01: mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000420bd7: mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000041fbbc: mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000447719: mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000453b94: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000453bb4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000453504: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004534e4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000453b54: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004534a4: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000453b74: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000004534c4: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000045614e: mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000043e864: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e880: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ea44: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ea60: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ec24: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ec40: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ee14: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043ee30: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f014: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f030: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f214: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f230: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043bfba: mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x3c9f3; xor eax, eax; ret; 
0x0000000000443d84: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000443cf4: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000443c64: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043c53c: mov rcx, qword ptr [rsi - 8]; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x3c9f3; xor eax, eax; ret; 
0x000000000043e684: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e6a0: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004539e0: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000004533b0: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000004539f0: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000004533c0: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000453a10: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000004533d0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000453a30: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000004533e0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000444704: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444694: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444624: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004445b4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444544: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004444d4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444464: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000453a50: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000004533f0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000453a70: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000453400: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000453a90: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000453410: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000490fc6: mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000490f54: mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000491247: mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x9127e; add rsp, 0x68; ret; 
0x0000000000491677: mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x916ae; add rsp, 0x68; ret; 
0x00000000004913a8: mov rcx, qword ptr [rsp + 0x68]; xor rcx, qword ptr fs:[0x28]; jne 0x913ee; add rsp, 0x78; ret; 
0x0000000000447718: mov rcx, qword ptr ss:[rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000049c888: mov rcx, r12; mov rdx, qword ptr [r12]; mov esi, 1; mov edi, 1; call rax; 
0x000000000049c1d2: mov rcx, r12; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x000000000045dacd: mov rcx, r12; push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x0000000000483412: mov rcx, r13; xor r8d, r8d; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x0000000000481353: mov rcx, r15; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000048152f: mov rcx, r15; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000483564: mov rcx, r15; mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000049c2a2: mov rcx, rbp; mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000456df0: mov rcx, rdx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000456131: mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000497529: mov rcx, rsi; sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x97510; mov eax, 1; ret; 
0x0000000000483101: mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000041cc18: mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000041d6b3: mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000046d633: mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000046dbdd: mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000046d3ea: mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000046d480: mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000479926: mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x00000000004788fc: mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x00000000004795f1: mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000047899a: mov rdi, qword ptr [rbp - 0x8d0]; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x00000000004747d3: mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x0000000000497910: mov rdi, qword ptr [rdi]; call 0x997c0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000049783c: mov rdi, qword ptr [rdi]; call 0x99ac0; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x00000000004919f3: mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x00000000004600ef: mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000460cc8: mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000461e21: mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000463408: mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000465165: mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004623d6: mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004260ba: mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004264e0: mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x0000000000459a90: mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004259c5: mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000048135f: mov rdi, r12; call rbx; 
0x0000000000409752: mov rdi, r12; call rdx; 
0x0000000000425fb5: mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000458f08: mov rdi, r12; mov eax, 0x4f; syscall; 
0x00000000004a1460: mov rdi, r13; call rax; 
0x000000000041cd3d: mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000041cca8: mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000046f886: mov rdi, r14; call qword ptr [rax + 0x38]; 
0x00000000004675f2: mov rdi, r14; call rbx; 
0x00000000004678d0: mov rdi, r14; call rdx; 
0x000000000046ff0e: mov rdi, r14; mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000046f962: mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000046f41d: mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000047c323: mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000047b358: mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x00000000004205b2: mov rdi, r15; call rax; 
0x000000000045e3ca: mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000047b14a: mov rdi, r15; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000400c5c: mov rdi, rax; call 0x1f000; mov eax, 0; leave; ret; 
0x000000000040059c: mov rdi, rax; call 0x2f470; mov qword ptr [rip + 0x2d8b49], 0; pop rax; ret; 
0x0000000000420d75: mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000432933: mov rdi, rax; call rcx; 
0x000000000040968c: mov rdi, rax; call rdx; 
0x000000000041c89f: mov rdi, rax; mov eax, 0xba; syscall; 
0x0000000000458788: mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x00000000004848a8: mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x000000000047f790: mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000041fb35: mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000431cb5: mov rdi, rbp; call rax; 
0x0000000000483420: mov rdi, rbp; call rbx; 
0x00000000004597a9: mov rdi, rbp; mov eax, 9; syscall; 
0x0000000000483571: mov rdi, rbp; mov r9, r14; call rbx; 
0x0000000000420bd1: mov rdi, rbp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000041fbb6: mov rdi, rbp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000045a46c: mov rdi, rbx; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x0000000000423227: mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000422ba3: mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000047f921: mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000423369: mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000004258ab: mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000425f1c: mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000426cac: mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000041ef27: mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000425ea3: mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000422e9e: mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000422695: mov rdi, rbx; call rax; 
0x000000000049f322: mov rdi, rbx; jne 0x9f310; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004675e6: mov rdi, rbx; mov dword ptr [rbp - 0x48], r8d; call 0x5c8b0; mov rdi, r14; call rbx; 
0x0000000000420b35: mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000425a5c: mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x00000000004801be: mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000048b088: mov rdi, rcx; call 0x59880; test eax, eax; js 0x8b0a2; pop rbx; ret; 
0x0000000000493be0: mov rdi, rdx; mov byte ptr [rsi], al; jne 0x93bc0; mov rax, rsi; ret; 
0x00000000004678ba: mov rdi, rdx; mov qword ptr [rbp - 0x98], rdx; call 0x5c8b0; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x000000000048294e: mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000004096ed: mov rdi, rsi; call rax; 
0x0000000000409629: mov rdi, rsi; jmp rax; 
0x000000000045e3be: mov rdi, rsi; mov qword ptr [rbp - 0x70], rsi; call 0x5c8b0; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000046a2be: mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004587a0: mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000458a50: mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000403463: mov rdx, -1; mov byte ptr [rax + 0x26], 1; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x18], rdx; add rsp, 8; ret; 
0x000000000049c1d8: mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x000000000049c88b: mov rdx, qword ptr [r12]; mov esi, 1; mov edi, 1; call rax; 
0x0000000000478996: mov rdx, qword ptr [r14 + 0x20]; mov rdi, qword ptr [rbp - 0x8d0]; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000046d47c: mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x00000000004205a6: mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x00000000004276ef: mov rdx, qword ptr [rax + 8]; jne 0x27700; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000046ff18: mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x00000000004678c9: mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x000000000049c2a5: mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000409683: mov rdx, qword ptr [rbx + 0x10]; test rdx, rdx; je 0x96a8; mov rdi, rax; call rdx; 
0x0000000000494268: mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x000000000042268a: mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x000000000045b425: mov rdx, qword ptr [rcx + rdx]; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000425826: mov rdx, qword ptr [rdi + 0x18]; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000049427c: mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000004942e3: mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000409746: mov rdx, qword ptr [rdx + 0x28]; test rdx, rdx; je 0x9770; mov rsi, rbx; mov rdi, r12; call rdx; 
0x0000000000494783: mov rdx, qword ptr [rip + 0x244a4e]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000040ff32: mov rdx, qword ptr [rip + 0x2c8ecf]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000453544: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000453564: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000444700: mov rdx, qword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444690: mov rdx, qword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444620: mov rdx, qword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004445b0: mov rdx, qword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000453a53: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000004533f3: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000444540: mov rdx, qword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000453a73: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000453403: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000004444d0: mov rdx, qword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000453a93: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000453413: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000444460: mov rdx, qword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000443f10: mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000443e90: mov rdx, qword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000443e10: mov rdx, qword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000443d80: mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000443cf0: mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000443c60: mov rdx, qword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043e4c4: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043ee18: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f018: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f218: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e4a8: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043ee34: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f034: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f234: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e4e0: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000443f90: mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004539d0: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x0000000000444770: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000004919f8: mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x000000000041cc10: mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [r15]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000483567: mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000041cca0: mov rdx, qword ptr [rsp + 0x10]; mov rsi, r15; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000490fc1: mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000490f4f: mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x00000000004633fe: mov rdx, qword ptr [rsp + 0x48]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000422fa2: mov rdx, qword ptr [rsp + 8]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000458c65: mov rdx, qword ptr [rsp]; mov r8d, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x0000000000458ae5: mov rdx, r12; mov r8d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x0000000000458a15: mov rdx, r12; mov r8d, eax; mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x0000000000420d64: mov rdx, r12; mov rax, qword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000004795f8: mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x0000000000498f5f: mov rdx, r13; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000046dbd3: mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000498edc: mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x0000000000498fb8: mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000498dc2: mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000479920: mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x00000000004747cd: mov rdx, r13; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000046d62d: mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000047ac94: mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000483418: mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x000000000047c319: mov rdx, r14; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000047b34b: mov rdx, r14; mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000047c496: mov rdx, r14; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000046f423: mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000422b9d: mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000042335f: mov rdx, r8; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000421ac0: mov rdx, r9; mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x000000000045dad2: mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x000000000047f91b: mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000046dda8: mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x00000000004848ff: mov rdx, rcx; mov eax, 0x106; syscall; 
0x000000000046f86e: mov rdx, rcx; mov qword ptr [rbp - 0x4f8], rcx; mov dword ptr [rbp - 0x508], r9d; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000459739: mov rdx, rcx; mov r10, r8; mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x0000000000456df7: mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000484b6c: mov rdx, rsp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x000000000046d478: mov rsi, qword ptr [r15 + 0x18]; mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000041cc15: mov rsi, qword ptr [r15]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000041d5b4: mov rsi, qword ptr [rax + 0x20]; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x00000000004687d3: mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x687de; call rsi; 
0x000000000046f87f: mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000047c31c: mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000046ff1f: mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000045e3cd: mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000046dbd6: mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000459a8d: mov rsi, qword ptr [rbx]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000049790c: mov rsi, qword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x997c0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000497838: mov rsi, qword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x99ac0; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000456153: mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x0000000000447716: mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000484a09: mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x000000000040ff39: mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004260b5: mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000045dad5: mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x000000000048356c: mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000042e77d: mov rsi, qword ptr [rsp + 0x28]; add rsp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000042eda8: mov rsi, qword ptr [rsp + 0x28]; add rsp, 0x18; pop rbx; pop rbp; jmp rax; 
0x00000000004600ea: mov rsi, qword ptr [rsp + 0x28]; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000431cb0: mov rsi, qword ptr [rsp + 0x28]; mov rdi, rbp; call rax; 
0x0000000000460cc3: mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000461e1c: mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000463403: mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000465160: mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004623d1: mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000042f670: mov rsi, qword ptr [rsp + 0x68]; call rax; 
0x00000000004a1458: mov rsi, qword ptr [rsp + 0x98]; mov rdi, r13; call rax; 
0x00000000004a0b68: mov rsi, qword ptr [rsp + 0x98]; mov rdi, r15; call rax; 
0x000000000046f95f: mov rsi, r11; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000421ac3: mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x0000000000498edf: mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x0000000000498fbb: mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000498dc5: mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000479923: mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x00000000004795ee: mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000046f41a: mov rsi, r12; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000047f91e: mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000046ddab: mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x00000000004597a6: mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x0000000000423366: mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000422e9b: mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004312e1: mov rsi, r13; pop rbp; pop r12; pop r13; pop r14; jmp rax; 
0x000000000048c69a: mov rsi, r13; xor eax, eax; call 0x8d9b0; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x00000000004788f2: mov rsi, r14; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x00000000004747d0: mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000047f78d: mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000422ba0: mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000046d3e7: mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000041cca5: mov rsi, r15; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000047b34e: mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000047c499: mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000041c8c8: mov rsi, r9; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000046d630: mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x0000000000458aeb: mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x0000000000458a1b: mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x00000000004830fe: mov rsi, rbp; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000041cd3a: mov rsi, rbp; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000432930: mov rsi, rbp; mov rdi, rax; call rcx; 
0x0000000000421868: mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000040974f: mov rsi, rbx; mov rdi, r12; call rdx; 
0x000000000048eeaf: mov rsi, rbx; syscall; 
0x000000000046a54b: mov rsi, rcx; mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000047b147: mov rsi, rcx; mov rdi, r15; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000458861: mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000049cf49: mov rsi, rdi; mov edi, 1; jmp rax; 
0x000000000045878b: mov rsi, rdx; mov eax, 4; syscall; 
0x00000000004587d9: mov rsi, rdx; mov eax, 5; syscall; 
0x00000000004848ab: mov rsi, rdx; mov eax, 6; syscall; 
0x0000000000459736: mov rsi, rdx; mov rdx, rcx; mov r10, r8; mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x000000000045846d: mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000491b19: mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x000000000049ca56: mov rsp, rcx; ret; 
0x000000000044773b: mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000004d17e8: mov sil, 0; add byte ptr [rdx - 4], ah; jmp rsp; 
0x000000000047bf36: mov ss, word ptr [rax + rax + 0x63490000]; ret 0x8948; 
0x0000000000447745: mov word ptr [r9 - 2], cx; ret; 
0x000000000041021d: mov word ptr [rax + rax], gs; adc ch, cl; ret; 
0x00000000004101ef: mov word ptr [rax + rax], gs; add al, 0xeb; mov byte ptr [rcx], bh; ret 0x860f; 
0x00000000004091e0: mov word ptr [rax], es; add byte ptr [rax], al; mov rax, 0x6d52c0; ret; 
0x00000000004cee05: mov word ptr [rax], es; add byte ptr [rax], cl; adc edi, ebx; jmp qword ptr [rdi]; 
0x00000000004a83f0: mov word ptr [rcx], es; add byte ptr [rax], al; mov word ptr [rcx], es; add byte ptr [rax], al; ret; 
0x00000000004a83f4: mov word ptr [rcx], es; add byte ptr [rax], al; ret; 
0x0000000000453adc: mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000045344c: mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000453be4: mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000453534: mov word ptr [rdi + 0x18], cx; ret; 
0x00000000004449a7: mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x00000000004539a8: mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000453388: mov word ptr [rdi + 4], dx; ret; 
0x00000000004539fa: mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000004533ca: mov word ptr [rdi + 8], dx; ret; 
0x0000000000456eda: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], cx; ret; 
0x000000000045705f: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], cx; vzeroupper; ret; 
0x0000000000456174: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x000000000043ea7c: mov word ptr [rdi - 2], cx; ret; 
0x000000000043e894: mov word ptr [rdi - 2], dx; ret; 
0x000000000043ea78: mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000453973: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000453353: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000455eb2: mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x00000000004449ab: mov word ptr [rdi], cx; ret; 
0x0000000000457064: mov word ptr [rdi], cx; vzeroupper; ret; 
0x0000000000453963: mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000444a13: mov word ptr [rdi], dx; ret; 
0x0000000000447742: mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000456179: mov word ptr [rdi], si; ret; 
0x0000000000452ec8: mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x0000000000451708: mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000452e73: mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x0000000000452e83: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004516d3: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x00000000004516c3: mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000004be7e4: mov word ptr [rdx], es; cld; call qword ptr [rax - 0x70003fd]; add al, 0xfc; call rax; 
0x0000000000455eb5: mov word ptr [rsi - 2], cx; ret; 
0x00000000004c812c: mov word ptr [rsi], es; add dword ptr [rdi], 3; ret; 
0x00000000004134eb: mov word ptr [rsp + rcx*4], fs; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x0000000000456173: mov word ptr ss:[rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x00000000004328ca: movabs al, byte ptr [0x16b8001f0ffffe]; add byte ptr [rax], al; ret; 
0x00000000004aed88: movabs al, byte ptr [0x30fff92ea0fff92c]; and ecx, edi; push rax; and bh, cl; call rax; 
0x00000000004aec9c: movabs al, byte ptr [0x40fff8e6f0fff8e5]; call 0xffffffffe99beca2; clc; jmp rax; 
0x000000000045b42c: movabs al, byte ptr [0x4810488948ffffff]; mov dword ptr [rax + 8], edx; ret; 
0x0000000000494264: movabs al, byte ptr [0x4818538b48000000]; mov dword ptr [rdx], eax; pop rbx; ret; 
0x0000000000420b31: movabs al, byte ptr [0x485bdf8948000000]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000426609: movabs al, byte ptr [0x48ffffffff000000]; mov dword ptr [rdi + 0xa8], 0; ret; 
0x00000000004af3c8: movabs al, byte ptr [0x4efff94420fff942]; jnp 0xaf3cc; call rax; 
0x00000000004b0928: movabs al, byte ptr [0x58fffab580fffab5]; mov ch, 0xfa; push qword ptr [rax]; mov ch, 0xfa; call qword ptr [rax]; 
0x00000000004cd6da: movabs al, byte ptr [0x75440000009001]; add byte ptr [rcx + rax*2], bl; stc; call rcx; 
0x0000000000456647: movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000047c9da: movabs al, byte ptr [0x840fc08548000000]; ret; 
0x000000000047824f: movabs al, byte ptr [0x852c8d4c000000]; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x00000000004aecd0: movabs al, byte ptr [0xc0fff8e370fff8e0]; in al, 0xf8; call qword ptr [rax]; 
0x00000000004af600: movabs al, byte ptr [0xc0fff97c30fff97c]; jnp 0xaf604; call qword ptr [rax + 0x7b]; 
0x00000000004af3e8: movabs al, byte ptr [0xc0fff97f30fff97f]; jle 0xaf3ec; call qword ptr [rax + 0x7e]; 
0x00000000004afa30: movabs al, byte ptr [0xc0fffa39b0fffa39]; cmp edx, edi; call rax; 
0x00000000004afb88: movabs al, byte ptr [0xc0fffa77a8fffa77]; ja 0xafb8d; jmp rax; 
0x000000000040a45b: movabs al, byte ptr [0xc2490fc08500000f]; add rsp, 8; ret; 
0x00000000004c3fb4: movabs al, byte ptr [0xc8c62d12fc87aa3c]; lodsb al, byte ptr [rsi]; or byte ptr [rdi + 0x26], al; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000004ae98c: movabs al, byte ptr [0xf0fff89380fff87a]; xchg eax, esp; clc; jmp qword ptr [rax - 0x6a]; 
0x00000000004aed8c: movabs al, byte ptr [0xf0fff92130fff92e]; and bh, cl; call rax; 
0x00000000004395cc: movabs al, byte ptr [0xf10eb834900000c]; xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042eb38: movabs al, byte ptr [0xf300000000002aa2]; ret; 
0x000000000049e844: movabs al, byte ptr [0xf30474c0850023ab]; ret; 
0x00000000004090c7: movabs al, byte ptr [0xff8100000152840f]; or byte ptr [rax], al; add al, al; jne 0x9270; mov rax, 0x6d2de0; ret; 
0x00000000004c261b: movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x0000000000445137: movabs byte ptr [0x8d49931463490006], al; adc al, 0x13; jmp rdx; 
0x00000000004aa994: movabs byte ptr [0xa2ffffd80e000001], al; add dword ptr [rax], eax; add byte ptr [rdx + 0xe000001], ah; fdivr st(7); jmp qword ptr [rdx + 0xe000001]; 
0x00000000004aa99c: movabs byte ptr [0xe000001a2000001], al; fdivr st(7); jmp qword ptr [rdx + 0xe000001]; 
0x00000000004aa980: movabs byte ptr [0xeffffd80e000001], al; fdivr st(7); jmp qword ptr [rdx + 0xe000001]; 
0x00000000004398ca: movabs byte ptr [0xf10eb8349000009], al; xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042eb7d: movabs byte ptr [0xffeb59058d48002a], al; dec dword ptr [rax - 0x77]; add eax, 0x2a7d1a; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2a7d04], rax; ret; 
0x000000000042c3e9: movabs dword ptr [0x8b4c001f0ffffffe], eax; adc byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004ab1d0: movabs dword ptr [0xa3ffffd80f000001], eax; add dword ptr [rax], eax; add byte ptr [rbx + 0xf000001], ah; fdivr st(7); jmp qword ptr [rbx + 0xf000001]; 
0x00000000004078ed: movabs dword ptr [0xb1046348f6890009], eax; add rax, rcx; jmp rax; 
0x00000000004ab1d8: movabs dword ptr [0xf000001a3000001], eax; fdivr st(7); jmp qword ptr [rbx + 0xf000001]; 
0x00000000004ab1bc: movabs dword ptr [0xfffffd80f000001], eax; fdivr st(7); jmp qword ptr [rbx + 0xf000001]; 
0x00000000004046bb: movabs eax, dword ptr [0x4920478b41000000]; movsxd rax, dword ptr [rbp + rax*4]; add rax, r13; jmp rax; 
0x000000000043cbab: movabs eax, dword ptr [0x499314634900071f]; lea edx, [rbx + rdx]; jmp rdx; 
0x00000000004ab9d0: movabs eax, dword ptr [0x8000001a1000001]; fdivr st(7); jmp qword ptr [rcx + 0x8000001]; 
0x00000000004452b7: movabs eax, dword ptr [0x8d49931463490006]; adc al, 0x13; jmp rdx; 
0x00000000004ab9b4: movabs eax, dword ptr [0x8ffffd808000001]; fdivr st(7); jmp qword ptr [rcx + 0x8000001]; 
0x00000000004ab9c8: movabs eax, dword ptr [0xa1ffffd808000001]; add dword ptr [rax], eax; add byte ptr [rcx + 0x8000001], ah; fdivr st(7); jmp qword ptr [rcx + 0x8000001]; 
0x00000000004076ea: movabs eax, dword ptr [0xc01901387f831375]; and eax, 0xffffffea; ret; 
0x00000000004c235f: movabs eax, dword ptr [0xdbd7170d7733db8]; shl dword ptr [rdi - 5], 1; ret; 
0x000000000043c1d8: movabs rbp, 0xf66d1ef0f66bdb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c2d8: movabs rsp, 0xf66d1ef0f66bcb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000041c87c: movaps xmmword ptr [rsp + 0xd0], xmm0; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000041c884: movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000041c88c: movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000043f93d: movdqa xmmword ptr [rdi - 0x20], xmm1; sub rdi, 0x20; lea r11, [rip + 0x6f3c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cf6d: movdqa xmmword ptr [rdi - 0x20], xmm1; sub rdi, 0x20; lea r11, [rip + 0x71bd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f84c: movdqa xmmword ptr [rdi - 0x40], xmm1; sub rdi, 0x40; lea r11, [rip + 0x6f4b4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ce7c: movdqa xmmword ptr [rdi - 0x40], xmm1; sub rdi, 0x40; lea r11, [rip + 0x71cc4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040754f: movdqu xmm0, xmmword ptr [rbx + 0xc0]; movups xmmword ptr [rax + 0xc0], xmm0; pop rbx; ret; 
0x0000000000453ad0: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000453440: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000453b10: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000453480: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000453470: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000453af0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000453460: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000453b90: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000453500: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004534e0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000453b50: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004534a0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000453b70: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000004534c0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004535e0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000453c30: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000453580: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000453c50: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004535a0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004535c0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000453ab0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x0000000000453ac0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000453430: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000453420: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000004535e4: movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000453c34: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000453584: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000453c54: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004535a4: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004535c4: movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000440c4a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6e0b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440afa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6e207]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004409aa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6e357]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044085a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6e4a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044070a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6e5f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004405ba: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6e747]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044046a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6e897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004401ca: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6eb37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044007a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6ec87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ff2a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6edd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fdda: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6ef27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fc8a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6f077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fb3a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6f1c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f9ea: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6f317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e27a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x708c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e12a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x70a17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dfda: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x70b67]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043de8a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x70cb7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dd3a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x70e07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dbea: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x70f57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043da9a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x710a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d7fa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x71347]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d6aa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x71497]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d55a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x715e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d40a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x71737]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d2ba: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x71887]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d16a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x719d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d01a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x71b27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440ceb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e019]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440b9b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e169]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440a4b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e2b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004408fb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e409]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044065b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e6a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004403bb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440322: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e9e2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044026b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6ea99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044011b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6ebe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ffcb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6ed39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fe7b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6ee89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fd2b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6efd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fbdb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6f129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fa8b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6f279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e31b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x70829]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e1cb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x70979]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043df2b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x70c19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dddb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x70d69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dc8b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x70eb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043db3b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71009]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d952: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x711f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d89b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x712a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d5fb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71549]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d4ab: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71699]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d35b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x717e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d20b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71939]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d0bb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71a89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004443f1: movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000456e42: movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000453c9d: movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004535ed: movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000444a61: movdqu xmmword ptr [rdi + 0x11], xmm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004449f1: movdqu xmmword ptr [rdi + 0x12], xmm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444981: movdqu xmmword ptr [rdi + 0x13], xmm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444911: movdqu xmmword ptr [rdi + 0x14], xmm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004448a1: movdqu xmmword ptr [rdi + 0x15], xmm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444831: movdqu xmmword ptr [rdi + 0x16], xmm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004447c1: movdqu xmmword ptr [rdi + 0x17], xmm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444751: movdqu xmmword ptr [rdi + 0x18], xmm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004446e1: movdqu xmmword ptr [rdi + 0x19], xmm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444671: movdqu xmmword ptr [rdi + 0x1a], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444601: movdqu xmmword ptr [rdi + 0x1b], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444591: movdqu xmmword ptr [rdi + 0x1c], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444521: movdqu xmmword ptr [rdi + 0x1d], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004444b1: movdqu xmmword ptr [rdi + 0x1e], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444441: movdqu xmmword ptr [rdi + 0x1f], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004443e7: movdqu xmmword ptr [rdi + 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000044467f: movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044460f: movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044459f: movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044452f: movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000453c3d: movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000045358d: movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004444bf: movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000453c5d: movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004535ad: movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000044444f: movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000453c7d: movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000004535cd: movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000444a6f: movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004449ff: movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044498f: movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044491f: movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004448af: movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044483f: movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004447cf: movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000044475f: movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004446ef: movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000456e47: movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000456dd4: movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000456e4d: movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000443bdb: movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000443c4b: movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000444386: movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000444306: movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000444276: movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004441f6: movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000444176: movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004440f6: movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000444076: movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443ff6: movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443f76: movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443ef6: movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443e76: movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443df6: movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443d66: movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443cd6: movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443c46: movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443bd1: movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000444377: movdqu xmmword ptr [rdi - 0x21], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004442f7: movdqu xmmword ptr [rdi - 0x22], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000444267: movdqu xmmword ptr [rdi - 0x23], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004441e7: movdqu xmmword ptr [rdi - 0x24], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000444167: movdqu xmmword ptr [rdi - 0x25], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004440e7: movdqu xmmword ptr [rdi - 0x26], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000444067: movdqu xmmword ptr [rdi - 0x27], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443fe7: movdqu xmmword ptr [rdi - 0x28], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443ee7: movdqu xmmword ptr [rdi - 0x2a], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443e67: movdqu xmmword ptr [rdi - 0x2b], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443de7: movdqu xmmword ptr [rdi - 0x2c], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443d57: movdqu xmmword ptr [rdi - 0x2d], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443cc7: movdqu xmmword ptr [rdi - 0x2e], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443c37: movdqu xmmword ptr [rdi - 0x2f], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443bc7: movdqu xmmword ptr [rdi - 0x30], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000453ab4: movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x0000000000453ac4: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000453434: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000453b17: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000453b37: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000453487: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000453477: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000453af7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000453467: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000453b98: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000453bb8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000453508: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004534e8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000453bfb: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000045354b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000453c1b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000045356b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000453bdc: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000045352c: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000453b58: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004534a8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000453b78: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000004534c8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000453ad8: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000453448: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000456e3e: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000453c99: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004535e9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000453c39: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000453589: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000453c59: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004535a9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000453c79: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000004535c9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004443fa: movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000444454: movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000456dd3: movdqu xmmword ptr fs:[rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000410d71: movnti dword ptr [rcx], ecx; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000000407550: movq mm0, qword ptr [rbx + 0xc0]; movups xmmword ptr [rax + 0xc0], xmm0; pop rbx; ret; 
0x0000000000453ad1: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000453441: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000453b11: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000453481: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000453471: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000453af1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000453461: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000453b91: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000453501: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004534e1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000453b51: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004534a1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000453b71: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000004534c1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004535e1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000453c31: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000453581: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000453c51: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004535a1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004535c1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000453ab1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x0000000000453ac1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000453431: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000453421: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000004535e5: movq mm2, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000453c35: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000453585: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000453c55: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004535a5: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004535c5: movq mm2, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000440c4b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x6e0b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440afb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x6e207]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004409ab: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x6e357]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044085b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x6e4a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044070b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x6e5f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004405bb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x6e747]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044046b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x6e897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004401cb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x6eb37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044007b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x6ec87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ff2b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x6edd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fddb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x6ef27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fc8b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x6f077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fb3b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x6f1c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f9eb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x6f317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e27b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x708c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e12b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x70a17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dfdb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x70b67]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043de8b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x70cb7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dd3b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x70e07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dbeb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x70f57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043da9b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x710a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d7fb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x71347]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d6ab: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x71497]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d55b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x715e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d40b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x71737]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d2bb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x71887]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d16b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x719d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d01b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x71b27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440cec: movq qword ptr [r8], mm0; lea r11, [rip + 0x6e019]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440b9c: movq qword ptr [r8], mm0; lea r11, [rip + 0x6e169]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440a4c: movq qword ptr [r8], mm0; lea r11, [rip + 0x6e2b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004408fc: movq qword ptr [r8], mm0; lea r11, [rip + 0x6e409]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044065c: movq qword ptr [r8], mm0; lea r11, [rip + 0x6e6a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004403bc: movq qword ptr [r8], mm0; lea r11, [rip + 0x6e949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440323: movq qword ptr [r8], mm0; lea r11, [rip + 0x6e9e2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044026c: movq qword ptr [r8], mm0; lea r11, [rip + 0x6ea99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044011c: movq qword ptr [r8], mm0; lea r11, [rip + 0x6ebe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ffcc: movq qword ptr [r8], mm0; lea r11, [rip + 0x6ed39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fe7c: movq qword ptr [r8], mm0; lea r11, [rip + 0x6ee89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fd2c: movq qword ptr [r8], mm0; lea r11, [rip + 0x6efd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fbdc: movq qword ptr [r8], mm0; lea r11, [rip + 0x6f129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fa8c: movq qword ptr [r8], mm0; lea r11, [rip + 0x6f279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e31c: movq qword ptr [r8], mm0; lea r11, [rip + 0x70829]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e1cc: movq qword ptr [r8], mm0; lea r11, [rip + 0x70979]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043df2c: movq qword ptr [r8], mm0; lea r11, [rip + 0x70c19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dddc: movq qword ptr [r8], mm0; lea r11, [rip + 0x70d69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dc8c: movq qword ptr [r8], mm0; lea r11, [rip + 0x70eb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043db3c: movq qword ptr [r8], mm0; lea r11, [rip + 0x71009]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d953: movq qword ptr [r8], mm0; lea r11, [rip + 0x711f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d89c: movq qword ptr [r8], mm0; lea r11, [rip + 0x712a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d5fc: movq qword ptr [r8], mm0; lea r11, [rip + 0x71549]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d4ac: movq qword ptr [r8], mm0; lea r11, [rip + 0x71699]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d35c: movq qword ptr [r8], mm0; lea r11, [rip + 0x717e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d20c: movq qword ptr [r8], mm0; lea r11, [rip + 0x71939]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d0bc: movq qword ptr [r8], mm0; lea r11, [rip + 0x71a89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440c4c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x6e0b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440afc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x6e207]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004409ac: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x6e357]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044085c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x6e4a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044070c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x6e5f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004405bc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x6e747]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044046c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x6e897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004401cc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x6eb37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044007c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x6ec87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ff2c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x6edd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fddc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x6ef27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fc8c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x6f077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fb3c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x6f1c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f9ec: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x6f317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e27c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x708c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e12c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x70a17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dfdc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x70b67]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043de8c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x70cb7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dd3c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x70e07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dbec: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x70f57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043da9c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x710a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d7fc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x71347]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d6ac: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x71497]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d55c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x715e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d40c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x71737]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d2bc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x71887]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d16c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x719d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d01c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x71b27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440ced: movq qword ptr [rax], mm0; lea r11, [rip + 0x6e019]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440b9d: movq qword ptr [rax], mm0; lea r11, [rip + 0x6e169]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440a4d: movq qword ptr [rax], mm0; lea r11, [rip + 0x6e2b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004408fd: movq qword ptr [rax], mm0; lea r11, [rip + 0x6e409]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044065d: movq qword ptr [rax], mm0; lea r11, [rip + 0x6e6a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004403bd: movq qword ptr [rax], mm0; lea r11, [rip + 0x6e949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440324: movq qword ptr [rax], mm0; lea r11, [rip + 0x6e9e2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044026d: movq qword ptr [rax], mm0; lea r11, [rip + 0x6ea99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044011d: movq qword ptr [rax], mm0; lea r11, [rip + 0x6ebe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ffcd: movq qword ptr [rax], mm0; lea r11, [rip + 0x6ed39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fe7d: movq qword ptr [rax], mm0; lea r11, [rip + 0x6ee89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fd2d: movq qword ptr [rax], mm0; lea r11, [rip + 0x6efd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fbdd: movq qword ptr [rax], mm0; lea r11, [rip + 0x6f129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fa8d: movq qword ptr [rax], mm0; lea r11, [rip + 0x6f279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e31d: movq qword ptr [rax], mm0; lea r11, [rip + 0x70829]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e1cd: movq qword ptr [rax], mm0; lea r11, [rip + 0x70979]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043df2d: movq qword ptr [rax], mm0; lea r11, [rip + 0x70c19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dddd: movq qword ptr [rax], mm0; lea r11, [rip + 0x70d69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dc8d: movq qword ptr [rax], mm0; lea r11, [rip + 0x70eb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043db3d: movq qword ptr [rax], mm0; lea r11, [rip + 0x71009]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d954: movq qword ptr [rax], mm0; lea r11, [rip + 0x711f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d89d: movq qword ptr [rax], mm0; lea r11, [rip + 0x712a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d5fd: movq qword ptr [rax], mm0; lea r11, [rip + 0x71549]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d4ad: movq qword ptr [rax], mm0; lea r11, [rip + 0x71699]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d35d: movq qword ptr [rax], mm0; lea r11, [rip + 0x717e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d20d: movq qword ptr [rax], mm0; lea r11, [rip + 0x71939]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d0bd: movq qword ptr [rax], mm0; lea r11, [rip + 0x71a89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004443f2: movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000456e43: movq qword ptr [rdi + 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000453c9e: movq qword ptr [rdi + 0x10], mm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004535ee: movq qword ptr [rdi + 0x10], mm2; ret; 
0x0000000000444a62: movq qword ptr [rdi + 0x11], mm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004449f2: movq qword ptr [rdi + 0x12], mm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444982: movq qword ptr [rdi + 0x13], mm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444912: movq qword ptr [rdi + 0x14], mm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004448a2: movq qword ptr [rdi + 0x15], mm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444832: movq qword ptr [rdi + 0x16], mm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004447c2: movq qword ptr [rdi + 0x17], mm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444752: movq qword ptr [rdi + 0x18], mm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004446e2: movq qword ptr [rdi + 0x19], mm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444672: movq qword ptr [rdi + 0x1a], mm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444602: movq qword ptr [rdi + 0x1b], mm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444592: movq qword ptr [rdi + 0x1c], mm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444522: movq qword ptr [rdi + 0x1d], mm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004444b2: movq qword ptr [rdi + 0x1e], mm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444442: movq qword ptr [rdi + 0x1f], mm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004443e8: movq qword ptr [rdi + 0x20], mm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000444680: movq qword ptr [rdi + 0xa], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444610: movq qword ptr [rdi + 0xb], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004445a0: movq qword ptr [rdi + 0xc], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444530: movq qword ptr [rdi + 0xd], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000453c3e: movq qword ptr [rdi + 0xd], mm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000045358e: movq qword ptr [rdi + 0xd], mm2; ret; 
0x00000000004444c0: movq qword ptr [rdi + 0xe], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000453c5e: movq qword ptr [rdi + 0xe], mm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004535ae: movq qword ptr [rdi + 0xe], mm2; ret; 
0x0000000000444450: movq qword ptr [rdi + 0xf], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000453c7e: movq qword ptr [rdi + 0xf], mm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000004535ce: movq qword ptr [rdi + 0xf], mm2; ret; 
0x0000000000444a70: movq qword ptr [rdi + 1], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444a00: movq qword ptr [rdi + 2], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444990: movq qword ptr [rdi + 3], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444920: movq qword ptr [rdi + 4], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004448b0: movq qword ptr [rdi + 5], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444840: movq qword ptr [rdi + 6], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004447d0: movq qword ptr [rdi + 7], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444760: movq qword ptr [rdi + 8], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004446f0: movq qword ptr [rdi + 9], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000456e48: movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000456dd5: movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000456e4e: movq qword ptr [rdi + rdx - 0x20], mm0; ret; 
0x0000000000443bdc: movq qword ptr [rdi - 0x10], mm0; ret; 
0x0000000000443c4c: movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000444387: movq qword ptr [rdi - 0x11], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000444307: movq qword ptr [rdi - 0x12], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000444277: movq qword ptr [rdi - 0x13], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004441f7: movq qword ptr [rdi - 0x14], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000444177: movq qword ptr [rdi - 0x15], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004440f7: movq qword ptr [rdi - 0x16], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000444077: movq qword ptr [rdi - 0x17], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443ff7: movq qword ptr [rdi - 0x18], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443f77: movq qword ptr [rdi - 0x19], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443ef7: movq qword ptr [rdi - 0x1a], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443e77: movq qword ptr [rdi - 0x1b], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443df7: movq qword ptr [rdi - 0x1c], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443d67: movq qword ptr [rdi - 0x1d], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443cd7: movq qword ptr [rdi - 0x1e], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443c47: movq qword ptr [rdi - 0x1f], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443bd2: movq qword ptr [rdi - 0x20], mm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000043f93e: movq qword ptr [rdi - 0x20], mm1; sub rdi, 0x20; lea r11, [rip + 0x6f3c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cf6e: movq qword ptr [rdi - 0x20], mm1; sub rdi, 0x20; lea r11, [rip + 0x71bd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444378: movq qword ptr [rdi - 0x21], mm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004442f8: movq qword ptr [rdi - 0x22], mm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000444268: movq qword ptr [rdi - 0x23], mm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004441e8: movq qword ptr [rdi - 0x24], mm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000444168: movq qword ptr [rdi - 0x25], mm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004440e8: movq qword ptr [rdi - 0x26], mm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000444068: movq qword ptr [rdi - 0x27], mm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443fe8: movq qword ptr [rdi - 0x28], mm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443ee8: movq qword ptr [rdi - 0x2a], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443e68: movq qword ptr [rdi - 0x2b], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443de8: movq qword ptr [rdi - 0x2c], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443d58: movq qword ptr [rdi - 0x2d], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443cc8: movq qword ptr [rdi - 0x2e], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443c38: movq qword ptr [rdi - 0x2f], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000443bc8: movq qword ptr [rdi - 0x30], mm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000043f84d: movq qword ptr [rdi - 0x40], mm1; sub rdi, 0x40; lea r11, [rip + 0x6f4b4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ce7d: movq qword ptr [rdi - 0x40], mm1; sub rdi, 0x40; lea r11, [rip + 0x71cc4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000453ab5: movq qword ptr [rdi], mm0; lea rax, [rdi + 0xf]; ret; 
0x0000000000453ac5: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000453435: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000453b18: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000453b38: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000453488: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000453478: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000453af8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000453468: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000453b99: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000453bb9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000453509: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004534e9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000453bfc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000045354c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000453c1c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000045356c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000453bdd: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000045352d: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000453b59: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004534a9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000453b79: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000004534c9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000453ad9: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000453449: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000456e3f: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000453c9a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004535ea: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000453c3a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000045358a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000453c5a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004535aa: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000453c7a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000004535ca: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004443fb: movq qword ptr [rdi], mm0; ret; 
0x0000000000444455: movq qword ptr [rdi], mm1; ret; 
0x00000000004c7640: movsb byte ptr [rdi], byte ptr [rsi]; adc al, 0; add byte ptr [rax - 0xc], ch; call qword ptr [rdi]; 
0x0000000000466b1c: movsb byte ptr [rdi], byte ptr [rsi]; and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004cc025: movsb byte ptr [rdi], byte ptr [rsi]; clc; call rsp; 
0x00000000004d1ce1: movsb byte ptr [rdi], byte ptr [rsi]; cld; jmp qword ptr [rsi]; 
0x00000000004560d5: movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000004ab6bc: movsb byte ptr [rdi], byte ptr [rsi]; fdivr st(7); call rsp; 
0x00000000004c24a2: movsb byte ptr [rdi], byte ptr [rsi]; in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x000000000040b07b: movsb byte ptr [rdi], byte ptr [rsi]; insb byte ptr [rdi], dx; or dword ptr [rax], eax; ret; 
0x00000000004c66ac: movsb byte ptr [rdi], byte ptr [rsi]; mov dl, 0xf3; jmp qword ptr [rbx]; 
0x00000000004c9b8c: movsb byte ptr [rdi], byte ptr [rsi]; ret 0xfff5; 
0x00000000004560c7: movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004c8c40: movsb byte ptr [rdi], byte ptr [rsi]; sub al, byte ptr [rax]; add ah, cl; cmc; call qword ptr [rdi]; 
0x00000000004b03e0: movsb byte ptr [rdi], byte ptr [rsi]; xchg dl, bh; jmp rcx; 
0x000000000048ed9c: movsb byte ptr [rdi], byte ptr [rsi]; xor eax, eax; ret; 
0x00000000004921e2: movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x00000000004755ac: movsx eax, byte ptr [rsi]; cmp edi, r8d; ja 0x75590; mov eax, r9d; ret; 
0x00000000004902cb: movsx eax, cl; neg eax; ret; 
0x0000000000490370: movsx eax, dl; sub eax, ecx; ret; 
0x000000000045fdf7: movsx ecx, byte ptr [rdx + 0x1a]; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000045fdfb: movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x00000000004755ab: movsx r8d, byte ptr [rsi]; cmp edi, r8d; ja 0x75590; mov eax, r9d; ret; 
0x000000000045fdf6: movsx r9, byte ptr [rdx + 0x1a]; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000049b408: movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x00000000004046c3: movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x000000000049bd09: movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 
0x000000000049a3b7: movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x000000000049a191: movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000049b941: movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x000000000049a192: movsxd rax, dword ptr [rax + rcx*4]; add rax, r8; jmp rax; 
0x000000000042652e: movsxd rax, dword ptr [rax - 0x77]; adc edi, dword ptr [rax + 1]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000425e6e: movsxd rax, dword ptr [rax - 0x77]; add ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000045afc1: movsxd rax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000045afc1: movsxd rax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x5afd0; ret; 
0x00000000004cc575: movsxd rax, dword ptr [rax]; add byte ptr [rax], cl; ret 0xfff8; 
0x00000000004783f7: movsxd rax, dword ptr [rax]; add byte ptr [rbp - 0x75], cl; je 0x78422; and byte ptr [rax + 1], cl; ret; 
0x00000000004046c4: movsxd rax, dword ptr [rbp + rax*4]; add rax, r13; jmp rax; 
0x000000000045c9bf: movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000045c948: movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x0000000000470a05: movsxd rax, dword ptr [rbx - 0x52743]; call qword ptr [rax]; 
0x000000000040c7d9: movsxd rax, dword ptr [rbx]; add byte ptr [rax], al; nop dword ptr [rax]; lea rax, [rip + 0x954ef]; ret; 
0x000000000048b53d: movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000047e1f7: movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000040cc11: movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; lea rcx, [rip + 0x97182]; jmp rax; 
0x000000000040f93c: movsxd rax, dword ptr [rcx + rax*4]; add rax, rdx; ret; 
0x000000000049b942: movsxd rax, dword ptr [rcx + rbx*4]; add rax, r9; jmp rax; 
0x00000000004078f3: movsxd rax, dword ptr [rcx + rsi*4]; add rax, rcx; jmp rax; 
0x000000000045612d: movsxd rax, dword ptr [rcx]; add byte ptr [rax], al; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000048b53e: movsxd rax, dword ptr [rcx]; add rax, rcx; jmp rax; 
0x000000000048be65: movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000049a3b8: movsxd rax, dword ptr [rdi + rax*4]; add rax, r15; jmp rax; 
0x000000000047e827: movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000048be66: movsxd rax, dword ptr [rdi]; add rax, rdi; jmp rax; 
0x0000000000408548: movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x0000000000400dc7: movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000458414: movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000401f57: movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; jmp rax; 
0x0000000000407a0e: movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x0000000000408549: movsxd rax, dword ptr [rdx]; add rax, rdx; jmp rax; 
0x000000000049bd0a: movsxd rax, dword ptr [rsi + rax*4]; add rax, r14; jmp rax; 
0x000000000047e08b: movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000457298: movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x0000000000457352: movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x000000000049b409: movsxd rax, dword ptr [rsp + rax*4]; add rax, r12; jmp rax; 
0x00000000004946bd: movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x0000000000455d67: movsxd rax, ecx; add rax, rdi; sub rax, rsi; ret; 
0x0000000000455d14: movsxd rax, ecx; ret; 
0x000000000044cffb: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044ec48: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000044e468: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000044e858: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044e078: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044db5b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044d33b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000044cb1b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000044e217: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044d67b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044ce5b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044c63b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000044d81b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000044e708: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044df28: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044f038: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044c97b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044cab1: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d7b1: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d2d1: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044e609: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044ef39: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044daf1: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044cdf1: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000044c911: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d611: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000044e759: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044df79: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000490a16: movsxd rbp, dword ptr [rip + 0x3349646c]; push rbp; or byte ptr [rcx + 0x33], cl; add byte ptr [r8 + 9], r9b; ret 0x840f; 
0x000000000048edeb: movsxd rbx, dword ptr [rax]; mov qword ptr [rbx + 0x10], rdx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004946b7: movsxd rbx, dword ptr [rdi]; adc dh, byte ptr [rbx - 0xc]; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x0000000000455d59: movsxd rbx, ecx; add cl, byte ptr [rdi]; xchg eax, edx; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x000000000043b40d: movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000004531e9: movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000467cb7: movsxd rcx, dword ptr [rax - 0x39]; ret 0xfff0; 
0x000000000043b40e: movsxd rcx, dword ptr [rbx + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000004531ea: movsxd rcx, dword ptr [rbx + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004572c0: movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000455da3: movsxd rcx, ecx; cmp cl, byte ptr [rax + 0x63]; leave; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x0000000000455da7: movsxd rcx, ecx; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x000000000041c257: movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x0000000000469acf: movsxd rdi, dword ptr [r11 + rsi*4]; add rdi, r11; jmp rdi; 
0x0000000000469ad0: movsxd rdi, dword ptr [rbx + rsi*4]; add rdi, r11; jmp rdi; 
0x00000000004339c9: movsxd rdi, dword ptr [rdi + 0x250001]; or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x000000000041c258: movsxd rdi, dword ptr [rdx + rdi*4]; add rdi, r10; jmp rdi; 
0x000000000043223b: movsxd rdi, edi; jmp qword ptr [rsi - 0x70]; 
0x000000000046a2d8: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000043cbaf: movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000404678: movsxd rdx, dword ptr [r14 + rdx*4]; add rdx, r14; jmp rdx; 
0x000000000043cbb0: movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000041bf6f: movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000404679: movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, r14; jmp rdx; 
0x000000000048d341: movsxd rdx, esp; mov edi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x000000000048d340: movsxd rdx, r12d; mov edi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x00000000004695d0: movsxd rsi, dword ptr [r8 + r9*4]; add rsi, r8; jmp rsi; 
0x00000000004695d1: movsxd rsi, dword ptr [rax + rcx*4]; add rsi, r8; jmp rsi; 
0x00000000004c8b39: movsxd rsi, ebp; jmp qword ptr [rcx + 1]; 
0x000000000049c54d: movsxd rsi, esi; je 0x9c560; cmp byte ptr [rdi + rsi + 0xd8], 0; je 0x9c560; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x00000000004551cc: movsxd rsi, esi; ret 0x7520; 
0x0000000000479f29: movsxd rsp, dword ptr [rbp - 8]; inc dword ptr [rbx + rcx*4 - 0x63]; idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x0000000000456067: movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000045606a: movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004561e8: movups xmm3, xmmword ptr [rsi + rdx - 0x20]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000045628f: movups xmmword ptr [r11], xmm4; ret; 
0x0000000000456316: movups xmmword ptr [r11], xmm8; ret; 
0x0000000000407557: movups xmmword ptr [rax + 0xc0], xmm0; pop rbx; ret; 
0x0000000000456317: movups xmmword ptr [rbx], xmm0; ret; 
0x0000000000456290: movups xmmword ptr [rbx], xmm4; ret; 
0x0000000000456282: movups xmmword ptr [rcx - 0x10], xmm6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000456286: movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000045628b: movups xmmword ptr [rcx - 0x30], xmm0; movups xmmword ptr [r11], xmm4; ret; 
0x000000000045628a: movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000045627f: movups xmmword ptr [rcx], xmm5; movups xmmword ptr [rcx - 0x10], xmm6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000004561f0: movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000045630a: movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x000000000045630e: movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000456312: movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000456072: movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004561f4: movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000004561c7: movups xmmword ptr [rdi + rdx - 0x10], xmm4; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000004561f9: movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000004561cc: movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000004561d1: movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000004561d6: movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000004561ed: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000045606f: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000456307: movups xmmword ptr [rdi], xmm4; movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000484b41: movzx eax, al; add rsp, 0x58; ret; 
0x000000000049b405: movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000047e087: movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000049781c: movzx eax, al; neg eax; ret; 
0x00000000004940c9: movzx eax, al; pop rbx; pop rbp; pop r12; ret; 
0x000000000043ad03: movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000045db50: movzx eax, al; xor edx, edx; add eax, 1; push rax; call rbx; 
0x00000000004248b0: movzx eax, bpl; pop rbx; pop rbp; pop r12; ret; 
0x0000000000493b57: movzx eax, byte ptr [r8 + rdx]; test rdi, rdi; mov byte ptr [rsi], al; jne 0x93b48; mov rax, rsi; ret; 
0x0000000000434fdd: movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000493b58: movzx eax, byte ptr [rax + rdx]; test rdi, rdi; mov byte ptr [rsi], al; jne 0x93b48; mov rax, rsi; ret; 
0x0000000000426d0b: movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049d3be: movzx eax, byte ptr [rax]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000425ab1: movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000421f8e: movzx eax, byte ptr [rax]; pop r12; pop r13; pop r14; ret; 
0x0000000000427b3f: movzx eax, byte ptr [rax]; ret; 
0x000000000047057b: movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x26301a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000047b407: movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000043b3b4: movzx eax, byte ptr [rdi + rcx + 0x20]; movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000043b3d4: movzx eax, byte ptr [rdi + rcx + 0x40]; movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000043b39a: movzx eax, byte ptr [rdi + rcx + 0x60]; movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000439454: movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000043b124: movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000044f298: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x63b5d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044dc28: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x651cd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044c078: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x66d7d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000449f28: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x68ecd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000434e6f: movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000434e08: movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004551f0: movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x0000000000455250: movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x0000000000455240: movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000455230: movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x0000000000455220: movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x0000000000455210: movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x0000000000455200: movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x00000000004555aa: movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x55725; xor eax, eax; ret; 
0x000000000043c2c0: movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000043c073: movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x00000000004551d7: movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x000000000044f2b3: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x63b43]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044dc43: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x651b3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044c093: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x66d63]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000449f43: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x68eb3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043b1a0: movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000043ace0: movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000434e23: movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000425ac0: movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000421fa0: movzx eax, byte ptr [rdx]; ret; 
0x0000000000470c1d: movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x262978]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x00000000004705c5: movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x262fd0]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x00000000004248b1: movzx eax, ch; pop rbx; pop rbp; pop r12; ret; 
0x0000000000457320: movzx eax, cl; pop rbx; ret; 
0x0000000000456df4: movzx eax, dh; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000045fec1: movzx eax, dh; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000004572d0: movzx eax, dl; and dh, 0xf0; mov edx, 0; cmove rax, rdx; pop rbx; ret; 
0x0000000000456df3: movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000045fec0: movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000049b93e: movzx ebx, bl; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x000000000047b43b: movzx ecx, byte ptr [rdi + rax]; lea rax, [rip + 0x25895a]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000045582a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x55820; ret; 
0x00000000004558da: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x558d0; ret; 
0x0000000000455b9a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x55b90; sub rax, 1; ret; 
0x0000000000434e04: movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004350c6: movzx ecx, byte ptr [rsi + rdx]; test al, al; jne 0x350b0; xor eax, eax; sub eax, ecx; ret; 
0x000000000043c2c4: movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x0000000000456148: movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000434e20: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000043b1a3: movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000049a18e: movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000045616c: movzx ecx, word ptr [rsi + rdx - 2]; movzx esi, word ptr [rsi]; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x0000000000401cd1: movzx edi, bh; mov dword ptr [rip + 0x2d442e], edi; ret; 
0x000000000047c091: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x258004]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047c03e: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x258057]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047bb11: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x258084]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047beb0: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2581e5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047be6b: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x25822a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047be26: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x25826f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047bdd7: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2582be]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047052a: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x262f6b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004708d9: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2630bc]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047088b: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x26310a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004707dc: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2631b9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470780: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x263215]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004704e0: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2634b5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470492: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x263503]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000470031: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x263664]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000401cd0: movzx edi, dil; mov dword ptr [rip + 0x2d442e], edi; ret; 
0x000000000041c254: movzx edi, dl; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x0000000000432220: movzx edx, byte ptr [rcx + rax]; cmp dl, r8b; jne 0x32210; sub rax, 0x10; ret; 
0x0000000000434fe1: movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000455a4a: movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x55a40; lea rax, [rcx - 1]; ret; 
0x000000000043b3b9: movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000043b3d9: movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000043b39f: movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000044de4f: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x64fa6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000044c31f: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x66ad6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000439458: movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000043b128: movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000434e73: movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000043a283: movzx edx, byte ptr [rsi + rdx]; test r8d, r8d; je 0x3a28d; xchg eax, edx; sub eax, edx; ret; 
0x00000000004551f4: movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x0000000000455254: movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x0000000000455244: movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000455234: movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x0000000000455224: movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x0000000000455214: movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x0000000000455204: movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x00000000004443a0: movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043c077: movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x00000000004551db: movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000444a80: movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000043ace3: movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000457360: movzx edx, cl; mov eax, 0; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x000000000043ad09: movzx edx, dl; sub eax, edx; ret; 
0x0000000000444320: movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000444a10: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000425fb1: movzx esi, byte ptr [r14]; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000425fb2: movzx esi, byte ptr [rsi]; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000402091: movzx esi, dh; mov dword ptr [rip + 0x2d4086], esi; ret; 
0x0000000000402081: movzx esi, dh; mov dword ptr [rip + 0x2d4092], esi; ret; 
0x0000000000402071: movzx esi, dh; mov dword ptr [rip + 0x2d4096], esi; ret; 
0x0000000000402061: movzx esi, dh; mov dword ptr [rip + 0x2d40a2], esi; ret; 
0x0000000000401f31: movzx esi, dh; mov dword ptr [rip + 0x2d41da], esi; ret; 
0x0000000000401f21: movzx esi, dh; mov dword ptr [rip + 0x2d41ee], esi; ret; 
0x0000000000401f11: movzx esi, dh; mov dword ptr [rip + 0x2d420a], esi; ret; 
0x0000000000402090: movzx esi, sil; mov dword ptr [rip + 0x2d4086], esi; ret; 
0x0000000000402080: movzx esi, sil; mov dword ptr [rip + 0x2d4092], esi; ret; 
0x0000000000402070: movzx esi, sil; mov dword ptr [rip + 0x2d4096], esi; ret; 
0x0000000000402060: movzx esi, sil; mov dword ptr [rip + 0x2d40a2], esi; ret; 
0x0000000000401f30: movzx esi, sil; mov dword ptr [rip + 0x2d41da], esi; ret; 
0x0000000000401f20: movzx esi, sil; mov dword ptr [rip + 0x2d41ee], esi; ret; 
0x0000000000401f10: movzx esi, sil; mov dword ptr [rip + 0x2d420a], esi; ret; 
0x0000000000456171: movzx esi, word ptr [rsi]; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x000000000049b93d: movzx r11d, r11b; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x000000000042d0d8: mul byte ptr [rdi + rax*8]; or al, 0; add byte ptr [rax], al; mov rax, rsi; ret; 
0x0000000000482647: mul byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000049c603: mul byte ptr [rsi - 0x70]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000458717: neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000004587a7: neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000458a57: neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000402fa4: neg eax; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000427b7f: neg eax; ret; 
0x000000000048dbd2: neg eax; test r8b, r8b; cmove rcx, rax; mov rax, rcx; ret; 
0x000000000048dbd1: neg rax; test r8b, r8b; cmove rcx, rax; mov rax, rcx; ret; 
0x0000000000483b68: nop dword ptr [rax + rax]; add rax, 3; ret; 
0x000000000045a47b: nop dword ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000432c83: nop dword ptr [rax + rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000043a588: nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000043a7b8: nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000041d778: nop dword ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000429098: nop dword ptr [rax + rax]; call rax; 
0x000000000048e7ab: nop dword ptr [rax + rax]; cmp byte ptr [rip + 0x24b071], 0; jne 0x8e7c8; mov rax, qword ptr [rip + 0x24ac50]; ret; 
0x0000000000425a63: nop dword ptr [rax + rax]; cmp eax, -1; je 0x259e8; mov eax, 0xffffffff; ret; 
0x0000000000425c53: nop dword ptr [rax + rax]; cmp eax, -1; je 0x25bd8; mov eax, 0xffffffff; ret; 
0x00000000004095f8: nop dword ptr [rax + rax]; lea eax, [rsi*8 + 0x14]; ret; 
0x0000000000453f78: nop dword ptr [rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x0000000000453f88: nop dword ptr [rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x0000000000453f98: nop dword ptr [rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x0000000000453fa8: nop dword ptr [rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x0000000000453fb8: nop dword ptr [rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x0000000000453ef8: nop dword ptr [rax + rax]; lea rax, [rdi + 1]; ret; 
0x0000000000453f08: nop dword ptr [rax + rax]; lea rax, [rdi + 2]; ret; 
0x0000000000453f18: nop dword ptr [rax + rax]; lea rax, [rdi + 3]; ret; 
0x0000000000453f28: nop dword ptr [rax + rax]; lea rax, [rdi + 4]; ret; 
0x0000000000453f38: nop dword ptr [rax + rax]; lea rax, [rdi + 5]; ret; 
0x0000000000453f48: nop dword ptr [rax + rax]; lea rax, [rdi + 6]; ret; 
0x0000000000453f58: nop dword ptr [rax + rax]; lea rax, [rdi + 8]; ret; 
0x0000000000453f68: nop dword ptr [rax + rax]; lea rax, [rdi + 9]; ret; 
0x0000000000453ee8: nop dword ptr [rax + rax]; lea rax, [rdi]; ret; 
0x0000000000493d88: nop dword ptr [rax + rax]; lea rax, [rip + 0x245349]; mov qword ptr [rip + 0x24532a], rax; ret; 
0x000000000045c838: nop dword ptr [rax + rax]; lea rax, [rip + 0x27aaf9]; ret; 
0x000000000040c858: nop dword ptr [rax + rax]; lea rax, [rip + 0x954a7]; ret; 
0x000000000040c848: nop dword ptr [rax + rax]; lea rax, [rip + 0x954ac]; ret; 
0x000000000040c838: nop dword ptr [rax + rax]; lea rax, [rip + 0x954b0]; ret; 
0x000000000040c818: nop dword ptr [rax + rax]; lea rax, [rip + 0x954bc]; ret; 
0x000000000040c808: nop dword ptr [rax + rax]; lea rax, [rip + 0x954c7]; ret; 
0x000000000040c7e8: nop dword ptr [rax + rax]; lea rax, [rip + 0x954d8]; ret; 
0x000000000040c7f8: nop dword ptr [rax + rax]; lea rax, [rip + 0x954e4]; ret; 
0x000000000040c868: nop dword ptr [rax + rax]; lea rax, [rip + 0x95528]; ret; 
0x000000000040c828: nop dword ptr [rax + rax]; lea rax, [rip + 0x9556f]; ret; 
0x000000000040bc48: nop dword ptr [rax + rax]; lea rax, [rip + 0x960b7]; ret; 
0x000000000040bc38: nop dword ptr [rax + rax]; lea rax, [rip + 0x960bc]; ret; 
0x000000000040bc28: nop dword ptr [rax + rax]; lea rax, [rip + 0x960c0]; ret; 
0x000000000040bc08: nop dword ptr [rax + rax]; lea rax, [rip + 0x960cc]; ret; 
0x000000000040bbf8: nop dword ptr [rax + rax]; lea rax, [rip + 0x960d7]; ret; 
0x000000000040bbd8: nop dword ptr [rax + rax]; lea rax, [rip + 0x960e8]; ret; 
0x000000000040bbe8: nop dword ptr [rax + rax]; lea rax, [rip + 0x960f4]; ret; 
0x000000000040bc58: nop dword ptr [rax + rax]; lea rax, [rip + 0x96138]; ret; 
0x000000000040bc18: nop dword ptr [rax + rax]; lea rax, [rip + 0x9617f]; ret; 
0x000000000040b038: nop dword ptr [rax + rax]; lea rax, [rip + 0x96cc7]; ret; 
0x000000000040b028: nop dword ptr [rax + rax]; lea rax, [rip + 0x96ccc]; ret; 
0x000000000040b018: nop dword ptr [rax + rax]; lea rax, [rip + 0x96cd0]; ret; 
0x000000000040aff8: nop dword ptr [rax + rax]; lea rax, [rip + 0x96cdc]; ret; 
0x000000000040afe8: nop dword ptr [rax + rax]; lea rax, [rip + 0x96ce7]; ret; 
0x000000000040afc8: nop dword ptr [rax + rax]; lea rax, [rip + 0x96cf8]; ret; 
0x000000000040afd8: nop dword ptr [rax + rax]; lea rax, [rip + 0x96d04]; ret; 
0x000000000040b048: nop dword ptr [rax + rax]; lea rax, [rip + 0x96d48]; ret; 
0x000000000040b008: nop dword ptr [rax + rax]; lea rax, [rip + 0x96d8f]; ret; 
0x000000000040a328: nop dword ptr [rax + rax]; lea rax, [rip + 0x979e3]; ret; 
0x000000000040a318: nop dword ptr [rax + rax]; lea rax, [rip + 0x979e7]; ret; 
0x000000000040a308: nop dword ptr [rax + rax]; lea rax, [rip + 0x979ec]; ret; 
0x000000000040a2f8: nop dword ptr [rax + rax]; lea rax, [rip + 0x979f0]; ret; 
0x000000000040a2d8: nop dword ptr [rax + rax]; lea rax, [rip + 0x979fc]; ret; 
0x000000000040a2c8: nop dword ptr [rax + rax]; lea rax, [rip + 0x97a07]; ret; 
0x000000000040a2a8: nop dword ptr [rax + rax]; lea rax, [rip + 0x97a18]; ret; 
0x000000000040a2e8: nop dword ptr [rax + rax]; lea rax, [rip + 0x97a1e]; ret; 
0x000000000040a2b8: nop dword ptr [rax + rax]; lea rax, [rip + 0x97a24]; ret; 
0x00000000004276bb: nop dword ptr [rax + rax]; lea rdx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000421cd8: nop dword ptr [rax + rax]; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x0000000000453948: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000453328: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000045396b: nop dword ptr [rax + rax]; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000453338: nop dword ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000432b4b: nop dword ptr [rax + rax]; mov eax, 0x16; ret; 
0x00000000004598ab: nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x00000000004598ab: nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x598c0; ret; 
0x0000000000458e2b: nop dword ptr [rax + rax]; mov eax, 0x20; syscall; 
0x0000000000458e2b: nop dword ptr [rax + rax]; mov eax, 0x20; syscall; cmp rax, -0xfff; jae 0x58e40; ret; 
0x000000000048485b: nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x000000000048485b: nop dword ptr [rax + rax]; mov eax, 0x66; syscall; ret; 
0x0000000000484878: nop dword ptr [rax + rax]; mov eax, 0x68; syscall; 
0x0000000000484878: nop dword ptr [rax + rax]; mov eax, 0x68; syscall; ret; 
0x0000000000484868: nop dword ptr [rax + rax]; mov eax, 0x6b; syscall; 
0x0000000000484868: nop dword ptr [rax + rax]; mov eax, 0x6b; syscall; ret; 
0x0000000000484888: nop dword ptr [rax + rax]; mov eax, 0x6c; syscall; 
0x0000000000484888: nop dword ptr [rax + rax]; mov eax, 0x6c; syscall; ret; 
0x000000000045987b: nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000045987b: nop dword ptr [rax + rax]; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x59890; ret; 
0x0000000000459848: nop dword ptr [rax + rax]; mov eax, 0xb; syscall; 
0x0000000000409bc8: nop dword ptr [rax + rax]; mov eax, 0xffffff20; ret; 
0x0000000000409db8: nop dword ptr [rax + rax]; mov eax, 0xffffff21; ret; 
0x0000000000409da8: nop dword ptr [rax + rax]; mov eax, 0xffffff22; ret; 
0x0000000000409d98: nop dword ptr [rax + rax]; mov eax, 0xffffff23; ret; 
0x0000000000409d88: nop dword ptr [rax + rax]; mov eax, 0xffffff2a; ret; 
0x0000000000409d78: nop dword ptr [rax + rax]; mov eax, 0xffffff2b; ret; 
0x0000000000409d68: nop dword ptr [rax + rax]; mov eax, 0xffffff2c; ret; 
0x0000000000409d58: nop dword ptr [rax + rax]; mov eax, 0xffffff2d; ret; 
0x0000000000409d48: nop dword ptr [rax + rax]; mov eax, 0xffffff34; ret; 
0x0000000000409d38: nop dword ptr [rax + rax]; mov eax, 0xffffff35; ret; 
0x0000000000409d28: nop dword ptr [rax + rax]; mov eax, 0xffffff36; ret; 
0x0000000000409d18: nop dword ptr [rax + rax]; mov eax, 0xffffff37; ret; 
0x0000000000409cb8: nop dword ptr [rax + rax]; mov eax, 0xffffff88; ret; 
0x0000000000409c88: nop dword ptr [rax + rax]; mov eax, 0xffffff89; ret; 
0x0000000000409be8: nop dword ptr [rax + rax]; mov eax, 0xffffff8a; ret; 
0x0000000000409c78: nop dword ptr [rax + rax]; mov eax, 0xffffff8b; ret; 
0x0000000000409ca8: nop dword ptr [rax + rax]; mov eax, 0xffffff8c; ret; 
0x0000000000409c38: nop dword ptr [rax + rax]; mov eax, 0xffffff8d; ret; 
0x0000000000409cd8: nop dword ptr [rax + rax]; mov eax, 0xffffff8e; ret; 
0x0000000000409ce8: nop dword ptr [rax + rax]; mov eax, 0xffffff8f; ret; 
0x0000000000409c68: nop dword ptr [rax + rax]; mov eax, 0xffffff90; ret; 
0x0000000000409cc8: nop dword ptr [rax + rax]; mov eax, 0xffffff91; ret; 
0x0000000000409c58: nop dword ptr [rax + rax]; mov eax, 0xffffff92; ret; 
0x0000000000409c98: nop dword ptr [rax + rax]; mov eax, 0xffffff93; ret; 
0x0000000000409d08: nop dword ptr [rax + rax]; mov eax, 0xffffff94; ret; 
0x0000000000409c18: nop dword ptr [rax + rax]; mov eax, 0xffffff95; ret; 
0x0000000000409c28: nop dword ptr [rax + rax]; mov eax, 0xffffff96; ret; 
0x0000000000409bd8: nop dword ptr [rax + rax]; mov eax, 0xffffff97; ret; 
0x0000000000409c48: nop dword ptr [rax + rax]; mov eax, 0xffffff98; ret; 
0x0000000000409c08: nop dword ptr [rax + rax]; mov eax, 0xffffff99; ret; 
0x0000000000409bf8: nop dword ptr [rax + rax]; mov eax, 0xffffff9a; ret; 
0x0000000000409cf8: nop dword ptr [rax + rax]; mov eax, 0xffffff9b; ret; 
0x0000000000402478: nop dword ptr [rax + rax]; mov eax, 0xffffffa1; ret; 
0x00000000004095eb: nop dword ptr [rax + rax]; mov eax, 0xffffffdf; ret; 
0x0000000000400ff8: nop dword ptr [rax + rax]; mov eax, 0xffffffea; ret; 
0x00000000004279a8: nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000049d428: nop dword ptr [rax + rax]; mov eax, 2; ret; 
0x00000000004276cb: nop dword ptr [rax + rax]; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x00000000004078fb: nop dword ptr [rax + rax]; mov eax, dword ptr [rdi + 0x24]; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000045aedb: nop dword ptr [rax + rax]; mov eax, dword ptr [rip + 0x27ea3a]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000402348: nop dword ptr [rax + rax]; mov eax, dword ptr [rip + 0x2d3dae]; ret; 
0x00000000004581c8: nop dword ptr [rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x000000000047fa63: nop dword ptr [rax + rax]; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000444208: nop dword ptr [rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045335b: nop dword ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000045b4a8: nop dword ptr [rax + rax]; mov qword ptr [rax + 0x20], rsi; ret; 
0x000000000049c5a8: nop dword ptr [rax + rax]; mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000426908: nop dword ptr [rax + rax]; mov qword ptr [rdi + 0xa0], -1; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000487c8b: nop dword ptr [rax + rax]; mov qword ptr [rsi], -1; xor eax, eax; ret; 
0x000000000046a2e8: nop dword ptr [rax + rax]; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x000000000046a308: nop dword ptr [rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000046a328: nop dword ptr [rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x000000000041079b: nop dword ptr [rax + rax]; mov rax, -0x40; add rax, qword ptr fs:[0]; ret; 
0x00000000004587b3: nop dword ptr [rax + rax]; mov rax, -0x40; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000484c53: nop dword ptr [rax + rax]; mov rax, -0x40; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000046a2cb: nop dword ptr [rax + rax]; mov rax, -0x58; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000426c5b: nop dword ptr [rax + rax]; mov rax, -1; ret; 
0x0000000000409228: nop dword ptr [rax + rax]; mov rax, 0x6d2ca0; ret; 
0x000000000040917b: nop dword ptr [rax + rax]; mov rax, 0x6d2d20; ret; 
0x0000000000409218: nop dword ptr [rax + rax]; mov rax, 0x6d2ea0; ret; 
0x0000000000409273: nop dword ptr [rax + rax]; mov rax, 0x6d2ee0; ret; 
0x00000000004091a8: nop dword ptr [rax + rax]; mov rax, 0x6d2fa0; ret; 
0x00000000004094a8: nop dword ptr [rax + rax]; mov rax, 0x6d52c0; pop rbx; ret; 
0x0000000000409198: nop dword ptr [rax + rax]; mov rax, 0x6d5300; ret; 
0x0000000000409188: nop dword ptr [rax + rax]; mov rax, 0x6d5340; ret; 
0x0000000000409238: nop dword ptr [rax + rax]; mov rax, 0x6d5380; ret; 
0x0000000000409248: nop dword ptr [rax + rax]; mov rax, 0x6d53c0; ret; 
0x0000000000409258: nop dword ptr [rax + rax]; mov rax, 0x6d5400; ret; 
0x000000000046a488: nop dword ptr [rax + rax]; mov rax, 0xf; syscall; 
0x0000000000483b88: nop dword ptr [rax + rax]; mov rax, 1; ret; 
0x0000000000483b98: nop dword ptr [rax + rax]; mov rax, 2; ret; 
0x0000000000483ba8: nop dword ptr [rax + rax]; mov rax, 3; ret; 
0x0000000000483bb8: nop dword ptr [rax + rax]; mov rax, 4; ret; 
0x0000000000483bc8: nop dword ptr [rax + rax]; mov rax, 5; ret; 
0x0000000000483bd8: nop dword ptr [rax + rax]; mov rax, 6; ret; 
0x0000000000483be8: nop dword ptr [rax + rax]; mov rax, 7; ret; 
0x0000000000490ec8: nop dword ptr [rax + rax]; mov rax, qword ptr [rax + 8]; ret; 
0x000000000048b858: nop dword ptr [rax + rax]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000042839b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000004812c8: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000427a18: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049c528: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000049c5b8: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000049c618: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000049c608: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000049c5c8: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000042853b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2ae306], 1; mov qword ptr [rip + 0x2ae2cb], rax; ret; 
0x000000000045e7f8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x27b191]; ret; 
0x00000000004279f8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2ae759]; ret; 
0x000000000049a2f8: nop dword ptr [rax + rax]; mov rax, qword ptr [rsi + 0xa8]; ret; 
0x000000000048402b: nop dword ptr [rax + rax]; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000482e68: nop dword ptr [rax + rax]; mov rax, r8; vzeroupper; ret; 
0x0000000000427a28: nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000004539db: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000004533bb: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000004595bb: nop dword ptr [rax + rax]; mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000458b1b: nop dword ptr [rax + rax]; mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000045339b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000042f66b: nop dword ptr [rax + rax]; mov rsi, qword ptr [rsp + 0x68]; call rax; 
0x0000000000432928: nop dword ptr [rax + rax]; mov rsi, rbp; mov rdi, rax; call rcx; 
0x0000000000490368: nop dword ptr [rax + rax]; movsx eax, dl; sub eax, ecx; ret; 
0x000000000045524b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000045523b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000045522b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000045521b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000045520b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x00000000004551fb: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000043b19b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000425abb: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000421f98: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdx]; ret; 
0x000000000045febb: nop dword ptr [rax + rax]; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000401cc8: nop dword ptr [rax + rax]; movzx edi, dil; mov dword ptr [rip + 0x2d442e], edi; ret; 
0x0000000000444398: nop dword ptr [rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000444318: nop dword ptr [rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000040208b: nop dword ptr [rax + rax]; movzx esi, sil; mov dword ptr [rip + 0x2d4086], esi; ret; 
0x000000000040207b: nop dword ptr [rax + rax]; movzx esi, sil; mov dword ptr [rip + 0x2d4092], esi; ret; 
0x000000000040206b: nop dword ptr [rax + rax]; movzx esi, sil; mov dword ptr [rip + 0x2d4096], esi; ret; 
0x0000000000401f2b: nop dword ptr [rax + rax]; movzx esi, sil; mov dword ptr [rip + 0x2d41da], esi; ret; 
0x0000000000401f1b: nop dword ptr [rax + rax]; movzx esi, sil; mov dword ptr [rip + 0x2d41ee], esi; ret; 
0x0000000000401f0b: nop dword ptr [rax + rax]; movzx esi, sil; mov dword ptr [rip + 0x2d420a], esi; ret; 
0x00000000004598a3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x0000000000484853: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x0000000000459873: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x0000000000402341: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov eax, dword ptr [rip + 0x2d3dae]; ret; 
0x0000000000444201: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000046a301: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000046a321: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x000000000046a481: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x0000000000444391: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000444311: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000494726: nop dword ptr [rax + rax]; nop; mov eax, 0x27; syscall; 
0x000000000045afb6: nop dword ptr [rax + rax]; nop; mov eax, 0x63; syscall; 
0x00000000004840f6: nop dword ptr [rax + rax]; nop; mov eax, 0xc9; syscall; 
0x000000000048af3b: nop dword ptr [rax + rax]; or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x0000000000400ab3: nop dword ptr [rax + rax]; pop rbp; ret; 
0x0000000000401263: nop dword ptr [rax + rax]; pop rbx; mov eax, 0xffffffea; pop rbp; pop r12; ret; 
0x0000000000420b48: nop dword ptr [rax + rax]; pop rbx; ret; 
0x0000000000426da3: nop dword ptr [rax + rax]; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x0000000000481023: nop dword ptr [rax + rax]; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x00000000004321ab: nop dword ptr [rax + rax]; test byte ptr [rdi + rdx - 8], 1; lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x000000000043aa7b: nop dword ptr [rax + rax]; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000043aa58: nop dword ptr [rax + rax]; vzeroupper; xor eax, eax; ret; 
0x000000000040116b: nop dword ptr [rax + rax]; xor eax, eax; add rsp, 8; ret; 
0x0000000000401178: nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x00000000004829c8: nop dword ptr [rax + rax]; xor eax, eax; vzeroupper; ret; 
0x000000000040cca3: nop dword ptr [rax + rax]; xor ebx, ebx; mov rax, rbx; pop rbx; ret; 
0x000000000041f148: nop dword ptr [rax + rax]; xor esi, esi; mov rax, rsi; ret; 
0x0000000000453d28: nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x0000000000483b5c: nop dword ptr [rax]; add rax, 1; ret; 
0x0000000000406cfc: nop dword ptr [rax]; add rsp, 8; mov eax, 0xffffffef; pop rbx; pop rbp; ret; 
0x0000000000407bfd: nop dword ptr [rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000043ca1c: nop dword ptr [rax]; and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000043a579: nop dword ptr [rax]; bsf eax, eax; add rax, rdi; ret; 
0x000000000043a599: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000043a56c: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000043a5bc: nop dword ptr [rax]; bsf eax, eax; sub rdx, rax; jbe 0x3a5f0; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000406ab4: nop dword ptr [rax]; cmp ecx, eax; seta al; ret; 
0x00000000004091ec: nop dword ptr [rax]; cmp edi, 0x40000008; jne 0x9270; mov rax, 0x6d2d60; ret; 
0x000000000040c7dd: nop dword ptr [rax]; lea rax, [rip + 0x954ef]; ret; 
0x000000000040bbcd: nop dword ptr [rax]; lea rax, [rip + 0x960ff]; ret; 
0x000000000040afbd: nop dword ptr [rax]; lea rax, [rip + 0x96d0f]; ret; 
0x000000000040a299: nop dword ptr [rax]; lea rax, [rip + 0x97a2f]; ret; 
0x0000000000400d7c: nop dword ptr [rax]; lea rax, [rip + 0xa0b71]; ret; 
0x0000000000408b64: nop dword ptr [rax]; mov byte ptr [rax + 0xc], 0; xor eax, eax; ret; 
0x00000000004097c9: nop dword ptr [rax]; mov dword ptr [rdi], 0x66; xor eax, eax; ret; 
0x00000000004097bc: nop dword ptr [rax]; mov dword ptr [rdi], 0x75; xor eax, eax; ret; 
0x000000000042eb9d: nop dword ptr [rax]; mov dword ptr [rip + 0x2aa226], 0; ret; 
0x00000000004328cd: nop dword ptr [rax]; mov eax, 0x16; ret; 
0x00000000004586fc: nop dword ptr [rax]; mov eax, 0x18; syscall; 
0x00000000004586fc: nop dword ptr [rax]; mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x58710; ret; 
0x00000000004979d9: nop dword ptr [rax]; mov eax, 0x26; syscall; 
0x0000000000402025: nop dword ptr [rax]; mov eax, 0xffffffa1; ret; 
0x00000000004095a4: nop dword ptr [rax]; mov eax, 0xffffffdf; ret; 
0x0000000000407b4c: nop dword ptr [rax]; mov eax, 0xffffffea; ret; 
0x00000000004812b5: nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x0000000000458b49: nop dword ptr [rax]; mov eax, 1; syscall; 
0x0000000000458dfd: nop dword ptr [rax]; mov eax, 3; syscall; 
0x0000000000458b7c: nop dword ptr [rax]; mov eax, 8; syscall; 
0x000000000049492c: nop dword ptr [rax]; mov eax, dword ptr [rip + 0x244fea]; ret; 
0x000000000045338d: nop dword ptr [rax]; mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000047f785: nop dword ptr [rax]; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000444929: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000045af5c: nop dword ptr [rax]; mov r10, rcx; mov eax, 0x19; syscall; 
0x000000000046a68d: nop dword ptr [rax]; mov rax, -0x40; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004094b9: nop dword ptr [rax]; mov rax, 0x6d2ca0; pop rbx; ret; 
0x00000000004094c9: nop dword ptr [rax]; mov rax, 0x6d2ce0; pop rbx; ret; 
0x00000000004094d9: nop dword ptr [rax]; mov rax, 0x6d2d20; pop rbx; ret; 
0x0000000000409509: nop dword ptr [rax]; mov rax, 0x6d2d60; pop rbx; ret; 
0x00000000004094f9: nop dword ptr [rax]; mov rax, 0x6d2da0; pop rbx; ret; 
0x00000000004094e9: nop dword ptr [rax]; mov rax, 0x6d5300; pop rbx; ret; 
0x0000000000494285: nop dword ptr [rax]; mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x00000000004283cc: nop dword ptr [rax]; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2ae45d], rax; ret; 
0x00000000004283bc: nop dword ptr [rax]; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2ae475], rax; ret; 
0x0000000000466cc9: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x272201]; ret; 
0x000000000045e7ed: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x27b191]; ret; 
0x0000000000429b0c: nop dword ptr [rax]; mov rax, rdx; ret; 
0x00000000004533dd: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000004533ed: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000004587ed: nop dword ptr [rax]; mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000444769: nop dword ptr [rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000042eda4: nop dword ptr [rax]; mov rsi, qword ptr [rsp + 0x28]; add rsp, 0x18; pop rbx; pop rbp; jmp rax; 
0x0000000000431cac: nop dword ptr [rax]; mov rsi, qword ptr [rsp + 0x28]; mov rdi, rbp; call rax; 
0x000000000045343c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000453abd: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000453429: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000043acdd: nop dword ptr [rax]; movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000457319: nop dword ptr [rax]; movzx eax, cl; pop rbx; ret; 
0x0000000000444a79: nop dword ptr [rax]; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x0000000000444a09: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000040205c: nop dword ptr [rax]; movzx esi, sil; mov dword ptr [rip + 0x2d40a2], esi; ret; 
0x000000000043a7b2: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000453333: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004279d3: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x00000000004812c3: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000427a13: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000004279f2: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x2ae759]; ret; 
0x0000000000455bc2: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; xor eax, eax; ret; 
0x00000000004829c2: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; xor eax, eax; vzeroupper; ret; 
0x000000000048afec: nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x0000000000400af5: nop dword ptr [rax]; pop rbp; ret; 
0x000000000040193c: nop dword ptr [rax]; pop rbx; ret; 
0x000000000042908d: nop dword ptr [rax]; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000043b16d: nop dword ptr [rax]; ret; 
0x0000000000426015: nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000458a79: nop dword ptr [rax]; xor eax, eax; syscall; 
0x0000000000410034: nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000483b67: nop dword ptr cs:[rax + rax]; add rax, 3; ret; 
0x000000000043a7b7: nop dword ptr cs:[rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x00000000004095f7: nop dword ptr cs:[rax + rax]; lea eax, [rsi*8 + 0x14]; ret; 
0x0000000000453f77: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x0000000000453f87: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x0000000000453f97: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x0000000000453fa7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x0000000000453fb7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x0000000000453ef7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 1]; ret; 
0x0000000000453f07: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x0000000000453f17: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x0000000000453f27: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x0000000000453f37: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x0000000000453f47: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x0000000000453f57: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x0000000000453f67: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x0000000000453ee7: nop dword ptr cs:[rax + rax]; lea rax, [rdi]; ret; 
0x000000000045c837: nop dword ptr cs:[rax + rax]; lea rax, [rip + 0x27aaf9]; ret; 
0x0000000000421cd7: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x0000000000453947: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000453327: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000453337: nop dword ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000040aad7: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff20; ret; 
0x0000000000409db7: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff21; ret; 
0x0000000000409da7: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff22; ret; 
0x0000000000409d97: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff23; ret; 
0x0000000000409d87: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff2a; ret; 
0x0000000000409d77: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff2b; ret; 
0x0000000000409d67: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff2c; ret; 
0x0000000000409d57: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff2d; ret; 
0x0000000000409d47: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff34; ret; 
0x0000000000409d37: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff35; ret; 
0x0000000000409d27: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff36; ret; 
0x0000000000409d17: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff37; ret; 
0x0000000000409cb7: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff88; ret; 
0x0000000000409c87: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff89; ret; 
0x0000000000409be7: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff8a; ret; 
0x0000000000409c77: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff8b; ret; 
0x0000000000409ca7: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff8c; ret; 
0x0000000000409c37: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff8d; ret; 
0x0000000000409cd7: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff8e; ret; 
0x0000000000409ce7: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff8f; ret; 
0x0000000000409c67: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff90; ret; 
0x0000000000409cc7: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff91; ret; 
0x0000000000409c57: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff92; ret; 
0x0000000000409c97: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff93; ret; 
0x0000000000409d07: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff94; ret; 
0x0000000000409c17: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff95; ret; 
0x0000000000409c27: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff96; ret; 
0x0000000000409bd7: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff97; ret; 
0x0000000000409c47: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff98; ret; 
0x0000000000409c07: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff99; ret; 
0x0000000000409bf7: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff9a; ret; 
0x0000000000409cf7: nop dword ptr cs:[rax + rax]; mov eax, 0xffffff9b; ret; 
0x00000000004279d7: nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000402347: nop dword ptr cs:[rax + rax]; mov eax, dword ptr [rip + 0x2d3dae]; ret; 
0x00000000004581c7: nop dword ptr cs:[rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x0000000000444207: nop dword ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000046a307: nop dword ptr cs:[rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000046a327: nop dword ptr cs:[rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x00000000004279b7: nop dword ptr cs:[rax + rax]; mov rax, -1; ret; 
0x00000000004094a7: nop dword ptr cs:[rax + rax]; mov rax, 0x6d52c0; pop rbx; ret; 
0x000000000046a487: nop dword ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x0000000000483b87: nop dword ptr cs:[rax + rax]; mov rax, 1; ret; 
0x00000000004812c7: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000427a17: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049c527: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000049c607: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000004279f7: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x2ae759]; ret; 
0x0000000000427a27: nop dword ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x0000000000490367: nop dword ptr cs:[rax + rax]; movsx eax, dl; sub eax, ecx; ret; 
0x0000000000401cc7: nop dword ptr cs:[rax + rax]; movzx edi, dil; mov dword ptr [rip + 0x2d442e], edi; ret; 
0x0000000000444397: nop dword ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000444317: nop dword ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000004598a2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x0000000000484852: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x0000000000459872: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x0000000000494725: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x27; syscall; 
0x000000000045afb5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x63; syscall; 
0x00000000004840f5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0xc9; syscall; 
0x0000000000420b47: nop dword ptr cs:[rax + rax]; pop rbx; ret; 
0x000000000043aa57: nop dword ptr cs:[rax + rax]; vzeroupper; xor eax, eax; ret; 
0x0000000000455bc7: nop dword ptr cs:[rax + rax]; xor eax, eax; ret; 
0x00000000004829c7: nop dword ptr cs:[rax + rax]; xor eax, eax; vzeroupper; ret; 
0x0000000000453d27: nop dword ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000045a47a: nop word ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000043a587: nop word ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000041d777: nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000429097: nop word ptr [rax + rax]; call rax; 
0x00000000004276ba: nop word ptr [rax + rax]; lea rdx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000432b4a: nop word ptr [rax + rax]; mov eax, 0x16; ret; 
0x0000000000458e2a: nop word ptr [rax + rax]; mov eax, 0x20; syscall; 
0x0000000000458e2a: nop word ptr [rax + rax]; mov eax, 0x20; syscall; cmp rax, -0xfff; jae 0x58e40; ret; 
0x0000000000409bc7: nop word ptr [rax + rax]; mov eax, 0xffffff20; ret; 
0x00000000004095ea: nop word ptr [rax + rax]; mov eax, 0xffffffdf; ret; 
0x0000000000400ff7: nop word ptr [rax + rax]; mov eax, 0xffffffea; ret; 
0x000000000048af4a: nop word ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000047fa62: nop word ptr [rax + rax]; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000045335a: nop word ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000426907: nop word ptr [rax + rax]; mov qword ptr [rdi + 0xa0], -1; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000046a2e7: nop word ptr [rax + rax]; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x00000000004587b2: nop word ptr [rax + rax]; mov rax, -0x40; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000484c52: nop word ptr [rax + rax]; mov rax, -0x40; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000046a2ca: nop word ptr [rax + rax]; mov rax, -0x58; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000427997: nop word ptr [rax + rax]; mov rax, -1; ret; 
0x000000000040917a: nop word ptr [rax + rax]; mov rax, 0x6d2d20; ret; 
0x000000000048b857: nop word ptr [rax + rax]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000042853a: nop word ptr [rax + rax]; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2ae306], 1; mov qword ptr [rip + 0x2ae2cb], rax; ret; 
0x0000000000482e67: nop word ptr [rax + rax]; mov rax, r8; vzeroupper; ret; 
0x00000000004533ba: nop word ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000004595ba: nop word ptr [rax + rax]; mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000458b1a: nop word ptr [rax + rax]; mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000042f66a: nop word ptr [rax + rax]; mov rsi, qword ptr [rsp + 0x68]; call rax; 
0x0000000000432927: nop word ptr [rax + rax]; mov rsi, rbp; mov rdi, rax; call rcx; 
0x000000000045feba: nop word ptr [rax + rax]; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000401f0a: nop word ptr [rax + rax]; movzx esi, sil; mov dword ptr [rip + 0x2d420a], esi; ret; 
0x0000000000401262: nop word ptr [rax + rax]; pop rbx; mov eax, 0xffffffea; pop rbp; pop r12; ret; 
0x000000000049403a: nop word ptr [rax + rax]; pop rbx; ret; 
0x0000000000426da2: nop word ptr [rax + rax]; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x0000000000481022: nop word ptr [rax + rax]; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x00000000004321aa: nop word ptr [rax + rax]; test byte ptr [rdi + rdx - 8], 1; lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x000000000040116a: nop word ptr [rax + rax]; xor eax, eax; add rsp, 8; ret; 
0x0000000000401177: nop word ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000483b66: nop word ptr cs:[rax + rax]; add rax, 3; ret; 
0x000000000043a7b6: nop word ptr cs:[rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x00000000004095f6: nop word ptr cs:[rax + rax]; lea eax, [rsi*8 + 0x14]; ret; 
0x0000000000453f76: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x0000000000453f86: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x0000000000453f96: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x0000000000453fa6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x0000000000453fb6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x0000000000453ef6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 1]; ret; 
0x0000000000453f06: nop word ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x0000000000453f16: nop word ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x0000000000453f26: nop word ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x0000000000453f36: nop word ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x0000000000453f46: nop word ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x0000000000453f56: nop word ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x0000000000453f66: nop word ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x0000000000453ee6: nop word ptr cs:[rax + rax]; lea rax, [rdi]; ret; 
0x000000000045c836: nop word ptr cs:[rax + rax]; lea rax, [rip + 0x27aaf9]; ret; 
0x0000000000421cd6: nop word ptr cs:[rax + rax]; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x0000000000453946: nop word ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000453326: nop word ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000453336: nop word ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000040aad6: nop word ptr cs:[rax + rax]; mov eax, 0xffffff20; ret; 
0x0000000000409db6: nop word ptr cs:[rax + rax]; mov eax, 0xffffff21; ret; 
0x0000000000409da6: nop word ptr cs:[rax + rax]; mov eax, 0xffffff22; ret; 
0x0000000000409d96: nop word ptr cs:[rax + rax]; mov eax, 0xffffff23; ret; 
0x0000000000409d86: nop word ptr cs:[rax + rax]; mov eax, 0xffffff2a; ret; 
0x0000000000409d76: nop word ptr cs:[rax + rax]; mov eax, 0xffffff2b; ret; 
0x0000000000409d66: nop word ptr cs:[rax + rax]; mov eax, 0xffffff2c; ret; 
0x0000000000409d56: nop word ptr cs:[rax + rax]; mov eax, 0xffffff2d; ret; 
0x0000000000409d46: nop word ptr cs:[rax + rax]; mov eax, 0xffffff34; ret; 
0x0000000000409d36: nop word ptr cs:[rax + rax]; mov eax, 0xffffff35; ret; 
0x0000000000409d26: nop word ptr cs:[rax + rax]; mov eax, 0xffffff36; ret; 
0x0000000000409d16: nop word ptr cs:[rax + rax]; mov eax, 0xffffff37; ret; 
0x0000000000409cb6: nop word ptr cs:[rax + rax]; mov eax, 0xffffff88; ret; 
0x0000000000409c86: nop word ptr cs:[rax + rax]; mov eax, 0xffffff89; ret; 
0x0000000000409be6: nop word ptr cs:[rax + rax]; mov eax, 0xffffff8a; ret; 
0x0000000000409c76: nop word ptr cs:[rax + rax]; mov eax, 0xffffff8b; ret; 
0x0000000000409ca6: nop word ptr cs:[rax + rax]; mov eax, 0xffffff8c; ret; 
0x0000000000409c36: nop word ptr cs:[rax + rax]; mov eax, 0xffffff8d; ret; 
0x0000000000409cd6: nop word ptr cs:[rax + rax]; mov eax, 0xffffff8e; ret; 
0x0000000000409ce6: nop word ptr cs:[rax + rax]; mov eax, 0xffffff8f; ret; 
0x0000000000409c66: nop word ptr cs:[rax + rax]; mov eax, 0xffffff90; ret; 
0x0000000000409cc6: nop word ptr cs:[rax + rax]; mov eax, 0xffffff91; ret; 
0x0000000000409c56: nop word ptr cs:[rax + rax]; mov eax, 0xffffff92; ret; 
0x0000000000409c96: nop word ptr cs:[rax + rax]; mov eax, 0xffffff93; ret; 
0x0000000000409d06: nop word ptr cs:[rax + rax]; mov eax, 0xffffff94; ret; 
0x0000000000409c16: nop word ptr cs:[rax + rax]; mov eax, 0xffffff95; ret; 
0x0000000000409c26: nop word ptr cs:[rax + rax]; mov eax, 0xffffff96; ret; 
0x0000000000409bd6: nop word ptr cs:[rax + rax]; mov eax, 0xffffff97; ret; 
0x0000000000409c46: nop word ptr cs:[rax + rax]; mov eax, 0xffffff98; ret; 
0x0000000000409c06: nop word ptr cs:[rax + rax]; mov eax, 0xffffff99; ret; 
0x0000000000409bf6: nop word ptr cs:[rax + rax]; mov eax, 0xffffff9a; ret; 
0x0000000000409cf6: nop word ptr cs:[rax + rax]; mov eax, 0xffffff9b; ret; 
0x00000000004279d6: nop word ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000402346: nop word ptr cs:[rax + rax]; mov eax, dword ptr [rip + 0x2d3dae]; ret; 
0x00000000004581c6: nop word ptr cs:[rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x0000000000444206: nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000046a306: nop word ptr cs:[rax + rax]; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000046a326: nop word ptr cs:[rax + rax]; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x00000000004279b6: nop word ptr cs:[rax + rax]; mov rax, -1; ret; 
0x00000000004094a6: nop word ptr cs:[rax + rax]; mov rax, 0x6d52c0; pop rbx; ret; 
0x000000000046a486: nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x0000000000483b86: nop word ptr cs:[rax + rax]; mov rax, 1; ret; 
0x00000000004812c6: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000427a16: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049c526: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000049c606: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000004279f6: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x2ae759]; ret; 
0x0000000000427a26: nop word ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x0000000000490366: nop word ptr cs:[rax + rax]; movsx eax, dl; sub eax, ecx; ret; 
0x0000000000401cc6: nop word ptr cs:[rax + rax]; movzx edi, dil; mov dword ptr [rip + 0x2d442e], edi; ret; 
0x0000000000444396: nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000444316: nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000004598a1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x0000000000484851: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x0000000000459871: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x0000000000494724: nop word ptr cs:[rax + rax]; nop; mov eax, 0x27; syscall; 
0x000000000045afb4: nop word ptr cs:[rax + rax]; nop; mov eax, 0x63; syscall; 
0x00000000004840f4: nop word ptr cs:[rax + rax]; nop; mov eax, 0xc9; syscall; 
0x0000000000420b46: nop word ptr cs:[rax + rax]; pop rbx; ret; 
0x000000000043aa56: nop word ptr cs:[rax + rax]; vzeroupper; xor eax, eax; ret; 
0x0000000000455bc6: nop word ptr cs:[rax + rax]; xor eax, eax; ret; 
0x00000000004829c6: nop word ptr cs:[rax + rax]; xor eax, eax; vzeroupper; ret; 
0x0000000000453d26: nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000047fa61: nop word ptr es:[rax + rax]; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000004aebc8: nop; add al, 0xf9; call qword ptr [rax + 0x20fff906]; stc; clc; jmp rax; 
0x00000000004230c2: nop; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c438e28; ret; 
0x0000000000443ad7: nop; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000048143b: nop; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x10; mov rdi, r12; call rbx; 
0x0000000000481535: nop; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x00000000004cd6dc: nop; add byte ptr [rax], al; add byte ptr [rbp + rsi*2], al; add byte ptr [rcx + rax*2], bl; stc; call rcx; 
0x000000000043b72c: nop; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000484d7c: nop; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000040148f: nop; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000045dc8f: nop; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004971bf: nop; add rsp, 8; ret; 
0x000000000040142f: nop; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000043a5cf: nop; bsf eax, eax; sub rdx, rax; jbe 0x3a5f0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000043a5df: nop; bsf eax, eax; sub rdx, rax; jbe 0x3a5f0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004538cf: nop; bsf rdx, rdx; lea r11, [rip + 0x5c1b5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004532af: nop; bsf rdx, rdx; lea r11, [rip + 0x5c755]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045e3c4: nop; call 0x5c8b0; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x0000000000494aaf: nop; call rax; 
0x000000000045e3d0: nop; call rsi; 
0x00000000004aebf8: nop; cld; clc; push qword ptr [rax - 2]; clc; call qword ptr [rax]; 
0x000000000040b0d3: nop; insb byte ptr [rdi], dx; or dword ptr [rax], eax; ret; 
0x00000000004af404: nop; jl 0xaf400; jmp qword ptr [rax]; 
0x0000000000491b1f: nop; jmp rdx; 
0x00000000004af848: nop; jno 0xaf844; inc dword ptr [rax]; jno 0xaf848; jmp qword ptr [rax + 0x53]; 
0x00000000004095af: nop; lea eax, [rsi*8 + 0x10]; ret; 
0x0000000000458d2f: nop; lea rdx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000400bef: nop; leave; ret; 
0x00000000004d21b0: nop; mov ch, 0xfc; jmp qword ptr [rbx]; 
0x000000000043e6af: nop; mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000048aa6f: nop; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x0000000000493aff: nop; mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x000000000049e95f: nop; mov dword ptr [rip + 0x23aa7e], 1; ret; 
0x000000000049e84f: nop; mov dword ptr [rip + 0x23ab8e], 1; ret; 
0x00000000004285a3: nop; mov dword ptr [rip + 0x2ae2a6], 1; mov dword ptr [rip + 0x2ae298], eax; ret; 
0x0000000000428563: nop; mov dword ptr [rip + 0x2ae2e6], 1; mov qword ptr [rip + 0x2ae2b3], rax; ret; 
0x0000000000428543: nop; mov dword ptr [rip + 0x2ae306], 1; mov qword ptr [rip + 0x2ae2cb], rax; ret; 
0x00000000004285c3: nop; mov dword ptr [rip + 0x2b082a], eax; ret; 
0x000000000043e88f: nop; mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000043ea6f: nop; mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000045966f: nop; mov eax, 0x10; syscall; 
0x000000000045966f: nop; mov eax, 0x10; syscall; cmp rax, -0xfff; jae 0x59680; ret; 
0x0000000000490451: nop; mov eax, 0x15; syscall; 
0x000000000049472f: nop; mov eax, 0x27; syscall; 
0x000000000049472f: nop; mov eax, 0x27; syscall; ret; 
0x000000000048482f: nop; mov eax, 0x3f; syscall; 
0x000000000048482f: nop; mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x84840; ret; 
0x000000000045afbf: nop; mov eax, 0x63; syscall; 
0x000000000045afbf: nop; mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x5afd0; ret; 
0x00000000004840ff: nop; mov eax, 0xc9; syscall; 
0x00000000004840ff: nop; mov eax, 0xc9; syscall; ret; 
0x000000000045b044: nop; mov eax, 0xca; syscall; 
0x000000000040243f: nop; mov eax, 0xffffffa1; ret; 
0x0000000000400fef: nop; mov eax, 0xffffffea; pop rbx; ret; 
0x0000000000425edf: nop; mov eax, 0xffffffff; ret; 
0x000000000048f13f: nop; mov eax, 1; pop rbx; ret; 
0x0000000000458aaf: nop; mov eax, dword ptr [rip + 0x280db6]; test eax, eax; jne 0x58ad0; mov eax, 1; syscall; 
0x0000000000401f5f: nop; mov eax, dword ptr [rip + 0x2d41c2]; test eax, eax; js 0x2010; add rsp, 8; ret; 
0x000000000041452c: nop; mov edi, 0x8948fffe; ret 0xf748; 
0x00000000004b0ef8: nop; mov edi, 0xbd5ffffa; cli; jmp qword ptr [rdi]; 
0x000000000043ec4f: nop; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045397f: nop; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x0000000000428443: nop; mov qword ptr [rip + 0x2ae43d], rax; ret; 
0x00000000004283d3: nop; mov qword ptr [rip + 0x2ae45d], rax; ret; 
0x00000000004283c3: nop; mov qword ptr [rip + 0x2ae475], rax; ret; 
0x000000000045af8f: nop; mov r10, rcx; mov eax, 0x9d; syscall; 
0x000000000046a6af: nop; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000049c57f: nop; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000042859f: nop; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2ae2a6], 1; mov dword ptr [rip + 0x2ae298], eax; ret; 
0x000000000049a2ef: nop; mov rax, qword ptr [rsi + 0xb8]; ret; 
0x000000000049d48f: nop; mov rax, qword ptr [rsi + 8]; ret; 
0x00000000004533cf: nop; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000004533ff: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000045340f: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000045879f: nop; mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000458a8f: nop; mov rdx, -0x40; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000004539cf: nop; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x000000000040a45a: nop; movabs al, byte ptr [0xc2490fc08500000f]; add rsp, 8; ret; 
0x000000000045346f: nop; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000045341f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000046a480: nop; nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x0000000000483b65: nop; nop word ptr cs:[rax + rax]; add rax, 3; ret; 
0x0000000000453f75: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x0000000000453f85: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x0000000000453f95: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x0000000000453fa5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x0000000000453fb5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x0000000000453ef5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 1]; ret; 
0x0000000000453f05: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x0000000000453f15: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x0000000000453f25: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x0000000000453f35: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x0000000000453f45: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x0000000000453f55: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x0000000000453f65: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x0000000000453ee5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi]; ret; 
0x000000000045c835: nop; nop word ptr cs:[rax + rax]; lea rax, [rip + 0x27aaf9]; ret; 
0x0000000000483b85: nop; nop word ptr cs:[rax + rax]; mov rax, 1; ret; 
0x000000000049c525: nop; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000049c605: nop; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000427a25: nop; nop word ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x0000000000401cc5: nop; nop word ptr cs:[rax + rax]; movzx edi, dil; mov dword ptr [rip + 0x2d442e], edi; ret; 
0x000000000043aa55: nop; nop word ptr cs:[rax + rax]; vzeroupper; xor eax, eax; ret; 
0x0000000000453d25: nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000046a47f: nop; nop; nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x00000000004ae8e4: nop; pop rax; clc; call rax; 
0x00000000004ae8f4: nop; pop rbp; clc; call rax; 
0x00000000004cbd2c: nop; pop rbx; add byte ptr [rax], al; add byte ptr [rbx], 0xf8; call qword ptr [rax]; 
0x00000000004af0e4: nop; pop rcx; stc; jmp qword ptr [rax]; 
0x00000000004af320: nop; push rax; stc; call qword ptr [rax]; 
0x00000000004aef0c: nop; push rbp; stc; jmp qword ptr [rsi]; 
0x00000000004ae8d4: nop; push rbx; clc; call rax; 
0x00000000004af114: nop; push rdx; stc; call qword ptr [rax]; 
0x00000000004cdfc0: nop; ret 0xfff9; 
0x00000000004004cf: nop; ret; 
0x00000000004aeec8: nop; sbb al, 0xf9; jmp rax; 
0x00000000004af328: nop; stc; call qword ptr [rax]; 
0x00000000004aeb70: nop; stc; clc; call qword ptr [rax - 5]; 
0x00000000004d0039: nop; sti; jmp qword ptr [rcx + 0xe]; 
0x00000000004276ff: nop; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000043aa8f: nop; tzcnt eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000040251f: nop; xor eax, eax; ret; 
0x000000000041d769: not edx; add rax, rdx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000041d768: not rdx; add rax, rdx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x00000000004ccc78: or ah, ah; clc; call qword ptr [rsi]; 
0x00000000004c9c58: or ah, al; cmc; jmp qword ptr [rsi]; 
0x00000000004a0846: or ah, byte ptr [rax + 0x23]; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000004d2548: or ah, cl; cld; jmp qword ptr [rax]; 
0x00000000004c71b9: or ah, dh; jmp qword ptr [rsi + 1]; 
0x00000000004339d4: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x1bb12; cmove rax, rdx; ret; 
0x0000000000432cb4: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x1ce62; cmove rax, rdx; ret; 
0x00000000004339a4: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x6c52; cmove rax, rdx; ret; 
0x00000000004335b4: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x6d12; cmove rax, rdx; ret; 
0x0000000000481c14: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x902; cmove rax, rdx; ret; 
0x0000000000482f34: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0xa22; cmove rax, rdx; ret; 
0x0000000000481be4: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0xdf2; cmove rax, rdx; ret; 
0x00000000004943c5: or al, 0; add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x00000000004395d7: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044e60f: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000439605: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000484c62: or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000484c11: or al, 0; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x000000000042d0dc: or al, 0; add byte ptr [rax], al; mov rax, rsi; ret; 
0x0000000000482f88: or al, 0; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x000000000047b4fc: or al, 0; add byte ptr [rcx + 1], al; ret 0x8b48; 
0x0000000000481c0a: or al, 0; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x902]; cmove rax, rdx; ret; 
0x0000000000482f2a: or al, 0; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000408b6a: or al, 0; xor eax, eax; ret; 
0x000000000048c6a0: or al, 0x13; add byte ptr [rax], al; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x0000000000456126: or al, 0x16; cmp rdi, r9; jb 0x56294; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000456481: or al, 0x16; cmp rdi, r9; jb 0x56651; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004568cc: or al, 0x16; cmp rdi, r9; jb 0x56b0c; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000434e06: or al, 0x16; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004350c8: or al, 0x16; test al, al; jne 0x350b0; xor eax, eax; sub eax, ecx; ret; 
0x000000000042d0aa: or al, 0x1e; mov rax, rsi; pop rbx; ret; 
0x0000000000422693: or al, 0x24; mov rdi, rbx; call rax; 
0x000000000041e45c: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1e46c; add rsp, 0xd8; ret; 
0x0000000000403ad0: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x3af5; add rsp, 0x48; ret; 
0x000000000045887f: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x58939; add rsp, 0x68; ret; 
0x0000000000458991: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x589db; add rsp, 0x58; ret; 
0x0000000000458c12: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x58cc9; add rsp, 0x78; ret; 
0x0000000000458d21: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x58d73; add rsp, 0x68; ret; 
0x000000000046a621: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6a673; add rsp, 0x148; ret; 
0x000000000047801c: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x7802c; add rsp, 0xd8; ret; 
0x00000000004849a4: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84a69; add rsp, 0x78; ret; 
0x0000000000484ab6: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84b03; add rsp, 0x58; ret; 
0x0000000000484be8: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84c0b; add rsp, 0x38; ret; 
0x000000000049118f: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x911c3; add rsp, 0x38; ret; 
0x000000000049124f: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x9127e; add rsp, 0x68; ret; 
0x00000000004913b0: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x913ee; add rsp, 0x78; ret; 
0x000000000049167f: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x916ae; add rsp, 0x68; ret; 
0x00000000004977c5: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x977dc; add rsp, 0x38; ret; 
0x000000000048ed99: or al, 0x37; jae 0x8ed41; xor eax, eax; ret; 
0x0000000000433780: or al, 0x39; add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x0000000000458dcd: or al, 0x48; add esp, 0x10; pop rbx; ret; 
0x0000000000407e3f: or al, 0x48; add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000407a51: or al, 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000040ff41: or al, 0x48; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x00000000004259c4: or al, 0x48; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000494782: or al, 0x48; mov edx, dword ptr [rip + 0x244a4e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000494483: or al, 0x5b; pop rbp; pop r12; ret; 
0x0000000000406a2b: or al, 0x74; cmp dword ptr [rbx - 0x7af0fe07], eax; mov al, 0; add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000047e323: or al, 0x7e; ret 0x8944; 
0x000000000046d84b: or al, 0x83; ret; 
0x00000000004572c1: or al, 0x86; add rcx, rsi; jmp rcx; 
0x0000000000401a1b: or al, 0x89; clc; add rsp, 0x18; ret; 
0x0000000000472aba: or al, 0x89; ret 0xc689; 
0x000000000045734b: or al, 0x89; ret 0xe283; 
0x0000000000449f34: or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000447729: or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000040959b: or al, 0x8d; add al, 0xf5; adc al, 0; add byte ptr [rax], al; ret; 
0x0000000000403903: or al, 0x8d; push rcx; add bh, byte ptr [rcx]; ret 0xd77; 
0x000000000043b40f: or al, 0x93; add rcx, r11; jmp rcx; 
0x00000000004531eb: or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004c94c4: or al, 0x99; cmc; call qword ptr [rdi + 2]; 
0x00000000004531ef: or al, 0xb; jmp rcx; 
0x00000000004ce004: or al, 0xc3; stc; call qword ptr [rcx]; 
0x0000000000480f53: or al, 0xe8; xlatb; or al, 0xfa; dec dword ptr [rbx - 0x14f3db8c]; ret 0x5590; 
0x000000000046594f: or al, 0xe9; ret; 
0x0000000000480f5c: or al, 0xeb; ret 0x5590; 
0x00000000004445a3: or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x00000000004c7365: or al, 0xf4; jmp qword ptr [rax + 9]; 
0x000000000047621d: or al, 0xf6; ret 0xf01; 
0x00000000004aee99: or al, 0xf9; jmp qword ptr [rax]; 
0x0000000000469ac8: or al, 0xf; xchg dword ptr [rcx + 1], eax; add byte ptr [rax], al; movsxd rdi, dword ptr [r11 + rsi*4]; add rdi, r11; jmp rdi; 
0x0000000000480f56: or al, 0xfa; dec dword ptr [rbx - 0x14f3db8c]; ret 0x5590; 
0x0000000000482f82: or al, 2; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x00000000004339cf: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x0000000000432caf: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1ce62]; cmove rax, rdx; ret; 
0x000000000043399f: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x00000000004335af: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x0000000000481c0f: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x902]; cmove rax, rdx; ret; 
0x0000000000482f2f: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000481bdf: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xdf2]; cmove rax, rdx; ret; 
0x00000000004c66a8: or al, 5; add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; mov dl, 0xf3; jmp qword ptr [rbx]; 
0x00000000004c7104: or al, 6; hlt; call qword ptr [rdi]; 
0x000000000043de96: or al, 7; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004c7174: or al, 7; hlt; call qword ptr [rdi]; 
0x000000000047b43d: or al, 7; lea rax, [rip + 0x25895a]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x0000000000432171: or al, 9; ret 0xbae9; 
0x000000000047f3a4: or al, byte ptr [rax]; add byte ptr [rax + 1], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047a056: or al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; test dword ptr [rax], esi; idiv edi; dec dword ptr [rax - 0x39]; ret 0x7c60; 
0x00000000004397b7: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d1a1: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004397e5: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000049c2aa: or al, byte ptr [rax]; add byte ptr [rax], al; mov edi, 1; call rax; 
0x0000000000459881: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000459881: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x59890; ret; 
0x00000000004018e0: or al, byte ptr [rax]; add byte ptr [rbp + 0x480978c0], al; add esp, 0x18; ret; 
0x0000000000401956: or al, byte ptr [rax]; add byte ptr [rbp + 0x480b78c0], al; add esp, 8; ret; 
0x00000000004a8bfd: or al, byte ptr [rax]; add byte ptr [rdi - 0x74000000], ch; add byte ptr [rax], al; add dh, dl; fdivr st(7); call rsi; 
0x00000000004b9475: or al, byte ptr [rax]; add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x00000000004b946d: or al, byte ptr [rax]; add byte ptr [rsi - 0x46fffff6], dh; or al, byte ptr [rax]; add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x0000000000400d85: or al, byte ptr [rax]; ret; 
0x00000000004197ac: or al, byte ptr [rbx - 0x7bf0fd07]; ret 0x18; 
0x000000000041631d: or al, byte ptr [rbx - 0x7bf0fd07]; ret; 
0x000000000045ba56: or al, byte ptr [rcx + rcx*8 - 0x7cb7ed8c]; ret 0x4801; 
0x000000000041e9ab: or al, byte ptr [rcx]; add byte ptr [rcx + 0x415d5be8], cl; pop rsp; ret; 
0x00000000004d0723: or al, byte ptr [rcx]; ret; 
0x000000000043e084: or al, byte ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000049d458: or al, ch; ret 0xf7f4; 
0x0000000000419a88: or al, ch; ret 0xffb2; 
0x00000000004195a7: or al, ch; ret; 
0x0000000000401953: or al, ch; test dword ptr [rdx], 0xc0850000; js 0x1968; add rsp, 8; ret; 
0x0000000000432238: or al, ch; xchg eax, edx; movsxd rdi, edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000401158: or al, ch; xor al, byte ptr [rcx - 0x7ab80000]; sal byte ptr [rbp + rcx - 0x75], 0; add rsp, 8; ret; 
0x00000000004d0bcd: or bh, ah; call qword ptr [rdi + 1]; 
0x000000000049be2d: or bh, al; dec dword ptr [rax - 0x75]; push rbp; add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x000000000048afe5: or bh, bh; and eax, 0x24c274; nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x00000000004015cd: or bh, byte ptr [rax - 0x16]; ret; 
0x0000000000400b1b: or bh, byte ptr [rdi + 0x4c61c8]; call 0x9eac0; mov byte ptr [rip + 0x2d77f3], 1; pop rbp; ret; 
0x0000000000433660: or bh, dh; ret 0; 
0x0000000000414acd: or bl, byte ptr [rbx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000049dc9d: or bl, ch; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000444763: or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x0000000000401f07: or bl, dh; ret; 
0x0000000000421861: or byte ptr [r10 + 1], dil; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000045f046: or byte ptr [r15], 0x8e; ret 1; 
0x0000000000425ce6: or byte ptr [r15], cl; mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000420941: or byte ptr [r8 + 0x29], r9b; ret; 
0x000000000041ce1d: or byte ptr [r8 + 0x39], cl; ret; 
0x0000000000427b38: or byte ptr [r8 + 0x39], r9b; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x0000000000493aaf: or byte ptr [r8 + 2], r15b; ret; 
0x00000000004a0bbc: or byte ptr [r8 - 0x397bf0ff], bpl; add eax, 0x89490000; ret 0x8349; 
0x0000000000420a0f: or byte ptr [r8 - 0x3f], r9b; sti; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x000000000042d1a2: or byte ptr [r8 - 0x75], cl; or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x000000000048e8da: or byte ptr [r8 - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000451698: or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000048edc5: or byte ptr [r8 - 0x7b], cl; sal byte ptr [rsp + rsi + 0x48], 0x89; ret; 
0x0000000000488152: or byte ptr [r8 - 0x7b], r9b; ror byte ptr [rdi], 0x84; ret; 
0x00000000004819cd: or byte ptr [r8], al; add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000493af4: or byte ptr [r9 + 0x2b802], r9b; add byte ptr [rax], al; ret; 
0x000000000049bd07: or byte ptr [r9 + 0x63], r9b; add al, 0x86; add rax, r14; jmp rax; 
0x0000000000493a90: or byte ptr [r9 + r13 - 0x30], r8b; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000451757: or byte ptr [r9 - 0x76b7f7be], cl; clc; ret; 
0x00000000004588dc: or byte ptr [rax + 0x101], bh; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000420942: or byte ptr [rax + 0x29], cl; ret; 
0x000000000042092c: or byte ptr [rax + 0x2b], cl; adc dword ptr [rax - 0x3f], ecx; cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x0000000000422185: or byte ptr [rax + 0x2b], cl; push rbx; cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x0000000000461c28: or byte ptr [rax + 0x39], cl; ret 0x8e0f; 
0x00000000004075ca: or byte ptr [rax + 0x39], cl; ret 0xf075; 
0x000000000041ce1e: or byte ptr [rax + 0x39], cl; ret; 
0x0000000000427b39: or byte ptr [rax + 0x39], cl; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x0000000000428428: or byte ptr [rax + 0x4f058948], dl; in al, 0x2a; add bl, dh; ret; 
0x0000000000407a0c: or byte ptr [rax + 0x63], cl; add al, 0xb2; add rax, rdx; jmp rax; 
0x0000000000401f55: or byte ptr [rax + 0x63], cl; add al, 0xba; add rax, rdx; jmp rax; 
0x00000000004c983e: or byte ptr [rax + 0xb], cl; add dh, byte ptr [rbx + 0xa]; ret; 
0x0000000000428be6: or byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x0000000000429082: or byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000495c7c: or byte ptr [rax + 1], bh; pop rbx; pop rbp; ret; 
0x000000000048cbc1: or byte ptr [rax + 1], cl; ret; 
0x0000000000493ab0: or byte ptr [rax + 2], bh; ret; 
0x0000000000498f5b: or byte ptr [rax + 3], cl; add ecx, dword ptr [rcx + rcx*4 - 0x16]; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000499387: or byte ptr [rax + 3], cl; push rbp; add bl, ch; add eax, 0x1489066; ret 0xb70f; 
0x0000000000490ee3: or byte ptr [rax + rcx*2 + 0x2b], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000490ee2: or byte ptr [rax + rcx*2 + 0x2b], spl; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000406d03: or byte ptr [rax - 0x11], bh; pop rbx; pop rbp; ret; 
0x00000000004a0bbd: or byte ptr [rax - 0x397bf0ff], ch; add eax, 0x89490000; ret 0x8349; 
0x0000000000400403: or byte ptr [rax - 0x39], cl; rol byte ptr [rax], 0; add byte ptr [rax], al; test rax, rax; je 0x412; call rax; 
0x0000000000420a10: or byte ptr [rax - 0x3f], cl; sti; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x0000000000428483: or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x0000000000459a94: or byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x0000000000491246: or byte ptr [rax - 0x75], cl; and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x9127e; add rsp, 0x68; ret; 
0x0000000000491676: or byte ptr [rax - 0x75], cl; and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x916ae; add rsp, 0x68; ret; 
0x00000000004913a7: or byte ptr [rax - 0x75], cl; and al, 0x68; xor rcx, qword ptr fs:[0x28]; jne 0x913ee; add rsp, 0x78; ret; 
0x000000000042d1a3: or byte ptr [rax - 0x75], cl; or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x00000000004197a1: or byte ptr [rax - 0x75], cl; push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret 0x18; 
0x0000000000416312: or byte ptr [rax - 0x75], cl; push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret; 
0x0000000000485c7f: or byte ptr [rax - 0x75], cl; xor al, ch; and byte ptr [rax + 0x3948fff7], ch; ret; 
0x000000000047fe44: or byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; jo 0x7fe5c; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000045a1fe: or byte ptr [rax - 0x77], cl; adc byte ptr [rcx - 0x75], cl; add al, byte ptr [rbx + 0x94801e0]; ret 0x8949; 
0x000000000041f3a1: or byte ptr [rax - 0x77], cl; call 0x5c435104; pop r13; ret; 
0x000000000041f3dc: or byte ptr [rax - 0x77], cl; call 0x5c43513f; pop r13; ret; 
0x000000000045169d: or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000423b10: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000048e8db: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000040390e: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; ret; 
0x0000000000425a5b: or byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x5d]; jmp rax; 
0x000000000041e9a5: or byte ptr [rax - 0x77], cl; fucomip st(0); ret 0x10a; 
0x00000000004105c9: or byte ptr [rax - 0x77], cl; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000451699: or byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000484639: or byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; pop r12; pop r13; ret; 
0x000000000048ec80: or byte ptr [rax - 0x77], cl; ret; 
0x00000000004105c8: or byte ptr [rax - 0x77], r9b; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004038f8: or byte ptr [rax - 0x7b], cl; div byte ptr [rbp + rcx - 0x75]; or byte ptr [rbx + 0x518d0c46], r9b; add bh, byte ptr [rcx]; ret 0xd77; 
0x0000000000488153: or byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x000000000048edc6: or byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rsi + 0x48], 0x89; ret; 
0x000000000042e120: or byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000046ad30: or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x000000000048aa07: or byte ptr [rax - 0x7d], cl; ret 0x101; 
0x000000000048d072: or byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045b910: or byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x00000000004085aa: or byte ptr [rax - 0x7d], cl; ret; 
0x00000000004c87b8: or byte ptr [rax - 0xb], dl; jmp qword ptr [rax]; 
0x00000000004023f8: or byte ptr [rax - 0xc], bh; pop rbx; pop rbp; ret; 
0x00000000004023d8: or byte ptr [rax - 0xe], bh; pop rbx; pop rbp; ret; 
0x0000000000401493: or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x00000000004cd14e: or byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xcf00006f; xor esi, ebx; jmp qword ptr [rbx]; 
0x00000000004819ce: or byte ptr [rax], al; add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000409168: or byte ptr [rax], al; add al, ah; jne 0x9270; mov rax, 0x6d2e60; ret; 
0x00000000004090d0: or byte ptr [rax], al; add al, al; jne 0x9270; mov rax, 0x6d2de0; ret; 
0x000000000040913c: or byte ptr [rax], al; add byte ptr [rax + 0x12a850f], al; add byte ptr [rax], al; mov rax, 0x6d2e20; ret; 
0x00000000004297ab: or byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x00000000004091f2: or byte ptr [rax], al; add byte ptr [rax + 0x75], al; js 0x9241; mov eax, 0x6d2d60; ret; 
0x0000000000439a87: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d341: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004399c5: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004267d7: or byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x00000000004d23ec: or byte ptr [rax], al; add byte ptr [rax], al; cmp byte ptr [rax], al; add byte ptr [rax], al; pop rax; ret 0; 
0x000000000046a6b2: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x000000000046a555: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x0000000000457395: or byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000045dba1: or byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000458b81: or byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x00000000004d23bd: or byte ptr [rax], al; add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax], ch; ret 0; 
0x00000000004d2456: or byte ptr [rax], al; add byte ptr [rax], r8b; add al, al; ret 0; 
0x000000000049a3b4: or byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; add al, 0x87; add rax, r15; jmp rax; 
0x0000000000420424: or byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rcx - 0x16000002], esi; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x000000000042f9fc: or byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, ebx; ret 0x3d83; 
0x000000000041002c: or byte ptr [rax], al; add byte ptr [rdx + 0x3c], bh; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000043c150: or byte ptr [rax], al; add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000041d8ca: or byte ptr [rax], al; lea rdi, [rip + 0x8fdba]; mov edx, 0x6c; call 0x10920; xor eax, eax; ret; 
0x000000000041d8d1: or byte ptr [rax], al; mov edx, 0x6c; call 0x10920; xor eax, eax; ret; 
0x00000000004cf3c8: or byte ptr [rax], ch; sti; jmp qword ptr [rbx]; 
0x000000000044e9fe: or byte ptr [rax], r8b; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000049c4ff: or byte ptr [rbp + 0x1a], dh; mov rax, qword ptr [rax]; ret; 
0x0000000000494e9b: or byte ptr [rbp + 0x39481e04], cl; ret 0x830f; 
0x0000000000491f31: or byte ptr [rbp + 0x39], cl; ret 0x8b48; 
0x0000000000494b99: or byte ptr [rbp + 0x440f4cf6], al; ret 0x8b64; 
0x000000000046d31c: or byte ptr [rbp + 0x63840fc0], al; sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x0000000000473600: or byte ptr [rbp + 0x6a840fc0], al; sbb al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004c627a: or byte ptr [rbp + 0xb], al; add edx, dword ptr [rsi + 0x4a080e01]; ret; 
0x00000000004276f2: or byte ptr [rbp + 0xb], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000049c56e: or byte ptr [rbp + 4], dh; mov qword ptr [rax], rdx; ret; 
0x0000000000491bb3: or byte ptr [rbp + rcx*4 + 0x24], cl; ret 0x8d4a; 
0x000000000041e4ef: or byte ptr [rbp - 0x627bf040], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042c252: or byte ptr [rbp - 0x75], cl; push rax; or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x00000000004a154e: or byte ptr [rbp - 0x77], cl; ret; 
0x000000000045942c: or byte ptr [rbp - 0x7b], cl; dec dword ptr [rdi]; xchg eax, esp; ret 0xc221; 
0x0000000000458f33: or byte ptr [rbp - 0x7b], cl; dec dword ptr [rdi]; xchg eax, esp; ret 0xca21; 
0x00000000004af13c: or byte ptr [rbp - 7], 0xff; add byte ptr [rbp - 7], cl; push qword ptr [rax + 0x4c]; stc; jmp rax; 
0x0000000000407f9a: or byte ptr [rbx + 0x31], bl; rcr byte ptr [rbp + 0x41], 0x5c; pop r13; ret; 
0x0000000000403900: or byte ptr [rbx + 0x518d0c46], cl; add bh, byte ptr [rcx]; ret 0xd77; 
0x00000000004038ff: or byte ptr [rbx + 0x518d0c46], r9b; add bh, byte ptr [rcx]; ret 0xd77; 
0x0000000000407ebb: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000004010fd: or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000045a2fe: or byte ptr [rbx + 0x94801e2], al; ret 0x8949; 
0x000000000042d1a7: or byte ptr [rbx + 0x94807e0], al; ret; 
0x000000000042d1a6: or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x00000000004c88f9: or byte ptr [rbx + 0xb], al; add byte ptr [rax], al; add byte ptr [rdi], ah; add byte ptr [rsi + rdx*2], ch; cmc; jmp qword ptr [rcx + 2]; 
0x0000000000472797: or byte ptr [rbx - 0x1776cf3b], al; pop rbx; pop rbp; ret; 
0x00000000004680ef: or byte ptr [rbx - 0x17], bl; jp 0x68167; cld; jmp qword ptr [rsi + 0x2e]; 
0x000000000041d755: or byte ptr [rbx - 0x38b7ff93], al; rcl byte ptr [rax], 0x83; insd dword ptr [rdi], dx; add byte ptr [rax + 0x39], cl; ret; 
0x000000000047f8d4: or byte ptr [rbx - 0x38b7ff93], al; ret 0x7c60; 
0x0000000000422ae1: or byte ptr [rbx - 0x76b7ff93], al; ret 0x294c; 
0x0000000000422467: or byte ptr [rbx - 0x76b7ff93], al; ret 0x294d; 
0x000000000041ea19: or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x00000000004aee94: or byte ptr [rbx], 0xf9; call rax; 
0x00000000004aee94: or byte ptr [rbx], 0xf9; call rax; or al, 0xf9; jmp qword ptr [rax]; 
0x000000000045b124: or byte ptr [rbx], al; add byte ptr [rax], al; mov esi, 0x80; syscall; 
0x000000000048aa79: or byte ptr [rbx], al; add byte ptr [rax], al; ret; 
0x00000000004c74a4: or byte ptr [rbx], dl; add byte ptr [rax], al; cmp byte ptr [rcx], bl; hlt; jmp qword ptr [rcx + 2]; 
0x00000000004cee08: or byte ptr [rbx], dl; sti; jmp qword ptr [rdi]; 
0x000000000049389b: or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x0000000000493af5: or byte ptr [rcx + 0x2b802], cl; add byte ptr [rax], al; ret; 
0x0000000000490a1d: or byte ptr [rcx + 0x33], cl; add byte ptr [r8 + 9], r9b; ret 0x840f; 
0x00000000004885a2: or byte ptr [rcx + 0x33], cl; add dword ptr [rax + 9], ecx; ret 0x1475; 
0x0000000000488574: or byte ptr [rcx + 0x33], cl; add dword ptr [rax + 9], ecx; ret 0xe75; 
0x0000000000477c59: or byte ptr [rcx + 0x415d5bd0], cl; pop rsp; pop r13; ret; 
0x000000000041fa67: or byte ptr [rcx + 0x415d5bd8], cl; pop rsp; pop r13; ret; 
0x0000000000401a77: or byte ptr [rcx + 0x415d5bd8], cl; pop rsp; ret; 
0x0000000000499755: or byte ptr [rcx + 0x415d5be8], cl; pop rsp; pop r13; ret; 
0x000000000047f2d3: or byte ptr [rcx + 0x415d5bf0], cl; pop rsp; pop r13; ret; 
0x000000000049bd08: or byte ptr [rcx + 0x63], cl; add al, 0x86; add rax, r14; jmp rax; 
0x00000000004d17ac: or byte ptr [rcx + 0xb], cl; add byte ptr [rax + rax], dl; add byte ptr [rax], al; sbb byte ptr [rsi + 0x62280000], dh; cld; jmp qword ptr [rcx]; 
0x000000000047e309: or byte ptr [rcx + 0xf], al; mov dh, 0x40; add dword ptr [rcx - 0x77], eax; ret 0xe883; 
0x00000000004976db: or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000492890: or byte ptr [rcx + rax - 0x3e], cl; mov rax, rdx; pop rbx; ret; 
0x0000000000493a91: or byte ptr [rcx + rbp - 0x30], al; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000498fb3: or byte ptr [rcx + rcx*4 + 4], cl; and al, 0x4c; mov edx, ebp; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000422fa6: or byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000498edb: or byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x0000000000459e5c: or byte ptr [rcx + rcx*4 - 0x18], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000431acd: or byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004205b1: or byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x0000000000427b74: or byte ptr [rcx + rdx + 0x31], dh; rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x00000000004938a2: or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x000000000045a36b: or byte ptr [rcx - 0x75], cl; add al, byte ptr [rbx + 0x94801e0]; ret 0x8949; 
0x000000000042086a: or byte ptr [rcx - 0x75], cl; sub byte ptr [r13 - 0x667bf02e], r8b; add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x0000000000451758: or byte ptr [rcx - 0x76b7f7be], cl; clc; ret; 
0x00000000004939e9: or byte ptr [rcx - 0x77], 0; mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x0000000000497bb1: or byte ptr [rcx - 0x77], cl; adc byte ptr [rax + 0x31487], cl; add byte ptr [rdi], cl; test byte ptr [rsi - 0x7cfffff5], bl; ret 0x4101; 
0x000000000045a2f6: or byte ptr [rcx - 0x77], cl; push rax; adc byte ptr [rcx - 0x75], cl; push rax; or byte ptr [rbx + 0x94801e2], al; ret 0x8949; 
0x000000000041c14a: or byte ptr [rcx - 0x77], cl; ret 0x8b4c; 
0x000000000042fcd8: or byte ptr [rcx - 0x77], cl; ret; 
0x000000000042c256: or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x0000000000459b06: or byte ptr [rcx - 0xa], al; ret; 
0x000000000042a64a: or byte ptr [rcx], dh; call qword ptr [rbx + 0x50]; 
0x0000000000429d5b: or byte ptr [rcx], dh; call qword ptr [rsi + 0x50]; 
0x0000000000423b2a: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x000000000041fb32: or byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xef; call qword ptr [rbp + 0x20]; 
0x000000000040306d: or byte ptr [rcx], dh; shr al, 0xcb; add byte ptr [rip - 0x3ea1700], 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004c3fbe: or byte ptr [rdi + 0x26], al; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000048aff0: or byte ptr [rdi + 0x315], 4; ret; 
0x000000000048af40: or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x000000000047e933: or byte ptr [rdi + 0x32], dh; lea rdi, [rip + 0x3fdef]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000494d14: or byte ptr [rdi + rsi*8 - 0x7be0f001], bh; add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x00000000004638bb: or byte ptr [rdi], 0x85; retf 0xfffa; dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000463c47: or byte ptr [rdi], 0x85; rol dword ptr [rdx], 0; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000040913f: or byte ptr [rdi], 0x85; sub al, byte ptr [rcx]; add byte ptr [rax], al; mov rax, 0x6d2e20; ret; 
0x000000000045f047: or byte ptr [rdi], 0x8e; ret 1; 
0x000000000046861e: or byte ptr [rdi], ah; add al, ch; fidivr dword ptr [rcx - 0x47]; jmp qword ptr [rsi + 0x2e]; 
0x000000000043e286: or byte ptr [rdi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004cf778: or byte ptr [rdi], bh; sti; jmp qword ptr [rax]; 
0x00000000004cbd58: or byte ptr [rdi], bl; clc; call qword ptr [rax]; 
0x0000000000425d8f: or byte ptr [rdi], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041dbb2: or byte ptr [rdi], cl; mov dh, 0x73; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000484b40: or byte ptr [rdi], cl; mov dh, 0xc0; add rsp, 0x58; ret; 
0x000000000049781b: or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000425ce7: or byte ptr [rdi], cl; mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004091c2: or byte ptr [rdi], cl; test dword ptr [rdi + 0x48000000], esp; mov eax, 0x6d2da0; ret; 
0x000000000041ff12: or byte ptr [rdi], cl; test edi, eax; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fd08], al; ret; 
0x00000000004924f3: or byte ptr [rdi], cl; xchg eax, edx; ret 0x8949; 
0x0000000000410001: or byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x0000000000455e91: or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000447713: or byte ptr [rdx + 0xf], dh; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000048daab: or byte ptr [rdx + 1], bh; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000421862: or byte ptr [rdx + 1], bh; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x00000000004cac1c: or byte ptr [rdx], 0; shr byte ptr [rdx], 0xf6; jmp rsi; 
0x000000000049bd02: or byte ptr [rip + 0x458b3777], al; or byte ptr [rcx + 0x63], cl; add al, 0x86; add rax, r14; jmp rax; 
0x0000000000458d34: or byte ptr [rsi + 0x10], bh; mov eax, 0x48; syscall; 
0x00000000004d071a: or byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0xd; add eax, dword ptr [rbx]; or al, byte ptr [rcx]; ret; 
0x00000000004d074e: or byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; cld; ret; 
0x00000000004d0782: or byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000041027c: or byte ptr [rsp + rbp + 0x4023000], cl; add bl, ch; ret 0xe883; 
0x00000000004991f1: or byte ptr [rsp + rdi*2 - 0x75], dh; adc byte ptr [r13 - 0x267bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x0000000000458d83: or ch, byte ptr [rax]; add byte ptr [rbp - 0x47e98a40], al; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000045dc8a: or ch, byte ptr [rax]; cli; jmp qword ptr [rsi - 0x70]; 
0x00000000004aee91: or cl, bh; inc dword ptr [rax - 0x2f0006f5]; or al, 0xf9; jmp qword ptr [rax]; 
0x0000000000466dd1: or cl, byte ptr [rax + 0x39]; ret 0x1176; 
0x000000000041fea4: or cl, byte ptr [rax + 1]; ret 0x8948; 
0x00000000004941d4: or cl, byte ptr [rax - 0x73]; adc eax, 0x2439c4; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x000000000040f983: or cl, byte ptr [rax - 0x7d]; ret 0x3944; 
0x0000000000481db2: or cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x000000000046cc3e: or cl, byte ptr [rax - 0x7d]; ret 0x8d04; 
0x000000000041fa07: or cl, byte ptr [rax - 0x7d]; ret; 
0x00000000004960ed: or cl, byte ptr [rcx - 0x75]; add al, 0x24; add rax, qword ptr [rdx + 8]; call rax; 
0x00000000004110b8: or cl, byte ptr [rdi]; xchg dword ptr [rcx + 0x48fffffb], edx; lea edx, [rip + 0x9c042]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000410d67: or cl, byte ptr [rdi]; xchg dword ptr [rdx + 0x48fffffd], ebx; lea edx, [rip + 0x9c30f]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004c6278: or cl, byte ptr [rsi]; or byte ptr [rbp + 0xb], al; add edx, dword ptr [rsi + 0x4a080e01]; ret; 
0x00000000004c9836: or cl, byte ptr [rsi]; sbb byte ptr [rcx + 0xe], al; adc byte ptr [rdx + 0xe], al; or byte ptr [rax + 0xb], cl; add dh, byte ptr [rbx + 0xa]; ret; 
0x0000000000415de1: or cl, ch; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000047cbbb: or cl, ch; jmp rsp; 
0x0000000000430156: or cl, ch; ret; 
0x0000000000439452: or dh, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000444683: or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x000000000049e8a5: or dh, bl; ret; 
0x0000000000470892: or dh, byte ptr [rcx]; add byte ptr es:[rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x0000000000481016: or dh, byte ptr [rdi + rcx + 0x48]; cmp ecx, esi; jne 0x81010; lea eax, [rdx + rdi]; ret; 
0x0000000000426d96: or dh, byte ptr [rdi + rcx + 0x48]; cmp esi, ecx; jne 0x26d90; lea eax, [rdx + rdi]; ret; 
0x0000000000420f8b: or dh, byte ptr [rdx + rbp*2 + 0x48]; add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000045c30c: or dh, dh; ret 0x8902; 
0x0000000000429da7: or dh, dh; ret 0xf02; 
0x000000000042f9fa: or dword ptr [rax + 0xf000008], 0xffffff93; ret 0x3d83; 
0x000000000045c94a: or dword ptr [rax + 1], 0xffffffd8; jmp rax; 
0x000000000041c71b: or dword ptr [rax + rax*8 - 0x38b79f8c], eax; ret 0xfff0; 
0x0000000000469e3e: or dword ptr [rax - 0x7d], ecx; ret 0x4101; 
0x00000000004942b3: or dword ptr [rax - 1], ecx; jmp qword ptr [rsi + 0xf]; 
0x000000000044ff1e: or dword ptr [rax - 1], ecx; ret 0xc148; 
0x0000000000404f15: or dword ptr [rax], eax; add al, ch; ret; 
0x0000000000439997: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044e8af: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004398d5: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000420fe7: or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000004597ad: or dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000459802: or dword ptr [rax], eax; add byte ptr [rax], al; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x00000000004a82f5: or dword ptr [rax], eax; add byte ptr [rcx + 0x21000001], dl; fdivr st(7); jmp qword ptr [rcx]; 
0x000000000046e155: or dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000040cc1c: or dword ptr [rax], eax; jmp rax; 
0x0000000000400b24: or dword ptr [rax], eax; mov byte ptr [rip + 0x2d77f3], 1; pop rbp; ret; 
0x000000000040203a: or dword ptr [rax], eax; mov edi, edi; movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; jmp rax; 
0x0000000000401f4e: or dword ptr [rax], eax; mov edi, edi; sub rsp, 8; movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; jmp rax; 
0x00000000004078ee: or dword ptr [rax], eax; mov esi, esi; movsxd rax, dword ptr [rcx + rsi*4]; add rax, rcx; jmp rax; 
0x0000000000408543: or dword ptr [rax], eax; mov r12d, eax; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x000000000040cc0e: or dword ptr [rax], eax; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; lea rcx, [rip + 0x97182]; jmp rax; 
0x000000000040f939: or dword ptr [rax], eax; movsxd rax, dword ptr [rcx + rax*4]; add rax, rdx; ret; 
0x00000000004085dd: or dword ptr [rax], eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000041bf6c: or dword ptr [rax], eax; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000041c252: or dword ptr [rax], eax; movzx edi, dl; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x000000000040a2a5: or dword ptr [rax], eax; ret; 
0x00000000004015c4: or dword ptr [rbp + 0x4d0f74c9], eax; test eax, eax; jne 0x15d8; mov eax, 0xffffffea; ret; 
0x0000000000401744: or dword ptr [rbp + 0x4d0f74c9], eax; test eax, eax; jne 0x1758; mov eax, 0xffffffea; ret; 
0x000000000045840f: or dword ptr [rbp + rax], edi; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000458c2a: or dword ptr [rbp - 0x36], esi; lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000043c846: or dword ptr [rbp - 0xcffffff], 0xf; outsd dx, dword ptr [rsi]; push rdi; ret 0xff3; 
0x00000000004221b0: or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000004337d3: or dword ptr [rcx], ebp; add al, byte ptr [rax]; lea rax, [rip + 0x22862]; cmovne rax, rdx; ret; 
0x00000000004804e7: or dword ptr [rdi - 1], 0xffffffff; dec dword ptr [rbx - 0x3b7cb7fa]; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000043e1d4: or dword ptr [rdi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000041c717: or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b79f8c], eax; ret 0xfff0; 
0x000000000047ea12: or dword ptr [rdi], ecx; xchg dword ptr [rdi], esi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x8b08; 
0x000000000049d2f9: or dword ptr [rdx + 0x74], edi; adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000048f136: or dword ptr [rip + 0x2480eb], 1; pop rbx; ret; 
0x0000000000490347: or dword ptr [rsi - 0x1a], esi; cmp r8d, eax; je 0x90296; sub eax, r8d; ret; 
0x00000000004910d9: or dword ptr [rsi - 0x76b70001], 0x43; adc byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x00000000004288eb: or dword ptr [rsi], 0x83480003; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000004a82f4: or dword ptr es:[rax], eax; add byte ptr [rcx + 0x21000001], dl; fdivr st(7); jmp qword ptr [rcx]; 
0x00000000004d0720: or eax, 0x10a0303; ret; 
0x00000000004d0778: or eax, 0x1370303; ret; 
0x0000000000453c41: or eax, 0x1c478d48; ret; 
0x0000000000422090: or eax, 0x20; mov dword ptr [rdi], eax; mov rax, -0x40; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000049c562: or eax, 0x23cc99; mov rax, qword ptr [rdi + rsi*8]; cmp byte ptr [rcx + rsi], 8; jne 0x9c575; mov qword ptr [rax], rdx; ret; 
0x000000000041021b: or eax, 0x2c8c6b; adc ch, cl; ret; 
0x00000000004101ed: or eax, 0x2c8c99; add al, 0xeb; mov byte ptr [rcx], bh; ret 0x860f; 
0x000000000048b538: or eax, 0x34243; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x00000000004d0710: or eax, 0x34b0303; ret; 
0x00000000004d0744: or eax, 0x35b0303; ret; 
0x00000000004812aa: or eax, 0x3b484a8b; cmove r8, rcx; ret; 
0x000000000047e832: or eax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4404; 
0x000000000047e09a: or eax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000047e1f1: or eax, 0x403ae; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000046a54f: or eax, 0x41000000; mov edx, 8; mov eax, ecx; syscall; 
0x0000000000469f4a: or eax, 0x441f0f; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000040393c: or eax, 0x48038948; add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000044f532: or eax, 0x48c0bc0f; lea eax, [rdi + rax]; ret; 
0x0000000000482ae5: or eax, 0x48fad348; test edx, edx; je 0x82b10; bsf rax, rdx; ret; 
0x00000000004a9d41: or eax, 0x5f0000; add byte ptr [rax], al; ret 0; 
0x000000000043dde4: or eax, 0x63490007; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044f26a: or eax, 0x63b91; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000044de55: or eax, 0x64fa6; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000044dbfa: or eax, 0x65201; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000044c325: or eax, 0x66ad6; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000453c38: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000453588: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004394e7: or eax, 0x83480000; ret 0x4910; 
0x000000000044ce61: or eax, 0x83480000; ret 0xe910; 
0x0000000000439515: or eax, 0x83480000; ret 0xeb10; 
0x0000000000428a06: or eax, 0x83480003; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000004a40c8: or eax, 0x84000000; fdivr st(7); call qword ptr [rbx]; 
0x00000000004a40c0: or eax, 0x84000000; fdivr st(7); dec dword ptr [rip - 0x7c000000]; fdivr st(7); call qword ptr [rbx]; 
0x00000000004019bf: or eax, 0x8500000b; sar byte ptr [rax + 9], 0x48; add esp, 0x18; ret; 
0x00000000004038fd: or eax, 0x8b084e8b; or al, 0x8d; push rcx; add bh, byte ptr [rcx]; ret 0xd77; 
0x00000000004012aa: or eax, 0x8c48348; mov eax, edi; pop rbx; pop rbp; ret; 
0x000000000040390a: or eax, 0x8c48348; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000004a0302: or eax, 0x8c48348; pop rbx; pop rbp; ret; 
0x000000000040cc19: or eax, 0x97182; jmp rax; 
0x00000000004078eb: or eax, 0x9a338; mov esi, esi; movsxd rax, dword ptr [rcx + rsi*4]; add rax, rcx; jmp rax; 
0x0000000000458ab3: or eax, 0xc0850028; jne 0x58ad0; mov eax, 1; syscall; 
0x00000000004837c2: or eax, 0xc2bc0f48; shr rax, 2; ret; 
0x00000000004b9879: or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x00000000004ab354: or eax, 0xe4000001; fdivr st(7); jmp rsp; 
0x0000000000463505: or eax, 0xea810000; ret 0; 
0x000000000044452a: or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004aee5d: or eax, 0xf00fff9; stc; call qword ptr [rax + 0x10]; 
0x0000000000444533: or eax, 0xf7f0ff3; ret; 
0x00000000004790a1: or eax, 0xfb8148; adc byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rdx + rbx], esp; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000045b42b: or eax, 0xffffffa0; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x000000000040149c: or eax, 0xffffffff; ret; 
0x000000000043b169: or eax, 1; ret; 
0x000000000043dfe5: or eax, dword ptr [edi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004d04ad: or eax, dword ptr [r8]; adc byte ptr [rax], al; add byte ptr [rax], al; sbb byte ptr [rbx - 0x1d080000], ah; sti; jmp qword ptr [rdx]; 
0x00000000004d1cd5: or eax, dword ptr [r8]; cmp byte ptr [rax], al; add byte ptr [rax], al; mov ebx, 0xa4c00000; cld; jmp qword ptr [rsi]; 
0x00000000004d17ae: or eax, dword ptr [rax]; adc al, 0; add byte ptr [rax], al; sbb byte ptr [rsi + 0x62280000], dh; cld; jmp qword ptr [rcx]; 
0x00000000004d04ae: or eax, dword ptr [rax]; adc byte ptr [rax], al; add byte ptr [rax], al; sbb byte ptr [rbx - 0x1d080000], ah; sti; jmp qword ptr [rdx]; 
0x000000000048be5b: or eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; cmp eax, 0x339b3; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x00000000004396c7: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d001: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004396f5: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004d2428: or eax, dword ptr [rax]; add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; xchg eax, esp; ret 0; 
0x00000000004d166b: or eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; fdiv dword ptr [rax + rax - 0x3a18800]; call qword ptr [rbx]; 
0x0000000000459851: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000459851: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x59860; ret; 
0x00000000004019c0: or eax, dword ptr [rax]; add byte ptr [rbp + 0x480978c0], al; add esp, 0x18; ret; 
0x0000000000401986: or eax, dword ptr [rax]; add byte ptr [rbp + 0x480b78c0], al; add esp, 8; ret; 
0x0000000000471749: or eax, dword ptr [rax]; add byte ptr [rbx - 0x78f0d008], al; mov esi, 0x8900000b; ret 0x349; 
0x000000000046e0e9: or eax, dword ptr [rax]; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x00000000004a8ee9: or eax, dword ptr [rax]; add cl, ah; add byte ptr [rax], al; add byte ptr [rsi - 0x30000000], cl; fdivr st(7); call rax; 
0x00000000004d1cd6: or eax, dword ptr [rax]; cmp byte ptr [rax], al; add byte ptr [rax], al; mov ebx, 0xa4c00000; cld; jmp qword ptr [rsi]; 
0x00000000004cac16: or eax, dword ptr [rax]; pushfq; add byte ptr [rax], al; add byte ptr [rax - 0x3fffffb6], al; sub dh, dh; jmp rsi; 
0x000000000040a34d: or eax, dword ptr [rax]; ret; 
0x000000000043dfe6: or eax, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004c9840: or eax, dword ptr [rdx]; jae 0xc984e; ret; 
0x00000000004d1a5a: or eax, dword ptr [rdx]; ret 0xe0a; 
0x000000000044f647: or eax, ecx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000044f64e: or eax, edx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000493aab: or eax, edx; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x00000000004276f4: or ebp, dword ptr [rbx]; push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000468534: or ebp, eax; outsd dx, dword ptr ss:[rsi]; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000421ccd: or ebp, edx; mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000400aec: or ebx, dword ptr [rbp - 0x41]; adc byte ptr [rbp + rbp*2], bh; jmp rax; 
0x000000000040123c: or ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004446f3: or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000423b56: or ebx, esi; ret; 
0x0000000000424a47: or ecx, 0x20; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000004326bf: or ecx, dword ptr [rax + 0x63]; ret; 
0x0000000000422a47: or ecx, dword ptr [rax + 1]; ret 0x8949; 
0x00000000004c749e: or ecx, dword ptr [rax + r8]; add byte ptr [rax], cl; adc eax, dword ptr [rax]; add byte ptr [rax], bh; sbb esp, esi; jmp qword ptr [rcx + 2]; 
0x00000000004c749f: or ecx, dword ptr [rax + rax]; add byte ptr [rax], cl; adc eax, dword ptr [rax]; add byte ptr [rax], bh; sbb esp, esi; jmp qword ptr [rcx + 2]; 
0x00000000004560bc: or ecx, dword ptr [rax - 0x73]; adc al, 0xe; cmp rdi, rdx; jb 0x560c9; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000049c5f4: or ecx, dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x28; ret; 
0x00000000004a037f: or ecx, dword ptr [rax - 0x7d]; ret 0x4810; 
0x0000000000491d93: or ecx, dword ptr [rbp + 0x39]; ret 0x860f; 
0x000000000049e864: or ecx, dword ptr [rbx + 0x74c08507]; add eax, 0xffff50e9; push rbx; ret; 
0x00000000004804e5: or ecx, dword ptr [rdi]; or dword ptr [rdi - 1], 0xffffffff; dec dword ptr [rbx - 0x3b7cb7fa]; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000400dbd: or ecx, dword ptr [rdx]; add byte ptr [rcx - 0x76b7ac08], cl; ret; 
0x0000000000434fd7: or ecx, esi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000043b160: or ecx, esi; sub rax, rcx; je 0x3b170; sbb eax, eax; or eax, 1; ret; 
0x00000000004aee95: or edi, ecx; call rax; 
0x00000000004aee95: or edi, ecx; call rax; or al, 0xf9; jmp qword ptr [rax]; 
0x00000000004aee55: or edi, ecx; jmp qword ptr [rax + 0xc]; 
0x0000000000453323: or edi, edi; loope 0x5338d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000453943: or edi, edi; loope 0x539ad; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000048e8ef: or edi, edx; dec dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000420fdf: or edx, 0x20; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000040a3fb: or edx, 0x40000000; test eax, eax; cmovns eax, edx; add rsp, 8; ret; 
0x0000000000459809: or edx, 0x40; mov eax, ecx; syscall; 
0x00000000004c9baf: or edx, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], bl; cmp al, byte ptr [rax]; add byte ptr [rax], ch; ret; 
0x000000000044fcaf: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000004838ab: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000482b90: or edx, ecx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000049c1d5: or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x00000000004560ba: or esi, dword ptr [rbx + rcx + 0x48]; lea edx, [rsi + rcx]; cmp rdi, rdx; jb 0x560c9; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000493913: or esi, eax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x0000000000456e23: or esi, ebx; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000444613: or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x000000000046a6c4: or esi, ebx; ret; 
0x00000000004c7285: or esi, esp; call qword ptr [rax]; 
0x00000000004c72c5: or esi, esp; call qword ptr [rdi]; 
0x00000000004221b1: or esp, dword ptr [rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000004c7255: or esp, esi; call qword ptr [rbx + 1]; 
0x0000000000459808: or r10d, 0x40; mov eax, ecx; syscall; 
0x0000000000444762: or r11b, r14b; movq qword ptr [rdi], mm1; ret; 
0x00000000004446f2: or r11d, r14d; movq qword ptr [rdi], mm1; ret; 
0x0000000000439451: or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000444682: or r14b, r11b; movq qword ptr [rdi], mm1; ret; 
0x0000000000444612: or r14d, r11d; movq qword ptr [rdi], mm1; ret; 
0x00000000004d1a59: or r8d, dword ptr [r10]; ret 0xe0a; 
0x00000000004d2427: or r8d, dword ptr [r8]; add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; xchg eax, esp; ret 0; 
0x0000000000466dd0: or r9b, byte ptr [r8 + 0x39]; ret 0x1176; 
0x00000000004d0777: or rax, 0x1370303; ret; 
0x00000000004d070f: or rax, 0x34b0303; ret; 
0x00000000004d0743: or rax, 0x35b0303; ret; 
0x000000000047e831: or rax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4404; 
0x000000000047e099: or rax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000045871c: or rax, 0xffffffffffffffff; ret; 
0x00000000004d17ad: or rax, qword ptr [r8]; adc al, 0; add byte ptr [rax], al; sbb byte ptr [rsi + 0x62280000], dh; cld; jmp qword ptr [rcx]; 
0x00000000004d166a: or rax, qword ptr [r8]; add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; fdiv dword ptr [rax + rax - 0x3a18800]; call qword ptr [rbx]; 
0x00000000004cac15: or rax, qword ptr [rax]; pushfq; add byte ptr [rax], al; add byte ptr [rax - 0x3fffffb6], al; sub dh, dh; jmp rsi; 
0x00000000004c983f: or rax, qword ptr [rdx]; jae 0xc984e; ret; 
0x000000000044f646: or rax, rcx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000044f64d: or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000493aaa: or rax, rdx; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x0000000000434fd6: or rcx, rsi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000043b15f: or rcx, rsi; sub rax, rcx; je 0x3b170; sbb eax, eax; or eax, 1; ret; 
0x00000000004c9bae: or rdx, qword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], bl; cmp al, byte ptr [rax]; add byte ptr [rax], ch; ret; 
0x000000000044fcae: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000004838aa: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000482b8f: or rdx, rcx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000493912: or rsi, rax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x000000000041f9da: out 0x41, al; call qword ptr [rbp + 0x38]; 
0x0000000000490349: out 0x41, al; cmp eax, eax; je 0x90296; sub eax, r8d; ret; 
0x000000000045b0a0: out 0x41, eax; and ebx, 0xffffffbb; cmp r11d, 0xa; je 0x5b0ac; ret; 
0x000000000041f502: out 0x41, eax; call qword ptr [rdi + 0x38]; 
0x000000000049cfa5: out 0x41, eax; call rdi; 
0x0000000000495c29: out 0x48, al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000493934: out 0x48, al; mov dword ptr [rdi], esi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000479925: out 0x48, al; mov edi, dword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x00000000004795f0: out 0x48, al; mov edi, dword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000047f920: out 0x48, al; mov edi, ebx; call qword ptr [rax + 0x58]; 
0x00000000004801bd: out 0x48, al; mov edi, ebx; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000406960: out 0x48, eax; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000432228: out 0x48, eax; sub eax, 0x10; ret; 
0x0000000000456d2b: out 0x49, eax; jmp qword ptr [rdx - 0x2f]; 
0x000000000043e6f6: out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000046f41c: out 0x4c, al; mov edi, esi; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000043e526: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e622: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043e56e: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000046f422: out 0x4c, eax; mov edx, edi; call qword ptr [rax + 0x38]; 
0x0000000000425fb7: out 0x4d, eax; lea edi, [rsi + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000484981: out 0x4e, eax; and eax, 0x75c08500; pop rbp; mov eax, 0x101; syscall; 
0x000000000040b0c3: out 0x6c, al; or dword ptr [rax], eax; ret; 
0x000000000040aff3: out 0x6c, eax; or dword ptr [rax], eax; ret; 
0x000000000047fa85: out 0x74, eax; xor byte ptr [rax - 0x75], cl; test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000040a323: out 0x79, eax; or dword ptr [rax], eax; ret; 
0x0000000000498ee1: out 0x89, al; out dx, eax; call qword ptr [rax]; 
0x0000000000498fbd: out 0x89, al; out dx, eax; call qword ptr [rcx]; 
0x0000000000498dc7: out 0x89, al; out dx, eax; call rax; 
0x0000000000421ac5: out 0x8b, al; mov ebp, 0xffffff7c; mov eax, r13d; syscall; 
0x0000000000458d82: out 0xa, al; sub byte ptr [rax], al; test eax, eax; jne 0x58da0; mov eax, 3; syscall; 
0x000000000045846f: out 0xbf, al; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x00000000004c24a0: out 0xcf, eax; movsb byte ptr [rdi], byte ptr [rsi]; in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x0000000000428566: out 0xe2, al; sub al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x2ae2b3], rax; ret; 
0x000000000049c5ea: out 0xe8, al; adc byte ptr [rip - 0x7ab80000], ah; sal byte ptr [rbx + rcx + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x0000000000411b4f: out 0xe8, eax; pop rbx; rol byte ptr [rcx], 1; add byte ptr [rax - 0x77], cl; ret 0x2fe9; 
0x000000000045ce47: out 0xe8, eax; ret; 
0x000000000045f920: out 0xe8, eax; sti; cld; jmp qword ptr [rsi + 0x2e]; 
0x00000000004572d4: out 0xf0, al; mov edx, 0; cmove rax, rdx; pop rbx; ret; 
0x0000000000443efa: out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000443f7a: out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000004c41c8: out 0xf5, eax; mov ch, 0xab; ret; 
0x00000000004cbaf9: out 0xf6, eax; jmp qword ptr [rbx]; 
0x000000000049e2b7: out 0xf7, al; jmp qword ptr [rsi + 0xf]; 
0x00000000004cccf1: out 0xf8, al; call qword ptr [rax]; 
0x00000000004ccd41: out 0xf8, al; call qword ptr [rcx]; 
0x00000000004ccd09: out 0xf8, al; call qword ptr [rdx]; 
0x00000000004aecdd: out 0xf8, al; jmp qword ptr [rax - 0x19]; 
0x00000000004ccd21: out 0xf8, al; jmp qword ptr [rcx]; 
0x000000000048b08d: out 0xfc, eax; inc dword ptr [rbp + 0x5b0e78c0]; ret; 
0x0000000000431cd7: out 0xfc, eax; jmp qword ptr [rsi + 0xf]; 
0x00000000004790f1: out 0xfd, eax; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000430523: out 0xff, al; jmp qword ptr [rsi + 0x2e]; 
0x0000000000471352: out 0xff, eax; dec dword ptr [rbp + 0x63]; ret 0x20be; 
0x000000000047a2df: out 0xff, eax; inc dword ptr [rcx - 5]; jg 0x7a2f8; test byte ptr [rax - 0x7c000019], ah; ret; 
0x0000000000471826: out 3, al; sti; jmp qword ptr [rsi + 0xf]; 
0x000000000048ed95: out 4, al; cmp rcx, qword ptr [rdi + rsi]; jae 0x8ed41; xor eax, eax; ret; 
0x0000000000440664: out 6, al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440514: out 6, eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040cefe: out 9, al; add cl, ch; ret 0xfffd; 
0x00000000004661ae: out dx, al; add al, 0; add byte ptr [rax + 0x29], cl; ret 0x349; 
0x00000000004005a1: out dx, al; add al, byte ptr [rax]; mov qword ptr [rip + 0x2d8b49], 0; pop rax; ret; 
0x0000000000426c55: out dx, al; call 0x5b320; nop dword ptr [rax + rax]; mov rax, -1; ret; 
0x00000000004aecb9: out dx, al; clc; jmp qword ptr [rax]; 
0x000000000049b3fe: out dx, al; ja 0x9b519; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000043361e: out dx, al; jns 0x33621; add byte ptr [rsi + rax*8 - 0xd], dh; ret; 
0x0000000000444300: out dx, al; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004a307c: out dx, al; mov bl, 0xf6; push qword ptr [rax]; test al, 0xf6; call rsi; 
0x0000000000458aed: out dx, al; mov edi, ebx; mov eax, 1; syscall; 
0x0000000000458a1d: out dx, al; mov edi, ebx; xor eax, eax; syscall; 
0x00000000004b0ed4: out dx, al; mov esp, 0xbca7fffa; cli; call qword ptr [rcx - 0x45]; 
0x000000000043e6fa: out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000483100: out dx, al; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000046ddad: out dx, al; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000041cd3c: out dx, al; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000432932: out dx, al; mov rdi, rax; call rcx; 
0x00000000004597a8: out dx, al; mov rdi, rbp; mov eax, 9; syscall; 
0x0000000000423368: out dx, al; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000422e9d: out dx, al; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000044430a: out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000044e75e: out dx, al; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004312e3: out dx, al; pop rbp; pop r12; pop r13; pop r14; jmp rax; 
0x00000000004a2af0: out dx, al; ret 0xfff6; 
0x000000000042e49e: out dx, al; ret; 
0x000000000041d6a5: out dx, al; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x00000000004a255c: out dx, al; sal esi, 1; call rsi; 
0x000000000043f790: out dx, al; sub rdi, 0x40; lea r11, [rip + 0x6f573]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cdc0: out dx, al; sub rdi, 0x40; lea r11, [rip + 0x71d83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048c69c: out dx, al; xor eax, eax; call 0x8d9b0; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x0000000000426cb9: out dx, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000426d11: out dx, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000043f944: out dx, eax; and byte ptr [rbp + rcx*4 + 0x1d], cl; ret; 
0x000000000047f792: out dx, eax; call qword ptr [rax + 0x38]; 
0x0000000000498ee3: out dx, eax; call qword ptr [rax]; 
0x000000000041fb37: out dx, eax; call qword ptr [rbp + 0x20]; 
0x0000000000498fbf: out dx, eax; call qword ptr [rcx]; 
0x0000000000431cb7: out dx, eax; call rax; 
0x0000000000483422: out dx, eax; call rbx; 
0x00000000004939c4: out dx, eax; cmp cx, 0x7fff; je 0x939b4; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000444380: out dx, eax; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043f853: out dx, eax; lea r11, [rip + 0x6f4b4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f794: out dx, eax; lea r11, [rip + 0x6f573]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ce83: out dx, eax; lea r11, [rip + 0x71cc4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cdc4: out dx, eax; lea r11, [rip + 0x71d83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000041cd3f: out dx, eax; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000004597ab: out dx, eax; mov eax, 9; syscall; 
0x000000000042186d: out dx, eax; mov eax, r9d; syscall; 
0x00000000004b0f08: out dx, eax; mov esi, 0xba9cfffa; cli; jmp rbx; 
0x000000000043e52a: out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e626: out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043e572: out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000483573: out dx, eax; mov r9, r14; call rbx; 
0x000000000041ccaa: out dx, eax; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000044438a: out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000044e85d: out dx, eax; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000420bd3: out dx, eax; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000041fbb8: out dx, eax; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000043b493: out dx, eax; push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043b4a8: out dx, eax; push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043b4bd: out dx, eax; push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000040c7e3: out dx, eax; push rsp; or dword ptr [rax], eax; ret; 
0x0000000000455973: out dx, eax; ret 0xf66; 
0x000000000047330d: out dx, eax; ret; 
0x000000000041d5b9: out dx, eax; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000043c9ac: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x2373; 
0x000000000043c995: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000043c97e: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000043b43a: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000047e939: out dx, eax; std; add eax, dword ptr [rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000040fb8d: out dx, eax; xchg eax, edx; sub al, 0; add rsp, 0x88; pop rbx; ret; 
0x0000000000467a4d: out dx, eax; xchg eax, esi; add al, byte ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000043b70f: out dx, eax; xchg eax, esi; add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043b7cc: out dx, eax; xchg eax, esi; lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043b77b: out dx, eax; xchg eax, esi; rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000047802d: out dx, eax; xor bh, dh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000499f07: out dx, eax; xor byte ptr [rax - 0x77], cl; ret 0x2148; 
0x000000000044c76e: outsb dx, byte ptr [rsi]; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000453d9e: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x000000000042f776: outsb dx, byte ptr [rsi]; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000004c202c: outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000004ae925: outsb dx, byte ptr [rsi]; clc; inc eax; outsd dx, dword ptr [rsi]; clc; jmp rax; 
0x0000000000468637: outsb dx, byte ptr [rsi]; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000004c3da3: outsb dx, byte ptr [rsi]; ja 0xc3d29; ret 0x48f; 
0x00000000004a30f0: outsb dx, byte ptr [rsi]; mov dl, 0xf6; call qword ptr [rsi - 0x4e]; 
0x00000000004a30f0: outsb dx, byte ptr [rsi]; mov dl, 0xf6; call qword ptr [rsi - 0x4e]; idiv bh; mov dl, 0xf6; jmp qword ptr [rsi]; 
0x000000000048cbc0: outsb dx, byte ptr [rsi]; or byte ptr [rax + 1], cl; ret; 
0x000000000046547e: outsb dx, byte ptr [rsi]; ret 4; 
0x00000000004c1ae4: outsb dx, byte ptr [rsi]; sahf; ret 0x38ae; 
0x00000000004a24e8: outsb dx, byte ptr [rsi]; sal esi, cl; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x2d]; 
0x00000000004b0030: outsb dx, byte ptr [rsi]; test edx, edi; jmp rcx; 
0x0000000000468636: outsb dx, byte ptr ss:[rsi]; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000045630c: outsd dx, dword ptr [rsi]; adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000403994: outsd dx, dword ptr [rsi]; add byte ptr [r8 + 0x29], r9b; ret 0x8d48; 
0x00000000004cd155: outsd dx, dword ptr [rsi]; add byte ptr [rax], al; iretd; xor esi, ebx; jmp qword ptr [rbx]; 
0x0000000000407551: outsd dx, dword ptr [rsi]; add eax, 0; add byte ptr [rax], al; movups xmmword ptr [rax + 0xc0], xmm0; pop rbx; ret; 
0x0000000000428532: outsd dx, dword ptr [rsi]; and al, 0x89; adc byte ptr [r11 + 0x5d], r11b; ret; 
0x000000000043c528: outsd dx, dword ptr [rsi]; call 0xf6aade1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004ae929: outsd dx, dword ptr [rsi]; clc; jmp rax; 
0x0000000000468537: outsd dx, dword ptr [rsi]; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000447b6c: outsd dx, dword ptr [rsi]; cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043c50d: outsd dx, dword ptr [rsi]; fdiv dword ptr [rdx - 0x10f09928]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c30d: outsd dx, dword ptr [rsi]; fdiv qword ptr [rdx - 0x10f09924]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000433bc8: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x00000000004480ee: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x000000000043c48d: outsd dx, dword ptr [rsi]; fnstenv [rdx - 0x10f09927]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c1d7: outsd dx, dword ptr [rsi]; movabs rbp, 0xf66d1ef0f66bdb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c2d7: outsd dx, dword ptr [rsi]; movabs rsp, 0xf66d1ef0f66bcb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000447cc4: outsd dx, dword ptr [rsi]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x000000000040c833: outsd dx, dword ptr [rsi]; push rbp; or dword ptr [rax], eax; ret; 
0x000000000043c40d: outsd dx, dword ptr [rsi]; push rdi; fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c20d: outsd dx, dword ptr [rsi]; push rdi; fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c84d: outsd dx, dword ptr [rsi]; push rdi; ret 0xff3; 
0x000000000043c7ad: outsd dx, dword ptr [rsi]; push rdi; ret; 
0x000000000048264a: outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x00000000004535e6: outsd dx, dword ptr [rsi]; push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000043c03d: outsd dx, dword ptr [rsi]; push rsi; fbstp tbyte ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c10d: outsd dx, dword ptr [rsi]; push rsi; fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000453c36: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000453586: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004535c6: outsd dx, dword ptr [rsi]; push rsi; psllq mm1, qword ptr [rdi]; jg 0x535d4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000472b5d: outsd dx, dword ptr [rsi]; ret 0x290f; 
0x0000000000472b86: outsd dx, dword ptr [rsi]; ret 0x33e8; 
0x00000000004296fa: outsd dx, dword ptr [rsi]; ret 0x4466; 
0x00000000004c24a6: outsd dx, dword ptr [rsi]; ret 0x5ae4; 
0x0000000000429132: outsd dx, dword ptr [rsi]; ret 0x8348; 
0x00000000004758dd: outsd dx, dword ptr [rsi]; ret 0xdce8; 
0x00000000004758b9: outsd dx, dword ptr [rsi]; ret 0xe583; 
0x000000000048269a: outsd dx, dword ptr [rsi]; ret 0xf66; 
0x000000000045591c: outsd dx, dword ptr [rsi]; ret; 
0x000000000043c86d: outsd dx, dword ptr [rsi]; sal byte ptr [rdx - 0x10f0992e], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c98e: outsd dx, dword ptr [rsi]; sal byte ptr [rdx - 0x10f09930], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000043c7cd: outsd dx, dword ptr [rsi]; sal qword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c90d: outsd dx, dword ptr [rsi]; sal qword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000472b24: outsd dx, dword ptr [rsi]; sbb ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x00000000004c24a5: outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x0000000000468536: outsd dx, dword ptr ss:[rsi]; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000043a55d: pcmpeqb mm1, qword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x3a5c0; xor eax, eax; ret; 
0x0000000000483b54: pcmpeqb mm3, qword ptr [rcx]; add rax, 2; ret; 
0x0000000000483b3f: pcmpeqb mm3, qword ptr [rsi]; ret; 
0x000000000044fb4b: pcmpeqb mm4, mm0; pmovmskb edx, xmm4; test edx, edx; je 0x4fb5a; bsf eax, edx; ret; 
0x000000000043a55c: pcmpeqb xmm1, xmmword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x3a5c0; xor eax, eax; ret; 
0x000000000044fb4a: pcmpeqb xmm4, xmm0; pmovmskb edx, xmm4; test edx, edx; je 0x4fb5a; bsf eax, edx; ret; 
0x00000000004c38a5: pcmpeqw mm5, qword ptr [rbp + r12*2 - 0x5f]; mov cs, edi; ret 0x8b36; 
0x00000000004c38a6: pcmpeqw mm5, qword ptr [rbp - 0x5f]; mov cs, edi; ret 0x8b36; 
0x0000000000424a4b: pcmpgtb mm0, mm7; add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000455da0: pcmpistri xmm1, xmm1, 0x3a; movsxd rcx, ecx; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x00000000004946b4: pcmpistri xmm3, xmmword ptr [rdi], 0x12; jae 0x946b0; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x0000000000457036: pextrw edi, mm0, 0x77; ret; 
0x000000000044f52c: pmovmskb eax, mm0; test eax, eax; je 0x4f540; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000043a4cc: pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000043a562: pmovmskb eax, mm1; test eax, eax; jne 0x3a5c0; xor eax, eax; ret; 
0x000000000043a532: pmovmskb eax, mm1; test eax, eax; jne 0x3a5e0; xor eax, eax; ret; 
0x000000000044f52b: pmovmskb eax, xmm0; test eax, eax; je 0x4f540; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000043a4cb: pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000043a561: pmovmskb eax, xmm1; test eax, eax; jne 0x3a5c0; xor eax, eax; ret; 
0x000000000043a531: pmovmskb eax, xmm1; test eax, eax; jne 0x3a5e0; xor eax, eax; ret; 
0x000000000044fb4f: pmovmskb edx, mm4; test edx, edx; je 0x4fb5a; bsf eax, edx; ret; 
0x000000000044fb4e: pmovmskb edx, xmm4; test edx, edx; je 0x4fb5a; bsf eax, edx; ret; 
0x000000000049acfb: pmulhw mm4, qword ptr [rbx]; add byte ptr [rax], cl; mov byte ptr [rip + 0x23e509], 8; ret; 
0x00000000004cf0ed: pop qword ptr [rax]; add byte ptr [rax + 0x20], dh; sti; jmp qword ptr [rdx]; 
0x0000000000425d25: pop qword ptr [rax]; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000049d1ab: pop qword ptr [rdx]; add byte ptr [rdi], cl; mov dh, 0xc9; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000040233e: pop qword ptr [rip + 0x441f0f00]; add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov eax, dword ptr [rip + 0x2d3dae]; ret; 
0x000000000045b055: pop r10; ret; 
0x00000000004c60dc: pop r10; std; call qword ptr [rdx + rbx*2 - 3]; jmp qword ptr [rdi + 0x5a]; 
0x0000000000459941: pop r12; jmp rax; 
0x0000000000459926: pop r12; mov esi, 2; jmp rax; 
0x000000000042f299: pop r12; pop r13; pop r14; jmp rax; 
0x000000000043181c: pop r12; pop r13; pop r14; jmp rcx; 
0x00000000004304c6: pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x00000000004113dd: pop r12; pop r13; pop r14; pop r15; pop rbp; ret; 
0x000000000040069f: pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000041e549: pop r12; pop r13; pop r14; pop rbp; ret; 
0x0000000000401657: pop r12; pop r13; pop r14; ret; 
0x00000000004065cc: pop r12; pop r13; ret; 
0x00000000004011cf: pop r12; ret; 
0x000000000042f29b: pop r13; pop r14; jmp rax; 
0x000000000043181e: pop r13; pop r14; jmp rcx; 
0x00000000004304c8: pop r13; pop r14; pop r15; jmp rax; 
0x00000000004859ce: pop r13; pop r14; pop r15; pop rbp; ret; 
0x00000000004006a1: pop r13; pop r14; pop r15; ret; 
0x000000000041e54b: pop r13; pop r14; pop rbp; ret; 
0x0000000000401659: pop r13; pop r14; ret; 
0x00000000004065ce: pop r13; ret; 
0x000000000042f29d: pop r14; jmp rax; 
0x0000000000431820: pop r14; jmp rcx; 
0x00000000004304ca: pop r14; pop r15; jmp rax; 
0x00000000004113e1: pop r14; pop r15; pop rbp; ret; 
0x00000000004006a3: pop r14; pop r15; ret; 
0x000000000041e54d: pop r14; pop rbp; ret; 
0x000000000040165b: pop r14; ret; 
0x00000000004304cc: pop r15; jmp rax; 
0x00000000004113e3: pop r15; pop rbp; ret; 
0x00000000004006a5: pop r15; ret; 
0x00000000004aa7f0: pop rax; add byte ptr [rax], al; add byte ptr [rbx], dl; add byte ptr [rax], al; fdivr st(7); call qword ptr [rbx]; 
0x00000000004cba35: pop rax; add byte ptr [rax], al; pop rax; jg 0xcba31; jmp qword ptr [rbx]; 
0x000000000042da44: pop rax; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4c07; 
0x00000000004c86f4: pop rax; and eax, 0x4d480000; cmc; call rsp; 
0x00000000004ae8e5: pop rax; clc; call rax; 
0x00000000004ae8e5: pop rax; clc; call rax; pop rcx; clc; call qword ptr [rax]; 
0x00000000004d12e8: pop rax; cld; call qword ptr [rbx + 1]; 
0x000000000046d483: pop rax; idiv edi; dec dword ptr [rax + 0x29]; bnd call qword ptr [rbx + 0x38]; 
0x000000000046d44d: pop rax; idiv edi; dec dword ptr [rax - 0x39]; ret 0x7c60; 
0x00000000004cba38: pop rax; jg 0xcba31; jmp qword ptr [rbx]; 
0x0000000000490f5c: pop rax; jmp qword ptr [rax]; 
0x00000000004b0930: pop rax; mov ch, 0xfa; push qword ptr [rax]; mov ch, 0xfa; call qword ptr [rax]; 
0x0000000000420469: pop rax; mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x0000000000420d74: pop rax; mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000004c8b38: pop rax; movsxd rsi, ebp; jmp qword ptr [rcx + 1]; 
0x0000000000429081: pop rax; or byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x00000000004a154d: pop rax; or byte ptr [rbp - 0x77], cl; ret; 
0x000000000040cc0d: pop rax; or dword ptr [rax], eax; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; lea rcx, [rip + 0x97182]; jmp rax; 
0x000000000041c716: pop rax; or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b79f8c], eax; ret 0xfff0; 
0x0000000000491016: pop rax; pop rdx; pop rbx; ret; 
0x00000000004d23f4: pop rax; ret 0; 
0x00000000004005af: pop rax; ret; 
0x00000000004cc178: pop rax; scasd eax, dword ptr [rdi]; clc; call qword ptr [rbx]; 
0x00000000004af06d: pop rax; stc; call qword ptr [rax + rbx*2 - 7]; jmp rsp; 
0x00000000004aef31: pop rax; stc; call qword ptr [rsi]; 
0x00000000004af0f1: pop rax; stc; call rax; 
0x00000000004af0f1: pop rax; stc; call rax; push rdi; stc; jmp qword ptr [rax + 0x57]; 
0x00000000004af0ed: pop rax; stc; inc dword ptr [rax + 0x58]; stc; call rax; 
0x00000000004aeef5: pop rax; stc; inc eax; push rdi; stc; call qword ptr [rax + 0x57]; 
0x00000000004af071: pop rax; stc; jmp rsp; 
0x00000000004c5ced: pop rax; std; push rsp; push rdi; std; jmp rsp; 
0x00000000004cf3f4: pop rax; xchg eax, edx; add byte ptr [rax], al; cmp byte ptr [rax], ch; sti; jmp qword ptr [rsi]; 
0x000000000049124b: pop rax; xor rcx, qword ptr fs:[0x28]; jne 0x9127e; add rsp, 0x68; ret; 
0x000000000049167b: pop rax; xor rcx, qword ptr fs:[0x28]; jne 0x916ae; add rsp, 0x68; ret; 
0x00000000004cbee5: pop rbp; add byte ptr [rax], al; clc; pushfq; clc; call qword ptr [rdi]; 
0x00000000004cbecd: pop rbp; add byte ptr [rax], al; jo 0xcbe6a; clc; call qword ptr [rbx + 4]; 
0x0000000000481c8a: pop rbp; add byte ptr [rcx], dh; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004ae8f5: pop rbp; clc; call rax; 
0x00000000004ae8f5: pop rbp; clc; call rax; pop rsi; clc; call qword ptr [rax]; 
0x00000000004a4e30: pop rbp; fdivr st(7); jmp qword ptr [rcx]; 
0x0000000000425a60: pop rbp; jmp rax; 
0x00000000004679a7: pop rbp; mov al, 0xe8; ret 0xfc7a; 
0x0000000000484988: pop rbp; mov eax, 0x101; syscall; 
0x0000000000496043: pop rbp; mov eax, 0x89fd8945; ret 0xe283; 
0x0000000000400aab: pop rbp; mov edi, 0x6d7c10; jmp rax; 
0x0000000000421f8d: pop rbp; movzx eax, byte ptr [rax]; pop r12; pop r13; pop r14; ret; 
0x0000000000459940: pop rbp; pop r12; jmp rax; 
0x0000000000459925: pop rbp; pop r12; mov esi, 2; jmp rax; 
0x000000000042f298: pop rbp; pop r12; pop r13; pop r14; jmp rax; 
0x000000000043181b: pop rbp; pop r12; pop r13; pop r14; jmp rcx; 
0x00000000004304c5: pop rbp; pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x000000000040069e: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000401656: pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000004065cb: pop rbp; pop r12; pop r13; ret; 
0x00000000004011ce: pop rbp; pop r12; ret; 
0x000000000042f29c: pop rbp; pop r14; jmp rax; 
0x000000000043181f: pop rbp; pop r14; jmp rcx; 
0x00000000004304c9: pop rbp; pop r14; pop r15; jmp rax; 
0x00000000004113e0: pop rbp; pop r14; pop r15; pop rbp; ret; 
0x00000000004006a2: pop rbp; pop r14; pop r15; ret; 
0x000000000041e54c: pop rbp; pop r14; pop rbp; ret; 
0x000000000040165a: pop rbp; pop r14; ret; 
0x00000000004938a8: pop rbp; pop rbx; ret; 
0x000000000040c8eb: pop rbp; push rsp; or dword ptr [rax], eax; ret; 
0x0000000000400ab8: pop rbp; ret; 
0x00000000004b0148: pop rbp; xchg dl, bh; jmp rcx; 
0x00000000004cbd69: pop rbx; add byte ptr [rax], al; add al, 0x1f; clc; call qword ptr [rsi + 0x16]; 
0x00000000004cbd2d: pop rbx; add byte ptr [rax], al; add byte ptr [rbx], 0xf8; call qword ptr [rax]; 
0x00000000004ab350: pop rbx; add byte ptr [rax], al; add byte ptr [rip - 0x1bffffff], cl; fdivr st(7); jmp rsp; 
0x00000000004cbd55: pop rbx; add byte ptr [rax], al; or byte ptr [rdi], bl; clc; call qword ptr [rax]; 
0x00000000004c1078: pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x00000000004573e2: pop rbx; and eax, 0x7ff80000; div ecx; mov eax, eax; ret; 
0x0000000000457386: pop rbx; and eax, 0x7ff80000; ret; 
0x00000000004ae8ed: pop rbx; clc; call qword ptr [rax + 0x5c]; 
0x00000000004d15f1: pop rbx; cld; jmp qword ptr [rbp]; 
0x00000000004c1076: pop rbx; cmc; pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x00000000004259a4: pop rbx; jmp rax; 
0x0000000000401268: pop rbx; mov eax, 0xffffffea; pop rbp; pop r12; ret; 
0x0000000000403a43: pop rbx; mov eax, 0xfffffff4; pop rbp; pop r12; ret; 
0x000000000048f157: pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x00000000004573d1: pop rbx; mov eax, eax; ret; 
0x000000000040a0b9: pop rbx; mov eax, ebp; pop rbp; pop r12; pop r13; ret; 
0x000000000040135a: pop rbx; mov eax, edi; pop rbp; pop r12; ret; 
0x000000000047567d: pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x00000000004264e9: pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x0000000000420b38: pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000494c6b: pop rbx; mov rax, r13; pop rbp; pop r12; pop r13; ret; 
0x0000000000459937: pop rbx; mov rax, rbp; mov esi, 3; pop rbp; pop r12; jmp rax; 
0x0000000000429f03: pop rbx; mov rax, rdi; pop rbp; pop r12; ret; 
0x000000000041f116: pop rbx; mov rax, rsi; pop rbp; pop r12; ret; 
0x000000000041e548: pop rbx; pop r12; pop r13; pop r14; pop rbp; ret; 
0x0000000000466e2c: pop rbx; pop r12; ret; 
0x0000000000499f89: pop rbx; pop r14; ret; 
0x0000000000425a5f: pop rbx; pop rbp; jmp rax; 
0x00000000004801c1: pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000459924: pop rbx; pop rbp; pop r12; mov esi, 2; jmp rax; 
0x000000000042f297: pop rbx; pop rbp; pop r12; pop r13; pop r14; jmp rax; 
0x000000000043181a: pop rbx; pop rbp; pop r12; pop r13; pop r14; jmp rcx; 
0x0000000000401655: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000004065ca: pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004011cd: pop rbx; pop rbp; pop r12; ret; 
0x0000000000401081: pop rbx; pop rbp; ret; 
0x00000000004c4360: pop rbx; ret 0x6f9; 
0x0000000000400e5a: pop rbx; ret; 
0x0000000000411b51: pop rbx; rol byte ptr [rcx], 1; add byte ptr [rax - 0x77], cl; ret 0x2fe9; 
0x0000000000497aac: pop rbx; sar rax, 3; pop rbp; pop r12; pop r13; ret; 
0x000000000045d520: pop rbx; shl eax, cl; pop rbp; pop r12; ret; 
0x00000000004aef95: pop rbx; stc; call qword ptr [rdx]; 
0x00000000004aeed9: pop rbx; stc; call rax; 
0x00000000004aeed9: pop rbx; stc; call rax; pop rdx; stc; jmp qword ptr [rax + 0x5a]; 
0x00000000004aeed5: pop rbx; stc; inc dword ptr [rax + 0x5b]; stc; call rax; 
0x00000000004aef15: pop rbx; stc; jmp qword ptr [rsi]; 
0x00000000004af0d5: pop rbx; stc; jmp rax; 
0x00000000004aef19: pop rbx; stc; push qword ptr [rsi + 0x46fff95a]; pop rdx; stc; call rsi; 
0x00000000004c5d21: pop rbx; std; call rsp; 
0x00000000004c5d1d: pop rbx; std; inc dword ptr [rbx + rbx*2]; std; call rsp; 
0x00000000004004c3: pop rbx; sub eax, 0xff906600; and eax, 0x2d5bfa; nop; ret; 
0x0000000000407f9b: pop rbx; xor eax, eax; pop rbp; pop r12; pop r13; ret; 
0x000000000040785a: pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000004264b2: pop rbx; xor edx, edx; jmp rax; 
0x000000000043d9f3: pop rcx; adc dword ptr [rdi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a9514: pop rcx; add byte ptr [rax], al; add byte ptr [rbp], dl; add byte ptr [rax], al; fdivr st(7); call qword ptr [rbp]; 
0x00000000004ae8e9: pop rcx; clc; call qword ptr [rax]; 
0x00000000004ae8e9: pop rcx; clc; call qword ptr [rax]; pop rbx; clc; call qword ptr [rax + 0x5c]; 
0x00000000004c2026: pop rcx; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000004407b3: pop rcx; in eax, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000469cc3: pop rcx; insb byte ptr [rdi], dx; cli; jmp qword ptr [rsi + 0xf]; 
0x0000000000447cc5: pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x0000000000447698: pop rcx; jmp qword ptr [rdx - 0xf]; 
0x000000000046dea3: pop rcx; sbb byte ptr [rcx], al; add byte ptr [rax + 0x39], cl; ret; 
0x00000000004aeee9: pop rcx; stc; call qword ptr [rax]; 
0x00000000004aefa5: pop rcx; stc; call qword ptr [rdx + 0x59]; 
0x00000000004aefa5: pop rcx; stc; call qword ptr [rdx + 0x59]; stc; jmp rdx; 
0x00000000004af0e5: pop rcx; stc; jmp qword ptr [rax]; 
0x00000000004cd821: pop rcx; stc; jmp qword ptr [rdi + 0x11]; 
0x00000000004aef25: pop rcx; stc; jmp qword ptr [rsi + 0x59]; 
0x00000000004aefa9: pop rcx; stc; jmp rdx; 
0x00000000004af0e9: pop rcx; stc; push qword ptr [rax + 0x40fff958]; pop rax; stc; call rax; 
0x00000000004c60b5: pop rcx; std; jmp rsp; 
0x00000000004cc0e9: pop rdi; add byte ptr [rax], al; adc al, 0xad; clc; jmp rbx; 
0x00000000004cc175: pop rdi; add byte ptr [rax], al; pop rax; scasd eax, dword ptr [rdi]; clc; call qword ptr [rbx]; 
0x00000000004cc189: pop rdi; add byte ptr [rax], al; scasd eax, dword ptr [rdi]; clc; call qword ptr [rcx + 1]; 
0x000000000044eeed: pop rdi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043eac9: pop rdi; in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e8d9: pop rdi; in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004c361e: pop rdi; insd dword ptr [rdi], dx; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x00000000004304cd: pop rdi; jmp rax; 
0x00000000004c25e1: pop rdi; mov dh, 0x4e; ret 0x474c; 
0x0000000000459b05: pop rdi; or byte ptr [rcx - 0xa], al; ret; 
0x000000000043e6f9: pop rdi; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e529: pop rdi; out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e625: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043e571: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004113e4: pop rdi; pop rbp; ret; 
0x00000000004006a6: pop rdi; ret; 
0x000000000048c03b: pop rdi; test rcx, rcx; jne 0x8c616; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000439d56: pop rdx; add eax, 0x83480000; ret 0x4910; 
0x00000000004d15a1: pop rdx; cld; jmp qword ptr [rax + 1]; 
0x0000000000491ac2: pop rdx; cwde; cld; jmp qword ptr [rsi + 0x2e]; 
0x000000000046a29a: pop rdx; fsub dword ptr [rsi]; add byte ptr [rax + rcx - 0xd], dh; ret; 
0x00000000004c3201: pop rdx; je 0xc31c8; ret 0xacfc; 
0x00000000004c2024: pop rdx; jp 0xc2080; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x000000000049a18a: pop rdx; mov edx, 0xb60f0002; leave; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000004258a5: pop rdx; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004c41c7: pop rdx; out 0xf5, eax; mov ch, 0xab; ret; 
0x000000000045b054: pop rdx; pop r10; ret; 
0x0000000000491017: pop rdx; pop rbx; ret; 
0x000000000045b079: pop rdx; pop rsi; ret; 
0x000000000045acc2: pop rdx; pop rsp; sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000045b056: pop rdx; ret; 
0x00000000004aef21: pop rdx; stc; call rsi; 
0x00000000004aef21: pop rdx; stc; call rsi; pop rcx; stc; jmp qword ptr [rsi + 0x59]; 
0x00000000004aef1d: pop rdx; stc; inc dword ptr [rsi + 0x5a]; stc; call rsi; 
0x00000000004aefa1: pop rdx; stc; inc edx; pop rcx; stc; call qword ptr [rdx + 0x59]; 
0x00000000004aeedd: pop rdx; stc; jmp qword ptr [rax + 0x5a]; 
0x00000000004c60c9: pop rdx; std; call qword ptr [rax]; 
0x00000000004c60e9: pop rdx; std; call qword ptr [rcx + 0x5c]; 
0x00000000004c60dd: pop rdx; std; call qword ptr [rdx + rbx*2 - 3]; jmp qword ptr [rdi + 0x5a]; 
0x00000000004c60d9: pop rdx; std; inc dword ptr [rcx + 0x5a]; std; call qword ptr [rdx + rbx*2 - 3]; jmp qword ptr [rdi + 0x5a]; 
0x00000000004c60e1: pop rdx; std; jmp qword ptr [rdi + 0x5a]; 
0x0000000000481bc2: pop rdx; xchg eax, edi; std; jmp qword ptr [rsi + 0x2e]; 
0x000000000044edee: pop rsi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004cc099: pop rsi; add byte ptr [rax], al; hlt; lodsb al, byte ptr [rsi]; clc; call qword ptr [rdx]; 
0x00000000004cc021: pop rsi; add byte ptr [rax], al; sbb al, 0xa4; clc; call rsp; 
0x00000000004ae8f9: pop rsi; clc; call qword ptr [rax]; 
0x000000000048aacd: pop rsi; clc; call qword ptr [rbp + 0x53]; 
0x00000000004d1679: pop rsi; cld; call qword ptr [rbx]; 
0x00000000004a1c51: pop rsi; idiv bh; rcr byte ptr [rbp - 0xa], 1; jmp rax; 
0x00000000004ad10c: pop rsi; idiv dil; cmp al, 0x40; idiv bh; xor dword ptr [rax - 0xa], eax; jmp qword ptr [rsi]; 
0x000000000042f29e: pop rsi; jmp rax; 
0x0000000000431821: pop rsi; jmp rcx; 
0x00000000004304cb: pop rsi; pop r15; jmp rax; 
0x00000000004113e2: pop rsi; pop r15; pop rbp; ret; 
0x00000000004006a4: pop rsi; pop r15; ret; 
0x000000000041e54e: pop rsi; pop rbp; ret; 
0x000000000041d5ee: pop rsi; ret 0x2b; 
0x00000000004a2b20: pop rsi; ret 0xfff6; 
0x000000000040165c: pop rsi; ret; 
0x00000000004a257c: pop rsi; sal esi, 1; inc dword ptr [rsi - 0x2f]; idiv bh; sal esi, 1; call qword ptr [rsi]; 
0x00000000004c235c: pop rsi; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xc23d7; mov ebp, 0xfb67d10d; ret; 
0x000000000044c980: pop rsp; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043a054: pop rsp; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004c9bf0: pop rsp; add byte ptr [rax], al; add byte ptr [rax + 0x3a], bl; add byte ptr [rax], al; pop rax; ret; 
0x00000000004cbe85: pop rsp; add byte ptr [rax], al; js 0xcbf01; clc; jmp qword ptr [rdi + 6]; 
0x000000000044d680: pop rsp; add eax, 0x83480000; ret 0xe910; 
0x000000000042be0b: pop rsp; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000490fbe: pop rsp; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000490f4c: pop rsp; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000459942: pop rsp; jmp rax; 
0x00000000004cdbf8: pop rsp; jp 0xcdbfb; add ah, ah; popfq; stc; call qword ptr [rdx]; 
0x0000000000472b80: pop rsp; mov bh, 4; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x33e8; 
0x0000000000428a45: pop rsp; mov eax, dword ptr [rip + 0x2b0384]; test eax, eax; je 0x28a60; mov dword ptr [rip + 0x2b0376], 0; ret; 
0x0000000000459927: pop rsp; mov esi, 2; jmp rax; 
0x00000000004c7364: pop rsp; or al, 0xf4; jmp qword ptr [rax + 9]; 
0x000000000042f29a: pop rsp; pop r13; pop r14; jmp rax; 
0x000000000043181d: pop rsp; pop r13; pop r14; jmp rcx; 
0x00000000004304c7: pop rsp; pop r13; pop r14; pop r15; jmp rax; 
0x00000000004113de: pop rsp; pop r13; pop r14; pop r15; pop rbp; ret; 
0x00000000004006a0: pop rsp; pop r13; pop r14; pop r15; ret; 
0x000000000041e54a: pop rsp; pop r13; pop r14; pop rbp; ret; 
0x000000000042d483: pop rsp; pop r13; pop r14; ret; 
0x00000000004065cd: pop rsp; pop r13; ret; 
0x00000000004011d0: pop rsp; ret; 
0x000000000045acc3: pop rsp; sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000041e4f4: popfq; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000483f6f: popfq; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper; ret; 
0x00000000004915f1: popfq; cld; jmp qword ptr [rsi - 0x70]; 
0x0000000000479f2f: popfq; idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000049bace: popfq; ret 0xf45; 
0x00000000004cdbfd: popfq; stc; call qword ptr [rdx]; 
0x0000000000444452: psllq mm1, qword ptr [r15]; jg 0x44467; ret; 
0x0000000000446f72: psllq mm1, qword ptr [r15]; jg 0x46f87; ret; 
0x0000000000444453: psllq mm1, qword ptr [rdi]; jg 0x44467; ret; 
0x0000000000446f73: psllq mm1, qword ptr [rdi]; jg 0x46f87; ret; 
0x0000000000453466: psllq mm1, qword ptr [rdi]; jg 0x53472; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000004534c7: psllq mm1, qword ptr [rdi]; jg 0x534d3; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004535c8: psllq mm1, qword ptr [rdi]; jg 0x535d4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000453af6: psllq mm1, qword ptr [rdi]; jg 0x53b02; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000453b77: psllq mm1, qword ptr [rdi]; jg 0x53b83; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000453c78: psllq mm1, qword ptr [rdi]; jg 0x53c84; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000004ab1c0: psubusb mm7, mm7; dec dword ptr [rdi]; fdivr st(7); jmp qword ptr [rbx + 0xf000001]; 
0x00000000004ab1c4: psubusb mm7, mm7; jmp qword ptr [rbx + 0xf000001]; 
0x00000000004aeea1: psubw mm7, mm7; rcl byte ptr [rax], 0xf9; call qword ptr [rax]; 
0x00000000004aeea1: psubw mm7, mm7; rcl byte ptr [rax], 0xf9; call qword ptr [rax]; adc bh, cl; jmp qword ptr [rax + 0x13]; 
0x00000000004ca304: push -0x27ffffbf; fdivrp st(5); call qword ptr [rsi]; 
0x00000000004a8848: push -0x36000000; add byte ptr [rax], al; add cl, ah; fdivr st(7); jmp rcx; 
0x0000000000426c53: push -0x3a171115; add r8d, dword ptr [rax]; nop dword ptr [rax + rax]; mov rax, -1; ret; 
0x00000000004c202a: push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x0000000000486b0c: push -0x45fffc7c; sbb al, byte ptr [rip + 0x6e80000]; sahf; clc; jmp qword ptr [rsi + 0xf]; 
0x00000000004895af: push -0x49; jmp qword ptr [rsi + 0xf]; 
0x000000000046f0da: push -0x77c0005; dec dword ptr [rdi]; test dword ptr [rsi - 0x16000007], esi; ret; 
0x000000000046d942: push -0x7c000003; ret; 
0x00000000004ae814: push -0x7f0007c2; clc; inc dword ptr [rax + 0x3f]; clc; call rax; 
0x0000000000453d84: push -0x9ffffff; ret 0x7501; 
0x00000000004ae915: push -8; inc dword ptr [rax + 0x6b]; clc; jmp qword ptr [rax + 0x6c]; 
0x00000000004ccb9d: push 0; add byte ptr [rax - 0x1d], ah; clc; call qword ptr [rdx]; 
0x00000000004ccc75: push 0; add byte ptr [rax], cl; in al, 0xf8; call qword ptr [rsi]; 
0x00000000004832a3: push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000004623ca: push 0; mov r9, qword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045dad0: push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x00000000004ccd04: push 0x1800006b; out 0xf8, al; call qword ptr [rdx]; 
0x0000000000458d2c: push 0x489066c3; lea edx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000420f8d: push 0x48; add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000488f25: push 0x48b4901; and al, 0x83; ret; 
0x00000000004678cc: push 0x4cffffff; mov edi, esi; call rdx; 
0x0000000000480d3b: push 0x60894c30; cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x00000000004ce304: push 0x68000081; fdivp st(1); call qword ptr [rax]; 
0x00000000004d0804: push 0x680000a6; idiv bl; jmp qword ptr [rcx]; 
0x00000000004c3da2: push 0x6e; ja 0xc3d29; ret 0x48f; 
0x0000000000480d05: push 0x74fff883; add eax, 0x5c415d5b; ret; 
0x00000000004cee04: push 0x800008c; adc edi, ebx; jmp qword ptr [rdi]; 
0x00000000004913ac: push 0xc334864; and eax, 0x28; jne 0x913ee; add rsp, 0x78; ret; 
0x000000000048329e: push 1; xor r8d, r8d; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000483224: push 1; xor r8d, r8d; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000432b76: push 2; add byte ptr [rdx], bh; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000044c327: push 6; add byte ptr [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret; 
0x00000000004aee8b: push qword ptr [rax + 0x1d]; stc; push qword ptr [rax - 0x7f0006f8]; or edi, ecx; call rax; 
0x00000000004af83f: push qword ptr [rax + 0x20fff972]; jb 0xaf840; call qword ptr [rax + 0xfff971]; jno 0xaf848; jmp qword ptr [rax + 0x53]; 
0x00000000004aed13: push qword ptr [rax + 0x23]; stc; call qword ptr [rax + 0x25]; 
0x0000000000420bd4: push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000041fbb9: push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x00000000004afa5f: push qword ptr [rax + 0x3a]; cli; call qword ptr [rax - 0x4f0005c6]; cmp bh, dl; call rax; 
0x00000000004afa7f: push qword ptr [rax + 0x3b]; cli; call qword ptr [rax - 0x4f0005c5]; cmp edi, edx; call rax; 
0x00000000004af0eb: push qword ptr [rax + 0x40fff958]; pop rax; stc; call rax; 
0x00000000004aeed3: push qword ptr [rax + 0x40fff95b]; pop rbx; stc; call rax; 
0x00000000004af5e3: push qword ptr [rax + 0x40fff97f]; jg 0xaf5e4; call rax; 
0x00000000004af347: push qword ptr [rax + 0x4b]; stc; jmp rax; 
0x00000000004af143: push qword ptr [rax + 0x4c]; stc; jmp rax; 
0x00000000004aec0f: push qword ptr [rax + 0x70fff8f8]; cli; clc; call qword ptr [rax - 4]; 
0x00000000004af64b: push qword ptr [rax + 0x71]; stc; jmp rsi; 
0x00000000004aee9f: push qword ptr [rax + 0xf]; stc; inc eax; adc cl, bh; call qword ptr [rax]; 
0x00000000004af55f: push qword ptr [rax + rax*4]; stc; inc esp; jg 0xaf560; call qword ptr [rdi + rdi*2 - 7]; jmp rsp; 
0x0000000000458f02: push qword ptr [rax + rbp*4 + 0x49]; mov esp, edi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x00000000004af9f3: push qword ptr [rax - 0x10]; stc; inc eax; int1; stc; call qword ptr [rax]; 
0x00000000004aecd3: push qword ptr [rax - 0x1d]; clc; inc eax; in al, 0xf8; call qword ptr [rax]; 
0x00000000004aea43: push qword ptr [rax - 0x2a]; clc; jmp qword ptr [rax - 0x29]; 
0x00000000004afa33: push qword ptr [rax - 0x3f0005c7]; cmp edx, edi; call rax; 
0x00000000004ae9d7: push qword ptr [rax - 0x54]; clc; jmp qword ptr [rax - 0x53]; 
0x00000000004ae9b3: push qword ptr [rax - 0x60]; clc; jmp rax; 
0x00000000004aebf3: push qword ptr [rax - 0x6f000706]; cld; clc; push qword ptr [rax - 2]; clc; call qword ptr [rax]; 
0x00000000004aee33: push qword ptr [rax - 0x7f0006df]; and edi, ecx; jmp qword ptr [rax + 0x25]; 
0x00000000004aee8f: push qword ptr [rax - 0x7f0006f8]; or edi, ecx; call rax; 
0x00000000004aee8f: push qword ptr [rax - 0x7f0006f8]; or edi, ecx; call rax; or al, 0xf9; jmp qword ptr [rax]; 
0x00000000004af5d3: push qword ptr [rax - 0x7f]; stc; inc dword ptr [rax]; cmp ecx, 0xf98090ff; jmp qword ptr [rax]; 
0x00000000004aecbf: push qword ptr [rax - 0xf]; clc; inc eax; clc; call qword ptr [rax]; 
0x00000000004aebfb: push qword ptr [rax - 2]; clc; call qword ptr [rax]; 
0x00000000004aebfb: push qword ptr [rax - 2]; clc; call qword ptr [rax]; stc; jmp qword ptr [rax]; 
0x00000000004be447: push qword ptr [rax - 4]; sti; call qword ptr [rax - 3]; 
0x00000000004be47b: push qword ptr [rax - 4]; sti; call qword ptr [rax]; 
0x00000000004be46f: push qword ptr [rax - 4]; sti; jmp qword ptr [rax]; 
0x00000000004be443: push qword ptr [rax - 4]; sti; push qword ptr [rax - 4]; sti; call qword ptr [rax - 3]; 
0x00000000004be477: push qword ptr [rax - 4]; sti; push qword ptr [rax - 4]; sti; call qword ptr [rax]; 
0x00000000004aec77: push qword ptr [rax - 5]; clc; call qword ptr [rax - 3]; 
0x00000000004aec13: push qword ptr [rax - 6]; clc; call qword ptr [rax - 4]; 
0x00000000004aeb8f: push qword ptr [rax - 7]; clc; push qword ptr [rax]; sti; clc; call qword ptr [rax]; 
0x00000000004aec2f: push qword ptr [rax - 8]; clc; push qword ptr [rax]; cli; clc; call qword ptr [rax]; 
0x00000000004aed8f: push qword ptr [rax]; and ecx, edi; push rax; and bh, cl; call rax; 
0x00000000004aec33: push qword ptr [rax]; cli; clc; call qword ptr [rax]; 
0x00000000004afacf: push qword ptr [rax]; cli; inc dword ptr [rax + 0x40]; cli; jmp qword ptr [rax + 0x40]; 
0x00000000004afa53: push qword ptr [rax]; cmp bh, dl; call qword ptr [rax + 0x3a]; 
0x00000000004afa53: push qword ptr [rax]; cmp bh, dl; call qword ptr [rax + 0x3a]; cli; jmp qword ptr [rax + 0x3a]; 
0x00000000004afa77: push qword ptr [rax]; cmp edi, edx; call qword ptr [rax + 0x3b]; 
0x00000000004afa13: push qword ptr [rax]; cmp edx, edi; inc dword ptr [rax + 0x39]; cli; call qword ptr [rax + 0x39]; 
0x00000000004afb9b: push qword ptr [rax]; ja 0xafb99; call qword ptr [rax + 0x77]; 
0x00000000004af3eb: push qword ptr [rax]; jg 0xaf3e8; inc eax; jle 0xaf3ec; call qword ptr [rax + 0x7e]; 
0x00000000004af603: push qword ptr [rax]; jl 0xaf600; inc eax; jnp 0xaf604; call qword ptr [rax + 0x7b]; 
0x000000000049a2cf: push qword ptr [rax]; jne 0x9a308; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000049d46d: push qword ptr [rax]; jne 0x9d498; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000049e2cd: push qword ptr [rax]; jne 0x9e2f8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x00000000004ae9e7: push qword ptr [rax]; mov al, 0xf8; jmp qword ptr [rax]; 
0x00000000004b0933: push qword ptr [rax]; mov ch, 0xfa; call qword ptr [rax]; 
0x00000000004af10b: push qword ptr [rax]; push rbp; stc; call rax; 
0x00000000004aee7b: push qword ptr [rax]; sbb cl, bh; inc dword ptr [rax - 0x2f0006e7]; sbb bh, cl; jmp qword ptr [rax]; 
0x00000000004aeb77: push qword ptr [rax]; std; clc; call qword ptr [rax]; 
0x00000000004be46b: push qword ptr [rax]; std; sti; push qword ptr [rax - 4]; sti; jmp qword ptr [rax]; 
0x00000000004aeb93: push qword ptr [rax]; sti; clc; call qword ptr [rax]; 
0x00000000004a24eb: push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x2d]; 
0x00000000004a25cb: push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x30]; 
0x00000000004a271f: push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x33]; 
0x00000000004a286f: push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x36]; 
0x00000000004a2a6f: push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x3c]; 
0x00000000004a2c83: push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x42]; 
0x00000000004a2d83: push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x45]; 
0x00000000004a2fef: push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x4b]; 
0x00000000004a38cb: push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x57]; 
0x00000000004a2493: push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi]; 
0x00000000004a264f: push qword ptr [rax]; test al, 0xf6; call rsi; 
0x00000000004a2af3: push qword ptr [rax]; test al, 0xf6; call rsi; ret 0xfff6; 
0x00000000004a30e7: push qword ptr [rax]; test al, 0xf6; inc dword ptr [rsi + 0x6efff6b2]; mov dl, 0xf6; call qword ptr [rsi - 0x4e]; 
0x00000000004a30a7: push qword ptr [rax]; test al, 0xf6; inc dword ptr [rsi - 0x4d]; idiv bh; mov bl, 0xf6; call qword ptr [rsi]; 
0x00000000004a2ae3: push qword ptr [rax]; test al, 0xf6; inc dword ptr [rsi]; ret; 
0x00000000004a2537: push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi - 0x2e]; 
0x00000000004a261b: push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi - 0x31]; 
0x00000000004a278f: push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi - 0x34]; 
0x00000000004a28db: push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi - 0x37]; 
0x00000000004a29f3: push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi - 0x3a]; 
0x00000000004a2bd3: push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi - 0x40]; 
0x00000000004a2cc7: push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi - 0x43]; 
0x00000000004a2f0f: push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi - 0x49]; 
0x00000000004a33a3: push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi - 0x52]; 
0x00000000004a3657: push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi - 0x55]; 
0x00000000004a24f7: push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi]; 
0x00000000004a24b3: push qword ptr [rax]; test al, 0xf6; jmp rsi; 
0x00000000004a2ad7: push qword ptr [rax]; test al, 0xf6; lcall [rsi]; ret; 
0x00000000004a2b37: push qword ptr [rax]; test al, 0xf6; ljmp [rsi]; ret 0xfff6; 
0x00000000004a25c7: push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x30]; 
0x00000000004a271b: push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x33]; 
0x00000000004a286b: push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x36]; 
0x00000000004a2a6b: push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x3c]; 
0x00000000004a2feb: push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x4b]; 
0x00000000004a38c7: push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x57]; 
0x00000000004a248f: push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi]; 
0x00000000004a2bfb: push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call rsi; 
0x00000000004a2adf: push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; inc dword ptr [rsi]; ret; 
0x00000000004a278b: push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi - 0x34]; 
0x00000000004a339f: push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi - 0x52]; 
0x00000000004a25df: push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi]; 
0x00000000004a24af: push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; jmp rsi; 
0x00000000004a2ad3: push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; lcall [rsi]; ret; 
0x00000000004a2ac7: push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; push qword ptr [rsi]; ret; 
0x00000000004a2acb: push qword ptr [rax]; test al, 0xf6; push qword ptr [rsi]; ret; 
0x00000000004a2a83: push qword ptr [rax]; test al, 0xf6; push rsi; ret; 
0x00000000004af91b: push qword ptr [rax]; xchg eax, ebp; stc; inc dword ptr [rax - 0x69]; stc; call qword ptr [rax - 0x67]; 
0x0000000000455708: push qword ptr [rbp + 0x1a]; xor eax, eax; ret; 
0x00000000004d0737: push qword ptr [rbp + 4]; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x000000000043b119: push qword ptr [rbp + 4]; vzeroupper; ret; 
0x0000000000480d08: push qword ptr [rbp + rax + 0x5b]; pop rbp; pop r12; ret; 
0x000000000042651d: push qword ptr [rbp + rax - 0xa]; ret 0x7401; 
0x0000000000480d2e: push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x00000000004012a8: push qword ptr [rbp + rcx + 0x48]; add esp, 8; mov eax, edi; pop rbx; pop rbp; ret; 
0x0000000000482ae3: push qword ptr [rbp + rcx + 0x48]; sar edx, cl; test rdx, rdx; je 0x82b10; bsf rax, rdx; ret; 
0x00000000004a00e9: push qword ptr [rbp + rdx + 0x48]; mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0xa00fc; call rax; 
0x000000000040371d: push qword ptr [rbp - 0x18]; xor ebx, ebx; mov rax, rbx; pop rbx; ret; 
0x000000000040695e: push qword ptr [rbp - 0x19]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000426d50: push qword ptr [rbp - 0x44]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045870c: push qword ptr [rbx + 1]; ret; 
0x00000000004d0703: push qword ptr [rbx + 4]; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x0000000000426cb4: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000480f85: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004a9353: push qword ptr [rbx]; fdivr st(7); call qword ptr [rsi]; 
0x00000000004a934f: push qword ptr [rbx]; fdivr st(7); push qword ptr [rbx]; fdivr st(7); call qword ptr [rsi]; 
0x00000000004aea87: push qword ptr [rcx - 0x22]; clc; call qword ptr [rcx]; 
0x000000000046e2c4: push qword ptr [rcx]; fcmovnb st(0), st(6); test esp, eax; idiv bh; jmp qword ptr [rax]; 
0x000000000048960f: push qword ptr [rcx]; fucomi st(3); ret 0x1f0f; 
0x000000000042d0d6: push qword ptr [rcx]; mul byte ptr [rdi + rax*8]; or al, 0; add byte ptr [rax], al; mov rax, rsi; ret; 
0x0000000000424aff: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000464283: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000045eb7d: push qword ptr [rcx]; ror byte ptr [rcx - 0x7d], cl; cmp al, 0x24; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd5e9; 
0x00000000004581db: push qword ptr [rdi + 0x22]; hlt; mov edi, edx; mov eax, r8d; syscall; 
0x00000000004847c4: push qword ptr [rdi + rax*2 - 0x77]; ret 0xe283; 
0x00000000004aefbf: push qword ptr [rdx + 0x42fff956]; push rsi; stc; call rdx; 
0x00000000004af4b7: push qword ptr [rdx + 0x42fff97d]; jge 0xaf4b8; call rdx; 
0x00000000004a978b: push qword ptr [rdx + 0x65ffffd8]; add byte ptr [rax], al; add byte ptr [rbp], ah; add byte ptr [rax], al; ret; 
0x00000000004af6bb: push qword ptr [rdx + 0x73]; stc; push rdx; jb 0xaf6bc; jmp qword ptr [rdx + 0x72]; 
0x00000000004af497: push qword ptr [rdx]; cmp ecx, 0xf980c2ff; call qword ptr [rdx - 0x80]; 
0x00000000004af497: push qword ptr [rdx]; cmp ecx, 0xf980c2ff; call qword ptr [rdx - 0x80]; stc; jmp rdx; 
0x00000000004b010b: push qword ptr [rdx]; test edx, edi; jmp rcx; 
0x00000000004b0143: push qword ptr [rdx]; test edx, edi; lcall [rbp - 0x7a]; cli; jmp rcx; 
0x00000000004a53a3: push qword ptr [rip + 0x35ffffd8]; fdivr st(7); jmp qword ptr [rdi]; 
0x00000000004aef1b: push qword ptr [rsi + 0x46fff95a]; pop rdx; stc; call rsi; 
0x00000000004af413: push qword ptr [rsi + 0x46fff981]; cmp ecx, 0xf980d6ff; jmp qword ptr [rsi - 0x80]; 
0x000000000049a2e2: push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x9a308; xor eax, eax; ret; 
0x000000000049d482: push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x9d49e; xor eax, eax; ret; 
0x000000000049e2e2: push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x9e2fe; xor eax, eax; ret; 
0x000000000049ed52: push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x9ed78; xor eax, eax; ret; 
0x0000000000401357: push qword ptr [rsi + rcx + 0x5b]; mov eax, edi; pop rbp; pop r12; ret; 
0x00000000004012ff: push qword ptr [rsi + rcx - 0x77]; clc; pop rbx; ret; 
0x00000000004b01e7: push qword ptr [rsi - 0x3f00057b]; test edx, edi; jmp rcx; 
0x00000000004af433: push qword ptr [rsi]; jle 0xaf430; inc esi; jge 0xaf434; call qword ptr [rsi + 0x7d]; 
0x00000000004a2acf: push qword ptr [rsi]; ret; 
0x0000000000401a19: push qword ptr [rsp + rcx - 0x77]; clc; add rsp, 0x18; ret; 
0x00000000004af57f: push qword ptr [rsp + rdi*2 + 0x7c44fff9]; stc; call rsp; 
0x0000000000493d7f: push r11; and al, 0; add rsp, 8; ret; 
0x0000000000493d93: push r11; and al, 0; mov qword ptr [rip + 0x24532a], rax; ret; 
0x0000000000460cbc: push r12; mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000004846eb: push r12; push rbp; push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x0000000000461e15: push r13; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000465159: push r13; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004268ee: push r8; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000425952: push r8; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004197a4: push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret 0x18; 
0x0000000000416315: push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret; 
0x0000000000427701: push rax; adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000045a2f9: push rax; adc byte ptr [rcx - 0x75], cl; push rax; or byte ptr [rbx + 0x94801e2], al; ret 0x8949; 
0x000000000042b85d: push rax; adc dh, dh; ret 0xf0f; 
0x00000000004c8448: push rax; add byte ptr [rax], al; add byte ptr [rax + 0x22], dh; leave; hlt; jmp qword ptr [rax]; 
0x0000000000480ec4: push rax; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x00000000004268ef: push rax; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000425953: push rax; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004c8c3c: push rax; add byte ptr [rax], al; add byte ptr [rdx + rbp + 0x66cc0000], ah; cmc; call qword ptr [rdi]; 
0x00000000004aec00: push rax; add cl, bh; jmp qword ptr [rax]; 
0x00000000004aeb7f: push rax; add cl, bh; jmp rax; 
0x000000000046d89f: push rax; add dword ptr [rax - 0x77], ecx; push rsi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000004ce2ec: push rax; add dword ptr [rax], 0xf9de6000; call qword ptr [rbx]; 
0x000000000045b501: push rax; add eax, 0x15b800; add byte ptr [rax], al; syscall; 
0x00000000004aed93: push rax; and bh, cl; call rax; 
0x000000000040fce0: push rax; and byte ptr [rax + 1], cl; ret 0xb70f; 
0x00000000004aed18: push rax; and eax, 0x2730fff9; stc; call qword ptr [rax]; 
0x000000000047757a: push rax; call 0xffffffff8955757f; ret 0x894c; 
0x000000000045db58: push rax; call rbx; 
0x00000000004af924: push rax; cdq; stc; jmp qword ptr [rax - 0x65]; 
0x00000000004ae823: push rax; clc; jmp qword ptr [rax]; 
0x00000000004aebb7: push rax; cld; clc; call rax; 
0x00000000004c87b9: push rax; cmc; jmp qword ptr [rax]; 
0x00000000004afa6f: push rax; cmp bh, dl; call qword ptr [rax]; 
0x00000000004afa58: push rax; cmp bh, dl; jmp qword ptr [rax + 0x3a]; 
0x000000000047f794: push rax; cmp byte ptr [rax + 1], cl; ret; 
0x00000000004afa43: push rax; cmp edx, edi; inc dword ptr [rax]; cmp bh, dl; call qword ptr [rax]; 
0x00000000004afa1c: push rax; cmp edx, edi; jmp qword ptr [rax + 0x39]; 
0x00000000004cf9ec: push rax; cwde; add byte ptr [rax], al; sti; jmp qword ptr [rcx]; 
0x00000000004cccec: push rax; imul eax, dword ptr [rax], 0; and dh, ah; clc; call qword ptr [rax]; 
0x000000000045947c: push rax; jb 0x5947c; dec dword ptr [rax - 0x77]; ret; 
0x000000000049a2ca: push rax; je 0x9a2eb; cmp dil, 0x30; jne 0x9a308; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x00000000004af3f4: push rax; jle 0xaf3f0; jmp rax; 
0x00000000004cdfec: push rax; jle 0xcdfef; add byte ptr [rax], al; ret; 
0x00000000004af7d4: push rax; js 0xaf7d0; call rax; 
0x0000000000481359: push rax; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000048e7bc: push rax; lodsb al, byte ptr [rsi]; and al, 0; ret; 
0x00000000004d15ec: push rax; mov ah, 0; add byte ptr [rax + 0x5b], dh; cld; jmp qword ptr [rbp]; 
0x00000000004ae9f7: push rax; mov bl, 0xf8; jmp rax; 
0x000000000045fe01: push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x00000000004d1aec: push rax; mov ecx, 0x88300000; cld; jmp qword ptr [rcx + 9]; 
0x0000000000499386: push rax; or byte ptr [rax + 3], cl; push rbp; add bl, ch; add eax, 0x1489066; ret 0xb70f; 
0x0000000000428482: push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x0000000000485c7e: push rax; or byte ptr [rax - 0x75], cl; xor al, ch; and byte ptr [rax + 0x3948fff7], ch; ret; 
0x000000000047fe43: push rax; or byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; jo 0x7fe5c; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000004297aa: push rax; or byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x00000000004276f1: push rax; or byte ptr [rbp + 0xb], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000045a2fd: push rax; or byte ptr [rbx + 0x94801e2], al; ret 0x8949; 
0x000000000042c255: push rax; or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x000000000045c30b: push rax; or dh, dh; ret 0x8902; 
0x000000000042cfa2: push rax; or dh, dh; ret 0xf02; 
0x00000000004cf0ec: push rax; pop qword ptr [rax]; add byte ptr [rax + 0x20], dh; sti; jmp qword ptr [rdx]; 
0x0000000000403b5b: push rax; pop rbx; pop rbp; pop r12; ret; 
0x00000000004979c5: push rax; pop rbx; ret; 
0x00000000004af0d4: push rax; pop rbx; stc; jmp rax; 
0x000000000048aacc: push rax; pop rsi; clc; call qword ptr [rbp + 0x53]; 
0x0000000000480d04: push rax; push 0x74fff883; add eax, 0x5c415d5b; ret; 
0x0000000000460cbb: push rax; push r12; mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000461e14: push rax; push r13; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000465158: push rax; push r13; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004aeefc: push rax; push rdi; stc; jmp rax; 
0x000000000040c903: push rax; push rsp; or dword ptr [rax], eax; ret; 
0x000000000045fe03: push rax; push rsp; ret; 
0x00000000004276f6: push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000480e49: push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x0000000000480e01: push rax; sbb byte ptr [rsi + 0x1f], dh; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004af321: push rax; stc; call qword ptr [rax]; 
0x00000000004af1a1: push rax; stc; call qword ptr [rdx + 0x50]; 
0x00000000004af1a1: push rax; stc; call qword ptr [rdx + 0x50]; stc; call rdx; 
0x00000000004af1a5: push rax; stc; call rdx; 
0x00000000004af1a5: push rax; stc; call rdx; stc; call qword ptr [rdx + 0x4f]; 
0x00000000004aebb0: push rax; stc; clc; call qword ptr [rax]; 
0x00000000004aed4b: push rax; stc; inc dword ptr [rax + 0x40fff921]; and edi, ecx; jmp qword ptr [rax]; 
0x00000000004af2e1: push rax; stc; jmp qword ptr [rax]; 
0x00000000004aec3b: push rax; std; clc; call rax; 
0x00000000004aec7c: push rax; std; clc; inc dword ptr [rax - 1]; clc; call qword ptr [rax]; 
0x0000000000480e45: push rax; sub byte ptr [rax - 0x77], cl; push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x00000000004aedeb: push rax; sub eax, 0x2080fff9; stc; inc dword ptr [rax + 0x22]; stc; jmp qword ptr [rax]; 
0x00000000004d1a70: push rax; test ah, bh; call qword ptr [rdx]; 
0x00000000004cf5ec: push rax; xchg eax, esp; add byte ptr [rax], al; xor byte ptr [rcx], bh; sti; jmp qword ptr [rbx]; 
0x00000000004ae993: push rax; xchg eax, esp; clc; jmp qword ptr [rax - 0x6a]; 
0x000000000049938a: push rbp; add bl, ch; add eax, 0x1489066; ret 0xb70f; 
0x000000000049be32: push rbp; add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x00000000004a9534: push rbp; add byte ptr [rax], al; add byte ptr [rbp], dl; add byte ptr [rax], al; fdivr st(7); call qword ptr [rbp]; 
0x0000000000408c3d: push rbp; add byte ptr [rcx - 0x75], cl; sbb byte ptr [rbx + r9*4 + 0x2c], r9b; ret 0x8548; 
0x000000000049c2a7: push rbp; add byte ptr [rsi + 0xa], bh; mov edi, 1; call rax; 
0x000000000048ef78: push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000041f9dd: push rbp; cmp byte ptr [rax + 0x39], cl; ret; 
0x0000000000461e16: push rbp; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000046515a: push rbp; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000490a1c: push rbp; or byte ptr [rcx + 0x33], cl; add byte ptr [r8 + 9], r9b; ret 0x840f; 
0x000000000040c834: push rbp; or dword ptr [rax], eax; ret; 
0x00000000004846ed: push rbp; push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x00000000004c6b1e: push rbp; ret; 
0x0000000000487ea0: push rbp; ror byte ptr [rcx - 0x73], 0x7d; sub byte ptr [rcx], dh; imul al; fild dword ptr [rbp - 0x7cb70009]; ret; 
0x00000000004aef8d: push rbp; stc; call qword ptr [rdx]; 
0x00000000004af10d: push rbp; stc; call rax; 
0x00000000004aefc9: push rbp; stc; jmp qword ptr [rdx + 0x55]; 
0x00000000004aef0d: push rbp; stc; jmp qword ptr [rsi]; 
0x00000000004af0cd: push rbp; stc; jmp rax; 
0x00000000004aef89: push rbp; stc; ljmp [rbp + rdx*2 - 7]; call qword ptr [rdx]; 
0x00000000004aeed1: push rbp; stc; push qword ptr [rax + 0x40fff95b]; pop rbx; stc; call rax; 
0x00000000004af109: push rbp; stc; push qword ptr [rax]; push rbp; stc; call rax; 
0x00000000004338fb: push rbp; sub al, byte ptr [rax]; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x0000000000426d4c: push rbp; xor byte ptr [rbx - 0x438a0008], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041fd16: push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x0000000000409685: push rbx; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rbx + 0x48], cl; mov edi, eax; call rdx; 
0x000000000040fe2f: push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000048edef: push rbx; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004aa810: push rbx; add byte ptr [rax], al; add byte ptr [rbx], dl; add byte ptr [rax], al; fdivr st(7); call qword ptr [rbx]; 
0x00000000004aa36c: push rbx; add byte ptr [rax], al; add byte ptr [rdi], ah; add byte ptr [rax], al; add byte ptr [rax + rbx*8 - 1], cl; jmp qword ptr [rdi]; 
0x0000000000493d80: push rbx; and al, 0; add rsp, 8; ret; 
0x0000000000493d94: push rbx; and al, 0; mov qword ptr [rip + 0x24532a], rax; ret; 
0x0000000000493d79: push rbx; and al, 0; mov qword ptr [rip + 0x245345], rax; add rsp, 8; ret; 
0x0000000000493d9b: push rbx; and al, 0; ret; 
0x0000000000422868: push rbx; and byte ptr [rax - 0x77], cl; push rbx; xor byte ptr [rax - 0x77], cl; call 0xfffffffffffea05e; jmp qword ptr [rsi + 0x2e]; 
0x00000000004ae8d5: push rbx; clc; call rax; 
0x00000000004ae8d5: push rbx; clc; call rax; push rsp; clc; call qword ptr [rax]; 
0x0000000000422188: push rbx; cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x00000000004568f5: push rbx; jb 0x568fd; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000480d42: push rbx; je 0x80da0; pop rbp; pop r12; ret; 
0x0000000000480dce: push rbx; je 0x80e2c; pop rbp; pop r12; ret; 
0x0000000000425ed9: push rbx; mov ebp, 0xc4ebffff; nop; mov eax, 0xffffffff; ret; 
0x0000000000469cd0: push rbx; mov rax, qword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x69cdf; call rax; 
0x0000000000400dc2: push rbx; mov rbx, rax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004846ee: push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x00000000004328c9: push rbx; movabs al, byte ptr [0x16b8001f0ffffe]; add byte ptr [rax], al; ret; 
0x0000000000422184: push rbx; or byte ptr [rax + 0x2b], cl; push rbx; cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x000000000045cc01: push rbx; ret 0x27; 
0x00000000004076cf: push rbx; ret; 
0x000000000042268c: push rbx; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x0000000000480cf3: push rbx; test byte ptr [rdi], 2; mov rbx, rdi; jne 0x80d68; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x000000000047e66a: push rbx; xor al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x000000000042286c: push rbx; xor byte ptr [rax - 0x77], cl; call 0xfffffffffffea05e; jmp qword ptr [rsi + 0x2e]; 
0x0000000000433819: push rbx; xor byte ptr [rdx], al; add byte ptr [rax - 0x73], cl; add eax, 0x22ffc; cmovne rax, rdx; ret; 
0x000000000042ddb2: push rcx; adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x000000000042a0db: push rcx; adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x000000000042a2f7: push rcx; adc byte ptr [rax + 0x39], cl; ret 0xb277; 
0x0000000000403905: push rcx; add bh, byte ptr [rcx]; ret 0xd77; 
0x000000000045a9ab: push rcx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000042c24b: push rcx; add eax, 0x8b4d0000; or byte ptr [rbp - 0x75], cl; push rax; or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x00000000004c2485: push rcx; call qword ptr [rsi]; 
0x000000000046ddb6: push rcx; cmp byte ptr [rax + 0x39], cl; ret; 
0x000000000044789f: push rcx; jl 0x478ea; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004478a6: push rcx; jl 0x478f1; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004478ad: push rcx; jl 0x478f8; adc dword ptr [rcx - 1], edi; ret; 
0x0000000000447a06: push rcx; jl 0x47a51; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000447a0d: push rcx; jl 0x47a58; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000447a14: push rcx; jl 0x47a5f; adc dword ptr [rcx + 7], edi; ret; 
0x00000000004b0edc: push rcx; mov ebx, 0xbaf8fffa; cli; jmp rbx; 
0x00000000004885a1: push rcx; or byte ptr [rcx + 0x33], cl; add dword ptr [rax + 9], ecx; ret 0x1475; 
0x0000000000488573: push rcx; or byte ptr [rcx + 0x33], cl; add dword ptr [rax + 9], ecx; ret 0xe75; 
0x0000000000428bed: push rcx; sbb byte ptr [rcx + 1], cl; ret 0x8d48; 
0x00000000004af319: push rcx; stc; call qword ptr [rax]; 
0x00000000004af199: push rcx; stc; call qword ptr [rdx + 0x51]; 
0x00000000004af199: push rcx; stc; call qword ptr [rdx + 0x51]; stc; call rdx; 
0x00000000004af19d: push rcx; stc; call rdx; 
0x00000000004af19d: push rcx; stc; call rdx; push rax; stc; call qword ptr [rdx + 0x50]; 
0x00000000004af2d9: push rcx; stc; jmp qword ptr [rax]; 
0x0000000000404676: push rdi; adc byte ptr [rcx + 0x63], cl; adc al, 0x96; add rdx, r14; jmp rdx; 
0x00000000004539aa: push rdi; add al, 0x48; lea eax, [rdi + 5]; ret; 
0x00000000004445b9: push rdi; add al, 0x48; mov dword ptr [rdi], ecx; ret; 
0x00000000004cb98d: push rdi; add byte ptr [rax], al; jl 0xcb989; call qword ptr [rsi]; 
0x0000000000455e52: push rdi; add dword ptr [rdx - 0xf], esp; jl 0x55ea0; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000453a5c: push rdi; add eax, 0xc478d48; ret; 
0x0000000000400c9b: push rdi; add eax, dword ptr [rbx - 0x1789fe06]; mov eax, 0xfffffff2; ret; 
0x0000000000482e18: push rdi; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa08: push rdi; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000046d47e: push rdi; and byte ptr [rax - 0x75], cl; mov ebp, 0xfffff758; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000046d48f: push rdi; and byte ptr [rcx + 0x2b], cl; push rdi; sbb byte ptr [rax + 0x39], cl; ret 0x850f; 
0x000000000047c045: push rdi; and byte ptr [rip + 0x48b4800], 0xf8; jmp rax; 
0x000000000043e372: push rdi; call 0xfffffffff0636cc4; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043e3b0: push rdi; call 0xfffffffff0636d02; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e3e8: push rdi; call 0xfffffffff0636d3a; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043e426: push rdi; call 0xfffffffff0636d78; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e45e: push rdi; call 0xfffffffff0636db0; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e486: push rdi; call 0xfffffffff0636dd8; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e4ae: push rdi; call 0xfffffffff0636e00; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000440d42: push rdi; call 0xfffffffff0639694; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000440d80: push rdi; call 0xfffffffff06396d2; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000440db8: push rdi; call 0xfffffffff063970a; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000440df6: push rdi; call 0xfffffffff0639748; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000440e2e: push rdi; call 0xfffffffff0639780; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000440e56: push rdi; call 0xfffffffff06397a8; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000440e7e: push rdi; call 0xfffffffff06397d0; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e3b8: push rdi; clc; ret; 
0x000000000043e530: push rdi; cld; ret; 
0x000000000043f057: push rdi; cli; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000443e99: push rdi; cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000041f505: push rdi; cmp byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret 0xf41; 
0x000000000043c40e: push rdi; fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c20e: push rdi; fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000458716: push rdi; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000004587a6: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000458a56: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x0000000000443e19: push rdi; hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000428415: push rdi; in al, 0x2a; add bl, dh; ret; 
0x000000000043eac5: push rdi; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e8d5: push rdi; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000443c6a: push rdi; int1; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043f096: push rdi; loope 0x3f0e5; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f0de: push rdi; loope 0x3f12d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f11c: push rdi; loope 0x3f16b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f154: push rdi; loope 0x3f1a3; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f192: push rdi; loope 0x3f1e1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f1ca: push rdi; loope 0x3f219; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f1f2: push rdi; loope 0x3f241; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000441a66: push rdi; loope 0x41ab5; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000441aae: push rdi; loope 0x41afd; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000441aec: push rdi; loope 0x41b3b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000441b24: push rdi; loope 0x41b73; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000441b62: push rdi; loope 0x41bb1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000441b9a: push rdi; loope 0x41be9; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000441bc2: push rdi; loope 0x41c11; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043c4d8: push rdi; mov eax, 0xf66b8b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c358: push rdi; mov ebx, 0xf66bbb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c458: push rdi; mov ecx, 0xf66b9b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c3d8: push rdi; mov edx, 0xf66bab2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000425830: push rdi; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000425864: push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000443cfa: push rdi; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000420bd0: push rdi; mov rdi, rbp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000041fbb5: push rdi; mov rdi, rbp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000049389a: push rdi; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x00000000004976da: push rdi; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x00000000004938a1: push rdi; or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x0000000000429da6: push rdi; or dh, dh; ret 0xf02; 
0x000000000040cc97: push rdi; or dword ptr [rax], eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000453c40: push rdi; or eax, 0x1c478d48; ret; 
0x000000000043e6f5: push rdi; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e525: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e621: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043e56d: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043c84e: push rdi; ret 0xff3; 
0x000000000043c7ae: push rdi; ret; 
0x000000000046d493: push rdi; sbb byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000428510: push rdi; sbb byte ptr [rax + 0x39], cl; ret; 
0x0000000000425828: push rdi; sbb byte ptr [rax - 0x75], cl; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000004aeef9: push rdi; stc; call qword ptr [rax + 0x57]; 
0x00000000004aeef9: push rdi; stc; call qword ptr [rax + 0x57]; stc; jmp rax; 
0x00000000004aef3d: push rdi; stc; inc esi; push rsi; stc; call qword ptr [rsi + 0x56]; 
0x00000000004af0f5: push rdi; stc; jmp qword ptr [rax + 0x57]; 
0x00000000004aefb9: push rdi; stc; jmp qword ptr [rdx]; 
0x00000000004aeefd: push rdi; stc; jmp rax; 
0x000000000043f257: push rdi; stc; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004aefbd: push rdi; stc; push qword ptr [rdx + 0x42fff956]; push rsi; stc; call rdx; 
0x00000000004c5cf1: push rdi; std; jmp rsp; 
0x000000000043ea7a: push rdi; std; mov word ptr [rdi - 2], cx; ret; 
0x000000000043ee57: push rdi; sti; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043365b: push rdi; sub al, byte ptr [rax]; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x00000000004205a8: push rdi; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000043dbf5: push rdi; sysret; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048264b: push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000043a568: push rdi; xor eax, eax; ret; 
0x00000000004c8879: push rdx; cmc; call qword ptr [rax]; 
0x00000000004c888d: push rdx; cmc; call qword ptr [rdx]; 
0x00000000004c88a1: push rdx; cmc; jmp qword ptr [rax]; 
0x00000000004339aa: push rdx; insb byte ptr [rdi], dx; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000004af6bf: push rdx; jb 0xaf6bc; jmp qword ptr [rdx + 0x72]; 
0x000000000045b061: push rdx; mov dword ptr [rdi], 0; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000440ce9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e019]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440b99: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e169]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440a49: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e2b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004408f9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e409]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440659: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e6a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004403b9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440269: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6ea99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440119: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6ebe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ffc9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6ed39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fe79: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6ee89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fd29: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6efd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fbd9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6f129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fa89: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6f279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e319: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x70829]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e1c9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x70979]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043df29: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x70c19]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ddd9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x70d69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dc89: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x70eb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043db39: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71009]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d899: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x712a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d5f9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71549]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d4a9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71699]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d359: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x717e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d209: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71939]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d0b9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x71a89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004aefa8: push rdx; pop rcx; stc; jmp rdx; 
0x00000000004af1a4: push rdx; push rax; stc; call rdx; 
0x00000000004af1a4: push rdx; push rax; stc; call rdx; stc; call qword ptr [rdx + 0x4f]; 
0x00000000004338fa: push rdx; push rbp; sub al, byte ptr [rax]; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x00000000004af19c: push rdx; push rcx; stc; call rdx; 
0x000000000045cb32: push rdx; ret; 
0x000000000045fdfd: push rdx; sbb ecx, dword ptr [rcx + 0x50895048]; push rsp; ret; 
0x00000000004af115: push rdx; stc; call qword ptr [rax]; 
0x00000000004af1ac: push rdx; stc; call rdx; 
0x00000000004af1b4: push rdx; stc; call rdx; stc; call qword ptr [rdx + 0x4d]; 
0x00000000004af1ac: push rdx; stc; call rdx; stc; call qword ptr [rdx + 0x4e]; 
0x00000000004af195: push rdx; stc; jmp rdx; 
0x0000000000409748: push rdx; sub byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + 0x48], cl; mov esi, ebx; mov rdi, r12; call rdx; 
0x0000000000453c97: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004535e7: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000453546: push rsi; adc byte ptr [rbx + 0xff3174e], cl; jg 0x53556; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000453566: push rsi; adc byte ptr [rbx + 0xff3184e], cl; jg 0x53576; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000043b494: push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000455f99: push rsi; add ah, byte ptr [rdx - 0xf]; jl 0x55fe7; adc dword ptr [rsi + 3], edx; ret; 
0x00000000004445b2: push rsi; add al, 0x48; mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000042a056: push rsi; add al, byte ptr [rax]; add dh, dh; ret 0xf08; 
0x00000000004aa6ec: push rsi; add byte ptr [rax], al; add byte ptr [rdi - 0x60000028], bl; fdivr st(7); call qword ptr [rsi]; 
0x00000000004aa6d8: push rsi; add byte ptr [rax], al; add byte ptr [rsi - 0x61000000], al; fdivr st(7); call qword ptr [rsi]; 
0x0000000000444851: push rsi; add cl, byte ptr [rbx + 0x257890e]; mov dword ptr [rdi], ecx; ret; 
0x00000000004448c1: push rsi; add dword ptr [rbx + 0x157890e], ecx; mov dword ptr [rdi], ecx; ret; 
0x0000000000455f92: push rsi; add dword ptr [rdx - 0xf], esp; jl 0x55fe0; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000444542: push rsi; add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x0000000000453a55: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000004533f5: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x000000000045602f: push rsi; add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000004447e1: push rsi; add ecx, dword ptr [rbx + 0x357890e]; mov dword ptr [rdi], ecx; ret; 
0x00000000004539c3: push rsi; add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x0000000000453393: push rsi; add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x0000000000478998: push rsi; and byte ptr [rax - 0x75], cl; mov ebp, 0xfffff730; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000043b4a9: push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004ae8dd: push rsi; clc; call qword ptr [rax + 0x57]; 
0x000000000043e4c6: push rsi; clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043ee1a: push rsi; clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f01a: push rsi; clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f21a: push rsi; clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e4aa: push rsi; clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043ee36: push rsi; clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f036: push rsi; clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043f236: push rsi; clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043e4e2: push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043ec51: push rsi; cld; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e689: push rsi; cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e869: push rsi; cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ea49: push rsi; cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ec29: push rsi; cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e885: push rsi; cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ea65: push rsi; cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043ec45: push rsi; cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043e6a5: push rsi; cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000455e2a: push rsi; cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043f051: push rsi; cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004c3da0: push rsi; cli; push 0x6e; ja 0xc3d29; ret 0x48f; 
0x00000000004c8905: push rsi; cmc; jmp qword ptr [rcx + 2]; 
0x0000000000443e92: push rsi; cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000455246: push rsi; cmc; sub eax, edx; ret; 
0x000000000043c03e: push rsi; fbstp tbyte ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c10e: push rsi; fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000443e12: push rsi; hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000455236: push rsi; hlt; sub eax, edx; ret; 
0x0000000000443c62: push rsi; int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000455206: push rsi; int1; sub eax, edx; ret; 
0x00000000004af43c: push rsi; jge 0xaf438; jmp rsi; 
0x00000000004c3a7d: push rsi; jnp 0xc3a96; mov dl, 0x9f; sub edi, esi; int 0x6b; ret; 
0x000000000043c008: push rsi; mov edi, 0xf66bfb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c0d8: push rsi; mov esi, 0xf66beb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000443d82: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000443cf2: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000453c37: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000453587: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004c3200: push rsi; pop rdx; je 0xc31c8; ret 0xacfc; 
0x00000000004535c7: push rsi; psllq mm1, qword ptr [rdi]; jg 0x535d4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000453c77: push rsi; psllq mm1, qword ptr [rdi]; jg 0x53c84; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000004aef44: push rsi; push rsi; stc; jmp rsi; 
0x00000000004a2a87: push rsi; ret; 
0x00000000004789b1: push rsi; sbb byte ptr [rax - 0x3f], cl; cli; add cl, byte ptr [rax + 0x39]; ret 0x850f; 
0x00000000004af101: push rsi; stc; call qword ptr [rax]; 
0x00000000004aef41: push rsi; stc; call qword ptr [rsi + 0x56]; 
0x00000000004aef41: push rsi; stc; call qword ptr [rsi + 0x56]; stc; jmp rsi; 
0x00000000004aefc5: push rsi; stc; call rdx; 
0x00000000004aefc5: push rsi; stc; call rdx; push rbp; stc; jmp qword ptr [rdx + 0x55]; 
0x00000000004aefc1: push rsi; stc; inc dword ptr [rdx + 0x56]; stc; call rdx; 
0x00000000004aef45: push rsi; stc; jmp rsi; 
0x00000000004af0c5: push rsi; stc; ljmp [rdx + 0x3afff955]; push rbp; stc; jmp rax; 
0x000000000043f251: push rsi; stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043ea72: push rsi; std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000455e31: push rsi; std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043ee51: push rsi; sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004337bb: push rsi; sub al, byte ptr [rax]; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x000000000046d8a3: push rsi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000455216: push rsi; sub eax, edx; ret; 
0x0000000000443f92: push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x000000000043b4be: push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000485c78: push rsp; add ah, byte ptr [rip + 0x508b4800]; or byte ptr [rax - 0x75], cl; xor al, ch; and byte ptr [rax + 0x3948fff7], ch; ret; 
0x0000000000484b71: push rsp; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x000000000043340b: push rsp; add eax, 0xb60f4100; add eax, 0xe0c148ff; add ecx, dword ptr [rax + 0x29]; ret 0xb60f; 
0x00000000004919fa: push rsp; and al, 0x10; call rdx; 
0x000000000042bec8: push rsp; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000041cc12: push rsp; and al, 0x10; mov rsi, qword ptr [r15]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000483569: push rsp; and al, 0x10; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000041cca2: push rsp; and al, 0x10; mov rsi, r15; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000458c2f: push rsp; and al, 0x18; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000484a06: push rsp; and al, 0x1c; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x000000000042be01: push rsp; and al, 0x28; mov qword ptr [rsp + 0x20], rsi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000490fc3: push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000490f51: push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000463400: push rsp; and al, 0x48; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000458d32: push rsp; and al, 8; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000422fa4: push rsp; and al, 8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004ae8d9: push rsp; clc; call qword ptr [rax]; 
0x00000000004ae8d9: push rsp; clc; call qword ptr [rax]; push rsi; clc; call qword ptr [rax + 0x57]; 
0x00000000004af75c: push rsp; ja 0xaf758; call rsp; 
0x00000000004af77c: push rsp; jae 0xaf778; call rsp; 
0x00000000004af764: push rsp; jbe 0xaf760; call rsp; 
0x00000000004af774: push rsp; je 0xaf770; call rsp; 
0x00000000004af568: push rsp; jg 0xaf564; jmp rsp; 
0x00000000004c0ee5: push rsp; jmp qword ptr [rbx - 0x40]; 
0x00000000004af76c: push rsp; jne 0xaf768; call rsp; 
0x0000000000460cbd: push rsp; mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000040c7e4: push rsp; or dword ptr [rax], eax; ret; 
0x00000000004af070: push rsp; pop rax; stc; jmp rsp; 
0x00000000004c60e0: push rsp; pop rdx; std; jmp qword ptr [rdi + 0x5a]; 
0x00000000004846ec: push rsp; push rbp; push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x00000000004c5cef: push rsp; push rdi; std; jmp rsp; 
0x000000000041225a: push rsp; ret 0x4820; 
0x0000000000490921: push rsp; ret 0xeb30; 
0x000000000045fe04: push rsp; ret; 
0x0000000000453938: push rsp; rol dword ptr [rip + 0xc634900], 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004af0d1: push rsp; stc; call qword ptr [rax + 0x5b]; 
0x00000000004af0d1: push rsp; stc; call qword ptr [rax + 0x5b]; stc; jmp rax; 
0x00000000004c60ad: push rsp; std; inc dword ptr [rcx - 0x260002ac]; pop rcx; std; jmp rsp; 
0x00000000004c39ca: push rsp; syscall; 
0x00000000004b008f: push rsp; test dl, bh; jmp qword ptr [rdi - 0x7a]; 
0x00000000004b0073: push rsp; test dl, bh; jmp rcx; 
0x00000000004b006f: push rsp; test dl, bh; push rsp; test dl, bh; jmp rcx; 
0x000000000040c8db: push sp; or dword ptr [rax], eax; ret; 
0x000000000044c640: pushfq; adc eax, 0x83480000; ret 0xe910; 
0x00000000004cac18: pushfq; add byte ptr [rax], al; add byte ptr [rax - 0x3fffffb6], al; sub dh, dh; jmp rsi; 
0x0000000000471c96: pushfq; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8944; 
0x000000000046039a: pushfq; and al, 0xa0; add byte ptr [rax], al; add dh, dh; ret 0x4801; 
0x000000000048911f: pushfq; and al, 0xc0; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x848b; 
0x0000000000425f8b: pushfq; and al, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0x7c60; 
0x00000000004cbee9: pushfq; clc; call qword ptr [rdi]; 
0x00000000004583e0: pushfq; cmp eax, 0x89480001; ret 0x8b48; 
0x00000000004ab6d0: pushfq; fdivr st(7); call qword ptr [rbp + 1]; 
0x00000000004cc274: pushfq; mov ah, 0xf8; call qword ptr [rbp + 1]; 
0x00000000004b0f18: pushfq; mov edx, 0xbdd9fffa; cli; jmp qword ptr [rax]; 
0x00000000004b0f4c: pushfq; mov edx, 0xbeb0fffa; cli; jmp qword ptr [rdi + 0x63]; 
0x000000000044d340: pushfq; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000439514: pushfq; or eax, 0x83480000; ret 0xeb10; 
0x000000000049bb07: pushfq; ret 0xf45; 
0x0000000000481664: pushfq; std; jmp qword ptr [rsi + 0xf]; 
0x00000000004c9424: pushfq; xchg eax, ebp; cmc; call qword ptr [rax]; 
0x0000000000461e13: rcl byte ptr [rax + 0x41], cl; push rbp; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000465157: rcl byte ptr [rax + 0x41], cl; push rbp; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000460cba: rcl byte ptr [rax + 0x41], cl; push rsp; mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000046faaa: rcl byte ptr [rax + rax], 1; add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x00000000004ae8d8: rcl byte ptr [rax + rdi*8 - 1], 1; adc byte ptr [rsi - 8], dl; call qword ptr [rax + 0x57]; 
0x00000000004af1a0: rcl byte ptr [rax - 7], cl; call qword ptr [rdx + 0x50]; 
0x00000000004af1a0: rcl byte ptr [rax - 7], cl; call qword ptr [rdx + 0x50]; stc; call rdx; 
0x000000000041d75b: rcl byte ptr [rax], 0x83; insd dword ptr [rdi], dx; add byte ptr [rax + 0x39], cl; ret; 
0x00000000004aeea4: rcl byte ptr [rax], 0xf9; call qword ptr [rax]; 
0x00000000004aeea4: rcl byte ptr [rax], 0xf9; call qword ptr [rax]; adc bh, cl; jmp qword ptr [rax + 0x13]; 
0x00000000004aefc8: rcl byte ptr [rbp - 7], cl; jmp qword ptr [rdx + 0x55]; 
0x000000000040955b: rcl byte ptr [rbx + 0x6d], 0; pop rbx; ret; 
0x0000000000409253: rcl byte ptr [rbx + 0x6d], 0; ret; 
0x000000000040c8ab: rcl byte ptr [rcx + rcx], 1; ret; 
0x00000000004aeef8: rcl byte ptr [rdi - 7], 0xff; push rax; push rdi; stc; jmp rax; 
0x00000000004af0f4: rcl byte ptr [rdi - 7], 1; jmp qword ptr [rax + 0x57]; 
0x00000000004094b3: rcl byte ptr [rdx + 0x6d], 0; pop rbx; ret; 
0x00000000004091e7: rcl byte ptr [rdx + 0x6d], 0; ret; 
0x00000000004aea40: rcl ch, 0xf8; push qword ptr [rax - 0x2a]; clc; jmp qword ptr [rax - 0x29]; 
0x00000000004af9a0: rcl dh, 0xf9; jmp qword ptr [rax - 0x28]; 
0x000000000045b500: rcl dword ptr [rax + 5], 0; mov eax, 0x15; syscall; 
0x00000000004c31ff: rcl dword ptr [rsi + 0x5a], cl; je 0xc31c8; ret 0xacfc; 
0x00000000004a6640: rcr al, 0xff; call rcx; 
0x00000000004a6638: rcr al, 0xff; dec esp; add byte ptr [rax], al; add al, al; fdivr st(7); call rcx; 
0x00000000004aeb38: rcr bl, 1; clc; jmp qword ptr [rax - 0x24]; 
0x0000000000407686: rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; pop r15; ret; 
0x0000000000482433: rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x0000000000407f9d: rcr byte ptr [rbp + 0x41], 0x5c; pop r13; ret; 
0x000000000040785c: rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000047567f: rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x00000000004938a7: rcr byte ptr [rbp + 0x5b], 1; ret; 
0x00000000004a1c54: rcr byte ptr [rbp - 0xa], 1; jmp rax; 
0x000000000045ed92: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x0000000000421286: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x0000000000407d77: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000477c5b: rcr byte ptr [rbx + 0x5d], 1; pop r12; pop r13; ret; 
0x0000000000407741: rcr byte ptr [rbx + 0x5d], 1; ret; 
0x00000000004ae8e8: rcr byte ptr [rcx - 8], 1; call qword ptr [rax]; 
0x00000000004ae8e8: rcr byte ptr [rcx - 8], 1; call qword ptr [rax]; pop rbx; clc; call qword ptr [rax + 0x5c]; 
0x00000000004c361d: rcr byte ptr [rdi + 0x6d], cl; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x00000000004aeedc: rcr byte ptr [rdx - 7], 1; jmp qword ptr [rax + 0x5a]; 
0x00000000004aee84: rcr byte ptr [rdx], 1; stc; jmp qword ptr [rax]; 
0x00000000004ae8f8: rcr byte ptr [rsi - 8], 1; call qword ptr [rax]; 
0x00000000004aeb30: rcr dl, 0xf8; inc dword ptr [rax - 0x25]; clc; call rax; 
0x0000000000491b59: rcr dword ptr [rcx], 0xc0; and eax, 2; sub eax, 1; ret; 
0x000000000044cffc: rcr dword ptr [rdx], 0xf; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044ec49: rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000044e469: rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000044e859: rcr dword ptr [rdx], 0xf; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044e079: rcr dword ptr [rdx], 0xf; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044db5c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044d33c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000044cb1c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000044e218: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044d67c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044ce5c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044c63c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000044d81c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000044e709: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044df29: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044f039: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044c97c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044cab2: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d7b2: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d2d2: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044e60a: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044ef3a: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044daf2: rcr dword ptr [rdx], 0xf; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044cdf2: rcr dword ptr [rdx], 0xf; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000044c912: rcr dword ptr [rdx], 0xf; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d612: rcr dword ptr [rdx], 0xf; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000044e75a: rcr dword ptr [rdx], 0xf; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044df7a: rcr dword ptr [rdx], 0xf; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004aea84: rcr ebp, 1; clc; push qword ptr [rcx - 0x22]; clc; call qword ptr [rcx]; 
0x00000000004560d4: rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000004560c6: rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000456dfa: rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000042e091: rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000040058b: repe cmpsb byte ptr [rsi], byte ptr [rdi]; seta dl; sbb dl, 0; test dl, dl; jne 0x598; ret; 
0x00000000004006d7: ret 0; 
0x000000000048aa0a: ret 0x101; 
0x00000000004b9c80: ret 0x10; 
0x000000000041e9aa: ret 0x10a; 
0x000000000049387c: ret 0x114d; 
0x0000000000466dd4: ret 0x1176; 
0x000000000048ef7c: ret 0x1272; 
0x000000000048bb13: ret 0x13e9; 
0x0000000000499fa1: ret 0x145; 
0x0000000000492d26: ret 0x1474; 
0x00000000004885a8: ret 0x1475; 
0x0000000000484c21: ret 0x1477; 
0x00000000004551a8: ret 0x148; 
0x00000000004134c4: ret 0x149; 
0x0000000000447c6f: ret 0x14d; 
0x0000000000459434: ret 0x14e9; 
0x0000000000433194: ret 0x14eb; 
0x00000000004199aa: ret 0x15a; 
0x00000000004196aa: ret 0x15d; 
0x00000000004190aa: ret 0x163; 
0x0000000000418faa: ret 0x164; 
0x0000000000418daa: ret 0x166; 
0x000000000047b901: ret 0x1674; 
0x000000000045860e: ret 0x16e9; 
0x000000000043aa46: ret 0x1776; 
0x000000000043639a: ret 0x17; 
0x0000000000447bac: ret 0x180f; 
0x000000000043a5d5: ret 0x1876; 
0x00000000004197b2: ret 0x18; 
0x000000000046a11a: ret 0x18e8; 
0x00000000004159aa: ret 0x19a; 
0x00000000004158aa: ret 0x19b; 
0x00000000004156aa: ret 0x19d; 
0x0000000000466dcb: ret 0x1a72; 
0x0000000000406fe1: ret 0x1a8; 
0x00000000004c3b7a: ret 0x1ad4; 
0x00000000004c230d: ret 0x1b49; 
0x0000000000416972: ret 0x1b; 
0x000000000049e06f: ret 0x1be8; 
0x000000000043386a: ret 0x1c6; 
0x000000000046c3b9: ret 0x1ce9; 
0x00000000004bb950: ret 0x1d4; 
0x00000000004bc0e8: ret 0x1d5; 
0x000000000040f9f1: ret 0x1d89; 
0x0000000000404ad4: ret 0x1e74; 
0x000000000040428c: ret 0x1f0f; 
0x000000000042ddb6: ret 0x1f77; 
0x000000000046962d: ret 0x1fe9; 
0x000000000046a287: ret 0x200; 
0x0000000000432c0a: ret 0x203; 
0x000000000045910c: ret 0x2044; 
0x0000000000471357: ret 0x20be; 
0x00000000004855ac: ret 0x2148; 
0x0000000000422bfd: ret 0x214c; 
0x000000000042218c: ret 0x2175; 
0x000000000048dd18: ret 0x2275; 
0x000000000044ff18: ret 0x2288; 
0x000000000043397a: ret 0x22a; 
0x00000000004a183a: ret 0x234f; 
0x000000000043c9b2: ret 0x2373; 
0x000000000049fbe2: ret 0x237e; 
0x0000000000496afa: ret 0x2406; 
0x000000000048afe9: ret 0x24; 
0x000000000042534d: ret 0x2501; 
0x0000000000476a04: ret 0x2504; 
0x0000000000432ad3: ret 0x2575; 
0x000000000049b9a1: ret 0x25e9; 
0x0000000000482b26: ret 0x2774; 
0x000000000045af32: ret 0x27; 
0x000000000043e186: ret 0x280f; 
0x000000000043a5c5: ret 0x2876; 
0x000000000048dd97: ret 0x28f5; 
0x0000000000472b5e: ret 0x290f; 
0x0000000000420937: ret 0x2948; 
0x0000000000475a9a: ret 0x2949; 
0x000000000041dd60: ret 0x294c; 
0x000000000042246d: ret 0x294d; 
0x000000000040a074: ret 0x2964; 
0x000000000043139a: ret 0x29c; 
0x000000000042a574: ret 0x2a; 
0x000000000042a4fa: ret 0x2ac3; 
0x00000000004295fa: ret 0x2af7; 
0x000000000041fd1a: ret 0x2b48; 
0x00000000004321fb: ret 0x2b74; 
0x000000000042e0d2: ret 0x2b75; 
0x0000000000457272: ret 0x2b77; 
0x000000000041dd72: ret 0x2b80; 
0x00000000004009c5: ret 0x2b8; 
0x000000000041d562: ret 0x2b; 
0x00000000004036aa: ret 0x2bd; 
0x000000000049b98f: ret 0x2be9; 
0x000000000042e92e: ret 0x2c75; 
0x000000000040faba: ret 0x2c93; 
0x0000000000401f62: ret 0x2d41; 
0x000000000047e875: ret 0x2e66; 
0x000000000045b60e: ret 0x2f75; 
0x0000000000411b57: ret 0x2fe9; 
0x0000000000495247: ret 0x300; 
0x00000000004775c5: ret 0x30be; 
0x000000000042949a: ret 0x31b; 
0x000000000048c678: ret 0x330; 
0x00000000004bae48: ret 0x33; 
0x0000000000472b87: ret 0x33e8; 
0x0000000000461c34: ret 0x349; 
0x0000000000499d40: ret 0x3575; 
0x0000000000487e7a: ret 0x373; 
0x000000000048a6da: ret 0x3774; 
0x000000000043aa26: ret 0x3776; 
0x00000000004c345a: ret 0x3827; 
0x000000000047f4fe: ret 0x3873; 
0x000000000043a5b5: ret 0x3876; 
0x0000000000425dfb: ret 0x389; 
0x00000000004c1ae6: ret 0x38ae; 
0x000000000049d652: ret 0x38e8; 
0x00000000004988d8: ret 0x3901; 
0x00000000004066fe: ret 0x3902; 
0x000000000049049d: ret 0x3934; 
0x000000000047cebf: ret 0x3941; 
0x000000000040f986: ret 0x3944; 
0x00000000004205c1: ret 0x3948; 
0x000000000042137d: ret 0x3949; 
0x000000000042e1fc: ret 0x394c; 
0x000000000047856d: ret 0x394d; 
0x0000000000455822: ret 0x3a01; 
0x000000000043c99b: ret 0x3a73; 
0x0000000000497523: ret 0x3a83; 
0x0000000000456241: ret 0x3b48; 
0x0000000000400d31: ret 0x3b8; 
0x00000000004233e9: ret 0x3c75; 
0x0000000000485b68: ret 0x3d01; 
0x000000000048e708: ret 0x3d73; 
0x000000000042fa01: ret 0x3d83; 
0x000000000049045d: ret 0x3d; 
0x000000000042bdef: ret 0x3de9; 
0x000000000048a53a: ret 0x3e80; 
0x0000000000469a3b: ret 0x4002; 
0x000000000047e07a: ret 0x403; 
0x000000000041bf3d: ret 0x4074; 
0x0000000000483111: ret 0x408d; 
0x0000000000411286: ret 0x4101; 
0x000000000046fc28: ret 0x4108; 
0x00000000004703dd: ret 0x4110; 
0x0000000000490936: ret 0x4118; 
0x00000000004904d7: ret 0x4134; 
0x00000000004623e7: ret 0x415f; 
0x000000000045fece: ret 0x41c3; 
0x000000000043501a: ret 0x4266; 
0x000000000047fe93: ret 0x4389; 
0x0000000000414aa1: ret 0x4401; 
0x0000000000477e1b: ret 0x4404; 
0x0000000000490cb6: ret 0x4418; 
0x00000000004296fb: ret 0x4466; 
0x000000000042d173: ret 0x4473; 
0x00000000004035b9: ret 0x4474; 
0x000000000049308a: ret 0x44; 
0x00000000004c25e4: ret 0x474c; 
0x0000000000405ba2: ret 0x4801; 
0x0000000000421576: ret 0x4803; 
0x0000000000431ae1: ret 0x4804; 
0x000000000044fea3: ret 0x4808; 
0x000000000042b808: ret 0x4810; 
0x0000000000467b7c: ret 0x4811; 
0x000000000046d327: ret 0x481e; 
0x0000000000409e0f: ret 0x4820; 
0x000000000045d79e: ret 0x4830; 
0x000000000042a721: ret 0x4840; 
0x000000000044fb58: ret 0x48c3; 
0x0000000000428103: ret 0x48e9; 
0x00000000004c3da6: ret 0x48f; 
0x0000000000414a3c: ret 0x4901; 
0x000000000046488b: ret 0x4902; 
0x0000000000428752: ret 0x4908; 
0x00000000004394ec: ret 0x4910; 
0x0000000000469e89: ret 0x4c01; 
0x000000000042da4a: ret 0x4c07; 
0x0000000000465434: ret 0x4c1; 
0x000000000046cbe6: ret 0x4c40; 
0x000000000043341d: ret 0x4c88; 
0x00000000004069fa: ret 0x4c92; 
0x000000000046b6a8: ret 0x4d10; 
0x00000000004114a5: ret 0x4de8; 
0x00000000004c3807: ret 0x4e27; 
0x00000000004104ae: ret 0x4f76; 
0x000000000045e20f: ret 0x5089; 
0x000000000045b477: ret 0x508b; 
0x000000000043c984: ret 0x5173; 
0x00000000004901e0: ret 0x52e8; 
0x000000000045903f: ret 0x5488; 
0x0000000000405b49: ret 0x5489; 
0x00000000004c1a6c: ret 0x5508; 
0x0000000000480f5e: ret 0x5590; 
0x00000000004992f5: ret 0x55e8; 
0x000000000043aa06: ret 0x5776; 
0x00000000004c3d38: ret 0x5803; 
0x00000000004648f1: ret 0x5841; 
0x0000000000496e95: ret 0x5876; 
0x000000000041d393: ret 0x589; 
0x00000000004c1740: ret 0x591c; 
0x00000000004c24a7: ret 0x5ae4; 
0x0000000000464ad9: ret 0x5be9; 
0x000000000041e09a: ret 0x5d5b; 
0x00000000004c41d2: ret 0x62c1; 
0x00000000004333fd: ret 0x6348; 
0x000000000048b980: ret 0x6349; 
0x0000000000494694: ret 0x637f; 
0x0000000000467b53: ret 0x6411; 
0x000000000046aba1: ret 0x6601; 
0x000000000043a541: ret 0x6620; 
0x0000000000432c48: ret 0x66c3; 
0x000000000048ef8e: ret 0x674; 
0x000000000043a9f6: ret 0x6776; 
0x00000000004c175f: ret 0x67b2; 
0x00000000004263a5: ret 0x6874; 
0x0000000000406487: ret 0x690f; 
0x00000000004586ba: ret 0x6ae9; 
0x00000000004c4361: ret 0x6f9; 
0x000000000046e19a: ret 0x73; 
0x0000000000426521: ret 0x7401; 
0x0000000000431aaa: ret 0x7402; 
0x000000000048b9ea: ret 0x7403; 
0x00000000004597f1: ret 0x7404; 
0x0000000000480d32: ret 0x7408; 
0x000000000041f0b7: ret 0x7420; 
0x0000000000473ab4: ret 0x7450; 
0x000000000049019a: ret 0x7472; 
0x0000000000453d89: ret 0x7501; 
0x0000000000453d96: ret 0x7502; 
0x0000000000453da3: ret 0x7504; 
0x000000000042dd5d: ret 0x7508; 
0x0000000000453d5b: ret 0x7510; 
0x0000000000453d68: ret 0x7520; 
0x000000000043388e: ret 0x7540; 
0x0000000000406a42: ret 0x7560; 
0x0000000000484b80: ret 0x7577; 
0x000000000043b872: ret 0x7677; 
0x0000000000491e12: ret 0x777; 
0x00000000004936d6: ret 0x77f; 
0x000000000041e946: ret 0x7c60; 
0x000000000043a4e1: ret 0x7e20; 
0x000000000042ec77: ret 0x7e3; 
0x000000000043a95c: ret 0x7e40; 
0x0000000000433bcc: ret 0x7f10; 
0x000000000047d0c8: ret 0x7f3c; 
0x0000000000434da9: ret 0x8000; 
0x000000000049d312: ret 0x8001; 
0x000000000044214e: ret 0x80; 
0x000000000048600e: ret 0x8116; 
0x000000000046f3fb: ret 0x8148; 
0x000000000049d868: ret 0x8166; 
0x000000000042cc2a: ret 0x81b; 
0x000000000042c4f0: ret 0x820f; 
0x000000000042b14e: ret 0x826; 
0x0000000000464113: ret 0x8301; 
0x000000000048c707: ret 0x8303; 
0x000000000041ed42: ret 0x8308; 
0x0000000000432f84: ret 0x830f; 
0x000000000046d1f4: ret 0x8341; 
0x000000000040a405: ret 0x8348; 
0x0000000000455ca0: ret 0x8349; 
0x000000000048e57f: ret 0x8364; 
0x0000000000484f71: ret 0x8401; 
0x0000000000480676: ret 0x840; 
0x000000000040569b: ret 0x840f; 
0x0000000000462e60: ret 0x841; 
0x000000000049a5be: ret 0x8440; 
0x0000000000489127: ret 0x848b; 
0x0000000000404a36: ret 0x84c7; 
0x000000000047e519: ret 0x8502; 
0x000000000040426c: ret 0x850f; 
0x00000000004674b3: ret 0x8511; 
0x0000000000459b22: ret 0x8545; 
0x0000000000406b45: ret 0x8548; 
0x000000000048612c: ret 0x8549; 
0x0000000000432afa: ret 0x854d; 
0x0000000000414911: ret 0x8575; 
0x00000000004101f6: ret 0x860f; 
0x000000000042a0df: ret 0x870f; 
0x00000000004c107e: ret 0x871e; 
0x000000000047d0cf: ret 0x875; 
0x000000000043a5e5: ret 0x876; 
0x0000000000412182: ret 0x8801; 
0x0000000000461192: ret 0x8804; 
0x0000000000403f59: ret 0x880f; 
0x0000000000488db3: ret 0x882e; 
0x000000000046abf2: ret 0x8841; 
0x000000000048d66e: ret 0x8844; 
0x00000000004135e0: ret 0x8901; 
0x000000000045c30e: ret 0x8902; 
0x000000000042181a: ret 0x8908; 
0x000000000046d1e6: ret 0x8941; 
0x000000000040897f: ret 0x8944; 
0x0000000000402aef: ret 0x8948; 
0x000000000040894b: ret 0x8949; 
0x0000000000420031: ret 0x894c; 
0x000000000045973e: ret 0x894d; 
0x000000000049288b: ret 0x894e; 
0x00000000004876b1: ret 0x89e9; 
0x000000000045faa9: ret 0x8b01; 
0x000000000047eb6a: ret 0x8b04; 
0x0000000000484d13: ret 0x8b05; 
0x000000000047ea1b: ret 0x8b08; 
0x00000000004c38ae: ret 0x8b36; 
0x000000000042c9e1: ret 0x8b41; 
0x000000000047d0fb: ret 0x8b44; 
0x0000000000405132: ret 0x8b48; 
0x00000000004207e6: ret 0x8b49; 
0x000000000049280e: ret 0x8b4a; 
0x000000000041c14d: ret 0x8b4c; 
0x0000000000494b9f: ret 0x8b64; 
0x00000000004970c0: ret 0x8b; 
0x000000000047431d: ret 0x8c0f; 
0x000000000046cc41: ret 0x8d04; 
0x000000000049b7bf: ret 0x8d0f; 
0x000000000042c0d4: ret 0x8d44; 
0x00000000004035a3: ret 0x8d48; 
0x0000000000432f37: ret 0x8d49; 
0x0000000000491bb7: ret 0x8d4a; 
0x000000000042d1f4: ret 0x8d4c; 
0x000000000046d202: ret 0x8d89; 
0x00000000004021a0: ret 0x8e0f; 
0x000000000048c12a: ret 0x8e8; 
0x000000000046d4aa: ret 0x8f0f; 
0x00000000004300af: ret 0x8ff; 
0x000000000044f325: ret 0x90c3; 
0x000000000049a3fb: ret 0x9272; 
0x000000000042a2a5: ret 0x948; 
0x00000000004826e8: ret 0x94c; 
0x00000000004940c2: ret 0x950f; 
0x0000000000458040: ret 0x9572; 
0x00000000004c26d3: ret 0x9576; 
0x000000000046fdff: ret 0x958b; 
0x000000000040b0f3: ret 0x96c; 
0x0000000000431a3e: ret 0x976; 
0x00000000004c4339: ret 0x990e; 
0x000000000048c4b3: ret 0x9be9; 
0x000000000040dec9: ret 0x9e7; 
0x000000000040dbf9: ret 0x9eb; 
0x00000000004cb16e: ret 0xa01; 
0x0000000000459818: ret 0xa076; 
0x0000000000458584: ret 0xa0e9; 
0x000000000049b87e: ret 0xa4e9; 
0x00000000004c23c3: ret 0xa514; 
0x000000000049b97d: ret 0xa5e9; 
0x0000000000413c9c: ret 0xa; 
0x000000000045a7bd: ret 0xabe; 
0x00000000004c2847: ret 0xac65; 
0x00000000004754ba: ret 0xac; 
0x00000000004c3204: ret 0xacfc; 
0x000000000046ec3f: ret 0xae9; 
0x000000000043293a: ret 0xaeeb; 
0x00000000004c864f: ret 0xb00e; 
0x0000000000420c4d: ret 0xb074; 
0x000000000042a2fb: ret 0xb277; 
0x00000000004656bb: ret 0xb2eb; 
0x0000000000458570: ret 0xb4e9; 
0x000000000046d226: ret 0xb589; 
0x000000000040cc3b: ret 0xb60f; 
0x000000000040fce4: ret 0xb70f; 
0x000000000047b20c: ret 0xb848; 
0x0000000000479465: ret 0xb8; 
0x000000000049d6d2: ret 0xb8e8; 
0x000000000040670a: ret 0xb941; 
0x00000000004c270e: ret 0xb9b9; 
0x000000000047d469: ret 0xb9e8; 
0x000000000047ca45: ret 0xb9e9; 
0x000000000047e5f4: ret 0xba41; 
0x0000000000432173: ret 0xbae9; 
0x00000000004657f2: ret 0xbaeb; 
0x000000000049be36: ret 0xbc80; 
0x000000000046d212: ret 0xbd89; 
0x00000000004902e2: ret 0xbe0f; 
0x00000000004c2464: ret 0xbe57; 
0x000000000041263a: ret 0xbed9; 
0x0000000000434c69: ret 0xc000; 
0x0000000000402194: ret 0xc031; 
0x0000000000467b9e: ret 0xc083; 
0x0000000000407b36: ret 0xc085; 
0x00000000004047e8: ret 0xc148; 
0x000000000042a595: ret 0xc183; 
0x00000000004135f8: ret 0xc189; 
0x0000000000459432: ret 0xc221; 
0x0000000000409f2e: ret 0xc269; 
0x000000000040a072: ret 0xc26b; 
0x000000000042ea0b: ret 0xc275; 
0x0000000000485b66: ret 0xc283; 
0x0000000000406469: ret 0xc289; 
0x000000000043c854: ret 0xc2b2; 
0x00000000004572de: ret 0xc35b; 
0x0000000000466f8d: ret 0xc389; 
0x000000000042ea0d: ret 0xc3f3; 
0x00000000004c0c02: ret 0xc4c3; 
0x00000000004c2018: ret 0xc4ff; 
0x000000000043a9c1: ret 0xc540; 
0x0000000000467056: ret 0xc589; 
0x0000000000472abc: ret 0xc689; 
0x0000000000450260: ret 0xc748; 
0x000000000048e55d: ret 0xc74; 
0x00000000004786b8: ret 0xc789; 
0x0000000000490372: ret 0xc829; 
0x0000000000471492: ret 0xc839; 
0x0000000000425dec: ret 0xc883; 
0x0000000000409f30: ret 0xc8; 
0x000000000046fed7: ret 0xc985; 
0x000000000047eb03: ret 0xc9eb; 
0x000000000044fe71: ret 0xc9ff; 
0x000000000040898a: ret 0xc; 
0x00000000004008e1: ret 0xca21; 
0x0000000000401d15: ret 0xca81; 
0x00000000004c1aaa: ret 0xcca7; 
0x00000000004c3b8d: ret 0xcd11; 
0x0000000000413e02: ret 0xce80; 
0x00000000004302ee: ret 0xd020; 
0x000000000041cbd6: ret 0xd021; 
0x000000000047393b: ret 0xd120; 
0x0000000000408c0f: ret 0xd189; 
0x000000000040647f: ret 0xd269; 
0x0000000000410004: ret 0xd284; 
0x0000000000466b4a: ret 0xd285; 
0x000000000049ddb8: ret 0xd2e8; 
0x00000000004891b6: ret 0xd348; 
0x000000000045eb87: ret 0xd5e9; 
0x000000000049072f: ret 0xd75; 
0x000000000046c5e6: ret 0xd774; 
0x0000000000403908: ret 0xd77; 
0x00000000004c3625: ret 0xd8f; 
0x00000000004b9880: ret 0xd; 
0x000000000040058f: ret 0xda80; 
0x000000000041ef33: ret 0xdaf7; 
0x000000000046333a: ret 0xdb76; 
0x00000000004c3706: ret 0xdcd9; 
0x00000000004758de: ret 0xdce8; 
0x00000000004c2682: ret 0xde5d; 
0x00000000004c1411: ret 0xde9e; 
0x0000000000434b29: ret 0xe000; 
0x0000000000453d19: ret 0xe074; 
0x000000000045ca60: ret 0xe083; 
0x00000000004c682e: ret 0xe0a; 
0x000000000049ba41: ret 0xe1e9; 
0x000000000045c892: ret 0xe1eb; 
0x0000000000404af2: ret 0xe275; 
0x000000000041c7e0: ret 0xe281; 
0x000000000040fa25: ret 0xe283; 
0x00000000004823f8: ret 0xe575; 
0x0000000000474f40: ret 0xe57f; 
0x00000000004758ba: ret 0xe583; 
0x00000000004572d2: ret 0xe680; 
0x0000000000475f9f: ret 0xe683; 
0x00000000004c3826: ret 0xe71f; 
0x000000000048857a: ret 0xe75; 
0x0000000000432226: ret 0xe775; 
0x0000000000475573: ret 0xe7e9; 
0x0000000000410285: ret 0xe883; 
0x00000000004880f6: ret 0xe8c0; 
0x0000000000433043: ret 0xe901; 
0x000000000049d3fa: ret 0xe902; 
0x000000000044ff06: ret 0xe908; 
0x000000000044c4a6: ret 0xe910; 
0x000000000046da6d: ret 0xe920; 
0x00000000004c1b87: ret 0xe970; 
0x000000000045726a: ret 0xea81; 
0x000000000041c8ad: ret 0xeab8; 
0x000000000040646b: ret 0xeac1; 
0x0000000000404ac1: ret 0xeb01; 
0x000000000047ea33: ret 0xeb04; 
0x000000000043951a: ret 0xeb10; 
0x0000000000490922: ret 0xeb30; 
0x0000000000482322: ret 0xeb75; 
0x00000000004c4338: ret 0xec2; 
0x0000000000407eb0: ret 0xed75; 
0x000000000047425d: ret 0xede8; 
0x00000000004c3fda: ret 0xef32; 
0x000000000049b608: ret 0xef89; 
0x0000000000401233: ret 0xefb8; 
0x000000000048512f: ret 0xefeb; 
0x00000000004349e9: ret 0xf000; 
0x00000000004142e5: ret 0xf01; 
0x0000000000429da9: ret 0xf02; 
0x000000000042c259: ret 0xf04; 
0x00000000004075cd: ret 0xf075; 
0x0000000000420ed3: ret 0xf08; 
0x000000000042a079: ret 0xf0f; 
0x000000000041d0de: ret 0xf10; 
0x0000000000475dbb: ret 0xf20; 
0x000000000042c3c3: ret 0xf275; 
0x00000000004d0488: ret 0xf300; 
0x0000000000472e76: ret 0xf3f; 
0x0000000000476343: ret 0xf40; 
0x000000000041f50d: ret 0xf41; 
0x000000000049babc: ret 0xf45; 
0x0000000000432e09: ret 0xf475; 
0x0000000000460a56: ret 0xf48; 
0x00000000004004fd: ret 0xf49; 
0x0000000000476329: ret 0xf50; 
0x00000000004059e9: ret 0xf631; 
0x0000000000434fa6: ret 0xf66; 
0x000000000048a207: ret 0xf675; 
0x0000000000493c72: ret 0xf6c7; 
0x000000000041f5cc: ret 0xf741; 
0x0000000000414532: ret 0xf748; 
0x0000000000491dfc: ret 0xf749; 
0x000000000040587c: ret 0xf772; 
0x00000000004878b2: ret 0xf78b; 
0x000000000049d45a: ret 0xf7f4; 
0x00000000004348a9: ret 0xf800; 
0x00000000004c12f0: ret 0xf869; 
0x0000000000427b23: ret 0xf8b; 
0x0000000000472e71: ret 0xf8c1; 
0x000000000044f786: ret 0xf8c5; 
0x0000000000457614: ret 0xf8e9; 
0x00000000004aefa4: ret 0xf959; 
0x00000000004af49c: ret 0xf980; 
0x000000000043830e: ret 0xf; 
0x000000000042e6e2: ret 0xfae9; 
0x000000000046ed9a: ret 0xfb6b; 
0x000000000042ecda: ret 0xfbe9; 
0x0000000000434769: ret 0xfc00; 
0x0000000000433681: ret 0xfc3; 
0x00000000004679aa: ret 0xfc7a; 
0x0000000000466eaa: ret 0xfc85; 
0x000000000048081a: ret 0xfd70; 
0x00000000004901a5: ret 0xfde8; 
0x0000000000434629: ret 0xfe00; 
0x000000000040fb55: ret 0xfe83; 
0x0000000000411efa: ret 0xfee5; 
0x00000000004344e9: ret 0xff00; 
0x000000000045ca0b: ret 0xff25; 
0x0000000000443cc1: ret 0xff2; 
0x000000000043b1e9: ret 0xff2d; 
0x000000000047a567: ret 0xff31; 
0x0000000000434f4a: ret 0xff3; 
0x00000000004343a9: ret 0xff80; 
0x0000000000475b41: ret 0xff83; 
0x00000000004632cc: ret 0xff85; 
0x000000000046cbd2: ret 0xffa0; 
0x000000000040834a: ret 0xffa1; 
0x0000000000419d8a: ret 0xffaf; 
0x0000000000419a8a: ret 0xffb2; 
0x000000000045e94a: ret 0xffb4; 
0x0000000000493d6e: ret 0xffb6; 
0x00000000004202e7: ret 0xffb8; 
0x000000000041c8fa: ret 0xffc0; 
0x000000000040f602: ret 0xffd6; 
0x00000000004aafa0: ret 0xffd8; 
0x000000000040f302: ret 0xffd9; 
0x000000000040f002: ret 0xffdc; 
0x000000000040ed02: ret 0xffdf; 
0x0000000000434129: ret 0xffe0; 
0x000000000040ea02: ret 0xffe2; 
0x000000000040e702: ret 0xffe5; 
0x00000000004719ae: ret 0xffe6; 
0x000000000040e402: ret 0xffe8; 
0x0000000000458625: ret 0xffe9; 
0x000000000040e102: ret 0xffeb; 
0x000000000040de02: ret 0xffee; 
0x000000000041ddc1: ret 0xffef; 
0x000000000041c722: ret 0xfff0; 
0x000000000040db02: ret 0xfff1; 
0x000000000040d802: ret 0xfff4; 
0x00000000004c9b69: ret 0xfff5; 
0x00000000004a2af1: ret 0xfff6; 
0x000000000040d502: ret 0xfff7; 
0x0000000000433ea9: ret 0xfff8; 
0x00000000004af975: ret 0xfff9; 
0x00000000004321f2: ret 0xfff; 
0x000000000040d202: ret 0xfffa; 
0x0000000000413519: ret 0xfffb; 
0x0000000000433d69: ret 0xfffc; 
0x000000000040cf02: ret 0xfffd; 
0x000000000043025c: ret 0xfffe; 
0x0000000000403465: ret 0xffff; 
0x000000000042fddd: ret 1; 
0x000000000042accd: ret 2; 
0x000000000042a9e2: ret 3; 
0x0000000000418be8: ret 4; 
0x0000000000453806: ret 5; 
0x0000000000442c57: ret 6; 
0x0000000000430d56: ret 7; 
0x0000000000418c48: ret 8; 
0x000000000040d876: ret 9; 
0x0000000000400416: ret; 
0x00000000004aa2bc: retf 0; add ah, cl; add byte ptr [rax], al; add bh, ah; fdivr st(7); jmp rdi; 
0x000000000040a3fc: retf 0; add byte ptr [rax - 0x7b], al; ror byte ptr [rdi], 0x49; ret 0x8348; 
0x00000000004a884c: retf 0; add cl, ah; fdivr st(7); jmp rcx; 
0x000000000048dd15: retf 0x394c; ret 0x2275; 
0x000000000041d5bc: retf 0x6411; xor rdx, qword ptr [0x30]; call rdx; 
0x000000000041d6a8: retf 0x6411; xor rdx, qword ptr [0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x00000000004c1ae2: retf 0x6ee8; sahf; ret 0x38ae; 
0x00000000004205a3: retf 0x775; mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x00000000004394bf: retf 0x8349; ret 0x7f10; 
0x000000000044c707: retf 0x8349; ret 0xf10; 
0x0000000000421ac2: retf 0x894c; out 0x8b, al; mov ebp, 0xffffff7c; mov eax, r13d; syscall; 
0x000000000045973b: retf 0x894d; ret 0x894d; 
0x0000000000458c2c: retf 0x8d48; push rsp; and al, 0x18; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000004538bd: retf 0x8d4c; sbb eax, 0x5c1cb; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045329d: retf 0x8d4c; sbb eax, 0x5c76b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004571d6: retf 0xd975; vzeroupper; ret; 
0x00000000004394e6: retf 0xd; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000457013: retf 0xe175; vzeroupper; ret; 
0x0000000000495c27: retf 0xe677; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000044fcb0: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000004838ac: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000482b91: retf 0xf4c; stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000043c3f6: retf 0xf66; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000482836: retf 0xfdc5; xlatb; ret; 
0x0000000000473fba: retf 0xfff5; jmp qword ptr [rsi - 0x70]; 
0x00000000004015a2: retf 0xfff6; jmp qword ptr [rsi + 0x2e]; 
0x00000000004638be: retf 0xfffa; dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x00000000004245ca: retf 0xfffc; jmp qword ptr [rsi - 0x70]; 
0x0000000000457c22: retf 0xfffe; jmp qword ptr [rsi + 0x2e]; 
0x000000000042042e: retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x000000000049b515: retf 4; add al, ch; add dl, byte ptr [rax + rdi*8]; jmp qword ptr [rsi - 0x70]; 
0x000000000045b08d: retf; add al, byte ptr [rcx + 0x39]; ret; 
0x0000000000403071: retf; add byte ptr [rip - 0x3ea1700], 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000400bec: retf; add dword ptr [rax], eax; nop; leave; ret; 
0x00000000004a4dbc: retf; fdivr st(7); call qword ptr [rdx]; 
0x00000000004a4db8: retf; fdivr st(7); dec ebx; fdivr st(7); call qword ptr [rdx]; 
0x00000000004c84a5: retf; hlt; jmp qword ptr [rdx + 0x36]; 
0x00000000004c1a6b: retf; ret 0x5508; 
0x00000000004538c1: retf; rol dword ptr [rip + 0xc634900], 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000046d1e9: rol al, 0xea; add eax, dword ptr [rcx - 0x40]; call 0xffffffff89d85af6; ret 0x8341; 
0x00000000004af970: rol al, 0xf9; inc eax; ret 0xfff9; 
0x000000000043a53e: rol bl, 0x83; ret 0x6620; 
0x000000000045628d: rol byte ptr [r9 + 0xf], 1; adc dword ptr [rbx], esp; ret; 
0x0000000000434f22: rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x0000000000483d46: rol byte ptr [rax + 0x48], 1; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fdf6: rol byte ptr [rax + 0x48], 1; clc; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa2b: rol byte ptr [rax + 0x48], 1; clc; vzeroupper; ret; 
0x0000000000482b22: rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x00000000004bd320: rol byte ptr [rax + rax], 0; ret 4; 
0x000000000040fb4a: rol byte ptr [rax + rcx*2], 0x83; mov dword ptr [rcx + rax*2], 0x72f2a30f; ret 0xfe83; 
0x00000000004011bc: rol byte ptr [rax - 0x3f7b0000], 0x89; ret; 
0x0000000000463c44: rol byte ptr [rax - 0x7af07f07], 0xc1; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004aad38: rol byte ptr [rax], 0; add bl, dl; fdivr st(7); call rbx; 
0x00000000004aad44: rol byte ptr [rax], 0; add bl, dl; fdivr st(7); call rdx; 
0x0000000000400406: rol byte ptr [rax], 0; add byte ptr [rax], al; test rax, rax; je 0x412; call rax; 
0x0000000000489121: rol byte ptr [rax], 0; add byte ptr [rcx - 0x77], cl; ret 0x848b; 
0x0000000000407553: rol byte ptr [rax], 0; add byte ptr [rdi], cl; adc dword ptr [rax + 0xc0], eax; pop rbx; ret; 
0x000000000041c878: rol byte ptr [rax], 0; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xd0], eax; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000043b77d: rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000045c31b: rol byte ptr [rax], 0; add dh, dh; ret 0x7404; 
0x00000000004d21ad: rol byte ptr [rax], 0; nop; mov ch, 0xfc; jmp qword ptr [rbx]; 
0x000000000049c4be: rol byte ptr [rax], 1; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x0000000000406bde: rol byte ptr [rax], 1; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004a6250: rol byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xbeffffd8; fdivr st(7); call rax; 
0x00000000004ab1b8: rol byte ptr [rax], 1; add byte ptr [rax], al; movabs dword ptr [0xfffffd80f000001], eax; fdivr st(7); jmp qword ptr [rbx + 0xf000001]; 
0x000000000041c880: rol byte ptr [rax], 1; add byte ptr [rax], al; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000041e759: rol byte ptr [rax], 1; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004a61c8: rol byte ptr [rax], cl; add byte ptr [rax], al; mov edi, 0xbfffffd8; fdivr st(7); call rdx; 
0x00000000004aa97c: rol byte ptr [rax], cl; add byte ptr [rax], al; movabs byte ptr [0xeffffd80e000001], al; fdivr st(7); jmp qword ptr [rdx + 0xe000001]; 
0x0000000000484a8f: rol byte ptr [rbp + 0x31], 1; shl byte ptr [rip + 0x410000], cl; cmp eax, 0x410000; je 0x84ac8; mov eax, 0x101; syscall; 
0x000000000043a782: rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x000000000046ec35: rol byte ptr [rbp - 0x40f0b737], 1; ror byte ptr [rax + 0xf], 0x44; ret 0xae9; 
0x0000000000491b5b: rol byte ptr [rbx - 0x177cfd20], 1; ret; 
0x0000000000427b78: rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x00000000004623e1: rol byte ptr [rbx - 0x76befb08], 1; ret 0x415f; 
0x0000000000483bb2: rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x0000000000457261: rol byte ptr [rcx + 0xbeff], cl; add byte ptr [rdi], cl; lahf; ret 0xea81; 
0x0000000000475d8f: rol byte ptr [rcx + 0xf], 0x94; ret; 
0x0000000000406479: rol byte ptr [rcx + 0xf], 0xb6; adc dword ptr [rcx], esi; ret 0xd269; 
0x000000000045628e: rol byte ptr [rcx + 0xf], 1; adc dword ptr [rbx], esp; ret; 
0x00000000004aeba8: rol byte ptr [rcx + rdi*8], 0xff; rol byte ptr [rsi], 0xf9; call qword ptr [rax - 7]; 
0x00000000004aeba8: rol byte ptr [rcx + rdi*8], 0xff; rol byte ptr [rsi], 0xf9; call qword ptr [rax - 7]; clc; call qword ptr [rax]; 
0x000000000047ca42: rol byte ptr [rcx - 0x77], 1; ret 0xb9e9; 
0x0000000000483b92: rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x000000000045db56: rol byte ptr [rcx], 0x50; call rbx; 
0x0000000000468b0b: rol byte ptr [rcx], 0x83; ret 0x4801; 
0x00000000004575f7: rol byte ptr [rcx], 0x83; ret 0xf01; 
0x0000000000474083: rol byte ptr [rcx], 0xc7; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x0000000000457610: rol byte ptr [rcx], 0xf; scasd eax, dword ptr [rdi]; ret 0xf8e9; 
0x0000000000411b52: rol byte ptr [rcx], 1; add byte ptr [rax - 0x77], cl; ret 0x2fe9; 
0x000000000045d501: rol byte ptr [rcx], 1; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000432caa: rol byte ptr [rcx], 1; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x1ce62]; cmove rax, rdx; ret; 
0x0000000000483bf2: rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x0000000000483ba2: rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x0000000000400d75: rol byte ptr [rip - 0xa917], 0xff; nop dword ptr [rax]; lea rax, [rip + 0xa0b71]; ret; 
0x00000000004af900: rol byte ptr [rsi - 0x772f0007], 0xf9; jmp rax; 
0x0000000000483be2: rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x0000000000442dd7: rol byte ptr [rsi], 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004aebac: rol byte ptr [rsi], 0xf9; call qword ptr [rax - 7]; 
0x00000000004aebac: rol byte ptr [rsi], 0xf9; call qword ptr [rax - 7]; clc; call qword ptr [rax]; 
0x00000000004aee50: rol byte ptr [rsi], 1; stc; call qword ptr [rax]; 
0x00000000004aee50: rol byte ptr [rsi], 1; stc; call qword ptr [rax]; or edi, ecx; jmp qword ptr [rax + 0xc]; 
0x0000000000456642: rol ch, 0x7e; jg 0x56688; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x0000000000456775: rol ch, 0x7e; jg 0x567bb; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000043aaaf: rol ch, 1; std; xlatb; ret; 
0x000000000044fe1f: rol ch, cl; std; xlatb; ret 0xc085; 
0x0000000000482896: rol ch, cl; std; xlatb; ret; 
0x00000000004c0c00: rol cl, 0xc2; ret; 
0x00000000004cc540: rol cl, 0xf8; jmp qword ptr [rcx]; 
0x0000000000483b3c: rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x000000000045700c: rol dword ptr [rax + 0x48000000], 0x39; retf 0xe175; vzeroupper; ret; 
0x0000000000456df2: rol dword ptr [rax + 0xf], 1; mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000004571cf: rol dword ptr [rax], 1; add byte ptr [rax], al; cmp rdx, rcx; jne 0x571b2; vzeroupper; ret; 
0x000000000043a9e0: rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x000000000043a564: rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000453d1f: rol dword ptr [rbp + 0x661075c0], cl; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000043aaa3: rol dword ptr [rbp - 0x3a378a40], 0xfd; xlatb; ret 0xc085; 
0x000000000044f8f3: rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x000000000043a534: rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000482da7: rol dword ptr [rbp - 0x5f7af040], 0; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x000000000043a9a3: rol dword ptr [rbp - 0x6b7af040], 0; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000482f7e: rol dword ptr [rcx + 0x20c00e1], 1; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x00000000004262fa: rol dword ptr [rcx], 0xf; mov dh, 0x3c; adc byte ptr [rax - 0x78], al; jl 0x26319; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000465b8f: rol dword ptr [rcx], 0xf; mov dh, 0x41; dec dword ptr [rax - 0x7d]; ret 0x8801; 
0x00000000004c188a: rol dword ptr [rdi + 0x42923bbd], 1; jmp qword ptr [rdx - 0x71]; 
0x0000000000463c4a: rol dword ptr [rdx], 0; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004538a0: rol dword ptr [rip + 0xc634900], 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000441feb: rol dword ptr [rsi], 1; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043b1e5: rol ebp, 1; stc; xlatb; ret 0xff2d; 
0x000000000043f84f: ror byte ptr [r8 - 0x7d], 0xef; lea r11, [rip + 0x6f4b4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ce7f: ror byte ptr [r8 - 0x7d], 0xef; lea r11, [rip + 0x71cc4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000481635: ror byte ptr [r9 + rcx*4 - 1], 0x41; call rsp; 
0x0000000000499d28: ror byte ptr [rax + 0x21], cl; ret 0xc148; 
0x000000000043a34b: ror byte ptr [rax + 0x29], 0xc2; jbe 0x3a5f0; add rax, rdi; add rax, rcx; ret; 
0x000000000043a5b2: ror byte ptr [rax + 0x29], 0xc2; jbe 0x3a5f0; add rax, rdi; ret; 
0x000000000043a5c2: ror byte ptr [rax + 0x29], 0xc2; jbe 0x3a5f0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000043a5d2: ror byte ptr [rax + 0x29], 0xc2; jbe 0x3a5f0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000043a5e2: ror byte ptr [rax + 0x29], 0xc2; jbe 0x3a5f0; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000044fcb7: ror byte ptr [rax + 0x29], 1; clc; ret; 
0x000000000048385c: ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x000000000042049e: ror byte ptr [rax + 0x29], 1; ret; 
0x000000000043aa03: ror byte ptr [rax + 0x39], 0xc2; jbe 0x3aa60; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000043aa23: ror byte ptr [rax + 0x39], 0xc2; jbe 0x3aa60; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000043aa43: ror byte ptr [rax + 0x39], 0xc2; jbe 0x3aa60; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000043a9f3: ror byte ptr [rax + 0x39], 0xc2; jbe 0x3aa60; add rax, rdi; vzeroupper; ret; 
0x0000000000482df3: ror byte ptr [rax + 0x39], 0xc6; jbe 0x82e70; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000045b028: ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000042d0a3: ror byte ptr [rax + 0x39], 1; ret; 
0x000000000047f503: ror byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000048bcaa: ror byte ptr [rax + 0x39], cl; ret; 
0x0000000000494779: ror byte ptr [rax + 0x3b], 1; add eax, 0x244a4f; jae 0x9478f; mov rdx, qword ptr [rip + 0x244a4e]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000045c9bd: ror byte ptr [rax + 0x63], cl; test dword ptr [rax], r8d; add rax, rbp; jmp rax; 
0x0000000000432f33: ror byte ptr [rax + 0xf], 0x43; ret 0x8d49; 
0x000000000046ec3b: ror byte ptr [rax + 0xf], 0x44; ret 0xae9; 
0x000000000045b022: ror byte ptr [rax + 0xf], cl; sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000044f9a6: ror byte ptr [rax + 1], 0xc8; add rax, rdi; vzeroupper; ret; 
0x000000000043a65c: ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x0000000000483c48: ror byte ptr [rax + 1], 0xf8; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fd08: ror byte ptr [rax + 1], 0xf8; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000043ab18: ror byte ptr [rax + 1], 0xf8; add rax, rcx; vzeroupper; ret; 
0x000000000043a582: ror byte ptr [rax + 1], 0xf8; ret; 
0x0000000000483d03: ror byte ptr [rax + 1], 0xf8; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fdc3: ror byte ptr [rax + 1], 0xf8; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa73: ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x0000000000414683: ror byte ptr [rax + 1], 1; ret; 
0x000000000044fcb4: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; ret; 
0x0000000000483859: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x000000000041d76a: ror byte ptr [rax + 1], cl; ror byte ptr [rax - 0x3f], 1; call 0x648f2378; ret; 
0x000000000044f645: ror byte ptr [rax + 9], 0xc8; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x00000000004b9728: ror byte ptr [rax + rax], 0; ret; 
0x000000000043ad05: ror byte ptr [rax - 0x2d], 0xfa; movzx edx, dl; sub eax, edx; ret; 
0x000000000044fbf6: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x4fc10; bsf rax, rdx; ret; 
0x000000000044fb95: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x4fc20; bsf rax, rdx; ret; 
0x000000000049262c: ror byte ptr [rax - 0x3f], 0xe0; add ecx, dword ptr [rbp - 0x77]; ret 0x8d48; 
0x0000000000475b3a: ror byte ptr [rax - 0x3f], 0xe2; and byte ptr [rax + 9], cl; ret 0xff83; 
0x000000000041d76d: ror byte ptr [rax - 0x3f], 1; call 0x648f2378; ret; 
0x0000000000483c51: ror byte ptr [rax - 0x3f], 1; call 0x7801015b; ret; 
0x0000000000483d09: ror byte ptr [rax - 0x3f], 1; call 0x78010213; ret; 
0x0000000000483d2d: ror byte ptr [rax - 0x3f], 1; call 0x78010237; ret; 
0x0000000000483d4d: ror byte ptr [rax - 0x3f], 1; call 0x78010257; ret; 
0x0000000000483d9b: ror byte ptr [rax - 0x3f], 1; call 0x780102a5; ret; 
0x0000000000483e3a: ror byte ptr [rax - 0x3f], 1; call 0x78010344; ret; 
0x0000000000483fbe: ror byte ptr [rax - 0x3f], 1; call 0x780104c8; ret; 
0x0000000000483fe2: ror byte ptr [rax - 0x3f], 1; call 0x780104ec; ret; 
0x0000000000484002: ror byte ptr [rax - 0x3f], 1; call 0x7801050c; ret; 
0x0000000000484022: ror byte ptr [rax - 0x3f], 1; call 0x7801052c; ret; 
0x0000000000484059: ror byte ptr [rax - 0x3f], 1; call 0x78010563; ret; 
0x000000000048407d: ror byte ptr [rax - 0x3f], 1; call 0x78010587; ret; 
0x000000000048409d: ror byte ptr [rax - 0x3f], 1; call 0x780105a7; ret; 
0x00000000004840eb: ror byte ptr [rax - 0x3f], 1; call 0x780105f5; ret; 
0x0000000000433724: ror byte ptr [rax - 0x73], 0x15; xor al, 0x38; add al, byte ptr [rax]; lea rax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x000000000045c445: ror byte ptr [rax - 0x73], 0x3d; add eax, 0x440f4800; ret; 
0x000000000043a572: ror byte ptr [rax - 0x73], 0x44; cmp al, dh; ret; 
0x000000000043a5a2: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], ah; ret; 
0x000000000043a592: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], dl; ret; 
0x00000000004321ee: ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x00000000004501e3: ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x000000000045021f: ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x0000000000441f7b: ror byte ptr [rax - 0x73], 0x7f; ror byte ptr [rax - 0x7d], 0xea; lea r11, [rip + 0x6cd85]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044f77b: ror byte ptr [rax - 0x73], cl; add al, 7; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000488daa: ror byte ptr [rax - 0x73], cl; add dword ptr [r15], r9d; xchg eax, ebp; ret 0xc283; 
0x0000000000484b6b: ror byte ptr [rax - 0x77], 0xe2; mov esi, 0x5401; mov eax, ecx; syscall; 
0x0000000000458aea: ror byte ptr [rax - 0x77], 0xee; mov edi, ebx; mov eax, 1; syscall; 
0x0000000000458a1a: ror byte ptr [rax - 0x77], 0xee; mov edi, ebx; xor eax, eax; syscall; 
0x00000000004830fd: ror byte ptr [rax - 0x77], 0xee; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000041fb34: ror byte ptr [rax - 0x77], 0xef; call qword ptr [rbp + 0x20]; 
0x0000000000493aac: ror byte ptr [rax - 0x77], 1; or byte ptr [r8 + 2], r15b; ret; 
0x0000000000499d3d: ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x00000000004699f4: ror byte ptr [rax - 0x77], 1; ret 0x894c; 
0x0000000000422e70: ror byte ptr [rax - 0x77], 1; ret 0x8b48; 
0x000000000049132a: ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x000000000041c7dd: ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x00000000004206e0: ror byte ptr [rax - 0x77], 1; ret; 
0x000000000042e7d5: ror byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x00000000004940bc: ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x0000000000483d43: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fdf3: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa93: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; vzeroupper; ret; 
0x000000000044fdd3: ror byte ptr [rax - 0x7d], 0xc0; and byte ptr [rax + 1], cl; clc; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa83: ror byte ptr [rax - 0x7d], 0xc0; and byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x00000000004328f5: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000004023bf: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000497817: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000484b43: ror byte ptr [rax - 0x7d], 0xc4; pop rax; ret; 
0x000000000049d7d7: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000424b01: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000441f7f: ror byte ptr [rax - 0x7d], 0xea; lea r11, [rip + 0x6cd85]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441ebf: ror byte ptr [rax - 0x7d], 0xea; sfence; lea r11, [rip + 0x6ce42]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f3fb: ror byte ptr [rax - 0x7d], 0xea; sfence; lea r11, [rip + 0x6f746]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f850: ror byte ptr [rax - 0x7d], 0xef; lea r11, [rip + 0x6f4b4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ce80: ror byte ptr [rax - 0x7d], 0xef; lea r11, [rip + 0x71cc4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000047b8f6: ror byte ptr [rax - 0x7d], 1; mov ebp, 0xfffffae8; add byte ptr [rcx - 0x77], al; ret 0x1674; 
0x000000000041d860: ror byte ptr [rax - 0x7d], 1; ret 0x4801; 
0x0000000000464285: ror byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000455c6b: ror byte ptr [rax - 0x7f], 0xc4; add byte ptr [rcx], al; add byte ptr [rax], al; sub rax, rdx; ret; 
0x0000000000455c68: ror byte ptr [rax - 1], 0xc0; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000455c65: ror byte ptr [rax - 1], 0xc0; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x000000000047f8d3: ror byte ptr [rax], 0x83; insd dword ptr [rdi], dx; add byte ptr [rax - 0x39], cl; ret 0x7c60; 
0x00000000004988d5: ror byte ptr [rax], 0x83; ret 0x3901; 
0x000000000047e742: ror byte ptr [rbp + 0x39441704], cl; ret 0xf49; 
0x0000000000453876: ror byte ptr [rbp + rcx*4 + 0x1d], cl; adc al, dl; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045389b: ror byte ptr [rbp + rcx*4 + 0x1d], cl; in eax, dx; rol dword ptr [rip + 0xc634900], 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004538d3: ror byte ptr [rbp + rcx*4 + 0x1d], cl; mov ch, 0xc1; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453256: ror byte ptr [rbp + rcx*4 + 0x1d], cl; mov dl, 0xc7; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000048322c: ror byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x20; call rbx; 
0x00000000004af1b8: ror byte ptr [rbp - 7], cl; call qword ptr [rdx + 0x4d]; 
0x00000000004af1b8: ror byte ptr [rbp - 7], cl; call qword ptr [rdx + 0x4d]; stc; call rdx; 
0x0000000000484a04: ror byte ptr [rbx + 0x481c2454], 0x8b; je 0x84a31; adc byte ptr [rbx - 0x47e7db84], cl; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000004595a4: ror byte ptr [rcx + 0x12eb8fe], cl; add byte ptr [rax], al; xor edi, edi; syscall; 
0x0000000000437b63: ror byte ptr [rcx + 0x29], cl; sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000493a94: ror byte ptr [rcx + 0x2b802], 1; add byte ptr [rax], al; ret; 
0x0000000000404aba: ror byte ptr [rcx + 0x484c247c], 0x83; ret 0xeb01; 
0x000000000049b407: ror byte ptr [rcx + 0x63], 4; test byte ptr [rcx + rax - 0x20], cl; jmp rax; 
0x0000000000477e48: ror byte ptr [rcx + rcx*4 + 0x2f], 0x5b; pop rbp; pop r12; pop r13; ret; 
0x000000000041c8c7: ror byte ptr [rcx + rcx*4 - 0x32], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000483417: ror byte ptr [rcx + rcx*4 - 0xe], 0x4c; lea ecx, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x0000000000481636: ror byte ptr [rcx + rcx*4 - 1], 0x41; call rsp; 
0x0000000000481352: ror byte ptr [rcx + rcx*4 - 7], 0x48; lea esi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000048152e: ror byte ptr [rcx + rcx*4 - 7], 0x48; lea esi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x00000000004aee98: ror byte ptr [rcx + rdi*8], 1; jmp qword ptr [rax]; 
0x00000000004826fc: ror byte ptr [rcx - 0x3e], 0x48; cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000046b6f6: ror byte ptr [rcx - 0x73], 0x43; adc byte ptr [rdi], cl; sahf; ret 0x894c; 
0x0000000000487ea1: ror byte ptr [rcx - 0x73], 0x7d; sub byte ptr [rcx], dh; imul al; fild dword ptr [rbp - 0x7cb70009]; ret; 
0x0000000000477828: ror byte ptr [rcx - 0x77], cl; ret; 
0x000000000045eb7f: ror byte ptr [rcx - 0x7d], cl; cmp al, 0x24; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd5e9; 
0x00000000004110c3: ror byte ptr [rcx], 0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004af1a8: ror byte ptr [rdi - 7], cl; call qword ptr [rdx + 0x4f]; 
0x00000000004af1a8: ror byte ptr [rdi - 7], cl; call qword ptr [rdx + 0x4f]; stc; call rdx; 
0x000000000046a492: ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x000000000045aeec: ror byte ptr [rdi], 0x44; ret 0x66c3; 
0x000000000040a402: ror byte ptr [rdi], 0x49; ret 0x8348; 
0x000000000046e23c: ror byte ptr [rdi], 0x84; lahf; or dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000041f21d: ror byte ptr [rdi], 0x84; lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000484d79: ror byte ptr [rdi], 0x84; nop; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000041e4f1: ror byte ptr [rdi], 0x84; popfq; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000046faa7: ror byte ptr [rdi], 0x84; rcl byte ptr [rax + rax], 1; add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x000000000047633b: ror byte ptr [rdi], 0x84; ret 0x17; 
0x000000000045fb07: ror byte ptr [rdi], 0x84; ret 0xfffc; 
0x0000000000411576: ror byte ptr [rdi], 0x84; ret; 
0x00000000004501ea: ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x00000000004091dd: ror byte ptr [rdi], 0x85; mov word ptr [rax], es; add byte ptr [rax], al; mov rax, 0x6d52c0; ret; 
0x000000000045bd4f: ror byte ptr [rdi], 0x85; ret 0xfffe; 
0x000000000048ce92: ror byte ptr [rdi], 0x85; ret 2; 
0x0000000000431b8f: ror byte ptr [rdi], 0x85; ret; 
0x0000000000476ed9: ror byte ptr [rdi], 0x8f; ret 7; 
0x000000000049045a: ror byte ptr [rdi], 0x94; ret 0x3d; 
0x000000000047d0c5: ror byte ptr [rdi], 0x94; ret 0x7f3c; 
0x00000000004940bf: ror byte ptr [rdi], 0x94; ret 0x950f; 
0x0000000000455d5e: ror byte ptr [rdi], 0x94; ret 0xc085; 
0x000000000048e969: ror byte ptr [rdi], 0x94; ret; 
0x00000000004321e8: ror byte ptr [rdi], 0x94; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x000000000041ef30: ror byte ptr [rdi], 0x95; ret 0xdaf7; 
0x0000000000497814: ror byte ptr [rdi], 0x95; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000047c4fa: ror byte ptr [rdi], 0xb6; add al, 7; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004321eb: ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x00000000004561d5: ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x000000000043221f: ror byte ptr [rdi], 1; mov dh, 0x14; add dword ptr [rax + rdi - 0x3e], eax; jne 0x32210; sub rax, 0x10; ret; 
0x000000000048373f: ror byte ptr [rdi], cl; test byte ptr [rdx + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x0000000000482a7b: ror byte ptr [rdi], cl; test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x000000000044fb9b: ror byte ptr [rdi], cl; test byte ptr [rsi], bh; add byte ptr [rax], al; bsf rax, rdx; ret; 
0x00000000004af1b0: ror byte ptr [rsi - 7], cl; call qword ptr [rdx + 0x4e]; 
0x00000000004af1b0: ror byte ptr [rsi - 7], cl; call qword ptr [rdx + 0x4e]; stc; call rdx; 
0x00000000004af980: ror cl, 0xf9; jmp qword ptr [rax - 0x35]; 
0x00000000004825fa: ror dword ptr [rax + 0x21], 0xce; je 0x82730; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x00000000004946be: ror dword ptr [rax + 1], 0xf8; sub rax, r8; ret; 
0x0000000000455d68: ror dword ptr [rax + 1], 0xf8; sub rax, rsi; ret; 
0x0000000000482f29: ror dword ptr [rax + rax], cl; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x000000000044fca9: ror dword ptr [rax - 0x3f], 0xe1; and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000499f04: ror dword ptr [rax - 0x3f], cl; out dx, eax; xor byte ptr [rax - 0x77], cl; ret 0x2148; 
0x000000000047ecf6: ror dword ptr [rax - 0x75], 4; ret 0x8548; 
0x0000000000432937: ror dword ptr [rax - 0x77], 1; ret 0xaeeb; 
0x00000000004891b3: ror dword ptr [rax - 0x77], 1; ret 0xd348; 
0x0000000000475570: ror dword ptr [rax - 0x77], 1; ret 0xe7e9; 
0x000000000044fbf2: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x4fc10; bsf rax, rdx; ret; 
0x000000000044fb91: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x4fc20; bsf rax, rdx; ret; 
0x0000000000405b9f: ror dword ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000046d344: ror dword ptr [rax - 0x7d], cl; ret 0x4820; 
0x0000000000427b73: ror dword ptr [rax], 0x74; adc dword ptr [rcx], esi; rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x00000000004932fd: ror dword ptr [rbp + rcx*4 + 0x14], cl; ret; 
0x0000000000492888: ror dword ptr [rcx + rdx - 0x3e], 0x4e; mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000474f2b: ror dword ptr [rcx - 0x77], 0x14; ret 0x8b48; 
0x00000000004207db: ror dword ptr [rcx - 0x77], 0x47; and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x0000000000410ef6: ror dword ptr [rcx], 0; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000453d17: ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000043bfe8: ror dword ptr [rdi], 0x85; adc byte ptr [rdx], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000043c6f4: ror dword ptr [rdi], 0x85; add al, 3; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000043c4c6: ror dword ptr [rdi], 0x85; add eax, 0xc0310000; ret; 
0x000000000043c446: ror dword ptr [rdi], 0x85; cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0xc0310000; ret; 
0x000000000043c784: ror dword ptr [rdi], 0x85; je 0x3c78b; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000043c27b: ror dword ptr [rdi], 0x85; jno 0x3c287; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000043c343: ror dword ptr [rdi], 0x85; mov ch, 6; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000043bfc0: ror dword ptr [rdi], 0x85; sub al, 0xa; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042a120: ror dword ptr [rdi], cl; xchg dword ptr [rcx - 0x9ffffff], ecx; ret; 
0x000000000041d681: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000041d5bb: ror edx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000041d6a7: ror edx, 0x11; xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000041d680: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000041d5ba: ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000041d6a6: ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x00000000004105ce: sahf; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; jbe 0x105e6; syscall; 
0x00000000004a9ba0: sahf; add dword ptr [rax], eax; add byte ptr [rdx], cl; fdivr st(7); jmp qword ptr [rcx]; 
0x0000000000486b17: sahf; clc; jmp qword ptr [rsi + 0xf]; 
0x000000000047d76e: sahf; fdivr st(7); jmp qword ptr [rsi + 0xf]; 
0x00000000004c1932: sahf; int 0xe0; fdivr st(4); test al, 0x97; xchg eax, esp; ret; 
0x000000000044e8ae: sahf; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004c1ae5: sahf; ret 0x38ae; 
0x0000000000492bf1: sahf; ret 0x3948; 
0x000000000046b6fc: sahf; ret 0x894c; 
0x000000000049baf4: sahf; ret 0xf45; 
0x00000000004cdc7d: sahf; stc; jmp rax; 
0x000000000049f97f: sahf; sti; jmp qword ptr [rsi + 0xf]; 
0x0000000000427b7e: sal bh, 0xd8; ret; 
0x0000000000434da7: sal bh, 1; ret 0x8000; 
0x0000000000434c67: sal bh, 1; ret 0xc000; 
0x0000000000434b27: sal bh, 1; ret 0xe000; 
0x00000000004349e7: sal bh, 1; ret 0xf000; 
0x00000000004348a7: sal bh, 1; ret 0xf800; 
0x0000000000434767: sal bh, 1; ret 0xfc00; 
0x0000000000434627: sal bh, 1; ret 0xfe00; 
0x00000000004344e7: sal bh, 1; ret 0xff00; 
0x00000000004343a7: sal bh, 1; ret 0xff80; 
0x0000000000434267: sal bh, 1; ret 0xffc0; 
0x0000000000434127: sal bh, 1; ret 0xffe0; 
0x0000000000433fe7: sal bh, 1; ret 0xfff0; 
0x0000000000433ea7: sal bh, 1; ret 0xfff8; 
0x0000000000433d67: sal bh, 1; ret 0xfffc; 
0x0000000000433c27: sal bh, 1; ret 0xfffe; 
0x000000000043abaf: sal bl, 1; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000048393f: sal bl, 1; ret; 
0x000000000048e80d: sal bl, cl; ret; 
0x000000000041c71d: sal byte ptr [rax + 0x48], 0xc7; ret 0xfff0; 
0x000000000042847d: sal byte ptr [rax + rbx + 0x48], 0x8b; push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x0000000000401a75: sal byte ptr [rax + rcx - 0x77], 0xd8; pop rbx; pop rbp; pop r12; ret; 
0x0000000000428a4d: sal byte ptr [rax + rdx - 0x39], 5; jbe 0x28a57; sub eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004011af: sal byte ptr [rax], 0x61; insd dword ptr [rdi], dx; add byte ptr [rax - 0x75], cl; add byte ptr [rbx - 0x171076d8], cl; rol byte ptr [rax - 0x3f7b0000], 0x89; ret; 
0x0000000000453d21: sal byte ptr [rbp + 0x10], 0x66; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000400cca: sal byte ptr [rbp + 0x13], 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x2d7698], eax; add rsp, 8; ret; 
0x000000000048e776: sal byte ptr [rbp + 0x13], 1; mov byte ptr [rip + 0x24b0a8], 0; mov qword ptr [rip + 0x24ac89], rax; add rsp, 8; ret; 
0x0000000000458ab7: sal byte ptr [rbp + 0x16], 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000458d87: sal byte ptr [rbp + 0x16], 0xb8; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000041c8ea: sal byte ptr [rbp + 0x1f], 0x48; add esp, 0x118; ret; 
0x0000000000483fa2: sal byte ptr [rbp + 0x2b], 0x4c; mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x0000000000482de2: sal byte ptr [rbp + 0x2b], 0x4c; mov eax, eax; vzeroupper; ret; 
0x000000000045b4f8: sal byte ptr [rbp + 0x31], cl; test byte ptr [rax - 0x73], 0x3d; rcl dword ptr [rax + 5], 0; mov eax, 0x15; syscall; 
0x0000000000409680: sal byte ptr [rbp + 0x48], 0x8b; push rbx; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rbx + 0x48], cl; mov edi, eax; call rdx; 
0x000000000043a7a2: sal byte ptr [rbp + 0x4b], 0x66; pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004919ee: sal byte ptr [rbp + 0x4f], 0x89; ret; 
0x0000000000484986: sal byte ptr [rbp + 0x5d], 0xb8; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000458857: sal byte ptr [rbp + 0x61], 0x89; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000414acb: sal byte ptr [rbp + 0xa], 0x5b; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000049e8a3: sal byte ptr [rbp + 0xa], 0xf3; ret; 
0x00000000004812a8: sal byte ptr [rbp + 0xd], 0x8b; cmp rcx, qword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x0000000000400594: sal byte ptr [rbp + 1], cl; ret; 
0x0000000000494a4f: sal byte ptr [rbp + 3], cl; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000049e888: sal byte ptr [rbp + 5], 0xf3; ret; 
0x000000000045b041: sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x000000000044f9a0: sal byte ptr [rbp + rbx - 0xd], 0xf; mov esp, 0xc80148c0; add rax, rdi; vzeroupper; ret; 
0x0000000000433498: sal byte ptr [rbp + rbx*8 + 0x48], 0x29; ret; 
0x00000000004837c0: sal byte ptr [rbp + rcx + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x0000000000400aa8: sal byte ptr [rbp + rcx + 0x5d], 0xbf; adc byte ptr [rbp + rbp*2], bh; jmp rax; 
0x0000000000401160: sal byte ptr [rbp + rcx - 0x75], 0; add rsp, 8; ret; 
0x0000000000483b38: sal byte ptr [rbp + rdx - 0x78], cl; rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x00000000004096e7: sal byte ptr [rbp + rdx*8 + 0x48], 0x89; mov rdi, rsi; call rax; 
0x000000000045b051: sal byte ptr [rbp - 0x10], 0x5a; pop r10; ret; 
0x000000000042671d: sal byte ptr [rbp - 0x10], 0xf3; ret; 
0x0000000000455a50: sal byte ptr [rbp - 0x13], cl; lea rax, [rcx - 1]; ret; 
0x00000000004350cb: sal byte ptr [rbp - 0x1e], 0x31; shr byte ptr [rcx], 0xc8; ret; 
0x0000000000467d18: sal byte ptr [rbp - 0x2b], cl; mov byte ptr [rbp], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000043aaad: sal byte ptr [rbp - 0x30], 0xc5; std; xlatb; ret; 
0x00000000004902c8: sal byte ptr [rbp - 0x31], cl; movsx eax, cl; neg eax; ret; 
0x000000000043aaa5: sal byte ptr [rbp - 0x38], 0xc5; std; xlatb; ret 0xc085; 
0x00000000004b0924: sal byte ptr [rbp - 0x4a5f0006], 0xfa; inc dword ptr [rax + 0x58fffab5]; mov ch, 0xfa; push qword ptr [rax]; mov ch, 0xfa; call qword ptr [rax]; 
0x000000000044f8fd: sal byte ptr [rbp - 0x50], 0xc5; std; xlatb; ret; 
0x000000000044f8f5: sal byte ptr [rbp - 0x68], 0xc5; std; xlatb; ret 0xc085; 
0x0000000000427b3c: sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x0000000000467cb5: sal byte ptr [rbx + 0x48], 0xc7; ret 0xfff0; 
0x000000000045c306: sal byte ptr [rbx + rbp + 0x48], 0x8b; push rax; or dh, dh; ret 0x8902; 
0x000000000043ab12: sal byte ptr [rbx + rbx - 0xd], 0xf; mov esp, 0xf80148c0; add rax, rcx; vzeroupper; ret; 
0x000000000049c5f2: sal byte ptr [rbx + rcx + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x000000000040123a: sal byte ptr [rbx + rcx + 0x5b], cl; pop rbp; pop r12; ret; 
0x0000000000400aea: sal byte ptr [rbx + rcx + 0x5d], 0xbf; adc byte ptr [rbp + rbp*2], bh; jmp rax; 
0x00000000004807c2: sal byte ptr [rbx + rdi + 0x4d], 0x8b; mov ch, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0x7c60; 
0x0000000000403460: sal byte ptr [rbx + rdx + 0x48], 0xc7; ret 0xffff; 
0x000000000049a3ac: sal byte ptr [rcx + 0x3c], 0x2f; ja 0x9ac61; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x000000000040974c: sal byte ptr [rcx + 0x48], cl; mov esi, ebx; mov rdi, r12; call rdx; 
0x000000000044fbfc: sal byte ptr [rcx + rdx + 0x48], cl; bsf eax, edx; ret; 
0x00000000004af6c8: sal byte ptr [rcx - 7], cl; inc dword ptr [rdx + 0x71]; stc; call rdx; 
0x000000000045db4d: sal byte ptr [rcx], 0xc9; movzx eax, al; xor edx, edx; add eax, 1; push rax; call rbx; 
0x0000000000483228: sal byte ptr [rcx], 0xc9; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x000000000045db52: sal byte ptr [rcx], 0xd2; add eax, 1; push rax; call rbx; 
0x000000000044f8b3: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000044f8d3: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000044f911: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000044f893: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000045b026: sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x00000000004573c7: sal byte ptr [rcx], 1; shl byte ptr [rip + 0x3fffc00], cl; div ecx; pop rbx; mov eax, eax; ret; 
0x00000000004197a8: sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret 0x18; 
0x0000000000416319: sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret; 
0x0000000000482aeb: sal byte ptr [rdx + 0x48], cl; bsf eax, edx; ret; 
0x00000000004837ab: sal byte ptr [rdx + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x000000000040040d: sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000455d63: sal byte ptr [rdx + rbx*8 + 0x48], 0x63; ror dword ptr [rax + 1], 0xf8; sub rax, rsi; ret; 
0x00000000004941d2: sal byte ptr [rdx + rcx + 0x48], 0x8d; adc eax, 0x2439c4; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x000000000045bb2b: sal byte ptr [rdx + rcx + 0x48], cl; lea edi, [rcx + rax + 0x20]; jmp rdx; 
0x00000000004960eb: sal byte ptr [rdx + rcx + 0x49], cl; mov eax, dword ptr [rsp]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000044ff13: sal byte ptr [rdx + rdx + 0x48], 0xff; ret 0x2288; 
0x000000000043c86f: sal byte ptr [rdx - 0x10f0992e], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c990: sal byte ptr [rdx - 0x10f09930], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x00000000004019bb: sal byte ptr [rdx - 0x18], 0xd; or eax, dword ptr [rax]; add byte ptr [rbp + 0x480978c0], al; add esp, 0x18; ret; 
0x0000000000406465: sal byte ptr [rip - 0x763d4d52], 0xc2; shr edx, 0x10; xor eax, edx; ret; 
0x0000000000426085: sal byte ptr [rsi + 0x10], 0x48; mov eax, dword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000493d72: sal byte ptr [rsi + rcx + 0x48], 0x8d; add eax, 0x245364; mov qword ptr [rip + 0x245345], rax; add rsp, 8; ret; 
0x000000000043a657: sal byte ptr [rsi + rdx + 0xf], 0xbc; ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x00000000004aea04: sal byte ptr [rsi - 0x484f0008], 0xf8; jmp rax; 
0x0000000000409646: sal byte ptr [rsp + rax - 0x77], 0xf7; jmp rax; 
0x000000000041c711: sal byte ptr [rsp + rbp*2 + 0x48], 0x8d; pop rax; or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b79f8c], eax; ret 0xfff0; 
0x0000000000409689: sal byte ptr [rsp + rbx + 0x48], cl; mov edi, eax; call rdx; 
0x0000000000428a43: sal byte ptr [rsp + rbx*2 - 0x75], cl; add eax, 0x2b0384; test eax, eax; je 0x28a60; mov dword ptr [rip + 0x2b0376], 0; ret; 
0x0000000000494481: sal byte ptr [rsp + rcx + 0x5b], 0x5d; pop r12; ret; 
0x000000000048edc9: sal byte ptr [rsp + rsi + 0x48], 0x89; ret; 
0x0000000000409671: sal byte ptr [rsp + rsi + 0x48], cl; mov ebp, esi; mov rbx, rdi; mov edi, eax; call rdx; 
0x00000000004aed0c: sal ch, 1; clc; ljmp [rax + 0x70fff921]; and edi, ecx; call qword ptr [rax + 0x25]; 
0x00000000004af9f8: sal cl, 0xf9; call qword ptr [rax]; 
0x00000000004af9f8: sal cl, 0xf9; call qword ptr [rax]; stc; jmp qword ptr [rax - 0xc]; 
0x00000000004a2535: sal dh, cl; push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi - 0x2e]; 
0x00000000004aecc4: sal dl, 0xf8; call qword ptr [rax]; 
0x00000000004aecc4: sal dl, 0xf8; call qword ptr [rax]; hlt; clc; jmp qword ptr [rax - 0xb]; 
0x00000000004064d5: sal dword ptr [rax + rcx - 0xd], 1; ret; 
0x000000000043c7cf: sal dword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c90f: sal dword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000437b66: sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004ad210: sal eax, 0xf6; call rsp; 
0x00000000004c9f1d: sal ebp, 1; jmp qword ptr [rdi + 2]; 
0x0000000000456133: sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004902cd: sal edi, 0xd8; ret; 
0x00000000004a2585: sal esi, 1; call qword ptr [rsi]; 
0x00000000004a255d: sal esi, 1; call rsi; 
0x00000000004a257d: sal esi, 1; inc dword ptr [rsi - 0x2f]; idiv bh; sal esi, 1; call qword ptr [rsi]; 
0x00000000004a2581: sal esi, 1; ljmp [rsi]; sal esi, 1; call qword ptr [rsi]; 
0x00000000004a24e9: sal esi, cl; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x2d]; 
0x00000000004a24f5: sal esi, cl; push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi]; 
0x000000000043c7ce: sal qword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c90e: sal qword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004cc935: sar al, 1; call rsi; 
0x00000000004586c3: sar bh, 0xff; dec dword ptr [rax - 0x39]; ret 0xffff; 
0x0000000000411d40: sar bh, 0xff; dec dword ptr [rax - 0x39]; ret; 
0x0000000000420fdb: sar bh, 0xff; inc dword ptr [rbx + 0x178920ca]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000424a43: sar bh, 0xff; inc dword ptr [rbx + 0xf8920c9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000048f153: sar bh, 0xff; lcall [rbx + 0x64]; mov eax, dword ptr [rax]; ret; 
0x00000000004939f0: sar bh, 0xff; mov eax, 1; ret; 
0x0000000000458713: sar bh, 0xff; push rdi; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000004587a3: sar bh, 0xff; push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000458a53: sar bh, 0xff; push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x00000000004939ad: sar bh, 0xff; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000407dd5: sar byte ptr [rax + 0x10], 0x48; add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000421d37: sar byte ptr [rax + 0x36], 0x48; mov dword ptr [rbx + 0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000411572: sar byte ptr [rax + 0x5b], 0x85; ror byte ptr [rdi], 0x84; ret; 
0x000000000040195a: sar byte ptr [rax + 0xb], 0x48; add esp, 8; ret; 
0x000000000048b091: sar byte ptr [rax + 0xe], 0x5b; ret; 
0x0000000000401cb7: sar byte ptr [rax + 6], 0xf3; ret; 
0x0000000000407e25: sar byte ptr [rax + 8], 0x48; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004018e4: sar byte ptr [rax + 9], 0x48; add esp, 0x18; ret; 
0x0000000000459652: sar byte ptr [rax - 0x21], 0x48; add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000004d1a6c: sar byte ptr [rax - 0x7bb00000], 1; cld; call qword ptr [rdx]; 
0x000000000040ccdb: sar byte ptr [rax], 0x48; cmovne ebx, eax; mov rax, rbx; pop rbx; ret; 
0x000000000046cbec: sar byte ptr [rax], 1; stc; dec dword ptr [rax + 0x29]; ret; 
0x00000000004afa8c: sar byte ptr [rbx], 1; cli; inc eax; cli; call rax; 
0x000000000040a3db: sar byte ptr [rcx + 9], 0; ret; 
0x00000000004af968: sar byte ptr [rcx + rdi*8 - 0x6413f01], 0xff; rol al, 0xf9; inc eax; ret 0xfff9; 
0x0000000000455d0e: sar byte ptr [rcx], 0xc8; jle 0x55d48; movsxd rax, ecx; ret; 
0x00000000004afa38: sar byte ptr [rcx], 0xfa; call rax; 
0x00000000004afa38: sar byte ptr [rcx], 0xfa; call rax; cmp edx, edi; jmp rax; 
0x00000000004afa3c: sar byte ptr [rcx], 1; cli; jmp rax; 
0x000000000045c88d: sar byte ptr [rcx], cl; ret; 
0x0000000000401a14: sar byte ptr [rdi - 0x16], 0x74; or al, 0x89; clc; add rsp, 0x18; ret; 
0x00000000004afac0: sar byte ptr [rdi], 0xfa; jmp rax; 
0x000000000044f315: sar byte ptr [rdx], 0x48; lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004afa6c: sar byte ptr [rdx], 1; cli; push rax; cmp bh, dl; call qword ptr [rax]; 
0x000000000040cc8b: sar byte ptr [rip + 0x649], 1; ja 0xcca8; lea rdx, [rip + 0x957de]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004c235d: sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xc23d7; mov ebp, 0xfb67d10d; ret; 
0x0000000000467a61: sar byte ptr [rsi + 8], 0x83; call 0x84a036b; pop rbx; ret; 
0x00000000004c247f: sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000004af96c: sar byte ptr [rsi - 0x3f3f0007], 0xf9; inc eax; ret 0xfff9; 
0x00000000004024a2: sar byte ptr [rsi - 0x3fe7deff], 0xe8; ret; 
0x00000000004af3f0: sar byte ptr [rsi - 7], 0xff; push rax; jle 0xaf3f0; jmp rax; 
0x00000000004af5ec: sar byte ptr [rsi - 7], 1; jmp qword ptr [rax + 0x7e]; 
0x00000000004ce05c: sar byte ptr [rsi], 0; nop; ret; 
0x00000000004afa90: sar byte ptr [rsi], 0xfa; call rax; 
0x00000000004afa90: sar byte ptr [rsi], 0xfa; call rax; cli; jmp rax; 
0x00000000004ae820: sar byte ptr [rsi], 1; clc; push rax; clc; jmp qword ptr [rax]; 
0x00000000004afa94: sar byte ptr [rsi], 1; cli; jmp rax; 
0x0000000000447ca7: sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x000000000049c802: sar ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004af991: sar cl, 1; jmp rax; 
0x0000000000447665: sar dword ptr [rax + rcx*2 + 0x11], 1; imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000044766c: sar dword ptr [rax + rcx*2 + 0x11], 1; jno 0x47670; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000447673: sar dword ptr [rax + rcx*2 + 0x11], 1; jns 0x47678; ret; 
0x0000000000457362: sar dword ptr [rax], 1; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x0000000000456d28: sar dword ptr [rbp + 0x48], 1; out 0x49, eax; jmp qword ptr [rdx - 0x2f]; 
0x0000000000493a8a: sar dword ptr [rdi - 0x76b30001], 1; or byte ptr [r9 + r13 - 0x30], r8b; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000456649: sar dword ptr [rsi + 0x7f], 0x23; vzeroupper; ret; 
0x000000000049b3fc: sar dword ptr [rsi + rbp*8], cl; ja 0x9b519; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000040246d: sar eax, 0x1f; add rsp, 8; and eax, 0xffffff83; ret; 
0x00000000004097b5: sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x00000000004024f4: sar eax, 0x1f; and eax, 0xfffffffe; add rsp, 0x18; ret; 
0x000000000049c598: sar eax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000048102c: sar eax, 2; lea eax, [r8 - 1]; ret; 
0x000000000042046f: sar eax, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x0000000000497aae: sar eax, 3; pop rbp; pop r12; pop r13; ret; 
0x000000000043ad01: sar eax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000456b89: sar ebp, 1; jg 0x56bd7; jmp qword ptr [rdx - 0x2f]; 
0x00000000004a0e63: sar ebx, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004c21e3: sar ecx, 1; jnp 0xc21a0; ret; 
0x00000000004af999: sar ecx, cl; jmp qword ptr [rax]; 
0x00000000004063c2: sar edi, cl; jmp qword ptr [rsi + 0x2e]; 
0x00000000004789a5: sar edx, 2; call qword ptr [rbx + 0x38]; 
0x0000000000481132: sar edx, 2; sub eax, edx; ret; 
0x000000000043ad07: sar edx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000044fbf8: sar edx, cl; test rdx, rdx; je 0x4fc10; bsf rax, rdx; ret; 
0x000000000044fb97: sar edx, cl; test rdx, rdx; je 0x4fc20; bsf rax, rdx; ret; 
0x0000000000482ae7: sar edx, cl; test rdx, rdx; je 0x82b10; bsf rax, rdx; ret; 
0x0000000000482a77: sar edx, cl; test rdx, rdx; je 0x82b20; bsf rax, rdx; ret; 
0x00000000004837a7: sar edx, cl; test rdx, rdx; je 0x837d0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000048373b: sar edx, cl; test rdx, rdx; je 0x837e0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000456b03: sar esi, 1; jg 0x56b2b; vzeroupper; ret; 
0x0000000000456c9c: sar esi, 1; jg 0x56cc4; vzeroupper; ret; 
0x000000000047ac91: sar esi, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x00000000004bf83d: sar esp, 1; call qword ptr [rbx - 0x38]; 
0x00000000004bf895: sar esp, 1; dec dword ptr [rax - 0x38]; cld; jmp rax; 
0x000000000047ac90: sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000048102b: sar r8, 2; lea eax, [r8 - 1]; ret; 
0x000000000042046e: sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000049c597: sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000497aad: sar rax, 3; pop rbp; pop r12; pop r13; ret; 
0x000000000043ad00: sar rax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x00000000004789a4: sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x0000000000481131: sar rdx, 2; sub eax, edx; ret; 
0x000000000043ad06: sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000044fbf7: sar rdx, cl; test rdx, rdx; je 0x4fc10; bsf rax, rdx; ret; 
0x000000000044fb96: sar rdx, cl; test rdx, rdx; je 0x4fc20; bsf rax, rdx; ret; 
0x0000000000482ae6: sar rdx, cl; test rdx, rdx; je 0x82b10; bsf rax, rdx; ret; 
0x0000000000482a76: sar rdx, cl; test rdx, rdx; je 0x82b20; bsf rax, rdx; ret; 
0x00000000004837a6: sar rdx, cl; test rdx, rdx; je 0x837d0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000048373a: sar rdx, cl; test rdx, rdx; je 0x837e0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000499ab1: sbb ah, bh; jmp qword ptr [rsi - 0x70]; 
0x0000000000472b25: sbb ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x00000000004ce070: sbb al, 0; add byte ptr [rax], al; fdivr dword ptr [rsi]; add al, bl; ret; 
0x00000000004d1220: sbb al, 0; add byte ptr [rax], al; mov byte ptr [rax + 0x33480000], dh; cld; call qword ptr [rdi]; 
0x00000000004aac44: sbb al, 0; add byte ptr [rax], al; ret 0; 
0x00000000004aac40: sbb al, 0; add byte ptr [rax], al; sbb al, 0; add byte ptr [rax], al; ret 0; 
0x00000000004ccd18: sbb al, 0; add byte ptr [rax], al; sub byte ptr [rbx], 0; and dh, ah; clc; jmp qword ptr [rcx]; 
0x00000000004598b1: sbb al, 0; add byte ptr [rax], al; syscall; 
0x00000000004598b1: sbb al, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x598c0; ret; 
0x0000000000475f9d: sbb al, 0x29; ret 0xe683; 
0x00000000004ca1b8: sbb al, 0x40; add byte ptr [rax], al; xor al, 0xd9; cmc; call qword ptr [rdi]; 
0x00000000004cd6e4: sbb al, 0x41; stc; call rcx; 
0x000000000040968b: sbb al, 0x48; mov edi, eax; call rdx; 
0x0000000000484a08: sbb al, 0x48; mov esi, dword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000476ed7: sbb al, 0x85; ror byte ptr [rdi], 0x8f; ret 7; 
0x00000000004058cd: sbb al, 0x89; ret; 
0x00000000004cc024: sbb al, 0xa4; clc; call rsp; 
0x00000000004c7284: sbb al, 0xb; hlt; call qword ptr [rax]; 
0x000000000048a9bf: sbb al, 0xba; add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x00000000004ca404: sbb al, 0xe0; cmc; call qword ptr [rbx]; 
0x000000000049ac63: sbb al, 0xf8; jmp qword ptr [rsi + 0x2e]; 
0x00000000004aeec9: sbb al, 0xf9; jmp rax; 
0x00000000004aee89: sbb al, 0xf9; push qword ptr [rax + 0x1d]; stc; push qword ptr [rax - 0x7f0006f8]; or edi, ecx; call rax; 
0x00000000004d0e35: sbb al, 0xfc; jmp qword ptr [rdx + 5]; 
0x00000000004ab9b0: sbb al, 1; add byte ptr [rax], al; movabs eax, dword ptr [0x8ffffd808000001]; fdivr st(7); jmp qword ptr [rcx + 0x8000001]; 
0x000000000043ce89: sbb al, 7; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000041cd42: sbb al, 7; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000048f01f: sbb al, bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000473606: sbb al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000415bf3: sbb al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x000000000046dc3a: sbb al, byte ptr [rcx]; add byte ptr [rax + 0x39], cl; ret; 
0x00000000004a7568: sbb al, byte ptr [rdi]; add byte ptr [rax], al; ret; 
0x000000000043d0c4: sbb al, byte ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000486b11: sbb al, byte ptr [rip + 0x6e80000]; sahf; clc; jmp qword ptr [rsi + 0xf]; 
0x00000000004790ab: sbb al, byte ptr fs:[rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000468634: sbb al, ch; outsb dx, byte ptr ss:[rsi]; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000419d88: sbb al, ch; ret 0xffaf; 
0x000000000042eb8a: sbb bh, byte ptr [rbp + 0x2a]; add byte ptr [rax - 0x73], cl; add eax, 0xfffff57b; mov qword ptr [rip + 0x2a7d04], rax; ret; 
0x00000000004aee85: sbb bh, cl; jmp qword ptr [rax]; 
0x00000000004d02f8: sbb bh, cl; sti; jmp qword ptr [rsi + 5]; 
0x00000000004a18d8: sbb bh, dh; cmc; dec dword ptr [rax - 0x7000a0b]; cmc; cmc; call qword ptr [rax]; 
0x00000000004ce018: sbb bl, al; stc; call qword ptr [rcx]; 
0x00000000004c0f65: sbb bl, byte ptr [rsi]; ret; 
0x0000000000453c1a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000045356a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000453bdb: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000045352b: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000400c89: sbb bl, dh; ret; 
0x0000000000453c19: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000453569: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000453bda: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000045352a: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000004259bf: sbb byte ptr [r11 + 0x480c2474], cl; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000406aa4: sbb byte ptr [r11 - 0x57ce7ba], r9b; add dword ptr [rsi + 0xa], esi; cmp ecx, eax; setb al; ret; 
0x00000000004064ec: sbb byte ptr [r13 - 0x18], r14b; mov eax, dword ptr [rsi + 0x14]; cmp dword ptr [rdi + 0x14], eax; sete al; ret; 
0x0000000000491014: sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000425860: sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000409642: sbb byte ptr [r8 - 0x7b], r9b; sal byte ptr [rsp + rax - 0x77], 0xf7; jmp rax; 
0x0000000000494fb4: sbb byte ptr [r8], al; add byte ptr [rax], al; add bl, ch; ret; 
0x00000000004801b9: sbb byte ptr [r9 + rcx*4 - 0x1a], r8b; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x00000000004207d3: sbb byte ptr [r9 - 0x77], r9b; sub byte ptr [r8 + 1], r9b; ror dword ptr [rcx - 0x77], 0x47; and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x00000000004940b9: sbb byte ptr [r9], sil; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x0000000000484a11: sbb byte ptr [rax + 0x101], bh; syscall; 
0x000000000048d671: sbb byte ptr [rax + 0x29], cl; ret 0x394c; 
0x000000000046d494: sbb byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000428511: sbb byte ptr [rax + 0x39], cl; ret; 
0x0000000000491015: sbb byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x00000000004789b2: sbb byte ptr [rax - 0x3f], cl; cli; add cl, byte ptr [rax + 0x39]; ret 0x850f; 
0x0000000000458cfd: sbb byte ptr [rax - 0x73], cl; and al, 0x30; mov qword ptr [rsp + 0x20], rax; je 0x58d30; mov eax, 0x48; syscall; 
0x0000000000420d70: sbb byte ptr [rax - 0x73], cl; ja 0x20dcd; mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000004264a7: sbb byte ptr [rax - 0x75], cl; add rsp, 0x20; mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x000000000041d5b3: sbb byte ptr [rax - 0x75], cl; jo 0x1d5d8; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000425829: sbb byte ptr [rax - 0x75], cl; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000049d0fa: sbb byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret; 
0x000000000042847f: sbb byte ptr [rax - 0x75], cl; push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x00000000004919f7: sbb byte ptr [rax - 0x75], cl; push rsp; and al, 0x10; call rdx; 
0x0000000000425859: sbb byte ptr [rax - 0x77], cl; adc byte ptr [r8 - 0x77], r9b; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x000000000048449b: sbb byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000042e785: sbb byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x5d]; jmp rax; 
0x0000000000483570: sbb byte ptr [rax - 0x77], cl; out dx, eax; mov r9, r14; call rbx; 
0x000000000048edec: sbb byte ptr [rax - 0x77], cl; push rbx; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000425861: sbb byte ptr [rax - 0x77], cl; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x00000000004294bb: sbb byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x000000000040695b: sbb byte ptr [rax - 0x7b], cl; push qword ptr [rbp - 0x19]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000428cd3: sbb byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x0000000000409643: sbb byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rax - 0x77], 0xf7; jmp rax; 
0x000000000040966e: sbb byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rsi + 0x48], cl; mov ebp, esi; mov rbx, rdi; mov edi, eax; call rdx; 
0x000000000042c028: sbb byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x00000000004212a0: sbb byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000494fb5: sbb byte ptr [rax], al; add byte ptr [rax], al; add bl, ch; ret; 
0x00000000004ca180: sbb byte ptr [rax], al; add byte ptr [rax], al; call 0xffffffffb80ca1c8; fdiv st(5); jmp qword ptr [rax]; 
0x00000000004cf020: sbb byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rsi + 0x1e480000], cl; sti; jmp qword ptr [rbx]; 
0x0000000000458701: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000458701: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x58710; ret; 
0x000000000041923a: sbb byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x000000000046ff0b: sbb byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 9], cl; mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x00000000004c71b4: sbb byte ptr [rax], dl; add byte ptr [rax], al; cmp byte ptr [rax], cl; hlt; jmp qword ptr [rsi + 1]; 
0x00000000004064ed: sbb byte ptr [rbp - 0x18], dh; mov eax, dword ptr [rsi + 0x14]; cmp dword ptr [rdi + 0x14], eax; sete al; ret; 
0x00000000004259c0: sbb byte ptr [rbx + 0x480c2474], cl; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000499b75: sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000042edb0: sbb byte ptr [rbx + 0x5d], bl; jmp rax; 
0x000000000045c66c: sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000401523: sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000406aa8: sbb byte ptr [rbx + 0xa7601fa], al; cmp ecx, eax; setb al; ret; 
0x0000000000406aa7: sbb byte ptr [rbx + 0xa7601fa], r8b; cmp ecx, eax; setb al; ret; 
0x0000000000408c41: sbb byte ptr [rbx + r9*4 + 0x2c], r9b; ret 0x8548; 
0x0000000000408c42: sbb byte ptr [rbx + rcx*4 + 0x2c], cl; ret 0x8548; 
0x00000000004d04b4: sbb byte ptr [rbx - 0x1d080000], ah; sti; jmp qword ptr [rdx]; 
0x00000000004276f7: sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000406aa5: sbb byte ptr [rbx - 0x57ce7ba], cl; add dword ptr [rsi + 0xa], esi; cmp ecx, eax; setb al; ret; 
0x0000000000499f01: sbb byte ptr [rcx + 0x21], cl; ror dword ptr [rax - 0x3f], cl; out dx, eax; xor byte ptr [rax - 0x77], cl; ret 0x2148; 
0x0000000000409fc0: sbb byte ptr [rcx + 0x415d5be8], cl; pop rsp; pop r13; ret; 
0x0000000000480e4a: sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x00000000004c9838: sbb byte ptr [rcx + 0xe], al; adc byte ptr [rdx + 0xe], al; or byte ptr [rax + 0xb], cl; add dh, byte ptr [rbx + 0xa]; ret; 
0x0000000000428bee: sbb byte ptr [rcx + 1], cl; ret 0x8d48; 
0x0000000000494c49: sbb byte ptr [rcx + rcx*4 - 0x18], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000048135e: sbb byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x00000000004801ba: sbb byte ptr [rcx + rcx*4 - 0x1a], al; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000047e406: sbb byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000049f3ef: sbb byte ptr [rcx + rdi + 0x6d], cl; js 0x9f46c; ret 0x8b48; 
0x0000000000408e4a: sbb byte ptr [rcx - 0x39], cl; ret 0xffff; 
0x000000000046d47b: sbb byte ptr [rcx - 0x75], cl; push rdi; and byte ptr [rax - 0x75], cl; mov ebp, 0xfffff758; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000463648: sbb byte ptr [rcx - 0x77], al; ret; 
0x0000000000497be7: sbb byte ptr [rcx - 0x77], cl; ret 0x8d48; 
0x00000000004207d4: sbb byte ptr [rcx - 0x77], cl; sub byte ptr [r8 + 1], r9b; ror dword ptr [rcx - 0x77], 0x47; and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x00000000004aee80: sbb byte ptr [rcx], 0xf9; call rax; 
0x00000000004aee80: sbb byte ptr [rcx], 0xf9; call rax; sbb bh, cl; jmp qword ptr [rax]; 
0x000000000046dea4: sbb byte ptr [rcx], al; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000471b1f: sbb byte ptr [rcx], al; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret; 
0x000000000041c8f0: sbb byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x00000000004064ea: sbb byte ptr [rcx], bh; sbb byte ptr [r13 - 0x18], r14b; mov eax, dword ptr [rsi + 0x14]; cmp dword ptr [rdi + 0x14], eax; sete al; ret; 
0x0000000000421284: sbb byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x000000000042e7d3: sbb byte ptr [rcx], dh; ror byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x00000000004940ba: sbb byte ptr [rcx], dh; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x00000000004064e9: sbb byte ptr [rcx], r15b; sbb byte ptr [r13 - 0x18], r14b; mov eax, dword ptr [rsi + 0x14]; cmp dword ptr [rdi + 0x14], eax; sete al; ret; 
0x000000000045b493: sbb byte ptr [rdi + 0x10], dh; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000045b492: sbb byte ptr [rdi + 0x10], sil; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000045b4c1: sbb byte ptr [rdi - 0x1e], bh; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000045b4c0: sbb byte ptr [rdi - 0x1e], dil; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x00000000004cc8b4: sbb byte ptr [rdi], ah; add al, bh; iretd; clc; jmp qword ptr [rcx]; 
0x000000000043d2c6: sbb byte ptr [rdi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004d03b4: sbb byte ptr [rdx - 0x29680000], ah; sti; jmp qword ptr [rsi]; 
0x000000000049649b: sbb byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000040c114: sbb byte ptr [rdx], cl; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xffffff94; ret; 
0x0000000000458c31: sbb byte ptr [rsi + 0x10], bh; mov eax, 0x48; syscall; 
0x0000000000480e02: sbb byte ptr [rsi + 0x1f], dh; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004c7424: sbb byte ptr [rsi + 0x200e4103], al; add dword ptr [rdx + rax], 0x47; ret; 
0x00000000004802d7: sbb byte ptr [rsi + 0x24], dh; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000048109f: sbb byte ptr [rsi + 0x24], dh; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000048109e: sbb byte ptr [rsi + 0x24], sil; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000480487: sbb byte ptr [rsi + 0x28], dh; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004d17b4: sbb byte ptr [rsi + 0x62280000], dh; cld; jmp qword ptr [rcx]; 
0x00000000004097b2: sbb byte ptr [rsi + 0xb], dh; sar eax, 0x1f; and eax, 0xffffffdf; ret; 
0x00000000004c87b4: sbb byte ptr [rsi], ah; add byte ptr [rax], al; or byte ptr [rax - 0xb], dl; jmp qword ptr [rax]; 
0x000000000046d629: sbb byte ptr [rsi], dl; add byte ptr [rax], al; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x0000000000471b1e: sbb byte ptr cs:[rcx], al; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret; 
0x00000000004aeb44: sbb ch, 0xf8; jmp qword ptr [rax]; 
0x00000000004aee7d: sbb cl, bh; inc dword ptr [rax - 0x2f0006e7]; sbb bh, cl; jmp qword ptr [rax]; 
0x000000000042d09d: sbb cl, byte ptr [rax + 0x29480614]; ror byte ptr [rax + 0x39], 1; ret; 
0x0000000000466dcd: sbb cl, byte ptr [rdi]; mov bh, 0x47; or cl, byte ptr [rax + 0x39]; ret 0x1176; 
0x000000000045fdfa: sbb cl, byte ptr [rdi]; mov esi, 0x48891b52; push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000044cffd: sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044ec4a: sbb cl, byte ptr [rdi]; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000044e46a: sbb cl, byte ptr [rdi]; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000044e85a: sbb cl, byte ptr [rdi]; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044e07a: sbb cl, byte ptr [rdi]; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044db5d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044d33d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000044cb1d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000044e219: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044d67d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044ce5d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044c63d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000044d81d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000044e70a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044df2a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044f03a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044c97d: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044cab3: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d7b3: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d2d3: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044e60b: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044ef3b: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044daf3: sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044cdf3: sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000044c913: sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d613: sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000044e75b: sbb cl, byte ptr [rdi]; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044df7b: sbb cl, byte ptr [rdi]; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004ccd08: sbb dh, ah; clc; call qword ptr [rdx]; 
0x000000000049d425: sbb dh, bl; ret; 
0x0000000000470582: sbb dh, byte ptr [rax]; add byte ptr es:[rax - 0x75], cl; add al, 0xc7; jmp rax; 
0x00000000004af7cc: sbb dh, byte ptr [rcx - 7]; ljmp [rdx + 0x50fff970]; js 0xaf7d0; call rax; 
0x0000000000400590: sbb dl, 0; test dl, dl; jne 0x598; ret; 
0x00000000004af0c4: sbb dl, byte ptr [rsi - 7]; ljmp [rdx + 0x3afff955]; push rbp; stc; jmp rax; 
0x000000000047c2f0: sbb dword ptr [r8], r8d; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x00000000004105c5: sbb dword ptr [rax - 0x77], ecx; or byte ptr [rax - 0x77], r9b; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000049d319: sbb dword ptr [rax - 0x7d], ecx; ret 0x8001; 
0x0000000000497a8b: sbb dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000479145: sbb dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; test dword ptr [rax], esi; idiv edi; dec dword ptr [rax - 0x39]; ret 0x7c60; 
0x000000000045af64: sbb dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000045af64: sbb dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x5af73; ret; 
0x000000000047c2f1: sbb dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000409596: sbb dword ptr [rbx + 0xc7502f8], eax; lea eax, [rsi*8 + 0x14]; ret; 
0x0000000000470989: sbb dword ptr [rbx - 0x52743], eax; call qword ptr [rax]; 
0x00000000004c381d: sbb dword ptr [rbx], edx; mov ch, 0x99; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x000000000045fdf3: sbb dword ptr [rcx - 0x41f0b3b8], ecx; sbb cl, byte ptr [rdi]; mov esi, 0x48891b52; push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000046bba3: sbb dword ptr [rcx - 7], ecx; dec dword ptr [rbp - 0x7b]; dec dword ptr [rax - 0x77]; ret; 
0x000000000043df33: sbb dword ptr [rdi + rax], ecx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d176: sbb dword ptr [rdi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000046dda4: sbb dword ptr [rdi], ecx; add byte ptr [rax], al; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000043cdc9: sbb dword ptr [rip + 0x63490007], 0x14; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004581c5: sbb dword ptr [rsi + 0x2e], esp; nop dword ptr [rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x00000000004b01e4: sbb dword ptr [rsi - 0x7a490006], eax; cli; inc eax; test edx, edi; jmp rcx; 
0x0000000000455727: sbb eax, -1; ret; 
0x000000000049c472: sbb eax, 0x18c48348; ret; 
0x000000000049f4b0: sbb eax, 0x23989b; jne 0x9f498; pop rbx; ret; 
0x0000000000400e53: sbb eax, 0x2d7518; xor eax, eax; pop rbx; ret; 
0x0000000000444525: sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444520: sbb eax, 0x477f0ff3; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000403ad7: sbb eax, 0x48c48348; ret; 
0x0000000000453937: sbb eax, 0x5c154; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453902: sbb eax, 0x5c189; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004538d6: sbb eax, 0x5c1b5; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004538c0: sbb eax, 0x5c1cb; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045389e: sbb eax, 0x5c1ed; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453879: sbb eax, 0x5c212; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045385c: sbb eax, 0x5c22f; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453804: sbb eax, 0x5c287; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453317: sbb eax, 0x5c6f4; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004532e2: sbb eax, 0x5c729; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004532b6: sbb eax, 0x5c755; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004532a0: sbb eax, 0x5c76b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045327e: sbb eax, 0x5c78d; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000453259: sbb eax, 0x5c7b2; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045323c: sbb eax, 0x5c7cf; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004531e4: sbb eax, 0x5c827; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043cd60: sbb eax, 0x63490007; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000446693: sbb eax, 0x68d38; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000446335: sbb eax, 0x69096; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004464e0: sbb eax, 0x6912b; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004461b5: sbb eax, 0x69216; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000446278: sbb eax, 0x69393; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000446035: sbb eax, 0x69396; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004460f8: sbb eax, 0x69513; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445eb5: sbb eax, 0x69516; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445f78: sbb eax, 0x69693; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445d35: sbb eax, 0x69696; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445df9: sbb eax, 0x69812; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445bb5: sbb eax, 0x69816; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445c78: sbb eax, 0x69993; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445a35: sbb eax, 0x69996; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445af8: sbb eax, 0x69b13; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004458b5: sbb eax, 0x69b16; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445978: sbb eax, 0x69c93; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445735: sbb eax, 0x69c96; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004457f8: sbb eax, 0x69e13; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004455b5: sbb eax, 0x69e16; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445678: sbb eax, 0x69f93; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445435: sbb eax, 0x69f96; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004454f8: sbb eax, 0x6a113; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004452b5: sbb eax, 0x6a116; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445378: sbb eax, 0x6a293; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445135: sbb eax, 0x6a296; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004451f8: sbb eax, 0x6a413; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444fb5: sbb eax, 0x6a416; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445078: sbb eax, 0x6a593; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444e35: sbb eax, 0x6a596; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444cbc: sbb eax, 0x6a70f; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444ef8: sbb eax, 0x6a713; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444d78: sbb eax, 0x6a893; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444abd: sbb eax, 0x6a90e; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444c3b: sbb eax, 0x6a9d0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444adf: sbb eax, 0x6ab2c; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443b7f: sbb eax, 0x6b34c; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443855: sbb eax, 0x6b676; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004439ec: sbb eax, 0x6b71f; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004436d5: sbb eax, 0x6b7f6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443798: sbb eax, 0x6b973; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443555: sbb eax, 0x6b976; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443618: sbb eax, 0x6baf3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004433d5: sbb eax, 0x6baf6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443498: sbb eax, 0x6bc73; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443255: sbb eax, 0x6bc76; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443319: sbb eax, 0x6bdf2; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004430d5: sbb eax, 0x6bdf6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443198: sbb eax, 0x6bf73; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442f55: sbb eax, 0x6bf76; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443018: sbb eax, 0x6c0f3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442dd5: sbb eax, 0x6c0f6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442e98: sbb eax, 0x6c273; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442c55: sbb eax, 0x6c276; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442d18: sbb eax, 0x6c3f3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442ad5: sbb eax, 0x6c3f6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442b98: sbb eax, 0x6c573; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442955: sbb eax, 0x6c576; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442a18: sbb eax, 0x6c6f3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004427d5: sbb eax, 0x6c6f6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442898: sbb eax, 0x6c873; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442655: sbb eax, 0x6c876; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442718: sbb eax, 0x6c9f3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004424d5: sbb eax, 0x6c9f6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442598: sbb eax, 0x6cb73; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442355: sbb eax, 0x6cb76; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004421dc: sbb eax, 0x6ccef; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442418: sbb eax, 0x6ccf3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441f86: sbb eax, 0x6cd85; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441ec9: sbb eax, 0x6ce42; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442298: sbb eax, 0x6ce73; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441ffc: sbb eax, 0x6cecf; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441dde: sbb eax, 0x6cf2d; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044215b: sbb eax, 0x6cfb0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441d13: sbb eax, 0x6cff8; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441fe9: sbb eax, 0x6d122; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440cf2: sbb eax, 0x6e019; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440c54: sbb eax, 0x6e0b7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440ba2: sbb eax, 0x6e169; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440b04: sbb eax, 0x6e207; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440a52: sbb eax, 0x6e2b9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004409b4: sbb eax, 0x6e357; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440902: sbb eax, 0x6e409; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440864: sbb eax, 0x6e4a7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004407b2: sbb eax, 0x6e559; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440714: sbb eax, 0x6e5f7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440662: sbb eax, 0x6e6a9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004405c4: sbb eax, 0x6e747; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440512: sbb eax, 0x6e7f9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440474: sbb eax, 0x6e897; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004403c2: sbb eax, 0x6e949; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440329: sbb eax, 0x6e9e2; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440272: sbb eax, 0x6ea99; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004401d4: sbb eax, 0x6eb37; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440122: sbb eax, 0x6ebe9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440084: sbb eax, 0x6ec87; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ffd2: sbb eax, 0x6ed39; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ff34: sbb eax, 0x6edd7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fe82: sbb eax, 0x6ee89; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fde4: sbb eax, 0x6ef27; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fd32: sbb eax, 0x6efd9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fc94: sbb eax, 0x6f077; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fbe2: sbb eax, 0x6f129; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fb44: sbb eax, 0x6f1c7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fa92: sbb eax, 0x6f279; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f9f4: sbb eax, 0x6f317; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f948: sbb eax, 0x6f3c3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f857: sbb eax, 0x6f4b4; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f798: sbb eax, 0x6f573; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f72e: sbb eax, 0x6f5dd; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f63f: sbb eax, 0x6f6cc; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f405: sbb eax, 0x6f746; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f57a: sbb eax, 0x6f791; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f32b: sbb eax, 0x6f820; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e322: sbb eax, 0x70829; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e284: sbb eax, 0x708c7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e1d2: sbb eax, 0x70979; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e134: sbb eax, 0x70a17; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043e082: sbb eax, 0x70ac9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dfe4: sbb eax, 0x70b67; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043df32: sbb eax, 0x70c19; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043de94: sbb eax, 0x70cb7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dde2: sbb eax, 0x70d69; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dd44: sbb eax, 0x70e07; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dc92: sbb eax, 0x70eb9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043dbf4: sbb eax, 0x70f57; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043db42: sbb eax, 0x71009; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043daa4: sbb eax, 0x710a7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d9f2: sbb eax, 0x71159; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d959: sbb eax, 0x711f2; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d8a2: sbb eax, 0x712a9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d804: sbb eax, 0x71347; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d752: sbb eax, 0x713f9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d6b4: sbb eax, 0x71497; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d602: sbb eax, 0x71549; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d564: sbb eax, 0x715e7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d4b2: sbb eax, 0x71699; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d414: sbb eax, 0x71737; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d362: sbb eax, 0x717e9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d2c4: sbb eax, 0x71887; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d212: sbb eax, 0x71939; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d174: sbb eax, 0x719d7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d0c2: sbb eax, 0x71a89; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d024: sbb eax, 0x71b27; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cf78: sbb eax, 0x71bd3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ce87: sbb eax, 0x71cc4; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cdc8: sbb eax, 0x71d83; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cd5e: sbb eax, 0x71ded; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cc6f: sbb eax, 0x71edc; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cbaa: sbb eax, 0x71fa1; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043be65: sbb eax, 0x72ba6; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bdeb: sbb eax, 0x72c20; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bd5c: sbb eax, 0x72caf; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bb51: sbb eax, 0x72eba; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043ba1f: sbb eax, 0x72fec; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b959: sbb eax, 0x730b2; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b8db: sbb eax, 0x73130; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b844: sbb eax, 0x731c7; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b648: sbb eax, 0x733c3; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b517: sbb eax, 0x734f4; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b408: sbb eax, 0x73603; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000004c7f7d: sbb eax, 0x88200000; hlt; call qword ptr [rcx]; 
0x00000000004c7f95: sbb eax, 0x88280000; hlt; call qword ptr [rbx + 1]; 
0x00000000004aee8d: sbb eax, 0x8b0fff9; stc; inc dword ptr [rax - 0x2f0006f5]; or al, 0xf9; jmp qword ptr [rax]; 
0x000000000047b049: sbb eax, 0x8b410000; add byte ptr [r11 - 0x78f0d008], r8b; mov esi, 0x8900002b; ret 0x349; 
0x0000000000433722: sbb eax, 0x8d48c085; adc eax, 0x23834; lea rax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x000000000044f9a2: sbb eax, 0xc0bc0ff3; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x00000000004784bc: sbb eax, 0xe81ffec1; ret; 
0x0000000000423a41: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000046d322: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x000000000041696a: sbb eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fe02], al; ret 0x1b; 
0x000000000043cf7a: sbb eax, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004076f1: sbb eax, eax; and eax, 0xffffffea; ret; 
0x0000000000491b5a: sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x000000000043b167: sbb eax, eax; or eax, 1; ret; 
0x0000000000455725: sbb eax, eax; sbb eax, -1; ret; 
0x000000000049c4f4: sbb ecx, dword ptr [rax - 0x73]; adc eax, 0x23cd04; cmp byte ptr [rdx + rsi], 8; jne 0x9c51c; mov rax, qword ptr [rax]; ret; 
0x0000000000481df9: sbb ecx, dword ptr [rbp + 0x29]; ret 0x8948; 
0x000000000045fdfe: sbb ecx, dword ptr [rcx + 0x50895048]; push rsp; ret; 
0x0000000000412bcd: sbb ecx, dword ptr [rcx - 0x7d]; ret; 
0x00000000004aee81: sbb ecx, edi; call rax; 
0x00000000004aee81: sbb ecx, edi; call rax; sbb bh, cl; jmp qword ptr [rax]; 
0x0000000000493761: sbb edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000043ab14: sbb esi, ebx; bsf eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x0000000000432c32: sbb esp, dword ptr [rdx + 0x2a]; add byte ptr [rax], dl; lea rdx, [rip + 0x23042]; lea rax, [rip + 0x22f9b]; cmovne rax, rdx; ret; 
0x00000000004c74a9: sbb esp, esi; jmp qword ptr [rcx + 2]; 
0x000000000045fdf2: sbb qword ptr [rcx - 0x41f0b3b8], rcx; sbb cl, byte ptr [rdi]; mov esi, 0x48891b52; push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000493760: sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000043a202: scasb al, byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044ec9e: scasb al, byte ptr [rdi]; add eax, 0x83480000; ret 0xe910; 
0x000000000047e1f2: scasb al, byte ptr [rdi]; add eax, dword ptr [rax + rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000004cc129: scasb al, byte ptr [rdi]; clc; call qword ptr [rbx]; 
0x0000000000441ec5: scasb al, byte ptr [rdi]; clc; lea r11, [rip + 0x6ce42]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441d0f: scasb al, byte ptr [rdi]; clc; lea r11, [rip + 0x6cff8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f401: scasb al, byte ptr [rdi]; clc; lea r11, [rip + 0x6f746]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f327: scasb al, byte ptr [rdi]; clc; lea r11, [rip + 0x6f820]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004d1f69: scasb al, byte ptr [rdi]; cld; jmp qword ptr [rdx + 1]; 
0x00000000004a97c4: scasb al, byte ptr [rdi]; fdivr st(7); call rbx; 
0x0000000000406467: scasb al, byte ptr [rdi]; mov dl, 0xc2; mov edx, eax; shr edx, 0x10; xor eax, edx; ret; 
0x0000000000431cd6: scasb al, byte ptr [rdi]; out 0xfc, eax; jmp qword ptr [rsi + 0xf]; 
0x00000000004a2aa0: scasb al, byte ptr [rdi]; ret; 
0x000000000044ed9d: scasd eax, dword ptr [rdi]; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000425afd: scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004d1145: scasd eax, dword ptr [rdi]; add byte ptr [rax], al; cmp byte ptr [rdx], dh; cld; jmp qword ptr [rbp]; 
0x00000000004d10cd: scasd eax, dword ptr [rdi]; add byte ptr [rax], al; xor byte ptr [rcx], dh; cld; jmp qword ptr [rdx]; 
0x00000000004d10e5: scasd eax, dword ptr [rdi]; add byte ptr [rax], al; xor rsp, rdi; jmp rdx; 
0x00000000004cc179: scasd eax, dword ptr [rdi]; clc; call qword ptr [rbx]; 
0x00000000004cc18d: scasd eax, dword ptr [rdi]; clc; call qword ptr [rcx + 1]; 
0x00000000004ae9e5: scasd eax, dword ptr [rdi]; clc; push qword ptr [rax]; mov al, 0xf8; jmp qword ptr [rax]; 
0x00000000004c97f1: scasd eax, dword ptr [rdi]; cmc; call qword ptr [rdi]; 
0x000000000042043a: scasd eax, dword ptr [rdi]; cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x000000000049276d: scasd eax, dword ptr [rdi]; mov edi, esp; jmp qword ptr [rsi + 0x2e]; 
0x0000000000423b3e: scasd eax, dword ptr [rdi]; nop; xor eax, eax; ret; 
0x000000000046a73e: scasd eax, dword ptr [rdi]; ret 0x148; 
0x0000000000420936: scasd eax, dword ptr [rdi]; ret 0x2948; 
0x0000000000428be9: scasd eax, dword ptr [rdi]; ret 0x8948; 
0x0000000000457613: scasd eax, dword ptr [rdi]; ret 0xf8e9; 
0x000000000041d0f9: scasd eax, dword ptr [rdi]; ret; 
0x000000000043bd5d: scasd eax, dword ptr [rdi]; sub al, 7; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x00000000004d10e4: scasq rax, qword ptr [rdi]; add byte ptr [rax], al; xor rsp, rdi; jmp rdx; 
0x0000000000406aba: seta al; ret; 
0x000000000040058d: seta dl; sbb dl, 0; test dl, dl; jne 0x598; ret; 
0x000000000045b02c: setae al; ret; 
0x0000000000406ab0: setb al; ret; 
0x00000000004064f6: sete al; ret; 
0x000000000046a46a: sete dh; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x000000000046a469: sete sil; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x0000000000497815: setne al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x0000000000427b7c: setne al; neg eax; ret; 
0x0000000000441ec4: sfence; lea r11, [rip + 0x6ce42]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441d0e: sfence; lea r11, [rip + 0x6cff8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f400: sfence; lea r11, [rip + 0x6f746]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f326: sfence; lea r11, [rip + 0x6f820]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004aecd8: shl ah, 0xf8; call qword ptr [rax]; 
0x00000000004aecd8: shl ah, 0xf8; call qword ptr [rax]; out 0xf8, al; jmp qword ptr [rax - 0x19]; 
0x00000000004ccc00: shl bl, 0xf8; jmp qword ptr [rcx]; 
0x0000000000483d94: shl byte ptr [rax + 0x48], 1; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fe44: shl byte ptr [rax + 0x48], 1; clc; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa4b: shl byte ptr [rax + 0x48], 1; clc; vzeroupper; ret; 
0x000000000040bc33: shl byte ptr [rax + 9], 0; ret; 
0x0000000000483d26: shl byte ptr [rax], 0x48; add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fdd6: shl byte ptr [rax], 0x48; add eax, edi; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa0b: shl byte ptr [rax], 0x48; add eax, edi; vzeroupper; ret; 
0x00000000004aedd0: shl byte ptr [rax], 0xf9; inc dword ptr [rax + 0x60fff922]; and al, 0xf9; inc dword ptr [rax + 0x26]; stc; jmp qword ptr [rax]; 
0x00000000004c8be0: shl byte ptr [rbp - 0xb], 1; call qword ptr [rax]; 
0x0000000000484b4a: shl byte ptr [rdi - 3], cl; jmp qword ptr [rsi - 0x70]; 
0x00000000004573c9: shl byte ptr [rip + 0x3fffc00], cl; div ecx; pop rbx; mov eax, eax; ret; 
0x0000000000484a92: shl byte ptr [rip + 0x410000], cl; cmp eax, 0x410000; je 0x84ac8; mov eax, 0x101; syscall; 
0x000000000045596f: shl byte ptr [rsi + 0x44], 0xf; out dx, eax; ret 0xf66; 
0x0000000000453d13: shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000044f4c5: shl byte ptr [rsi + 0xf], 0xeb; ret 0xf66; 
0x000000000043c97b: shl byte ptr [rsi + 0xf], 0xef; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000043c992: shl byte ptr [rsi + 0xf], 1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x0000000000482697: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000482686: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x000000000043c871: shl byte ptr [rsi + 0xf], cl; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000041ed3b: shl dword ptr [rax + 0x7c], 0x6d; add byte ptr [rax - 0x39], cl; ret 0x8308; 
0x000000000040bcfb: shl dword ptr [rax + 9], 0; ret; 
0x00000000004ba950: shl dword ptr [rax + rax], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x000000000045b4f3: shl dword ptr [rbp - 0x2d7affd9], 0x74; and eax, 0x8d48f631; cmp eax, 0x550c1; mov eax, 0x15; syscall; 
0x00000000004c2368: shl dword ptr [rdi - 5], 1; ret; 
0x000000000045c853: shl dword ptr [rdi], 1; add byte ptr [rbp - 0xcf98b40], al; ret; 
0x0000000000453d0b: shl dword ptr [rsi + 0xf], 0x74; fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000482682: shl dword ptr [rsi + 0xf], 0xd7; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x00000000004557cb: shl dword ptr [rsi + 0xf], 0xda; ret; 
0x000000000043c8f6: shl dword ptr [rsi + 0xf], 0xef; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c9ad: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x2373; 
0x000000000043c996: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000043c97f: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000043b43b: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043c911: shl dword ptr [rsi + 0xf], 1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043a39c: shl dword ptr [rsi + 0xf], 1; xlatb; ret 0xc085; 
0x000000000043c7d1: shl dword ptr [rsi + 0xf], cl; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004688cc: shl dword ptr [rsi], cl; add byte ptr [rax - 0x75], cl; add al, 0xe8; test rax, rax; je 0x688da; call rax; 
0x000000000048ed42: shl eax, 4; mov rax, qword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000045d521: shl eax, cl; pop rbp; pop r12; ret; 
0x000000000044fcab: shl ecx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000045d51d: shl ecx, 3; pop rbx; shl eax, cl; pop rbp; pop r12; ret; 
0x000000000049222c: shl ecx, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000004921b7: shl ecx, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000492186: shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000044f64a: shl edx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000045b422: shl edx, 4; mov rdx, qword ptr [rcx + rdx]; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x000000000048ed94: shl esi, 4; cmp rcx, qword ptr [rdi + rsi]; jae 0x8ed41; xor eax, eax; ret; 
0x0000000000493933: shl esi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000049222b: shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000004921b6: shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000492185: shl r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000048ed41: shl rax, 4; mov rax, qword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000044fcaa: shl rcx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000044f649: shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000045b421: shl rdx, 4; mov rdx, qword ptr [rcx + rdx]; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x000000000048ed93: shl rsi, 4; cmp rcx, qword ptr [rdi + rsi]; jae 0x8ed41; xor eax, eax; ret; 
0x0000000000493932: shl rsi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000492224: shld eax, ecx, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000004921b0: shld eax, ecx, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000492223: shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000004921af: shld r8, r9, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000045f32d: shr al, 0x75; adc edx, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000040306f: shr al, 0xcb; add byte ptr [rip - 0x3ea1700], 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000045966b: shr bl, 0xb4; nop; mov eax, 0x10; syscall; 
0x0000000000484827: shr bl, 0xb5; call 0x5b320; nop; mov eax, 0x3f; syscall; 
0x000000000049c601: shr bl, 0xf6; nop; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000004d0f6c: shr byte ptr [rbp + 0x29400000], 1; cld; call qword ptr [rax]; 
0x0000000000444c3c: shr byte ptr [rcx + 0x63490006], 1; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040b023: shr byte ptr [rcx + rcx], 1; ret; 
0x00000000004aed68: shr byte ptr [rcx + rdi*8], 1; call rax; 
0x00000000004aed68: shr byte ptr [rcx + rdi*8], 1; call rax; stc; jmp qword ptr [rax + 0x21]; 
0x00000000004350cf: shr byte ptr [rcx], 0xc8; ret; 
0x000000000043367a: shr byte ptr [rcx], cl; add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x0000000000466b78: shr byte ptr [rcx], cl; ret; 
0x00000000004705cc: shr byte ptr [rdi], 1; add byte ptr es:[rax - 0x75], cl; add al, 0xc6; mov esi, 1; jmp rax; 
0x00000000004832a2: shr byte ptr [rdx], 0x48; lea ecx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000004cac20: shr byte ptr [rdx], 0xf6; jmp rsi; 
0x00000000004aed64: shr byte ptr [rdx], 1; stc; call rax; 
0x00000000004aed6c: shr byte ptr [rsi], 1; stc; jmp qword ptr [rax + 0x21]; 
0x00000000004af9ec: shr ch, 1; stc; jmp qword ptr [rax]; 
0x0000000000476c18: shr cl, 0xfd; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x000000000049bf52: shr cl, 1; ret 0xfffe; 
0x000000000049ba5f: shr cl, cl; ret; 
0x00000000004aecb8: shr dh, 1; clc; jmp qword ptr [rax]; 
0x0000000000453d5e: shr dword ptr [rax - 0x267af0e0], 1; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x00000000004a1cac: shr dword ptr [rbx - 0xa], 1; call rcx; 
0x000000000040b0eb: shr dword ptr [rcx + rcx], 1; ret; 
0x00000000004572b9: shr eax, 0xc; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000457349: shr eax, 0xc; mov edx, eax; and edx, 0xf; movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x00000000004572ea: shr eax, 0xe; and eax, 0x3fc00; pop rbx; ret; 
0x000000000048374b: shr eax, 2; ret; 
0x0000000000483c53: shr eax, 2; vzeroupper; ret; 
0x000000000041d76f: shr eax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000457335: shr eax, 6; and eax, 0x3fffc00; pop rbx; ret; 
0x000000000042e08e: shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000049233c: shr ecx, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x00000000004922c1: shr ecx, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000492290: shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000040646c: shr edx, 0x10; xor eax, edx; ret; 
0x000000000049233b: shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x00000000004922c0: shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000049228f: shr r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000048374a: shr rax, 2; ret; 
0x0000000000483c52: shr rax, 2; vzeroupper; ret; 
0x000000000041d76e: shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000492334: shrd eax, ecx, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x00000000004922ba: shrd eax, ecx, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000492333: shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x00000000004922b9: shrd r8, r9, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000040bbc9: sldt word ptr [r8]; nop dword ptr [rax]; lea rax, [rip + 0x960ff]; ret; 
0x00000000004aaca9: sldt word ptr [rax]; add dword ptr ss:[rax], eax; add byte ptr [rdx], ah; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004c70d9: sldt word ptr [rax]; in al, 5; hlt; call qword ptr [rdx]; 
0x00000000004b9b21: sldt word ptr [rax]; mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x000000000046dda5: sldt word ptr [rax]; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000040bbca: sldt word ptr [rax]; nop dword ptr [rax]; lea rax, [rip + 0x960ff]; ret; 
0x00000000004c7101: sldt word ptr [rax]; or al, 6; hlt; call qword ptr [rdi]; 
0x00000000004c7171: sldt word ptr [rax]; or al, 7; hlt; call qword ptr [rdi]; 
0x00000000004b9b29: sldt word ptr [rax]; ret; 
0x000000000040a45c: sldt word ptr [rax]; test eax, eax; cmovns eax, edx; add rsp, 8; ret; 
0x00000000004c7100: sldt word ptr fs:[rax]; or al, 6; hlt; call qword ptr [rdi]; 
0x000000000045534f: stc; adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000043d753: stc; adc eax, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000482f86: stc; add byte ptr [rax + rax], cl; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x0000000000406a2f: stc; add dword ptr [rdi], ecx; test dword ptr [rax - 0x48000000], esi; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000463500: stc; add dword ptr [rdi], ecx; xchg byte ptr [rdi], dl; or eax, 0xea810000; ret 0; 
0x00000000004aee62: stc; call qword ptr [rax + 0x10]; 
0x00000000004aeeb6: stc; call qword ptr [rax + 0x17]; 
0x00000000004aebca: stc; call qword ptr [rax + 0x20fff906]; stc; clc; jmp rax; 
0x00000000004aed16: stc; call qword ptr [rax + 0x25]; 
0x00000000004aee3e: stc; call qword ptr [rax + 0x27]; 
0x00000000004aee3e: stc; call qword ptr [rax + 0x27]; stc; jmp qword ptr [rax]; 
0x00000000004af14a: stc; call qword ptr [rax + 0x4b]; 
0x00000000004aeefa: stc; call qword ptr [rax + 0x57]; 
0x00000000004aeefa: stc; call qword ptr [rax + 0x57]; stc; jmp rax; 
0x00000000004af0d2: stc; call qword ptr [rax + 0x5b]; 
0x00000000004af0d2: stc; call qword ptr [rax + 0x5b]; stc; jmp rax; 
0x00000000004af7d2: stc; call qword ptr [rax + 0x78]; 
0x00000000004af7d2: stc; call qword ptr [rax + 0x78]; stc; call rax; 
0x00000000004af60a: stc; call qword ptr [rax + 0x7b]; 
0x00000000004af3f2: stc; call qword ptr [rax + 0x7e]; 
0x00000000004af3f2: stc; call qword ptr [rax + 0x7e]; stc; jmp rax; 
0x00000000004af846: stc; call qword ptr [rax + 0xfff971]; jno 0xaf848; jmp qword ptr [rax + 0x53]; 
0x00000000004af06e: stc; call qword ptr [rax + rbx*2 - 7]; jmp rsp; 
0x00000000004af9ba: stc; call qword ptr [rax - 0x38]; 
0x00000000004af922: stc; call qword ptr [rax - 0x67]; 
0x00000000004af922: stc; call qword ptr [rax - 0x67]; stc; jmp qword ptr [rax - 0x65]; 
0x00000000004aebae: stc; call qword ptr [rax - 7]; 
0x00000000004aebae: stc; call qword ptr [rax - 7]; clc; call qword ptr [rax]; 
0x00000000004aec86: stc; call qword ptr [rax]; 
0x00000000004aeea6: stc; call qword ptr [rax]; adc bh, cl; jmp qword ptr [rax + 0x13]; 
0x00000000004aee52: stc; call qword ptr [rax]; or edi, ecx; jmp qword ptr [rax + 0xc]; 
0x00000000004af9fa: stc; call qword ptr [rax]; stc; jmp qword ptr [rax - 0xc]; 
0x00000000004af912: stc; call qword ptr [rax]; xchg eax, ecx; stc; jmp qword ptr [rax]; 
0x00000000004af576: stc; call qword ptr [rbp + rdi*2 + 0x7d24fff9]; stc; push qword ptr [rsp + rdi*2 + 0x7c44fff9]; stc; call rsp; 
0x00000000004af76a: stc; call qword ptr [rbp + rsi*2 - 7]; call rsp; 
0x00000000004af77a: stc; call qword ptr [rbx + rsi*2 - 7]; call rsp; 
0x00000000004ce2f2: stc; call qword ptr [rbx]; 
0x00000000004cdff2: stc; call qword ptr [rcx]; 
0x00000000004af566: stc; call qword ptr [rdi + rdi*2 - 7]; jmp rsp; 
0x00000000004af75a: stc; call qword ptr [rdi + rsi*2 - 7]; call rsp; 
0x00000000004cd77a: stc; call qword ptr [rdi]; 
0x00000000004af4ae: stc; call qword ptr [rdx + 0x22fff97e]; jle 0xaf4b0; push qword ptr [rdx + 0x42fff97d]; jge 0xaf4b8; call rdx; 
0x00000000004af1ba: stc; call qword ptr [rdx + 0x4d]; 
0x00000000004af1ba: stc; call qword ptr [rdx + 0x4d]; stc; call rdx; 
0x00000000004af1b2: stc; call qword ptr [rdx + 0x4e]; 
0x00000000004af1b2: stc; call qword ptr [rdx + 0x4e]; stc; call rdx; 
0x00000000004af1aa: stc; call qword ptr [rdx + 0x4f]; 
0x00000000004af1aa: stc; call qword ptr [rdx + 0x4f]; stc; call rdx; 
0x00000000004af1a2: stc; call qword ptr [rdx + 0x50]; 
0x00000000004af1a2: stc; call qword ptr [rdx + 0x50]; stc; call rdx; 
0x00000000004af19a: stc; call qword ptr [rdx + 0x51]; 
0x00000000004af19a: stc; call qword ptr [rdx + 0x51]; stc; call rdx; 
0x00000000004aefa6: stc; call qword ptr [rdx + 0x59]; 
0x00000000004aefa6: stc; call qword ptr [rdx + 0x59]; stc; jmp rdx; 
0x00000000004af49e: stc; call qword ptr [rdx - 0x80]; 
0x00000000004af49e: stc; call qword ptr [rdx - 0x80]; stc; jmp rdx; 
0x00000000004aef8e: stc; call qword ptr [rdx]; 
0x00000000004aef42: stc; call qword ptr [rsi + 0x56]; 
0x00000000004aef42: stc; call qword ptr [rsi + 0x56]; stc; jmp rsi; 
0x00000000004af43a: stc; call qword ptr [rsi + 0x7d]; 
0x00000000004af43a: stc; call qword ptr [rsi + 0x7d]; stc; jmp rsi; 
0x00000000004af762: stc; call qword ptr [rsi + rsi*2 - 7]; call rsp; 
0x00000000004aef32: stc; call qword ptr [rsi]; 
0x00000000004af772: stc; call qword ptr [rsp + rsi*2 - 7]; call rsp; 
0x00000000004aed62: stc; call rax; 
0x00000000004af9ea: stc; call rax; in eax, dx; stc; jmp qword ptr [rax]; 
0x00000000004af5ea: stc; call rax; jle 0xaf5e8; jmp qword ptr [rax + 0x7e]; 
0x00000000004af902: stc; call rax; mov cl, bh; jmp rax; 
0x00000000004aee96: stc; call rax; or al, 0xf9; jmp qword ptr [rax]; 
0x00000000004aeeda: stc; call rax; pop rdx; stc; jmp qword ptr [rax + 0x5a]; 
0x00000000004af0f2: stc; call rax; push rdi; stc; jmp qword ptr [rax + 0x57]; 
0x00000000004aee82: stc; call rax; sbb bh, cl; jmp qword ptr [rax]; 
0x00000000004aed6a: stc; call rax; stc; jmp qword ptr [rax + 0x21]; 
0x00000000004aed66: stc; call rax; sub al, 0xf9; call rax; stc; jmp qword ptr [rax + 0x21]; 
0x00000000004cd6e6: stc; call rcx; 
0x00000000004cdd16: stc; call rdi; 
0x00000000004aefc6: stc; call rdx; 
0x00000000004af4be: stc; call rdx; jl 0xaf4bc; jmp qword ptr [rdx + 0x7c]; 
0x00000000004af19e: stc; call rdx; push rax; stc; call qword ptr [rdx + 0x50]; 
0x00000000004aefc6: stc; call rdx; push rbp; stc; jmp qword ptr [rdx + 0x55]; 
0x00000000004af1b6: stc; call rdx; stc; call qword ptr [rdx + 0x4d]; 
0x00000000004af1ae: stc; call rdx; stc; call qword ptr [rdx + 0x4e]; 
0x00000000004af1a6: stc; call rdx; stc; call qword ptr [rdx + 0x4f]; 
0x00000000004aef22: stc; call rsi; 
0x00000000004aef22: stc; call rsi; pop rcx; stc; jmp qword ptr [rsi + 0x59]; 
0x00000000004af586: stc; call rsp; 
0x00000000004aeb71: stc; clc; call qword ptr [rax - 5]; 
0x00000000004aebb1: stc; clc; call qword ptr [rax]; 
0x00000000004aeb51: stc; clc; jmp qword ptr [rax - 5]; 
0x00000000004ccef5: stc; clc; jmp qword ptr [rdx]; 
0x00000000004aebd1: stc; clc; jmp rax; 
0x00000000004aec75: stc; clc; push qword ptr [rax - 5]; clc; call qword ptr [rax - 3]; 
0x00000000004aeb91: stc; clc; push qword ptr [rax]; sti; clc; call qword ptr [rax]; 
0x000000000046cbee: stc; dec dword ptr [rax + 0x29]; ret; 
0x0000000000467cb1: stc; dec dword ptr [rax - 0x7b]; sal byte ptr [rbx + 0x48], 0xc7; ret 0xfff0; 
0x000000000046bba5: stc; dec dword ptr [rbp - 0x7b]; dec dword ptr [rax - 0x77]; ret; 
0x00000000004af3ce: stc; dec dword ptr [rsi + 0x7b]; stc; call rax; 
0x00000000004aee0e: stc; inc dword ptr [rax + 0x20]; stc; inc dword ptr [rax]; and bh, cl; call rax; 
0x00000000004aedf2: stc; inc dword ptr [rax + 0x22]; stc; jmp qword ptr [rax]; 
0x00000000004aed52: stc; inc dword ptr [rax + 0x23]; stc; jmp qword ptr [rax]; 
0x00000000004aed36: stc; inc dword ptr [rax + 0x25]; stc; jmp qword ptr [rax]; 
0x00000000004aedda: stc; inc dword ptr [rax + 0x26]; stc; jmp qword ptr [rax]; 
0x00000000004aedee: stc; inc dword ptr [rax + 0x40fff920]; and bh, cl; jmp qword ptr [rax]; 
0x00000000004aed4e: stc; inc dword ptr [rax + 0x40fff921]; and edi, ecx; jmp qword ptr [rax]; 
0x00000000004af0ee: stc; inc dword ptr [rax + 0x58]; stc; call rax; 
0x00000000004aeed6: stc; inc dword ptr [rax + 0x5b]; stc; call rax; 
0x00000000004aedd2: stc; inc dword ptr [rax + 0x60fff922]; and al, 0xf9; inc dword ptr [rax + 0x26]; stc; jmp qword ptr [rax]; 
0x00000000004aee36: stc; inc dword ptr [rax + 0x60fff923]; and eax, 0x2750fff9; stc; jmp qword ptr [rax]; 
0x00000000004af5e6: stc; inc dword ptr [rax + 0x7f]; stc; call rax; 
0x00000000004af5e6: stc; inc dword ptr [rax + 0x7f]; stc; call rax; jle 0xaf5e8; jmp qword ptr [rax + 0x7e]; 
0x00000000004af13a: stc; inc dword ptr [rax + 0xfff94d]; stc; push qword ptr [rax + 0x4c]; stc; jmp rax; 
0x00000000004af9ae: stc; inc dword ptr [rax - 0x23]; stc; jmp rax; 
0x00000000004af9e6: stc; inc dword ptr [rax - 0x2f000614]; in eax, dx; stc; jmp qword ptr [rax]; 
0x00000000004aee7e: stc; inc dword ptr [rax - 0x2f0006e7]; sbb bh, cl; jmp qword ptr [rax]; 
0x00000000004aee92: stc; inc dword ptr [rax - 0x2f0006f5]; or al, 0xf9; jmp qword ptr [rax]; 
0x00000000004af98e: stc; inc dword ptr [rax - 0x30]; stc; jmp rax; 
0x00000000004af34e: stc; inc dword ptr [rax - 0x5f0006d3]; stc; jmp qword ptr [rax]; 
0x00000000004af91e: stc; inc dword ptr [rax - 0x69]; stc; call qword ptr [rax - 0x67]; 
0x00000000004af91e: stc; inc dword ptr [rax - 0x69]; stc; call qword ptr [rax - 0x67]; stc; jmp qword ptr [rax - 0x65]; 
0x00000000004aee12: stc; inc dword ptr [rax]; and bh, cl; call rax; 
0x00000000004aee2e: stc; inc dword ptr [rax]; and cl, bh; push qword ptr [rax - 0x7f0006df]; and edi, ecx; jmp qword ptr [rax + 0x25]; 
0x00000000004af5d6: stc; inc dword ptr [rax]; cmp ecx, 0xf98090ff; jmp qword ptr [rax]; 
0x00000000004af646: stc; inc dword ptr [rax]; jb 0xaf644; push qword ptr [rax + 0x71]; stc; jmp rsi; 
0x00000000004af84a: stc; inc dword ptr [rax]; jno 0xaf848; jmp qword ptr [rax + 0x53]; 
0x00000000004aedfa: stc; inc dword ptr [rax]; stc; jmp rax; 
0x00000000004af342: stc; inc dword ptr [rax]; stc; push qword ptr [rax + 0x4b]; stc; jmp rax; 
0x00000000004af13e: stc; inc dword ptr [rax]; stc; push qword ptr [rax + 0x4c]; stc; jmp rax; 
0x00000000004aefc2: stc; inc dword ptr [rdx + 0x56]; stc; call rdx; 
0x00000000004af6ca: stc; inc dword ptr [rdx + 0x71]; stc; call rdx; 
0x00000000004af4ba: stc; inc dword ptr [rdx + 0x7d]; stc; call rdx; 
0x00000000004af4ba: stc; inc dword ptr [rdx + 0x7d]; stc; call rdx; jl 0xaf4bc; jmp qword ptr [rdx + 0x7c]; 
0x00000000004aef1e: stc; inc dword ptr [rsi + 0x5a]; stc; call rsi; 
0x00000000004af40e: stc; inc dword ptr [rsi + 0x7b]; stc; push qword ptr [rsi + 0x46fff981]; cmp ecx, 0xf980d6ff; jmp qword ptr [rsi - 0x80]; 
0x00000000004af416: stc; inc dword ptr [rsi - 0x7f]; stc; call rsi; 
0x00000000004af582: stc; inc dword ptr [rsp + rdi*2 - 7]; call rsp; 
0x00000000004aeea2: stc; inc eax; adc cl, bh; call qword ptr [rax]; 
0x00000000004aeea2: stc; inc eax; adc cl, bh; call qword ptr [rax]; adc bh, cl; jmp qword ptr [rax + 0x13]; 
0x00000000004af9f6: stc; inc eax; int1; stc; call qword ptr [rax]; 
0x00000000004af3ee: stc; inc eax; jle 0xaf3ec; call qword ptr [rax + 0x7e]; 
0x00000000004af3ee: stc; inc eax; jle 0xaf3ec; call qword ptr [rax + 0x7e]; stc; jmp rax; 
0x00000000004af606: stc; inc eax; jnp 0xaf604; call qword ptr [rax + 0x7b]; 
0x00000000004af97e: stc; inc eax; leave; stc; jmp qword ptr [rax - 0x35]; 
0x00000000004af96a: stc; inc eax; mov esi, 0xc0c0fff9; stc; inc eax; ret 0xfff9; 
0x00000000004aeef6: stc; inc eax; push rdi; stc; call qword ptr [rax + 0x57]; 
0x00000000004af972: stc; inc eax; ret 0xfff9; 
0x00000000004aefa2: stc; inc edx; pop rcx; stc; call qword ptr [rdx + 0x59]; 
0x00000000004af436: stc; inc esi; jge 0xaf434; call qword ptr [rsi + 0x7d]; 
0x00000000004af436: stc; inc esi; jge 0xaf434; call qword ptr [rsi + 0x7d]; stc; jmp rsi; 
0x00000000004aef3e: stc; inc esi; push rsi; stc; call qword ptr [rsi + 0x56]; 
0x00000000004af562: stc; inc esp; jg 0xaf560; call qword ptr [rdi + rdi*2 - 7]; jmp rsp; 
0x00000000004af06a: stc; inc esp; pop rax; stc; call qword ptr [rax + rbx*2 - 7]; jmp rsp; 
0x00000000004aeeaa: stc; jmp qword ptr [rax + 0x13]; 
0x00000000004aed6e: stc; jmp qword ptr [rax + 0x21]; 
0x00000000004aed32: stc; jmp qword ptr [rax + 0x23]; 
0x00000000004aedd6: stc; jmp qword ptr [rax + 0x24]; 
0x00000000004aee3a: stc; jmp qword ptr [rax + 0x25]; 
0x00000000004aedbe: stc; jmp qword ptr [rax + 0x28]; 
0x00000000004af84e: stc; jmp qword ptr [rax + 0x53]; 
0x00000000004af0f6: stc; jmp qword ptr [rax + 0x57]; 
0x00000000004aeede: stc; jmp qword ptr [rax + 0x5a]; 
0x00000000004af5ee: stc; jmp qword ptr [rax + 0x7e]; 
0x00000000004aee56: stc; jmp qword ptr [rax + 0xc]; 
0x00000000004aebe2: stc; jmp qword ptr [rax + 2]; 
0x00000000004aec66: stc; jmp qword ptr [rax + 3]; 
0x00000000004aebe6: stc; jmp qword ptr [rax + 4]; 
0x00000000004aec6a: stc; jmp qword ptr [rax + 5]; 
0x00000000004aebea: stc; jmp qword ptr [rax + 6]; 
0x00000000004af9a2: stc; jmp qword ptr [rax - 0x28]; 
0x00000000004af982: stc; jmp qword ptr [rax - 0x35]; 
0x00000000004af926: stc; jmp qword ptr [rax - 0x65]; 
0x00000000004af3d6: stc; jmp qword ptr [rax - 0x7f]; 
0x00000000004af9fe: stc; jmp qword ptr [rax - 0xc]; 
0x00000000004aebce: stc; jmp qword ptr [rax]; 
0x00000000004cd822: stc; jmp qword ptr [rdi + 0x11]; 
0x00000000004af192: stc; jmp qword ptr [rdx + 0x52]; 
0x00000000004aefca: stc; jmp qword ptr [rdx + 0x55]; 
0x00000000004af6c2: stc; jmp qword ptr [rdx + 0x72]; 
0x00000000004af4c2: stc; jmp qword ptr [rdx + 0x7c]; 
0x00000000004aefba: stc; jmp qword ptr [rdx]; 
0x00000000004aef26: stc; jmp qword ptr [rsi + 0x59]; 
0x00000000004cda0a: stc; jmp qword ptr [rsi + 0xa]; 
0x0000000000479685: stc; jmp qword ptr [rsi + 0xf]; 
0x00000000004af41e: stc; jmp qword ptr [rsi - 0x80]; 
0x00000000004aef0e: stc; jmp qword ptr [rsi]; 
0x00000000004aeb82: stc; jmp rax; 
0x00000000004aefaa: stc; jmp rdx; 
0x00000000004aef46: stc; jmp rsi; 
0x00000000004af072: stc; jmp rsp; 
0x00000000004c21e4: stc; jnp 0xc21a0; ret; 
0x00000000004af7ca: stc; lcall [rdx]; jno 0xaf7c8; ljmp [rdx + 0x50fff970]; js 0xaf7d0; call rax; 
0x0000000000481355: stc; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000481531: stc; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x00000000004aef8a: stc; ljmp [rbp + rdx*2 - 7]; call qword ptr [rdx]; 
0x00000000004af0c6: stc; ljmp [rdx + 0x3afff955]; push rbp; stc; jmp rax; 
0x00000000004af7ce: stc; ljmp [rdx + 0x50fff970]; js 0xaf7d0; call rax; 
0x000000000043f258: stc; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043f252: stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000483566: stc; mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x0000000000463c46: stc; or byte ptr [rdi], 0x85; rol dword ptr [rdx], 0; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000402039: stc; or dword ptr [rax], eax; mov edi, edi; movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; jmp rax; 
0x0000000000490346: stc; or dword ptr [rsi - 0x1a], esi; cmp r8d, eax; je 0x90296; sub eax, r8d; ret; 
0x0000000000440513: stc; out 6, eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004aee8a: stc; push qword ptr [rax + 0x1d]; stc; push qword ptr [rax - 0x7f0006f8]; or edi, ecx; call rax; 
0x00000000004af83e: stc; push qword ptr [rax + 0x20fff972]; jb 0xaf840; call qword ptr [rax + 0xfff971]; jno 0xaf848; jmp qword ptr [rax + 0x53]; 
0x00000000004aed12: stc; push qword ptr [rax + 0x23]; stc; call qword ptr [rax + 0x25]; 
0x00000000004af0ea: stc; push qword ptr [rax + 0x40fff958]; pop rax; stc; call rax; 
0x00000000004aeed2: stc; push qword ptr [rax + 0x40fff95b]; pop rbx; stc; call rax; 
0x00000000004af5e2: stc; push qword ptr [rax + 0x40fff97f]; jg 0xaf5e4; call rax; 
0x00000000004af346: stc; push qword ptr [rax + 0x4b]; stc; jmp rax; 
0x00000000004af142: stc; push qword ptr [rax + 0x4c]; stc; jmp rax; 
0x00000000004aec0e: stc; push qword ptr [rax + 0x70fff8f8]; cli; clc; call qword ptr [rax - 4]; 
0x00000000004af64a: stc; push qword ptr [rax + 0x71]; stc; jmp rsi; 
0x00000000004aee9e: stc; push qword ptr [rax + 0xf]; stc; inc eax; adc cl, bh; call qword ptr [rax]; 
0x00000000004aee32: stc; push qword ptr [rax - 0x7f0006df]; and edi, ecx; jmp qword ptr [rax + 0x25]; 
0x00000000004aee8e: stc; push qword ptr [rax - 0x7f0006f8]; or edi, ecx; call rax; 
0x00000000004aee8e: stc; push qword ptr [rax - 0x7f0006f8]; or edi, ecx; call rax; or al, 0xf9; jmp qword ptr [rax]; 
0x00000000004af5d2: stc; push qword ptr [rax - 0x7f]; stc; inc dword ptr [rax]; cmp ecx, 0xf98090ff; jmp qword ptr [rax]; 
0x00000000004aed8e: stc; push qword ptr [rax]; and ecx, edi; push rax; and bh, cl; call rax; 
0x00000000004af3ea: stc; push qword ptr [rax]; jg 0xaf3e8; inc eax; jle 0xaf3ec; call qword ptr [rax + 0x7e]; 
0x00000000004af602: stc; push qword ptr [rax]; jl 0xaf600; inc eax; jnp 0xaf604; call qword ptr [rax + 0x7b]; 
0x00000000004af10a: stc; push qword ptr [rax]; push rbp; stc; call rax; 
0x00000000004aee7a: stc; push qword ptr [rax]; sbb cl, bh; inc dword ptr [rax - 0x2f0006e7]; sbb bh, cl; jmp qword ptr [rax]; 
0x00000000004aefbe: stc; push qword ptr [rdx + 0x42fff956]; push rsi; stc; call rdx; 
0x00000000004af4b6: stc; push qword ptr [rdx + 0x42fff97d]; jge 0xaf4b8; call rdx; 
0x00000000004af6ba: stc; push qword ptr [rdx + 0x73]; stc; push rdx; jb 0xaf6bc; jmp qword ptr [rdx + 0x72]; 
0x00000000004af496: stc; push qword ptr [rdx]; cmp ecx, 0xf980c2ff; call qword ptr [rdx - 0x80]; 
0x00000000004af496: stc; push qword ptr [rdx]; cmp ecx, 0xf980c2ff; call qword ptr [rdx - 0x80]; stc; jmp rdx; 
0x00000000004aef1a: stc; push qword ptr [rsi + 0x46fff95a]; pop rdx; stc; call rsi; 
0x00000000004af412: stc; push qword ptr [rsi + 0x46fff981]; cmp ecx, 0xf980d6ff; jmp qword ptr [rsi - 0x80]; 
0x00000000004af432: stc; push qword ptr [rsi]; jle 0xaf430; inc esi; jge 0xaf434; call qword ptr [rsi + 0x7d]; 
0x00000000004af57e: stc; push qword ptr [rsp + rdi*2 + 0x7c44fff9]; stc; call rsp; 
0x00000000004aed92: stc; push rax; and bh, cl; call rax; 
0x00000000004aed4a: stc; push rax; stc; inc dword ptr [rax + 0x40fff921]; and edi, ecx; jmp qword ptr [rax]; 
0x00000000004af6be: stc; push rdx; jb 0xaf6bc; jmp qword ptr [rdx + 0x72]; 
0x0000000000400523: stc; ret; 
0x000000000049a3ab: stc; sal byte ptr [rcx + 0x3c], 0x2f; ja 0x9ac61; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x00000000004d08e9: stc; sti; jmp qword ptr [rsi]; 
0x0000000000401e13: stc; sub eax, 0; add byte ptr [rcx], dh; fucomi st(1); imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000447b74: stc; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043b1e7: stc; xlatb; ret 0xff2d; 
0x00000000004988cf: std; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x83; ret 0x3901; 
0x0000000000422e97: std; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004901a7: std; add dh, bh; dec dword ptr [rax - 0x77]; ret; 
0x000000000047e93a: std; add eax, dword ptr [rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000004c5bea: std; call qword ptr [rax]; 
0x00000000004c60ea: std; call qword ptr [rcx + 0x5c]; 
0x00000000004c60de: std; call qword ptr [rdx + rbx*2 - 3]; jmp qword ptr [rdi + 0x5a]; 
0x00000000004c615e: std; call rax; 
0x00000000004ce1ca: std; call rdx; 
0x00000000004c5c6e: std; call rsp; 
0x00000000004aeb79: std; clc; call qword ptr [rax]; 
0x00000000004aec3d: std; clc; call rax; 
0x00000000004aec7d: std; clc; inc dword ptr [rax - 1]; clc; call qword ptr [rax]; 
0x00000000004aeb59: std; clc; jmp qword ptr [rax]; 
0x00000000004cea81: std; cli; jmp qword ptr [rbx + 8]; 
0x0000000000485612: std; dec dword ptr [rax + 0x39]; ret; 
0x00000000004282ad: std; dec dword ptr [rax - 0x77]; ret; 
0x00000000004790f2: std; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000482f7b: std; dec dword ptr [rcx + 0xe181d1]; or al, 2; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x0000000000476c1a: std; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x00000000004919eb: std; inc dword ptr [rbp - 0x76b08a40]; ret; 
0x00000000004c5d1e: std; inc dword ptr [rbx + rbx*2]; std; call rsp; 
0x0000000000482f9b: std; inc dword ptr [rcx + 0x1000fa]; add byte ptr [rax - 0x73], cl; adc eax, 0xfffd40c6; cmove rax, rdx; ret; 
0x00000000004c60da: std; inc dword ptr [rcx + 0x5a]; std; call qword ptr [rdx + rbx*2 - 3]; jmp qword ptr [rdi + 0x5a]; 
0x00000000004c60ae: std; inc dword ptr [rcx - 0x260002ac]; pop rcx; std; jmp rsp; 
0x0000000000456b8a: std; jg 0x56bd7; jmp qword ptr [rdx - 0x2f]; 
0x00000000004c60e2: std; jmp qword ptr [rdi + 0x5a]; 
0x00000000004cdc42: std; jmp qword ptr [rdi]; 
0x00000000004cd362: std; jmp qword ptr [rdx]; 
0x0000000000481bc4: std; jmp qword ptr [rsi + 0x2e]; 
0x000000000045ee68: std; jmp qword ptr [rsi + 0xf]; 
0x0000000000484a6c: std; jmp qword ptr [rsi - 0x70]; 
0x00000000004c613a: std; jmp rax; 
0x00000000004c5cf2: std; jmp rsp; 
0x000000000043ea73: std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000043ea7b: std; mov word ptr [rdi - 2], cx; ret; 
0x000000000041d8d0: std; or byte ptr [rax], al; mov edx, 0x6c; call 0x10920; xor eax, eax; ret; 
0x000000000045a50e: std; push rbx; ret; 
0x00000000004c5cee: std; push rsp; push rdi; std; jmp rsp; 
0x00000000004560d3: std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000004be46d: std; sti; push qword ptr [rax - 4]; sti; jmp qword ptr [rax]; 
0x0000000000407a08: std; sub rsp, 8; movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x0000000000456b01: std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x00000000004569ea: std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x00000000004478a4: std; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000044766a: std; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000455e32: std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043aaa9: std; xlatb; ret 0xc085; 
0x000000000043b023: std; xlatb; ret 0xe883; 
0x000000000043aab1: std; xlatb; ret; 
0x0000000000482834: std; xlatb; retf 0xfdc5; xlatb; ret; 
0x0000000000482894: std; xlatb; rol ch, cl; std; xlatb; ret; 
0x000000000043a9de: std; xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x000000000043aaa1: std; xlatb; rol dword ptr [rbp - 0x3a378a40], 0xfd; xlatb; ret 0xc085; 
0x000000000044f8f1: std; xlatb; rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000430fe1: sti; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000420a13: sti; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x00000000004be44a: sti; call qword ptr [rax - 3]; 
0x00000000004b1d8a: sti; call qword ptr [rax]; 
0x000000000049f26e: sti; call qword ptr [rbp + 0x53]; 
0x00000000004d063a: sti; call qword ptr [rdx + 1]; 
0x00000000004cf37a: sti; call qword ptr [rsi + 1]; 
0x00000000004d081e: sti; call rdx; 
0x00000000004b1dd6: sti; call rsp; 
0x00000000004aec79: sti; clc; call qword ptr [rax - 3]; 
0x00000000004aeb95: sti; clc; call qword ptr [rax]; 
0x00000000004aeb55: sti; clc; inc dword ptr [rax - 3]; clc; jmp qword ptr [rax]; 
0x00000000004aeb75: sti; clc; push qword ptr [rax]; std; clc; call qword ptr [rax]; 
0x00000000004aebb5: sti; clc; push rax; cld; clc; call rax; 
0x000000000045f923: sti; cld; jmp qword ptr [rsi + 0x2e]; 
0x00000000004b1d86: sti; jmp qword ptr [rax + 0x78]; 
0x00000000004b1d82: sti; jmp qword ptr [rax]; 
0x00000000004cf3ca: sti; jmp qword ptr [rbx]; 
0x00000000004d003a: sti; jmp qword ptr [rcx + 0xe]; 
0x00000000004cf9f2: sti; jmp qword ptr [rcx]; 
0x00000000004cee0a: sti; jmp qword ptr [rdi]; 
0x00000000004cf0f2: sti; jmp qword ptr [rdx]; 
0x00000000004596cf: sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000458120: sti; jmp qword ptr [rsi + 0xf]; 
0x00000000004d02fa: sti; jmp qword ptr [rsi + 5]; 
0x00000000004d041a: sti; jmp qword ptr [rsi + 7]; 
0x00000000004d08ea: sti; jmp qword ptr [rsi]; 
0x00000000004cf592: sti; jmp rdx; 
0x0000000000480cf9: sti; jne 0x80d68; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x000000000043ee58: sti; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043ee52: sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000409679: sti; mov edi, eax; call rdx; 
0x00000000004be446: sti; push qword ptr [rax - 4]; sti; call qword ptr [rax - 3]; 
0x00000000004be47a: sti; push qword ptr [rax - 4]; sti; call qword ptr [rax]; 
0x00000000004be46e: sti; push qword ptr [rax - 4]; sti; jmp qword ptr [rax]; 
0x00000000004be442: sti; push qword ptr [rax - 4]; sti; push qword ptr [rax - 4]; sti; call qword ptr [rax - 3]; 
0x00000000004be476: sti; push qword ptr [rax - 4]; sti; push qword ptr [rax - 4]; sti; call qword ptr [rax]; 
0x00000000004c236a: sti; ret; 
0x0000000000469cd7: sti; test rax, rax; je 0x69cdf; call rax; 
0x0000000000447b66: sti; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004d0bc9: stosb byte ptr [rdi], al; add byte ptr [rax], al; hlt; or bh, ah; call qword ptr [rdi + 1]; 
0x000000000049e963: stosb byte ptr [rdi], al; and eax, dword ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000004ae9d1: stosb byte ptr [rdi], al; clc; inc dword ptr [rax + 0x70fff8ab]; lodsb al, byte ptr [rsi]; clc; jmp qword ptr [rax - 0x53]; 
0x0000000000471ae2: stosb byte ptr [rdi], al; fdiv st(7), st(0); jmp qword ptr [rsi + 0x2e]; 
0x00000000004a7140: stosb byte ptr [rdi], al; fdivr st(7); call qword ptr [rsi]; 
0x00000000004a7138: stosb byte ptr [rdi], al; fdivr st(7); ljmp [rdx - 0x55000028]; fdivr st(7); call qword ptr [rsi]; 
0x0000000000488972: stosb byte ptr [rdi], al; jg 0x8896d; jmp qword ptr [rsi + 0x2e]; 
0x00000000004af7d0: stosb byte ptr [rdi], al; jo 0xaf7cc; call qword ptr [rax + 0x78]; 
0x00000000004af7d0: stosb byte ptr [rdi], al; jo 0xaf7cc; call qword ptr [rax + 0x78]; stc; call rax; 
0x0000000000456dfb: stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000049a3b3: stosb byte ptr [rdi], al; or byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; add al, 0x87; add rax, r15; jmp rax; 
0x00000000004c3fb6: stosb byte ptr [rdi], al; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x0000000000407d75: stosb byte ptr [rdi], al; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000004d0ccd: stosd dword ptr [rdi], eax; add byte ptr [rax], al; add byte ptr [rsi], cl; cld; call qword ptr [rdx]; 
0x000000000048e82e: stosd dword ptr [rdi], eax; and al, 0; mov qword ptr [rsi], rax; ret; 
0x000000000049e853: stosd dword ptr [rdi], eax; and eax, dword ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000004ae9d5: stosd dword ptr [rdi], eax; clc; push qword ptr [rax - 0x54]; clc; jmp qword ptr [rax - 0x53]; 
0x00000000004d1f01: stosd dword ptr [rdi], eax; cld; call qword ptr [rdx + 1]; 
0x00000000004211d1: stosd dword ptr [rdi], eax; cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x0000000000482b94: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000483854: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000477dae: stosd dword ptr [rdi], eax; mov eax, 1; ret; 
0x000000000042e093: stosd dword ptr [rdi], eax; pop rbx; ret; 
0x00000000004c394c: stosd dword ptr [rdi], eax; ret; 
0x0000000000482af5: stosd dword ptr [rdi], eax; sar rdx, cl; test rdx, rdx; je 0x82b10; bsf rax, rdx; ret; 
0x000000000042e092: stosq qword ptr [rdi], rax; pop rbx; ret; 
0x00000000004af9e8: sub ah, 0xf9; call rax; 
0x00000000004af9e8: sub ah, 0xf9; call rax; in eax, dx; stc; jmp qword ptr [rax]; 
0x000000000041021e: sub al, 0; adc ch, cl; ret; 
0x00000000004101f0: sub al, 0; add al, 0xeb; mov byte ptr [rcx], bh; ret 0x860f; 
0x000000000041255f: sub al, 0; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004ccb98: sub al, 0; add byte ptr [rax], al; add byte ptr [rdx], ch; add byte ptr [rax - 0x1d], ah; clc; call qword ptr [rdx]; 
0x00000000004d12e0: sub al, 0; add byte ptr [rax], al; mov cl, 0; add byte ptr [rax + 0x36], bl; cld; call qword ptr [rbx + 1]; 
0x000000000040fb8f: sub al, 0; add rsp, 0x88; pop rbx; ret; 
0x000000000040f9bf: sub al, 0; lea rax, [rip + 0x2c89b8]; ret; 
0x000000000040f9b6: sub al, 0; mov eax, dword ptr [rdx + rsi]; mov dword ptr [rip + 0x2c89c7], eax; lea rax, [rip + 0x2c89b8]; ret; 
0x000000000040ff37: sub al, 0; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000040f9c6: sub al, 0; ret; 
0x00000000004583dc: sub al, 0x10; add al, ch; pushfq; cmp eax, 0x89480001; ret 0x8b48; 
0x00000000004d0e34: sub al, 0x1c; cld; jmp qword ptr [rdx + 5]; 
0x00000000004c76b4: sub al, 0x21; hlt; jmp rsi; 
0x00000000004c9bc8: sub al, 0x3a; add byte ptr [rax], al; and al, 0xc3; cmc; call qword ptr [rdi]; 
0x0000000000491196: sub al, 0x48; add esp, 0x38; ret; 
0x00000000004c8904: sub al, 0x56; cmc; jmp qword ptr [rcx + 2]; 
0x0000000000457032: sub al, 0x72; add cl, byte ptr [rax + 0x77f8c50f]; ret; 
0x00000000004915f0: sub al, 0x9d; cld; jmp qword ptr [rsi - 0x70]; 
0x000000000043bfc3: sub al, 0xa; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004d0bc8: sub al, 0xaa; add byte ptr [rax], al; hlt; or bh, ah; call qword ptr [rdi + 1]; 
0x00000000004c7769: sub al, 0xf4; call qword ptr [rcx]; 
0x000000000049044a: sub al, 0xf5; add al, byte ptr [rax]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x00000000004aed69: sub al, 0xf9; call rax; 
0x00000000004aed69: sub al, 0xf9; call rax; stc; jmp qword ptr [rax + 0x21]; 
0x00000000004aed49: sub al, 0xf9; push rax; stc; inc dword ptr [rax + 0x40fff921]; and edi, ecx; jmp qword ptr [rax]; 
0x000000000045d7fa: sub al, 0xfa; dec dword ptr [rax - 0x73]; and qword ptr [rax - 0x77], rcx; ret 0x894c; 
0x0000000000482600: sub al, 1; add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x00000000004be6c0: sub al, 2; cld; call rsp; 
0x00000000004be6b4: sub al, 2; cld; jmp rsp; 
0x00000000004be6bc: sub al, 2; cld; ljmp [rdx + rax]; cld; call rsp; 
0x000000000043bd5e: sub al, 7; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000432c34: sub al, byte ptr [rax]; adc byte ptr [rax - 0x73], cl; adc eax, 0x23042; lea rax, [rip + 0x22f9b]; cmovne rax, rdx; ret; 
0x0000000000433584: sub al, byte ptr [rax]; adc byte ptr [rax - 0x73], cl; adc eax, 0xfffffc92; lea rax, [rip + 0x221ab]; cmove rax, rdx; ret; 
0x00000000004c8c41: sub al, byte ptr [rax]; add ah, cl; cmc; call qword ptr [rdi]; 
0x00000000004c8bdd: sub al, byte ptr [rax]; add al, dl; cmc; call qword ptr [rax]; 
0x000000000042eba4: sub al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000046f84d: sub al, byte ptr [rax]; add byte ptr [rcx - 0x75], cl; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000043390d: sub al, byte ptr [rax]; add cl, byte ptr [rax - 0x73]; adc eax, 0x227d9; lea rax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x00000000004337cd: sub al, byte ptr [rax]; add cl, byte ptr [rax - 0x73]; adc eax, 0x22909; lea rax, [rip + 0x22862]; cmovne rax, rdx; ret; 
0x000000000043366d: sub al, byte ptr [rax]; add cl, byte ptr [rax - 0x73]; adc eax, 0x22a79; lea rax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x0000000000433974: sub al, byte ptr [rax]; add cl, byte ptr [rax - 0x73]; adc eax, 0x22ac2; lea rax, [rip + 0x22a7b]; cmovne rax, rdx; ret; 
0x0000000000433834: sub al, byte ptr [rax]; add cl, byte ptr [rax - 0x73]; adc eax, 0x22bf2; lea rax, [rip + 0x22bab]; cmovne rax, rdx; ret; 
0x00000000004336d4: sub al, byte ptr [rax]; add cl, byte ptr [rax - 0x73]; adc eax, 0x22d62; lea rax, [rip + 0x22d1b]; cmovne rax, rdx; ret; 
0x0000000000433953: sub al, byte ptr [rax]; add cl, byte ptr [rax - 0x73]; adc eax, 0x22f23; lea rax, [rip + 0x22ecc]; cmovne rax, rdx; ret; 
0x0000000000433813: sub al, byte ptr [rax]; add cl, byte ptr [rax - 0x73]; adc eax, 0x23053; lea rax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x0000000000433773: sub al, byte ptr [rax]; add cl, byte ptr [rax - 0x73]; adc eax, 0x23973; lea rax, [rip + 0x2390c]; cmovne rax, rdx; ret; 
0x000000000043365c: sub al, byte ptr [rax]; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x000000000043219b: sub al, byte ptr [rax]; add dword ptr [rax + rbp + 0x48], esi; test eax, eax; je 0x321b0; lea rax, [rdx - 0x10]; ret; 
0x00000000004285a8: sub al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x2ae298], eax; ret; 
0x0000000000428568: sub al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x2ae2b3], rax; ret; 
0x0000000000428548: sub al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x2ae2cb], rax; ret; 
0x00000000004294b6: sub al, byte ptr [rax]; add rsp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000042eb7e: sub al, byte ptr [rax]; lea rax, [rip - 0x14a7]; mov qword ptr [rip + 0x2a7d1a], rax; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2a7d04], rax; ret; 
0x000000000042eb8c: sub al, byte ptr [rax]; lea rax, [rip - 0xa85]; mov qword ptr [rip + 0x2a7d04], rax; ret; 
0x0000000000427a05: sub al, byte ptr [rax]; ret; 
0x0000000000409142: sub al, byte ptr [rcx]; add byte ptr [rax], al; mov rax, 0x6d2e20; ret; 
0x000000000047be72: sub al, byte ptr [rdx - 0x74b7ffdb]; add al, 0xf8; jmp rax; 
0x000000000043363a: sub al, byte ptr [rdx]; add bh, dh; ret 0; 
0x0000000000433674: sub al, byte ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x229d2; cmovne rax, rdx; ret; 
0x000000000043397b: sub al, byte ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x22a7b; cmovne rax, rdx; ret; 
0x000000000043b385: sub al, ch; std; xlatb; ret; 
0x00000000004cd499: sub bh, cl; call qword ptr [rax]; 
0x00000000004aed65: sub bh, cl; call rax; 
0x00000000004aed65: sub bh, cl; call rax; sub al, 0xf9; call rax; stc; jmp qword ptr [rax + 0x21]; 
0x00000000004cf3c9: sub bl, bh; jmp qword ptr [rbx]; 
0x00000000004cf3f9: sub bl, bh; jmp qword ptr [rsi]; 
0x000000000042086d: sub byte ptr [r13 - 0x667bf02e], r8b; add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x00000000004207d7: sub byte ptr [r8 + 1], r9b; ror dword ptr [rcx - 0x77], 0x47; and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x00000000004ce1c4: sub byte ptr [rax + 0x1fe80000], al; std; call rdx; 
0x00000000004865a7: sub byte ptr [rax + 0x39], cl; ret 0x870f; 
0x00000000004865a6: sub byte ptr [rax + 0x39], r9b; ret 0x870f; 
0x0000000000492d23: sub byte ptr [rax + 1], cl; ret 0x1474; 
0x00000000004207d8: sub byte ptr [rax + 1], cl; ror dword ptr [rcx - 0x77], 0x47; and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x000000000046515f: sub byte ptr [rax - 0x75], cl; je 0x65188; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000046639f: sub byte ptr [rax - 0x75], cl; je 0x663c8; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004600ee: sub byte ptr [rax - 0x75], cl; jl 0x60117; and byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x0000000000480489: sub byte ptr [rax - 0x75], cl; xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000042be03: sub byte ptr [rax - 0x77], cl; je 0x2be2c; and byte ptr [rcx + rcx*4 + 0x5c], cl; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000431cb4: sub byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x0000000000480e46: sub byte ptr [rax - 0x77], cl; push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x000000000047f154: sub byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000049b55c: sub byte ptr [rax - 0x77], cl; ret; 
0x0000000000409749: sub byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + 0x48], cl; mov esi, ebx; mov rdi, r12; call rdx; 
0x0000000000413713: sub byte ptr [rax - 0x7d], cl; ret; 
0x00000000004016a1: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x172d; add rsp, 0xc8; ret; 
0x0000000000401831: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x18bd; add rsp, 0xc8; ret; 
0x000000000041e45e: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1e46c; add rsp, 0xd8; ret; 
0x0000000000403ad2: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x3af5; add rsp, 0x48; ret; 
0x0000000000403e75: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x3e9d; add rsp, 0x10; pop rbx; ret; 
0x00000000004579ab: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x579d4; add rsp, 0x20; pop rbx; ret; 
0x0000000000458763: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x58779; add rsp, 0x28; ret; 
0x0000000000458881: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x58939; add rsp, 0x68; ret; 
0x0000000000458993: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x589db; add rsp, 0x58; ret; 
0x0000000000458c14: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x58cc9; add rsp, 0x78; ret; 
0x0000000000458d23: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x58d73; add rsp, 0x68; ret; 
0x0000000000459712: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x59727; add rsp, 0x28; ret; 
0x000000000046a3db: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6a3e6; add rsp, 0x18; ret; 
0x000000000046a623: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6a673; add rsp, 0x148; ret; 
0x000000000047801e: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x7802c; add rsp, 0xd8; ret; 
0x00000000004849a6: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84a69; add rsp, 0x78; ret; 
0x0000000000484ab8: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84b03; add rsp, 0x58; ret; 
0x0000000000484b3b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84b49; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000484bea: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84c0b; add rsp, 0x38; ret; 
0x0000000000491096: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x910a2; add rsp, 0x20; pop rbx; ret; 
0x0000000000491191: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x911c3; add rsp, 0x38; ret; 
0x0000000000491251: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x9127e; add rsp, 0x68; ret; 
0x00000000004913b2: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x913ee; add rsp, 0x78; ret; 
0x0000000000491681: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x916ae; add rsp, 0x68; ret; 
0x00000000004936bd: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x936fe; leave; ret; 
0x0000000000493c84: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x93d44; add rsp, 0x30; pop rbx; ret; 
0x0000000000494369: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x94374; add rsp, 0x38; ret; 
0x000000000049444c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x94464; add rsp, 0x38; ret; 
0x00000000004977c7: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x977dc; add rsp, 0x38; ret; 
0x00000000004079d0: sub byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rsp + 4]; jne 0x79df; add rsp, 0x18; ret; 
0x000000000041c8e4: sub byte ptr [rax], al; add byte ptr [rax], al; mov eax, r8d; jne 0x1c90c; add rsp, 0x118; ret; 
0x000000000041fb2a: sub byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x00000000004c763c: sub byte ptr [rax], al; add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; adc al, 0; add byte ptr [rax - 0xc], ch; call qword ptr [rdi]; 
0x00000000004cee00: sub byte ptr [rax], al; add byte ptr [rax], al; push 0x800008c; adc edi, ebx; jmp qword ptr [rdi]; 
0x00000000004c70fc: sub byte ptr [rax], al; add byte ptr [rax], al; sldt word ptr fs:[rax]; or al, 6; hlt; call qword ptr [rdi]; 
0x00000000004ce1c0: sub byte ptr [rax], al; add byte ptr [rax], al; sub byte ptr [rax + 0x1fe80000], al; std; call rdx; 
0x000000000045bb25: sub byte ptr [rax], al; je 0x5bb38; test rdx, rdx; je 0x5bb38; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x00000000004589e4: sub byte ptr [rax], al; test eax, eax; jne 0x58a00; xor eax, eax; syscall; 
0x0000000000458ab4: sub byte ptr [rax], al; test eax, eax; jne 0x58ad0; mov eax, 1; syscall; 
0x0000000000458bf1: sub byte ptr [rax], al; test eax, eax; jne 0x58c58; mov eax, 0x48; syscall; 
0x0000000000458d84: sub byte ptr [rax], al; test eax, eax; jne 0x58da0; mov eax, 3; syscall; 
0x000000000042086e: sub byte ptr [rbp - 0x667bf02e], al; add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x000000000045ec64: sub byte ptr [rbp - 0x7eb7ffd9], ch; in al, dx; add byte ptr [rax], 0; add al, ch; in al, dx; ret; 
0x000000000049e951: sub byte ptr [rbx + 0x23aa9005], cl; add byte ptr [rbp - 0xcfb8b40], al; ret; 
0x000000000049e950: sub byte ptr [rbx + 0x23aa9005], r9b; add byte ptr [rbp - 0xcfb8b40], al; ret; 
0x000000000049e841: sub byte ptr [rbx + 0x23aba005], cl; add byte ptr [rbp - 0xcfb8b40], al; ret; 
0x000000000049e840: sub byte ptr [rbx + 0x23aba005], r9b; add byte ptr [rbp - 0xcfb8b40], al; ret; 
0x0000000000457df4: sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000490fbb: sub byte ptr [rbx + rcx*4 + 0x5c], cl; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000490f49: sub byte ptr [rbx + rcx*4 + 0x5c], cl; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000497533: sub byte ptr [rbx - 0x26], dh; mov eax, 1; ret; 
0x0000000000497532: sub byte ptr [rbx - 0x26], sil; mov eax, 1; ret; 
0x00000000004ae9d4: sub byte ptr [rbx - 0x538f0008], 0xf8; jmp qword ptr [rax - 0x53]; 
0x00000000004ccd1c: sub byte ptr [rbx], 0; and dh, ah; clc; jmp qword ptr [rcx]; 
0x0000000000491b16: sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; nop; jmp rdx; 
0x000000000045b49c: sub byte ptr [rcx], al; ret; 
0x0000000000487ea5: sub byte ptr [rcx], dh; imul al; fild dword ptr [rbp - 0x7cb70009]; ret; 
0x0000000000484b69: sub byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xe2; mov esi, 0x5401; mov eax, ecx; syscall; 
0x0000000000410373: sub byte ptr [rdi], al; add dword ptr [rax], eax; add byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000430ad6: sub byte ptr [rdi], cl; test ebx, esi; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x00000000004cf3c4: sub byte ptr [rdx + 0x28080000], dl; sti; jmp qword ptr [rbx]; 
0x00000000004d17b8: sub byte ptr [rdx - 4], ah; jmp qword ptr [rcx]; 
0x000000000043379a: sub byte ptr [rdx], al; add bh, dh; ret 0; 
0x00000000004cd498: sub byte ptr [rdx], ch; stc; call qword ptr [rax]; 
0x00000000004af350: sub byte ptr [rip + 0x2ea0fff9], 0xf9; jmp qword ptr [rax]; 
0x00000000004c6b66: sub byte ptr [rsi + 0x300e4105], al; add dword ptr [rsi], 2; ret; 
0x00000000004cf5d8: sub byte ptr [rsi], dh; sti; jmp qword ptr [rax]; 
0x00000000004aecb4: sub ch, 0xf8; call rax; 
0x00000000004aecb4: sub ch, 0xf8; call rax; out dx, al; clc; jmp qword ptr [rax]; 
0x00000000004aed61: sub cl, bh; call rax; 
0x00000000004777d6: sub cl, bpl; ret 0xffe8; 
0x000000000041d85d: sub cl, byte ptr [rax - 0x77]; ror byte ptr [rax - 0x7d], 1; ret 0x4801; 
0x00000000004285c6: sub cl, byte ptr [rax]; sub eax, dword ptr [rax]; ret; 
0x00000000004777d7: sub cl, ch; ret 0xffe8; 
0x000000000046d8a4: sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000004771fd: sub dh, al; add byte ptr [rip - 0x11ac17], ch; jmp qword ptr [rsi + 0x2e]; 
0x00000000004023bd: sub dh, byte ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004a1bfd: sub dh, dh; call qword ptr [rax + 0x2b]; 
0x00000000004cac21: sub dh, dh; jmp rsi; 
0x000000000045dc8b: sub dl, bh; jmp qword ptr [rsi - 0x70]; 
0x0000000000484a9e: sub dword ptr [rax + 0x101], edi; syscall; 
0x00000000004868c2: sub dword ptr [rax + 0xf000002], -0x7b; ret; 
0x000000000049a2c6: sub dword ptr [rax - 0x80], eax; call qword ptr [rax + 0x74]; 
0x000000000047b112: sub dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000047e084: sub dword ptr [rdi + 0x29], esi; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000456281: sub dword ptr [rdi], ecx; adc dword ptr [rcx - 0x10], esi; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000047e086: sub dword ptr [rdi], ecx; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000047e81f: sub dword ptr [rdi], ecx; xchg dword ptr [rdx + 0x48000000], ecx; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000004337d4: sub dword ptr [rdx], eax; add byte ptr [rax - 0x73], cl; add eax, 0x22862; cmovne rax, rdx; ret; 
0x000000000048cbf3: sub dword ptr [rip + 0x15b80003], 0; add byte ptr [rax], al; syscall; 
0x000000000043c7a6: sub dword ptr [rip - 0xcfffffe], 0xf; outsd dx, dword ptr [rsi]; push rdi; ret; 
0x0000000000470c25: sub dword ptr [rsi], esp; add byte ptr [rax - 0x75], cl; add al, 0xc6; xor esi, esi; jmp rax; 
0x000000000041c87d: sub dword ptr [rsp + 0xd0], eax; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000041c885: sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000041c88d: sub dword ptr [rsp + 0xf0], eax; syscall; 
0x000000000043b117: sub eax, -1; jne 0x3b120; vzeroupper; ret; 
0x0000000000401e15: sub eax, 0; add byte ptr [rcx], dh; fucomi st(1); imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000043222a: sub eax, 0x10; ret; 
0x00000000004aee2d: sub eax, 0x2000fff9; stc; push qword ptr [rax - 0x7f0006df]; and edi, ecx; jmp qword ptr [rax + 0x25]; 
0x00000000004aee0d: sub eax, 0x2040fff9; stc; inc dword ptr [rax]; and bh, cl; call rax; 
0x00000000004aeded: sub eax, 0x2080fff9; stc; inc dword ptr [rax + 0x22]; stc; jmp qword ptr [rax]; 
0x000000000047e81a: sub eax, 0x20; cmp eax, 0x29; ja 0x7e8b0; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000004a9cf4: sub eax, 0x2d000000; add byte ptr [rax], al; add byte ptr [rbp + rcx], bl; add byte ptr [rip - 0x16000000], dh; fdivr st(7); call rdi; 
0x00000000004af351: sub eax, 0x2ea0fff9; stc; jmp qword ptr [rax]; 
0x0000000000490a17: sub eax, 0x3349646c; push rbp; or byte ptr [rcx + 0x33], cl; add byte ptr [r8 + 9], r9b; ret 0x840f; 
0x0000000000441ddf: sub eax, 0x490006cf; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000400e56: sub eax, 0x5bc03100; ret; 
0x00000000004aee4d: sub eax, 0x6d0fff9; stc; call qword ptr [rax]; 
0x00000000004aee4d: sub eax, 0x6d0fff9; stc; call qword ptr [rax]; or edi, ecx; jmp qword ptr [rax + 0xc]; 
0x00000000004c8f65: sub eax, 0x7bf80000; cmc; jmp qword ptr [rdx + 1]; 
0x0000000000476055: sub eax, 0x83000000; ret 0x8b01; 
0x0000000000478c84: sub eax, 0x83000000; ret; 
0x000000000045ca5b: sub eax, 0x890027c4; ret 0xe083; 
0x00000000004c3fba: sub eax, 0x8acc8c6; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000004336db: sub eax, 0x8d480002; add eax, 0x22d1b; cmovne rax, rdx; ret; 
0x00000000004c4354: sub eax, 0xddb680a7; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x0000000000401f64: sub eax, 0xfc08500; mov byte ptr [rdx + 0x48000000], ah; add esp, 8; ret; 
0x00000000004004c4: sub eax, 0xff906600; and eax, 0x2d5bfa; nop; ret; 
0x0000000000477200: sub eax, 0xffee53e9; jmp qword ptr [rsi + 0x2e]; 
0x000000000043b20f: sub eax, 0xffff; jne 0x3b120; ret; 
0x0000000000467a64: sub eax, 1; mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x0000000000455ba4: sub eax, 1; ret; 
0x0000000000410fd2: sub eax, 3; cmp eax, 0xa; ja 0x10c3f; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x000000000045bc19: sub eax, 3; cmp rax, 0x1e; ja 0x5bc44; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000045c93e: sub eax, 4; cmp rax, 0x16; ja 0x5c990; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x0000000000490ee6: sub eax, dword ptr [0]; ret; 
0x0000000000421c34: sub eax, dword ptr [r8]; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x0000000000427b00: sub eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000421c35: sub eax, dword ptr [rax]; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x0000000000427a96: sub eax, dword ptr [rax]; add dword ptr [rip + 0x2b12d5], 1; ret; 
0x00000000004285c8: sub eax, dword ptr [rax]; ret; 
0x0000000000428a4a: sub eax, dword ptr [rax]; test eax, eax; je 0x28a60; mov dword ptr [rip + 0x2b0376], 0; ret; 
0x00000000004109cf: sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046d846: sub eax, dword ptr [rcx + 0xf]; mov dh, 0x47; or al, 0x83; ret; 
0x00000000004283ae: sub eax, dword ptr [rdi + 0x18]; ret; 
0x000000000043be67: sub eax, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000043383b: sub eax, dword ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x22bab; cmovne rax, rdx; ret; 
0x0000000000420463: sub eax, dword ptr [rsi + 0x10]; add rsi, 0x58; mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x00000000004276d3: sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000455d0d: sub eax, eax; cmp eax, ecx; jle 0x55d48; movsxd rax, ecx; ret; 
0x0000000000490354: sub eax, eax; ret; 
0x000000000043b163: sub eax, ecx; je 0x3b170; sbb eax, eax; or eax, 1; ret; 
0x0000000000426da9: sub eax, ecx; lea eax, [r8 - 1]; ret; 
0x00000000004939b0: sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000434e0c: sub eax, ecx; ret; 
0x0000000000481029: sub eax, ecx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x0000000000493930: sub eax, ecx; shl rsi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000044fcb9: sub eax, edi; ret; 
0x000000000048385e: sub eax, edi; shr rax, 2; ret; 
0x0000000000493a93: sub eax, edx; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000043221e: sub eax, edx; movzx edx, byte ptr [rcx + rax]; cmp dl, r8b; jne 0x32210; sub rax, 0x10; ret; 
0x00000000004276fb: sub eax, edx; ret; 
0x0000000000483c50: sub eax, edx; shr rax, 2; vzeroupper; ret; 
0x000000000041ef1d: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x1ef98; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000425e99: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x25ed8; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000425f12: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x25f40; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000426ca2: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x26ce0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000480f17: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x80f50; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000480132: sub eax, edx; sub rsi, rdx; cmp rax, rsi; jbe 0x80170; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000043b12c: sub eax, edx; vzeroupper; ret; 
0x0000000000493af0: sub eax, esi; mov qword ptr [rdi + 8], r9; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000455d6d: sub eax, esi; ret; 
0x0000000000493a92: sub eax, r10d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000455d0c: sub eax, r8d; cmp eax, ecx; jle 0x55d48; movsxd rax, ecx; ret; 
0x0000000000490353: sub eax, r8d; ret; 
0x00000000004230e0: sub ebp, eax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000476b88: sub ebp, ecx; cli; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000421cb6: sub ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004c1075: sub ebx, dword ptr [rbx - 0xb]; pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x0000000000437b65: sub ebx, edx; jbe 0x37b74; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004392c5: sub ebx, edx; jbe 0x392d4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000043a2a5: sub ebx, edx; jbe 0x3a2b4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042a330: sub ecx, dword ptr [rax + 0x39]; ret; 
0x000000000045c308: sub ecx, dword ptr [rax - 0x75]; push rax; or dh, dh; ret 0x8902; 
0x0000000000483fa4: sub ecx, dword ptr [rcx + rcx*4 - 0x40]; shr rax, 2; vzeroupper; ret; 
0x0000000000482de4: sub ecx, dword ptr [rcx + rcx*4 - 0x40]; vzeroupper; ret; 
0x000000000049752d: sub ecx, dword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x97510; mov eax, 1; ret; 
0x0000000000462ff3: sub ecx, ebx; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000004aed21: sub ecx, edi; call qword ptr [rax]; 
0x00000000004aee45: sub ecx, edi; jmp qword ptr [rax]; 
0x000000000041ef20: sub ecx, edx; cmp rax, rcx; jbe 0x1ef98; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000425af6: sub ecx, edx; cmp rax, rcx; jbe 0x25bb0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000425d1e: sub ecx, edx; cmp rax, rcx; jbe 0x25db8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000425e9c: sub ecx, edx; cmp rax, rcx; jbe 0x25ed8; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000425f15: sub ecx, edx; cmp rax, rcx; jbe 0x25f40; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000426ca5: sub ecx, edx; cmp rax, rcx; jbe 0x26ce0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000426d3c: sub ecx, edx; cmp rax, rcx; jbe 0x26d60; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000480f1a: sub ecx, edx; cmp rax, rcx; jbe 0x80f50; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000047ac84: sub ecx, esp; mov r14, rcx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000043f943: sub edi, 0x20; lea r11, [rip + 0x6f3c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cf73: sub edi, 0x20; lea r11, [rip + 0x71bd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f852: sub edi, 0x40; lea r11, [rip + 0x6f4b4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f793: sub edi, 0x40; lea r11, [rip + 0x6f573]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ce82: sub edi, 0x40; lea r11, [rip + 0x71cc4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cdc3: sub edi, 0x40; lea r11, [rip + 0x71d83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004938f6: sub edi, eax; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x00000000004532e3: sub edi, eax; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000046f95d: sub edi, ebx; mov rsi, r11; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000004aed25: sub edi, ecx; call qword ptr [rax]; 
0x0000000000422e90: sub edi, ecx; cmp rax, rdi; jbe 0x22f98; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004aee49: sub edi, ecx; jmp qword ptr [rax]; 
0x00000000004631f3: sub edi, edx; cli; jmp qword ptr [rsi + 0xf]; 
0x000000000044668f: sub edi, edx; lea r11, [rip + 0x68d38]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443b7b: sub edi, edx; lea r11, [rip + 0x6b34c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044632e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x69096]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004461ae: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x69216]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044602e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x69396]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445eae: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x69516]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445d2e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x69696]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445bae: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x69816]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445a2e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x69996]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004458ae: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x69b16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044572e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x69c96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004455ae: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x69e16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044542e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x69f96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004452ae: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6a116]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044512e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6a296]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444fae: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6a416]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444e2e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6a596]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444cb5: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6a70f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044384e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6b676]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004436ce: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6b7f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044354e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6b976]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004433ce: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6baf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044324e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6bc76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004430ce: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6bdf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442f4e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6bf76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442dce: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6c0f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442c4e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6c276]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442ace: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6c3f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044294e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6c576]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004427ce: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6c6f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044264e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6c876]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004424ce: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6c9f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044234e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6cb76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004421d5: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6ccef]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004c3a82: sub edi, esi; int 0x6b; ret; 
0x000000000046f421: sub edi, esp; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000441f81: sub edx, 0x40; lea r11, [rip + 0x6cd85]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441ec1: sub edx, 0x40; sfence; lea r11, [rip + 0x6ce42]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f3fd: sub edx, 0x40; sfence; lea r11, [rip + 0x6f746]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000427700: sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000004276f5: sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000048112b: sub edx, dword ptr [rcx + 0x10]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x00000000004464e1: sub edx, dword ptr [rcx + 0x63490006]; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000481141: sub edx, dword ptr [rcx + 8]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x000000000043a34d: sub edx, eax; jbe 0x3a5f0; add rax, rdi; add rax, rcx; ret; 
0x000000000043a5b4: sub edx, eax; jbe 0x3a5f0; add rax, rdi; ret; 
0x000000000043a5c4: sub edx, eax; jbe 0x3a5f0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000043a5d4: sub edx, eax; jbe 0x3a5f0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000043a5e4: sub edx, eax; jbe 0x3a5f0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004538bc: sub edx, ecx; lea r11, [rip + 0x5c1cb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045329c: sub edx, ecx; lea r11, [rip + 0x5c76b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000042e086: sub edx, edi; lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000046d488: sub edx, esi; call qword ptr [rbx + 0x38]; 
0x0000000000423217: sub edx, esi; cmp r12, rdx; jbe 0x23400; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004205ab: sub edx, esi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000042268f: sub edx, esi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x00000000004789a2: sub edx, esi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000043f78f: sub esi, 0x40; sub rdi, 0x40; lea r11, [rip + 0x6f573]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cdbf: sub esi, 0x40; sub rdi, 0x40; lea r11, [rip + 0x71d83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000047b145: sub esi, ecx; mov rsi, rcx; mov rdi, r15; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000042589f: sub esi, edx; cmp rax, rsi; jbe 0x25900; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000480135: sub esi, edx; cmp rax, rsi; jbe 0x80170; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000480fb4: sub esi, edx; cmp rax, rsi; jbe 0x80fd0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000446331: sub esi, edx; lea r11, [rip + 0x69096]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004461b1: sub esi, edx; lea r11, [rip + 0x69216]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000446031: sub esi, edx; lea r11, [rip + 0x69396]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445eb1: sub esi, edx; lea r11, [rip + 0x69516]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445d31: sub esi, edx; lea r11, [rip + 0x69696]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445bb1: sub esi, edx; lea r11, [rip + 0x69816]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445a31: sub esi, edx; lea r11, [rip + 0x69996]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004458b1: sub esi, edx; lea r11, [rip + 0x69b16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445731: sub esi, edx; lea r11, [rip + 0x69c96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004455b1: sub esi, edx; lea r11, [rip + 0x69e16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445431: sub esi, edx; lea r11, [rip + 0x69f96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004452b1: sub esi, edx; lea r11, [rip + 0x6a116]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445131: sub esi, edx; lea r11, [rip + 0x6a296]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444fb1: sub esi, edx; lea r11, [rip + 0x6a416]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444e31: sub esi, edx; lea r11, [rip + 0x6a596]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444cb8: sub esi, edx; lea r11, [rip + 0x6a70f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443851: sub esi, edx; lea r11, [rip + 0x6b676]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004436d1: sub esi, edx; lea r11, [rip + 0x6b7f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443551: sub esi, edx; lea r11, [rip + 0x6b976]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004433d1: sub esi, edx; lea r11, [rip + 0x6baf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443251: sub esi, edx; lea r11, [rip + 0x6bc76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004430d1: sub esi, edx; lea r11, [rip + 0x6bdf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442f51: sub esi, edx; lea r11, [rip + 0x6bf76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442dd1: sub esi, edx; lea r11, [rip + 0x6c0f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442c51: sub esi, edx; lea r11, [rip + 0x6c276]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442ad1: sub esi, edx; lea r11, [rip + 0x6c3f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442951: sub esi, edx; lea r11, [rip + 0x6c576]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004427d1: sub esi, edx; lea r11, [rip + 0x6c6f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442651: sub esi, edx; lea r11, [rip + 0x6c876]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004424d1: sub esi, edx; lea r11, [rip + 0x6c9f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442351: sub esi, edx; lea r11, [rip + 0x6cb76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004421d8: sub esi, edx; lea r11, [rip + 0x6ccef]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044668c: sub esi, edx; sub rdi, rdx; lea r11, [rip + 0x68d38]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443b78: sub esi, edx; sub rdi, rdx; lea r11, [rip + 0x6b34c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a1bf9: sub esi, esi; inc esp; sub dh, dh; call qword ptr [rax + 0x2b]; 
0x0000000000499b73: sub esp, -0x80; pop rbx; pop rbp; pop r12; ret; 
0x000000000048eea6: sub esp, 0x1000; mov rbx, rsp; mov rsi, rbx; syscall; 
0x0000000000458da4: sub esp, 0x10; call 0x5b080; mov edi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x0000000000427a7f: sub esp, 0x80; call 0x5b030; add rsp, 0x80; mov qword ptr [rip + 0x2b12e0], rdx; add dword ptr [rip + 0x2b12d5], 1; ret; 
0x0000000000477f22: sub esp, 0x80; call 0x5b060; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x00000000004846c7: sub esp, 0x80; call 0x5b060; add rsp, 0x80; pop rbx; ret; 
0x000000000046c117: sub esp, 0x80; call 0x5b060; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x00000000004a188d: sub esp, 8; add rsp, 8; ret; 
0x000000000049c576: sub esp, 8; call 0x1c920; nop; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000401951: sub esp, 8; call 0x2450; test eax, eax; js 0x1968; add rsp, 8; ret; 
0x0000000000401981: sub esp, 8; call 0x2490; test eax, eax; js 0x1998; add rsp, 8; ret; 
0x0000000000400599: sub esp, 8; mov rdi, rax; call 0x2f470; mov qword ptr [rip + 0x2d8b49], 0; pop rax; ret; 
0x0000000000401f53: sub esp, 8; movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; jmp rax; 
0x0000000000407a0a: sub esp, 8; movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x00000000004846f3: sub esp, 8; syscall; 
0x00000000004d0f71: sub esp, edi; call qword ptr [rax]; 
0x0000000000422b9b: sub esp, esi; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000437b64: sub r11, rdx; jbe 0x37b74; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004392c4: sub r11, rdx; jbe 0x392d4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000043a2a4: sub r11, rdx; jbe 0x3a2b4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000422b9a: sub r12, r14; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000047b144: sub r14, rcx; mov rsi, rcx; mov rdi, r15; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000046f95c: sub r15, r11; mov rsi, r11; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000046f420: sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000420462: sub r8, qword ptr [rsi + 0x10]; add rsi, 0x58; mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x0000000000426da8: sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x0000000000481028: sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x0000000000432229: sub rax, 0x10; ret; 
0x0000000000455ba3: sub rax, 1; ret; 
0x000000000045bc18: sub rax, 3; cmp rax, 0x1e; ja 0x5bc44; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000045c93d: sub rax, 4; cmp rax, 0x16; ja 0x5c990; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x0000000000490ee5: sub rax, qword ptr [0]; ret; 
0x00000000004283ad: sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000490ee4: sub rax, qword ptr fs:[0]; ret; 
0x00000000004946c2: sub rax, r8; ret; 
0x000000000043b162: sub rax, rcx; je 0x3b170; sbb eax, eax; or eax, 1; ret; 
0x000000000044fcb8: sub rax, rdi; ret; 
0x000000000048385d: sub rax, rdi; shr rax, 2; ret; 
0x000000000043221d: sub rax, rdx; movzx edx, byte ptr [rcx + rax]; cmp dl, r8b; jne 0x32210; sub rax, 0x10; ret; 
0x0000000000455c73: sub rax, rdx; ret; 
0x0000000000483c4f: sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000041ef1c: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x1ef98; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000425e98: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x25ed8; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000425f11: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x25f40; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000426ca1: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x26ce0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000480f16: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x80f50; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000480131: sub rax, rdx; sub rsi, rdx; cmp rax, rsi; jbe 0x80170; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000044fd0f: sub rax, rdx; vzeroupper; ret; 
0x0000000000455d6c: sub rax, rsi; ret; 
0x00000000004230df: sub rbp, rax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000049752c: sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x97510; mov eax, 1; ret; 
0x000000000047ac83: sub rcx, r12; mov r14, rcx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000041ef1f: sub rcx, rdx; cmp rax, rcx; jbe 0x1ef98; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000425af5: sub rcx, rdx; cmp rax, rcx; jbe 0x25bb0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000425d1d: sub rcx, rdx; cmp rax, rcx; jbe 0x25db8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000425e9b: sub rcx, rdx; cmp rax, rcx; jbe 0x25ed8; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000425f14: sub rcx, rdx; cmp rax, rcx; jbe 0x25f40; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000426ca4: sub rcx, rdx; cmp rax, rcx; jbe 0x26ce0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000426d3b: sub rcx, rdx; cmp rax, rcx; jbe 0x26d60; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000480f19: sub rcx, rdx; cmp rax, rcx; jbe 0x80f50; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000043f942: sub rdi, 0x20; lea r11, [rip + 0x6f3c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cf72: sub rdi, 0x20; lea r11, [rip + 0x71bd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f851: sub rdi, 0x40; lea r11, [rip + 0x6f4b4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f792: sub rdi, 0x40; lea r11, [rip + 0x6f573]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043ce81: sub rdi, 0x40; lea r11, [rip + 0x71cc4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cdc2: sub rdi, 0x40; lea r11, [rip + 0x71d83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000422e8f: sub rdi, rcx; cmp rax, rdi; jbe 0x22f98; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000044668e: sub rdi, rdx; lea r11, [rip + 0x68d38]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443b7a: sub rdi, rdx; lea r11, [rip + 0x6b34c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044632d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x69096]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004461ad: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x69216]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044602d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x69396]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445ead: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x69516]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445d2d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x69696]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445bad: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x69816]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445a2d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x69996]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004458ad: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x69b16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044572d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x69c96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004455ad: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x69e16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044542d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x69f96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004452ad: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6a116]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044512d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6a296]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444fad: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6a416]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444e2d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6a596]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444cb4: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6a70f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044384d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6b676]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004436cd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6b7f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044354d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6b976]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004433cd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6baf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044324d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6bc76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004430cd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6bdf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442f4d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6bf76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442dcd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6c0f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442c4d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6c276]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442acd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6c3f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044294d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6c576]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004427cd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6c6f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044264d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6c876]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004424cd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6c9f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044234d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6cb76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004421d4: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6ccef]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441f80: sub rdx, 0x40; lea r11, [rip + 0x6cd85]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441ec0: sub rdx, 0x40; sfence; lea r11, [rip + 0x6ce42]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f3fc: sub rdx, 0x40; sfence; lea r11, [rip + 0x6f746]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048112a: sub rdx, qword ptr [rcx + 0x10]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000481140: sub rdx, qword ptr [rcx + 8]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000423216: sub rdx, r14; cmp r12, rdx; jbe 0x23400; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000043a34c: sub rdx, rax; jbe 0x3a5f0; add rax, rdi; add rax, rcx; ret; 
0x000000000043a5b3: sub rdx, rax; jbe 0x3a5f0; add rax, rdi; ret; 
0x000000000043a5c3: sub rdx, rax; jbe 0x3a5f0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000043a5d3: sub rdx, rax; jbe 0x3a5f0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000043a5e3: sub rdx, rax; jbe 0x3a5f0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004538bb: sub rdx, rcx; lea r11, [rip + 0x5c1cb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045329b: sub rdx, rcx; lea r11, [rip + 0x5c76b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000042e085: sub rdx, rdi; lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000046d487: sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x00000000004205aa: sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000042268e: sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x00000000004789a1: sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000043f78e: sub rsi, 0x40; sub rdi, 0x40; lea r11, [rip + 0x6f573]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cdbe: sub rsi, 0x40; sub rdi, 0x40; lea r11, [rip + 0x71d83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042589e: sub rsi, rdx; cmp rax, rsi; jbe 0x25900; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000480134: sub rsi, rdx; cmp rax, rsi; jbe 0x80170; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000480fb3: sub rsi, rdx; cmp rax, rsi; jbe 0x80fd0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000446330: sub rsi, rdx; lea r11, [rip + 0x69096]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004461b0: sub rsi, rdx; lea r11, [rip + 0x69216]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000446030: sub rsi, rdx; lea r11, [rip + 0x69396]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445eb0: sub rsi, rdx; lea r11, [rip + 0x69516]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445d30: sub rsi, rdx; lea r11, [rip + 0x69696]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445bb0: sub rsi, rdx; lea r11, [rip + 0x69816]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445a30: sub rsi, rdx; lea r11, [rip + 0x69996]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004458b0: sub rsi, rdx; lea r11, [rip + 0x69b16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445730: sub rsi, rdx; lea r11, [rip + 0x69c96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004455b0: sub rsi, rdx; lea r11, [rip + 0x69e16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445430: sub rsi, rdx; lea r11, [rip + 0x69f96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004452b0: sub rsi, rdx; lea r11, [rip + 0x6a116]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445130: sub rsi, rdx; lea r11, [rip + 0x6a296]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444fb0: sub rsi, rdx; lea r11, [rip + 0x6a416]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444e30: sub rsi, rdx; lea r11, [rip + 0x6a596]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444cb7: sub rsi, rdx; lea r11, [rip + 0x6a70f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443850: sub rsi, rdx; lea r11, [rip + 0x6b676]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004436d0: sub rsi, rdx; lea r11, [rip + 0x6b7f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443550: sub rsi, rdx; lea r11, [rip + 0x6b976]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004433d0: sub rsi, rdx; lea r11, [rip + 0x6baf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443250: sub rsi, rdx; lea r11, [rip + 0x6bc76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004430d0: sub rsi, rdx; lea r11, [rip + 0x6bdf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442f50: sub rsi, rdx; lea r11, [rip + 0x6bf76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442dd0: sub rsi, rdx; lea r11, [rip + 0x6c0f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442c50: sub rsi, rdx; lea r11, [rip + 0x6c276]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442ad0: sub rsi, rdx; lea r11, [rip + 0x6c3f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442950: sub rsi, rdx; lea r11, [rip + 0x6c576]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004427d0: sub rsi, rdx; lea r11, [rip + 0x6c6f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442650: sub rsi, rdx; lea r11, [rip + 0x6c876]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004424d0: sub rsi, rdx; lea r11, [rip + 0x6c9f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442350: sub rsi, rdx; lea r11, [rip + 0x6cb76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004421d7: sub rsi, rdx; lea r11, [rip + 0x6ccef]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044668b: sub rsi, rdx; sub rdi, rdx; lea r11, [rip + 0x68d38]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443b77: sub rsi, rdx; sub rdi, rdx; lea r11, [rip + 0x6b34c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000499b72: sub rsp, -0x80; pop rbx; pop rbp; pop r12; ret; 
0x000000000048eea5: sub rsp, 0x1000; mov rbx, rsp; mov rsi, rbx; syscall; 
0x0000000000458da3: sub rsp, 0x10; call 0x5b080; mov edi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x0000000000427a7e: sub rsp, 0x80; call 0x5b030; add rsp, 0x80; mov qword ptr [rip + 0x2b12e0], rdx; add dword ptr [rip + 0x2b12d5], 1; ret; 
0x0000000000477f21: sub rsp, 0x80; call 0x5b060; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x00000000004846c6: sub rsp, 0x80; call 0x5b060; add rsp, 0x80; pop rbx; ret; 
0x000000000046c116: sub rsp, 0x80; call 0x5b060; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x00000000004a188c: sub rsp, 8; add rsp, 8; ret; 
0x000000000049c575: sub rsp, 8; call 0x1c920; nop; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000401950: sub rsp, 8; call 0x2450; test eax, eax; js 0x1968; add rsp, 8; ret; 
0x0000000000401980: sub rsp, 8; call 0x2490; test eax, eax; js 0x1998; add rsp, 8; ret; 
0x0000000000400598: sub rsp, 8; mov rdi, rax; call 0x2f470; mov qword ptr [rip + 0x2d8b49], 0; pop rax; ret; 
0x0000000000401f52: sub rsp, 8; movsxd rax, dword ptr [rdx + rdi*4]; add rax, rdx; jmp rax; 
0x0000000000407a09: sub rsp, 8; movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x00000000004846f2: sub rsp, 8; syscall; 
0x000000000041003c: syscall; 
0x0000000000458705: syscall; cmp rax, -0xfff; jae 0x58710; ret; 
0x0000000000458e35: syscall; cmp rax, -0xfff; jae 0x58e40; ret; 
0x0000000000459675: syscall; cmp rax, -0xfff; jae 0x59680; ret; 
0x0000000000459747: syscall; cmp rax, -0xfff; jae 0x59752; ret; 
0x0000000000459855: syscall; cmp rax, -0xfff; jae 0x59860; ret; 
0x0000000000459885: syscall; cmp rax, -0xfff; jae 0x59890; ret; 
0x00000000004598b5: syscall; cmp rax, -0xfff; jae 0x598c0; ret; 
0x000000000045af68: syscall; cmp rax, -0xfff; jae 0x5af73; ret; 
0x000000000045af98: syscall; cmp rax, -0xfff; jae 0x5afa3; ret; 
0x000000000045afc5: syscall; cmp rax, -0xfff; jae 0x5afd0; ret; 
0x0000000000484835: syscall; cmp rax, -0xfff; jae 0x84840; ret; 
0x00000000004979e5: syscall; cmp rax, -0xfff; jae 0x979f0; ret; 
0x000000000045b077: syscall; pop rdx; pop rsi; ret; 
0x0000000000484105: syscall; ret; 
0x000000000043dbf6: sysret; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000453ecd: test ah, 0x20; jne 0x53fb0; test ah, 0x40; jne 0x53fc0; lea rax, [rdi + 0xf]; ret; 
0x0000000000453ed6: test ah, 0x40; jne 0x53fc0; lea rax, [rdi + 0xf]; ret; 
0x0000000000453dee: test ah, 0x40; jne 0x53fc0; test dh, 0x40; jne 0x53d30; lea rax, [rdi + 0xf]; ret; 
0x00000000004d1a71: test ah, bh; call qword ptr [rdx]; 
0x000000000046dfdd: test ah, dh; add al, 0; add byte ptr [rcx - 0x7d], al; in al, dx; add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x00000000004a083f: test ah, dl; add dword ptr [rax], eax; add byte ptr [rbx + 0x23600a3d], cl; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000426614: test al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004ab3d8: test al, 0; add byte ptr [rax], al; mov byte ptr [rax], 0; add bh, dl; fdivr st(7); call rdi; 
0x00000000004847f5: test al, 0; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000049a303: test al, 0; add byte ptr [rax], al; ret; 
0x00000000004c7e44: test al, 0x1c; add byte ptr [rax], al; mov byte ptr [rbx - 0xc], bh; jmp qword ptr [rbp + 2]; 
0x0000000000497914: test al, 0x1e; add byte ptr [rax], al; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000453e7c: test al, 0x20; jne 0x53f40; test al, 0x40; jne 0x53f50; lea rax, [rdi + 7]; ret; 
0x00000000004aed10: test al, 0x21; stc; push qword ptr [rax + 0x23]; stc; call qword ptr [rax + 0x25]; 
0x0000000000480d27: test al, 0x28; add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x00000000004c7768: test al, 0x2c; hlt; call qword ptr [rcx]; 
0x0000000000453e84: test al, 0x40; jne 0x53f50; lea rax, [rdi + 7]; ret; 
0x0000000000453d6c: test al, 0x40; jne 0x53f50; test dl, 0x40; jne 0x53d30; lea rax, [rdi + 7]; ret; 
0x0000000000458f04: test al, 0x49; mov esp, edi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x000000000045ac6a: test al, 0x75; ret; 
0x00000000004afb8c: test al, 0x77; cli; inc eax; ja 0xafb8d; jmp rax; 
0x00000000004c1937: test al, 0x97; xchg eax, esp; ret; 
0x00000000004d1144: test al, 0xaf; add byte ptr [rax], al; cmp byte ptr [rdx], dh; cld; jmp qword ptr [rbp]; 
0x000000000048e77b: test al, 0xb0; and al, 0; add byte ptr [rax - 0x77], cl; add eax, 0x24ac89; add rsp, 8; ret; 
0x00000000004d2544: test al, 0xc3; add byte ptr [rax], al; or ah, cl; cld; jmp qword ptr [rax]; 
0x00000000004cc7c8: test al, 0xce; clc; jmp qword ptr [rcx]; 
0x00000000004c247b: test al, 0xe0; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000004a24ed: test al, 0xf6; call qword ptr [rsi - 0x2d]; 
0x00000000004a25cd: test al, 0xf6; call qword ptr [rsi - 0x30]; 
0x00000000004a2721: test al, 0xf6; call qword ptr [rsi - 0x33]; 
0x00000000004a2871: test al, 0xf6; call qword ptr [rsi - 0x36]; 
0x00000000004a2a71: test al, 0xf6; call qword ptr [rsi - 0x3c]; 
0x00000000004a2c85: test al, 0xf6; call qword ptr [rsi - 0x42]; 
0x00000000004a2d85: test al, 0xf6; call qword ptr [rsi - 0x45]; 
0x00000000004a2ff1: test al, 0xf6; call qword ptr [rsi - 0x4b]; 
0x00000000004a38cd: test al, 0xf6; call qword ptr [rsi - 0x57]; 
0x00000000004a2495: test al, 0xf6; call qword ptr [rsi]; 
0x00000000004a2651: test al, 0xf6; call rsi; 
0x00000000004a2af5: test al, 0xf6; call rsi; ret 0xfff6; 
0x00000000004a30e9: test al, 0xf6; inc dword ptr [rsi + 0x6efff6b2]; mov dl, 0xf6; call qword ptr [rsi - 0x4e]; 
0x00000000004a30a9: test al, 0xf6; inc dword ptr [rsi - 0x4d]; idiv bh; mov bl, 0xf6; call qword ptr [rsi]; 
0x00000000004a2ae5: test al, 0xf6; inc dword ptr [rsi]; ret; 
0x00000000004a2539: test al, 0xf6; jmp qword ptr [rsi - 0x2e]; 
0x00000000004a261d: test al, 0xf6; jmp qword ptr [rsi - 0x31]; 
0x00000000004a2791: test al, 0xf6; jmp qword ptr [rsi - 0x34]; 
0x00000000004a28dd: test al, 0xf6; jmp qword ptr [rsi - 0x37]; 
0x00000000004a29f5: test al, 0xf6; jmp qword ptr [rsi - 0x3a]; 
0x00000000004a2bd5: test al, 0xf6; jmp qword ptr [rsi - 0x40]; 
0x00000000004a2cc9: test al, 0xf6; jmp qword ptr [rsi - 0x43]; 
0x00000000004a2f11: test al, 0xf6; jmp qword ptr [rsi - 0x49]; 
0x00000000004a33a5: test al, 0xf6; jmp qword ptr [rsi - 0x52]; 
0x00000000004a3659: test al, 0xf6; jmp qword ptr [rsi - 0x55]; 
0x00000000004a24f9: test al, 0xf6; jmp qword ptr [rsi]; 
0x00000000004a24b5: test al, 0xf6; jmp rsi; 
0x00000000004a2ad9: test al, 0xf6; lcall [rsi]; ret; 
0x00000000004a3239: test al, 0xf6; ljmp [rsi]; mov al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi]; 
0x00000000004a2b39: test al, 0xf6; ljmp [rsi]; ret 0xfff6; 
0x00000000004a25c9: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x30]; 
0x00000000004a271d: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x33]; 
0x00000000004a286d: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x36]; 
0x00000000004a2a6d: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x3c]; 
0x00000000004a2fed: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x4b]; 
0x00000000004a38c9: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x57]; 
0x00000000004a2491: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi]; 
0x00000000004a2bfd: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call rsi; 
0x00000000004a30e5: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; inc dword ptr [rsi + 0x6efff6b2]; mov dl, 0xf6; call qword ptr [rsi - 0x4e]; 
0x00000000004a2ae1: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; inc dword ptr [rsi]; ret; 
0x00000000004a278d: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi - 0x34]; 
0x00000000004a33a1: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi - 0x52]; 
0x00000000004a25e1: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi]; 
0x00000000004a24b1: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; jmp rsi; 
0x00000000004a2ad5: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; lcall [rsi]; ret; 
0x00000000004a25c5: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x30]; 
0x00000000004a2719: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x33]; 
0x00000000004a2869: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x36]; 
0x00000000004a2a69: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x3c]; 
0x00000000004a2fe9: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x4b]; 
0x00000000004a38c5: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi - 0x57]; 
0x00000000004a248d: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call qword ptr [rsi]; 
0x00000000004a2cf5: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; call rsi; 
0x00000000004a2789: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi - 0x34]; 
0x00000000004a339d: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi - 0x52]; 
0x00000000004a25dd: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; jmp qword ptr [rsi]; 
0x00000000004a24ad: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; push qword ptr [rax]; test al, 0xf6; jmp rsi; 
0x00000000004a2ac9: test al, 0xf6; push qword ptr [rax]; test al, 0xf6; push qword ptr [rsi]; ret; 
0x00000000004a2acd: test al, 0xf6; push qword ptr [rsi]; ret; 
0x00000000004a2a85: test al, 0xf6; push rsi; ret; 
0x0000000000485c85: test al, 0xf7; dec dword ptr [rax + 0x39]; ret; 
0x0000000000442dd6: test al, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048dbd5: test al, al; cmove rcx, rax; mov rax, rcx; ret; 
0x00000000004350ca: test al, al; jne 0x350b0; xor eax, eax; sub eax, ecx; ret; 
0x000000000046faa9: test al, dl; adc al, 0; add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x000000000042ef26: test bh, 0xff; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000049a2e1: test bh, bh; je 0x9a2eb; cmp dil, 0x10; jne 0x9a308; xor eax, eax; ret; 
0x000000000049d481: test bh, bh; je 0x9d48b; cmp dil, 0x10; jne 0x9d49e; xor eax, eax; ret; 
0x000000000049e2e1: test bh, bh; je 0x9e2eb; cmp dil, 0x10; jne 0x9e2fe; xor eax, eax; ret; 
0x000000000049ed51: test bh, bh; je 0x9ed5b; cmp dil, 0x10; jne 0x9ed78; xor eax, eax; ret; 
0x000000000049a1bc: test bh, bh; jns 0x9a1c3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000049d1dc: test bh, bh; jns 0x9d1e3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000049eddc: test bh, bh; jns 0x9ede3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x0000000000415bf1: test bh, bl; sbb al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000419238: test bh, bl; sbb byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000481f8c: test bh, dh; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000487f80: test bh, dh; dec dword ptr [rax - 0x77]; ret; 
0x000000000042a0d4: test bh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x0000000000442ad6: test bl, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004078f1: test byte ptr [rax + 0x63], 4; mov cl, 0x48; add eax, ecx; jmp rax; 
0x000000000041f21f: test byte ptr [rax + rax - 0x76b80000], ch; ret; 
0x0000000000404f12: test byte ptr [rax + rbp*8], ah; or dword ptr [rax], eax; add al, ch; ret; 
0x00000000004788f4: test byte ptr [rax + rcx*4 - 0x73], 0xb8; idiv bh; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff730; call rax; 
0x000000000041c87e: test byte ptr [rax + rdx*8], ah; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000045b4fc: test byte ptr [rax - 0x73], 0x3d; rcl dword ptr [rax + 5], 0; mov eax, 0x15; syscall; 
0x0000000000490446: test byte ptr [rax - 0x73], 0x3d; sub al, 0xf5; add al, byte ptr [rax]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000048cbef: test byte ptr [rax - 0x73], 0x3d; sub dword ptr [rip + 0x15b80003], 0; add byte ptr [rax], al; syscall; 
0x000000000047bb18: test byte ptr [rax - 0x74b7ffdb], al; add al, 0xf8; jmp rax; 
0x00000000004685c1: test byte ptr [rax - 0x76b80000], ch; ret 0x2948; 
0x0000000000422ba2: test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x40]; 
0x000000000047f78f: test byte ptr [rax - 0x77], 0xef; call qword ptr [rax + 0x38]; 
0x000000000041f151: test byte ptr [rax - 0x77], 0xf0; ret; 
0x0000000000407a05: test byte ptr [rax - 0x77], 0xfd; sub rsp, 8; movsxd rax, dword ptr [rdx + rsi*4]; add rax, rdx; jmp rax; 
0x000000000047a2e9: test byte ptr [rax - 0x7c000019], ah; ret; 
0x000000000041c886: test byte ptr [rax], ah; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xf0], eax; syscall; 
0x0000000000483b6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rax, 3; ret; 
0x000000000043a58a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000043a7ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000041d77a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rbx]; 
0x000000000042909a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x00000000004095fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea eax, [rsi*8 + 0x14]; ret; 
0x0000000000453f7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x0000000000453f8a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x0000000000453f9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x0000000000453faa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x0000000000453fba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x0000000000453efa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 1]; ret; 
0x0000000000453f0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x0000000000453f1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x0000000000453f2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x0000000000453f3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x0000000000453f4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x0000000000453f5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x0000000000453f6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x0000000000453eea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi]; ret; 
0x0000000000493d8a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x245349]; mov qword ptr [rip + 0x24532a], rax; ret; 
0x000000000045c83a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x27aaf9]; ret; 
0x000000000040c85a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x954a7]; ret; 
0x000000000040c84a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x954ac]; ret; 
0x000000000040c83a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x954b0]; ret; 
0x000000000040c81a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x954bc]; ret; 
0x000000000040c80a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x954c7]; ret; 
0x000000000040c7ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x954d8]; ret; 
0x000000000040c7fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x954e4]; ret; 
0x000000000040c86a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x95528]; ret; 
0x000000000040c82a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x9556f]; ret; 
0x000000000040bc4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x960b7]; ret; 
0x000000000040bc3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x960bc]; ret; 
0x000000000040bc2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x960c0]; ret; 
0x000000000040bc0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x960cc]; ret; 
0x000000000040bbfa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x960d7]; ret; 
0x000000000040bbda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x960e8]; ret; 
0x000000000040bbea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x960f4]; ret; 
0x000000000040bc5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x96138]; ret; 
0x000000000040bc1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x9617f]; ret; 
0x000000000040b03a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x96cc7]; ret; 
0x000000000040b02a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x96ccc]; ret; 
0x000000000040b01a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x96cd0]; ret; 
0x000000000040affa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x96cdc]; ret; 
0x000000000040afea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x96ce7]; ret; 
0x000000000040afca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x96cf8]; ret; 
0x000000000040afda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x96d04]; ret; 
0x000000000040b04a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x96d48]; ret; 
0x000000000040b00a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x96d8f]; ret; 
0x000000000040a32a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x979e3]; ret; 
0x000000000040a31a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x979e7]; ret; 
0x000000000040a30a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x979ec]; ret; 
0x000000000040a2fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x979f0]; ret; 
0x000000000040a2da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x979fc]; ret; 
0x000000000040a2ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x97a07]; ret; 
0x000000000040a2aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x97a18]; ret; 
0x000000000040a2ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x97a1e]; ret; 
0x000000000040a2ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x97a24]; ret; 
0x0000000000421cda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x000000000045394a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000045332a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000045333a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000048487a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x000000000048487a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x000000000048486a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x000000000048486a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x000000000048488a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x000000000048488a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x000000000045984a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xb; syscall; 
0x0000000000409bca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff20; ret; 
0x0000000000409dba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff21; ret; 
0x0000000000409daa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff22; ret; 
0x0000000000409d9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff23; ret; 
0x0000000000409d8a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff2a; ret; 
0x0000000000409d7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff2b; ret; 
0x0000000000409d6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff2c; ret; 
0x0000000000409d5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff2d; ret; 
0x0000000000409d4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff34; ret; 
0x0000000000409d3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff35; ret; 
0x0000000000409d2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff36; ret; 
0x0000000000409d1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff37; ret; 
0x0000000000409cba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff88; ret; 
0x0000000000409c8a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff89; ret; 
0x0000000000409bea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff8a; ret; 
0x0000000000409c7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff8b; ret; 
0x0000000000409caa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff8c; ret; 
0x0000000000409c3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff8d; ret; 
0x0000000000409cda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff8e; ret; 
0x0000000000409cea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff8f; ret; 
0x0000000000409c6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff90; ret; 
0x0000000000409cca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff91; ret; 
0x0000000000409c5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff92; ret; 
0x0000000000409c9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff93; ret; 
0x0000000000409d0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff94; ret; 
0x0000000000409c1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff95; ret; 
0x0000000000409c2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff96; ret; 
0x0000000000409bda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff97; ret; 
0x0000000000409c4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff98; ret; 
0x0000000000409c0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff99; ret; 
0x0000000000409bfa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff9a; ret; 
0x0000000000409cfa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffff9b; ret; 
0x000000000040247a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffa1; ret; 
0x0000000000400ffa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffea; ret; 
0x00000000004279aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000049d42a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 2; ret; 
0x000000000040234a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rip + 0x2d3dae]; ret; 
0x00000000004581ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov edi, edx; mov eax, esi; syscall; 
0x000000000044420a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045b4aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x20], rsi; ret; 
0x000000000049c5aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0x98], rsi; ret; 
0x000000000042690a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa0], -1; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000046a2ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x000000000046a30a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000046a32a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x000000000042799a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -1; ret; 
0x000000000040922a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d2ca0; ret; 
0x000000000040921a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d2ea0; ret; 
0x00000000004091aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d2fa0; ret; 
0x00000000004094aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d52c0; pop rbx; ret; 
0x000000000040919a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d5300; ret; 
0x000000000040918a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d5340; ret; 
0x000000000040923a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d5380; ret; 
0x000000000040924a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d53c0; ret; 
0x000000000040925a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0x6d5400; ret; 
0x000000000046a48a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xf; syscall; 
0x0000000000483b8a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 1; ret; 
0x0000000000483b9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 2; ret; 
0x0000000000483baa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 3; ret; 
0x0000000000483bba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 4; ret; 
0x0000000000483bca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 5; ret; 
0x0000000000483bda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 6; ret; 
0x0000000000483bea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 7; ret; 
0x0000000000490eca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; ret; 
0x000000000048b85a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x00000000004812ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000427a1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049c52a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000049c5ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000049c61a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000049c60a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000049c5ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000045e7fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x27b191]; ret; 
0x00000000004279fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2ae759]; ret; 
0x000000000049a2fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsi + 0xa8]; ret; 
0x0000000000482e6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x0000000000427a2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; ret; 
0x000000000043292a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rsi, rbp; mov rdi, rax; call rcx; 
0x000000000049036a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movsx eax, dl; sub eax, ecx; ret; 
0x0000000000421f9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdx]; ret; 
0x0000000000401cca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movzx edi, dil; mov dword ptr [rip + 0x2d442e], edi; ret; 
0x000000000044439a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000044431a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000004598a5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x0000000000484855: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x0000000000459875: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x0000000000494728: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x27; syscall; 
0x000000000045afb8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x63; syscall; 
0x00000000004840f8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc9; syscall; 
0x0000000000420b4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000043aa5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; vzeroupper; xor eax, eax; ret; 
0x000000000040117a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004829ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x000000000041f14a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor esi, esi; mov rax, rsi; ret; 
0x0000000000453d2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x000000000045e2e2: test byte ptr [rbp + rcx*4 + 0x3c], cl; ret; 
0x000000000046a466: test byte ptr [rbp - 0x6bf0bf40], 0xc6; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x000000000047a1ec: test byte ptr [rbp - 0x7c000018], bl; ret; 
0x0000000000468b04: test byte ptr [rbx + rdi*8 - 0x7cb70001], bh; rol byte ptr [rcx], 0x83; ret 0x4801; 
0x000000000047e65f: test byte ptr [rbx + rdi*8 - 1], dh; dec dword ptr [rax - 0x73]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000043e867: test byte ptr [rbx - 0x76b303aa], 0x5f; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000428a48: test byte ptr [rbx], al; sub eax, dword ptr [rax]; test eax, eax; je 0x28a60; mov dword ptr [rip + 0x2b0376], 0; ret; 
0x0000000000455352: test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x0000000000402093: test byte ptr [rcx + 0x2d408635], 0; ret; 
0x0000000000402083: test byte ptr [rcx + 0x2d409235], 0; ret; 
0x0000000000402073: test byte ptr [rcx + 0x2d409635], 0; ret; 
0x0000000000402063: test byte ptr [rcx + 0x2d40a235], 0; ret; 
0x0000000000401f33: test byte ptr [rcx + 0x2d41da35], 0; ret; 
0x0000000000401f23: test byte ptr [rcx + 0x2d41ee35], 0; ret; 
0x0000000000401f13: test byte ptr [rcx + 0x2d420a35], 0; ret; 
0x000000000047ecff: test byte ptr [rcx + 0x48fffffc], cl; lea ecx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000049b40b: test byte ptr [rcx + rax - 0x20], cl; jmp rax; 
0x0000000000455349: test byte ptr [rcx + rax - 0x67d0000], al; adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x00000000004825ff: test byte ptr [rcx + rax], ch; add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000041f4ff: test byte ptr [rcx + rcx*4 - 0x19], 0x41; call qword ptr [rdi + 0x38]; 
0x000000000049cfa2: test byte ptr [rcx + rcx*4 - 0x19], 0x41; call rdi; 
0x000000000040c89b: test byte ptr [rcx + rcx], dl; ret; 
0x0000000000471162: test byte ptr [rcx - 0x7a000007], al; ror byte ptr [rdi], 0x84; ret; 
0x000000000046346d: test byte ptr [rdi + rdi*8 - 1], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000410379: test byte ptr [rdi + rdi*8 - 1], ch; jmp qword ptr [rsi - 0x70]; 
0x00000000004321b0: test byte ptr [rdi + rdx - 8], 1; lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x000000000045a964: test byte ptr [rdi - 0x7d000000], bl; ret; 
0x00000000004aaca8: test byte ptr [rdi], 0; add byte ptr [rsi], dh; add dword ptr [rax], eax; add byte ptr [rdx], ah; fdivr st(7); jmp qword ptr [rdx]; 
0x0000000000480cf4: test byte ptr [rdi], 2; mov rbx, rdi; jne 0x80d68; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x0000000000464446: test byte ptr [rdi], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x0000000000483741: test byte ptr [rdx + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x0000000000482571: test byte ptr [rdx + 0x48000001], bh; bsr eax, eax; add rax, rdi; ret; 
0x0000000000409109: test byte ptr [rdx + 1], al; add byte ptr [rax], al; cmp edi, 0x16; jne 0x9270; mov rax, 0x6d2f60; ret; 
0x00000000004090c9: test byte ptr [rdx + 1], dl; add byte ptr [rax], al; cmp edi, 0xc0000008; jne 0x9270; mov rax, 0x6d2de0; ret; 
0x000000000042f13e: test byte ptr [rdx], ah; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x0000000000481f74: test byte ptr [rdx], al; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000430c9e: test byte ptr [rdx], al; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x000000000048566e: test byte ptr [rdx], bl; add dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x00000000004c9420: test byte ptr [rdx], dh; add byte ptr [rax], al; pushfq; xchg eax, ebp; cmc; call qword ptr [rax]; 
0x000000000043119e: test byte ptr [rdx], dl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x0000000000494500: test byte ptr [rip + 0x24494b], 0x10; lea rdx, [rip + 0x102]; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x0000000000432c30: test byte ptr [rip + 0x2a621b], 0x10; lea rdx, [rip + 0x23042]; lea rax, [rip + 0x22f9b]; cmovne rax, rdx; ret; 
0x0000000000478d74: test byte ptr [rip - 0x7c000003], dl; ret; 
0x000000000046e7a4: test byte ptr [rip - 0x7c000011], al; ret; 
0x0000000000482a7d: test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x000000000043509a: test byte ptr [rsi + 0x48fffffe], dl; bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000497bbd: test byte ptr [rsi - 0x7cfffff5], bl; ret 0x4101; 
0x00000000004624b1: test byte ptr [rsi - 0x8fffffc], cl; ret 0; 
0x000000000043f641: test byte ptr [rsi], 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044fb9d: test byte ptr [rsi], bh; add byte ptr [rax], al; bsf rax, rdx; ret; 
0x00000000004cc020: test byte ptr [rsi], bl; add byte ptr [rsp], bl; clc; call rsp; 
0x000000000049603b: test byte ptr [rsp + rdx], ah; add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; pop rbp; mov eax, 0x89fd8945; ret 0xe283; 
0x0000000000404a2a: test byte ptr [rsp], ah; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x84c7; 
0x0000000000419922: test ch, dl; add al, 0; add byte ptr [rbx - 0x7bf0fc08], al; ret; 
0x00000000004424d6: test cl, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004991fa: test cl, bl; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x000000000045582f: test cl, cl; jne 0x55820; ret; 
0x00000000004558df: test cl, cl; jne 0x558d0; ret; 
0x0000000000455b9f: test cl, cl; jne 0x55b90; sub rax, 1; ret; 
0x0000000000453df7: test dh, 0x40; jne 0x53d30; lea rax, [rdi + 0xf]; ret; 
0x0000000000455286: test dh, 0x40; jne 0x55250; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x000000000045737a: test dh, 0xf0; je 0x572a2; lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x0000000000453e3d: test dh, 4; jne 0x53d30; lea rax, [rdi + 0xb]; ret; 
0x00000000004427d6: test dh, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a0bc1: test dh, al; add eax, 0x89490000; ret 0x8349; 
0x00000000004090a5: test dh, cl; add dword ptr [rax], eax; add byte ptr [rdi], cl; xchg dword ptr [rax - 0x7f000000], esp; call qword ptr [rsi]; 
0x000000000045fec5: test dh, dh; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000004d081c: test dh, dh; sti; call rdx; 
0x000000000049a2e0: test dil, dil; je 0x9a2eb; cmp dil, 0x10; jne 0x9a308; xor eax, eax; ret; 
0x000000000049d480: test dil, dil; je 0x9d48b; cmp dil, 0x10; jne 0x9d49e; xor eax, eax; ret; 
0x000000000049e2e0: test dil, dil; je 0x9e2eb; cmp dil, 0x10; jne 0x9e2fe; xor eax, eax; ret; 
0x000000000049ed50: test dil, dil; je 0x9ed5b; cmp dil, 0x10; jne 0x9ed78; xor eax, eax; ret; 
0x000000000049a1bb: test dil, dil; jns 0x9a1c3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000049d1db: test dil, dil; jns 0x9d1e3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000049eddb: test dil, dil; jns 0x9ede3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x0000000000453d74: test dl, 0x40; jne 0x53d30; lea rax, [rdi + 7]; ret; 
0x00000000004551d2: test dl, 0x40; jne 0x55250; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000453da2: test dl, 4; jne 0x53d30; lea rax, [rdi + 3]; ret; 
0x00000000004b0089: test dl, bh; dec dword ptr [rdi]; xchg dl, bh; push rsp; test dl, bh; jmp qword ptr [rdi - 0x7a]; 
0x00000000004b0091: test dl, bh; jmp qword ptr [rdi - 0x7a]; 
0x00000000004b0075: test dl, bh; jmp rcx; 
0x00000000004b0109: test dl, bh; push qword ptr [rdx]; test edx, edi; jmp rcx; 
0x00000000004b0071: test dl, bh; push rsp; test dl, bh; jmp rcx; 
0x00000000004b006d: test dl, bh; push rsp; test dl, bh; push rsp; test dl, bh; jmp rcx; 
0x000000000049b514: test dl, cl; add al, 0; add al, ch; add dl, byte ptr [rax + rdi*8]; jmp qword ptr [rsi - 0x70]; 
0x0000000000483b37: test dl, dl; je 0x83b50; mov cl, dl; and cl, 0xf; je 0x83b60; ret; 
0x0000000000455a4f: test dl, dl; jne 0x55a40; lea rax, [rcx - 1]; ret; 
0x0000000000400593: test dl, dl; jne 0x598; ret; 
0x00000000004902c7: test dl, dl; jne 0x9029a; movsx eax, cl; neg eax; ret; 
0x0000000000406841: test dword ptr [rax + 0x48000000], edx; add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000494263: test dword ptr [rax + 0x48000000], esp; mov edx, dword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000482dab: test dword ptr [rax + 0x4c000000], esp; mov eax, eax; vzeroupper; ret; 
0x000000000049c56a: test dword ptr [rax + 0x7508313c], 0x10894804; ret; 
0x00000000004a0f13: test dword ptr [rax + 0xf000008], ecx; xchg eax, ebx; ret 0x3d83; 
0x000000000048de36: test dword ptr [rax + 0xfffffd], esp; add byte ptr [rax], al; add byte ptr [rcx - 0x26b7b], cl; jmp qword ptr [rsi + 0x41]; 
0x0000000000401d9e: test dword ptr [rax + 1], eax; add byte ptr [rax], al; add rsp, 0x20; pop rbx; ret; 
0x0000000000453e7f: test dword ptr [rax + rax + 0x40a80000], edi; jne 0x53f50; lea rax, [rdi + 7]; ret; 
0x000000000043a9a7: test dword ptr [rax + rax - 0x3fcf0000], edx; vzeroupper; ret; 
0x0000000000492afd: test dword ptr [rax - 0x2f], 0x48d48fb; fld qword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x149; 
0x0000000000406a32: test dword ptr [rax - 0x48000000], esi; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000403068: test dword ptr [rax - 0x75], 0x31088b00; shr al, 0xcb; add byte ptr [rip - 0x3ea1700], 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000459735: test dword ptr [rax - 0x77], 0xca8948d6; mov r10, r8; mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x000000000045e3c0: test dword ptr [rax - 0x77], 0xe6e89075; in al, 0xff; dec dword ptr [rcx + rcx*4 - 1]; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x0000000000481f8d: test dword ptr [rax], 0x83480000; ret 0xe901; 
0x0000000000478256: test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x00000000004046c6: test dword ptr [rax], eax; add rax, r13; jmp rax; 
0x000000000045c9c1: test dword ptr [rax], eax; add rax, rbp; jmp rax; 
0x000000000046e219: test dword ptr [rax], ecx; idiv edi; call qword ptr [rax]; 
0x0000000000478966: test dword ptr [rax], esi; idiv edi; dec dword ptr [rax - 0x39]; ret 0x7c60; 
0x00000000004046c5: test dword ptr [rax], r8d; add rax, r13; jmp rax; 
0x000000000045c9c0: test dword ptr [rax], r8d; add rax, rbp; jmp rax; 
0x000000000046f41f: test dword ptr [rbp + 0x29], 0xfa894ce7; call qword ptr [rax + 0x38]; 
0x0000000000401aed: test dword ptr [rbp + 0x48000000], edx; add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000483f6e: test dword ptr [rbp + 0x4c000000], ebx; mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x000000000043a538: test dword ptr [rbx + 0x31000000], esp; rol bl, 0x83; ret 0x6620; 
0x0000000000458c19: test dword ptr [rbx + 0x48000000], ebp; add esp, 0x78; ret; 
0x0000000000453e38: test dword ptr [rbx + 1], eax; add byte ptr [rax], al; test dh, 4; jne 0x53d30; lea rax, [rdi + 0xb]; ret; 
0x000000000043c2a7: test dword ptr [rbx + 7], edx; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000043c6f6: test dword ptr [rbx + rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000043b378: test dword ptr [rbx - 0x3a000003], esp; std; xlatb; ret 0xe883; 
0x000000000043e6a3: test dword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x0000000000443f93: test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x000000000042ef78: test dword ptr [rbx], edx; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000420c0f: test dword ptr [rcx + 0x48000000], ebp; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004254a8: test dword ptr [rcx + 0x48000000], edi; add esp, 0x38; pop rbx; pop rbp; ret; 
0x00000000004849ab: test dword ptr [rcx + 0x48000000], edi; add esp, 0x78; ret; 
0x000000000048b718: test dword ptr [rcx + 0x48000002], ecx; mov eax, dword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x0000000000409112: test dword ptr [rcx + 1], ebx; add byte ptr [rax], al; mov rax, 0x6d2f60; ret; 
0x000000000043c27d: test dword ptr [rcx + 7], esi; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000043c18d: test dword ptr [rcx + 8], esp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000043c0b9: test dword ptr [rcx + 9], eax; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000043c09d: test dword ptr [rcx + 9], edx; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000046ff10: test dword ptr [rcx + rcx*4 - 0x73], 0xfffffb18; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000040b0ab: test dword ptr [rcx + rcx], ebp; ret; 
0x0000000000420428: test dword ptr [rcx - 0x16000002], esi; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x0000000000414672: test dword ptr [rcx - 0x7d], 0x44e801c5; mov esi, 0x8d4dfffe; je 0x14686; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x00000000004091c4: test dword ptr [rdi + 0x48000000], esp; mov eax, 0x6d2da0; ret; 
0x00000000004269aa: test dword ptr [rdi + 0x48000002], esp; add esp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000472b57: test dword ptr [rdi + 0xf660004], esi; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000049d384: test dword ptr [rdi + rdi*8 - 1], esi; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000473f53: test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x000000000042c3bc: test dword ptr [rdi], eax; add eax, 0x39480000; ret 0xf275; 
0x00000000004016a6: test dword ptr [rdx + 0x48000000], eax; add esp, 0xc8; ret; 
0x000000000045e8d2: test dword ptr [rdx + 0x48000000], ebx; add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000466e20: test dword ptr [rdx + 0x48000000], edi; add esp, 0xb8; pop rbx; pop r12; ret; 
0x000000000043c2bb: test dword ptr [rdx + 7], ecx; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000043c1b9: test dword ptr [rdx + 8], esp; add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000043bfc2: test dword ptr [rdx + rcx], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000401955: test dword ptr [rdx], 0xc0850000; js 0x1968; add rsp, 8; ret; 
0x000000000040fe29: test dword ptr [rdx], edx; add al, byte ptr [rax]; add bh, bh; push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000040fcd9: test dword ptr [rdx], esi; add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; push rax; and byte ptr [rax + 1], cl; ret 0xb70f; 
0x0000000000482863: test dword ptr [rip - 0x76ffffff], edi; ret 0x8948; 
0x0000000000458886: test dword ptr [rsi + 0x48000000], ebp; add esp, 0x68; ret; 
0x0000000000493c89: test dword ptr [rsi + 0x48000000], esi; add esp, 0x30; pop rbx; ret; 
0x0000000000493e4a: test dword ptr [rsi + 0x48000001], eax; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004090d5: test dword ptr [rsi + 0x48000001], edx; mov eax, 0x6d2de0; ret; 
0x0000000000453d9d: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; test dl, 4; jne 0x53d30; lea rax, [rdi + 3]; ret; 
0x00000000004555b2: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042875c: test dword ptr [rsi + rdi*8 + 0x5d5bffff], ebp; pop r12; pop r13; pop r14; ret; 
0x00000000004788ed: test dword ptr [rsi + rsi*8 - 0x76b30001], esi; test byte ptr [rax + rcx*4 - 0x73], 0xb8; idiv bh; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff730; call rax; 
0x000000000046f0e1: test dword ptr [rsi - 0x16000007], esi; ret; 
0x000000000047d768: test dword ptr [rsi - 0x16000022], ecx; sahf; fdivr st(7); jmp qword ptr [rsi + 0xf]; 
0x000000000041e90d: test dword ptr [rsi - 0x77000000], esp; ret 0xe281; 
0x000000000043f407: test dword ptr [rsi], 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043c4c8: test dword ptr [rsi], esp; add eax, 0xc0310000; ret; 
0x0000000000420c10: test eax, 0x48000000; add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000440663: test eax, 0x490006e6; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d8a3: test eax, 0x49000712; movsxd rdx, dword ptr [rbx + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444abf: test eax, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004d0ac1: test eax, 0x7cc0000; cld; jmp qword ptr [rbx + 1]; 
0x00000000004c3620: test eax, 0x7d4c8c5d; ret 0xd8f; 
0x0000000000442146: test eax, 0x7f0f41f3; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000049ea79: test eax, 0x7fe80023; adc eax, 0x9ae8ffb6; fdivrp st(7); jmp qword ptr [rsi + 0x2e]; 
0x00000000004c4352: test eax, 0x80a72de5; mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x000000000044e462: test eax, 0xe3c4c9eb; jns 0x4e4cc; rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000044ec42: test eax, 0xe3c4c9eb; jns 0x4ecac; rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x0000000000455bb8: test eax, 0xfffd3be9; jmp qword ptr [rsi - 0x70]; 
0x000000000045aeeb: test eax, eax; cmove eax, edx; ret; 
0x000000000040a401: test eax, eax; cmovns eax, edx; add rsp, 8; ret; 
0x000000000040115f: test eax, eax; je 0x1170; mov eax, dword ptr [rax]; add rsp, 8; ret; 
0x0000000000428a4c: test eax, eax; je 0x28a60; mov dword ptr [rip + 0x2b0376], 0; ret; 
0x00000000004321a1: test eax, eax; je 0x321b0; lea rax, [rdx - 0x10]; ret; 
0x000000000043a288: test eax, eax; je 0x3a28d; xchg eax, edx; sub eax, edx; ret; 
0x000000000043a656: test eax, eax; je 0x3a670; bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x000000000040040c: test eax, eax; je 0x412; call rax; 
0x000000000040040c: test eax, eax; je 0x412; call rax; add rsp, 8; ret; 
0x000000000044f52f: test eax, eax; je 0x4f540; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x0000000000455d62: test eax, eax; je 0x55d40; movsxd rax, ecx; add rax, rdi; sub rax, rsi; ret; 
0x00000000004688d4: test eax, eax; je 0x688da; call rax; 
0x0000000000469cd9: test eax, eax; je 0x69cdf; call rax; 
0x000000000048298d: test eax, eax; je 0x82944; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000004829b2: test eax, eax; je 0x829d0; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000493d71: test eax, eax; je 0x93d83; lea rax, [rip + 0x245364]; mov qword ptr [rip + 0x245345], rax; add rsp, 8; ret; 
0x00000000004941d1: test eax, eax; je 0x941df; lea rdx, [rip + 0x2439c4]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000494480: test eax, eax; je 0x94490; pop rbx; pop rbp; pop r12; ret; 
0x0000000000409625: test eax, eax; je 0x962e; mov rdi, rsi; jmp rax; 
0x0000000000409645: test eax, eax; je 0x964d; mov edi, esi; jmp rax; 
0x00000000004096e6: test eax, eax; je 0x96bf; mov rbx, rsi; mov rdi, rsi; call rax; 
0x000000000049c5f1: test eax, eax; je 0x9c600; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000049cf45: test eax, eax; je 0x9cf58; mov rsi, rdi; mov edi, 1; jmp rax; 
0x00000000004a00f1: test eax, eax; je 0xa00fc; call rax; 
0x0000000000400aa7: test eax, eax; je 0xab8; pop rbp; mov edi, 0x6d7c10; jmp rax; 
0x0000000000400ae9: test eax, eax; je 0xaf8; pop rbp; mov edi, 0x6d7c10; jmp rax; 
0x0000000000467a60: test eax, eax; jle 0x67a6c; sub eax, 1; mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x00000000004015ca: test eax, eax; jne 0x15d8; mov eax, 0xffffffea; ret; 
0x000000000040174a: test eax, eax; jne 0x1758; mov eax, 0xffffffea; ret; 
0x000000000043a4c3: test eax, eax; jne 0x3a5a0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000043a565: test eax, eax; jne 0x3a5c0; xor eax, eax; ret; 
0x000000000043a535: test eax, eax; jne 0x3a5e0; xor eax, eax; ret; 
0x000000000043a7a1: test eax, eax; jne 0x3a7f0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000043a9e1: test eax, eax; jne 0x3aa00; xor eax, eax; vzeroupper; ret; 
0x000000000043a9a4: test eax, eax; jne 0x3aa40; xor eax, eax; vzeroupper; ret; 
0x0000000000453d20: test eax, eax; jne 0x53d34; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x00000000004589e6: test eax, eax; jne 0x58a00; xor eax, eax; syscall; 
0x0000000000458ab6: test eax, eax; jne 0x58ad0; mov eax, 1; syscall; 
0x0000000000458bf3: test eax, eax; jne 0x58c58; mov eax, 0x48; syscall; 
0x0000000000458d86: test eax, eax; jne 0x58da0; mov eax, 3; syscall; 
0x000000000045b050: test eax, eax; jne 0x5b044; pop rdx; pop r10; ret; 
0x00000000004812a7: test eax, eax; jne 0x812b8; mov ecx, dword ptr [rdx + 0x48]; cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x0000000000482de1: test eax, eax; jne 0x82e10; mov rax, r8; vzeroupper; ret; 
0x0000000000482da8: test eax, eax; jne 0x82e50; mov rax, r8; vzeroupper; ret; 
0x0000000000483fa1: test eax, eax; jne 0x83fd0; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000484985: test eax, eax; jne 0x849e6; mov eax, 0x101; syscall; 
0x00000000004919ed: test eax, eax; jne 0x91a40; mov ebx, eax; mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x0000000000409495: test eax, eax; jne 0x9561; mov rax, 0x6d5400; pop rbx; ret; 
0x0000000000400cc9: test eax, eax; jne 0xce0; mov eax, 1; mov dword ptr [rip + 0x2d7698], eax; add rsp, 8; ret; 
0x0000000000401046: test eax, eax; jns 0x102a; xor eax, eax; pop rbx; ret; 
0x00000000004018e3: test eax, eax; js 0x18f0; add rsp, 0x18; ret; 
0x0000000000401959: test eax, eax; js 0x1968; add rsp, 8; ret; 
0x0000000000401989: test eax, eax; js 0x1998; add rsp, 8; ret; 
0x00000000004019c3: test eax, eax; js 0x19d0; add rsp, 0x18; ret; 
0x0000000000401bc0: test eax, eax; js 0x1bd8; xor eax, eax; mov dword ptr [rip + 0x2d4538], 0; pop rbx; ret; 
0x0000000000401f66: test eax, eax; js 0x2010; add rsp, 8; ret; 
0x0000000000407e24: test eax, eax; js 0x7e30; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000048b090: test eax, eax; js 0x8b0a2; pop rbx; ret; 
0x0000000000433723: test eax, eax; lea rdx, [rip + 0x23834]; lea rax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x000000000040ccda: test eax, eax; mov eax, 0; cmovne rbx, rax; mov rax, rbx; pop rbx; ret; 
0x00000000004012f9: test eax, eax; mov edi, 0xffffffea; je 0x1310; mov eax, edi; pop rbx; ret; 
0x0000000000401a13: test eax, eax; mov edi, 0xffffffea; je 0x1a28; mov eax, edi; add rsp, 0x18; ret; 
0x000000000046a467: test eax, eax; sete sil; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x0000000000497813: test eax, eax; setne al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x000000000043aabc: test eax, eax; tzcnt eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000046d3e2: test eax, ebp; idiv bh; dec dword ptr [rcx + rcx*4 - 2]; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x0000000000479355: test eax, ebp; idiv bh; jmp qword ptr [rax]; 
0x000000000047f7aa: test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000471747: test eax, ebx; or eax, dword ptr [rax]; add byte ptr [rbx - 0x78f0d008], al; mov esi, 0x8900000b; ret 0x349; 
0x000000000046e492: test eax, edi; idiv bh; inc dword ptr [rax]; add byte ptr [rax], al; add cl, ch; ret 0xfffa; 
0x000000000049f36e: test ebp, ebp; jne 0x9f348; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049f5c1: test ebp, ebp; jne 0x9f5a8; pop rbx; pop rbp; pop r12; ret; 
0x00000000004a017b: test ebp, ebp; jne 0xa0160; pop rbx; pop rbp; pop r12; ret; 
0x000000000043c14e: test ebp, ecx; or byte ptr [rax], al; add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000004988ce: test ebp, edi; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x83; ret 0x3901; 
0x000000000043a4a0: test ebx, ebx; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x00000000004a02ff: test ebx, ebx; jne 0xa0310; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049f4ac: test ebx, ebx; mov qword ptr [rip + 0x23989b], rbx; jne 0x9f498; pop rbx; ret; 
0x0000000000430fe0: test ebx, edi; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000430ad8: test ebx, esi; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000463c49: test ecx, eax; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000453d62: test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x00000000004015c5: test ecx, ecx; je 0x15d8; test r8, r8; jne 0x15d8; mov eax, 0xffffffea; ret; 
0x0000000000401745: test ecx, ecx; je 0x1758; test r8, r8; jne 0x1758; mov eax, 0xffffffea; ret; 
0x000000000048b715: test ecx, ecx; jne 0x8b9a6; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x000000000048c03d: test ecx, ecx; jne 0x8c616; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000041ff14: test edi, eax; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fd08], al; ret; 
0x00000000004a1546: test edi, ecx; add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; pop rax; or byte ptr [rbp - 0x77], cl; ret; 
0x0000000000458f01: test edi, edi; je 0x58ead; mov r12, rdi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x00000000004a00e8: test edi, edi; je 0xa0101; mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0xa00fc; call rax; 
0x000000000040371c: test edi, edi; jne 0x3708; xor ebx, ebx; mov rax, rbx; pop rbx; ret; 
0x000000000040695d: test edi, edi; jne 0x6948; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000499e2e: test edi, edi; jne 0x99d60; add rsp, 0x38; ret; 
0x0000000000493b5d: test edi, edi; mov byte ptr [rsi], al; jne 0x93b48; mov rax, rsi; ret; 
0x0000000000487eaa: test edi, esi; dec dword ptr [rax - 0x7d]; ret; 
0x00000000004b01ad: test edx, edi; call qword ptr [rbx - 0x7a]; 
0x00000000004b0025: test edx, edi; call rsi; 
0x00000000004b00b5: test edx, edi; call rsp; 
0x00000000004b01a5: test edx, edi; inc dword ptr [rax*4 - 0x7afb0006]; cli; call qword ptr [rbx - 0x7a]; 
0x00000000004b013d: test edx, edi; inc dword ptr [rdx + 0x32fffa85]; test edx, edi; lcall [rbp - 0x7a]; cli; jmp rcx; 
0x00000000004b01e9: test edx, edi; inc eax; test edx, edi; jmp rcx; 
0x00000000004b0031: test edx, edi; jmp rcx; 
0x00000000004b0145: test edx, edi; lcall [rbp - 0x7a]; cli; jmp rcx; 
0x00000000004b01e1: test edx, edi; lcall [rcx]; xchg dl, bh; push qword ptr [rsi - 0x3f00057b]; test edx, edi; jmp rcx; 
0x00000000004b0141: test edx, edi; push qword ptr [rdx]; test edx, edi; lcall [rbp - 0x7a]; cli; jmp rcx; 
0x00000000004b0195: test edx, edi; push rsp; test dl, bh; push rsp; test dl, bh; jmp rcx; 
0x000000000045b021: test edx, edx; cmove rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000401239: test edx, edx; je 0x1248; pop rbx; pop rbp; pop r12; ret; 
0x000000000044fb52: test edx, edx; je 0x4fb5a; bsf eax, edx; ret; 
0x000000000044fbfb: test edx, edx; je 0x4fc10; bsf rax, rdx; ret; 
0x000000000044fb9a: test edx, edx; je 0x4fc20; bsf rax, rdx; ret; 
0x000000000045b4f7: test edx, edx; je 0x5b520; xor esi, esi; lea rdi, [rip + 0x550c1]; mov eax, 0x15; syscall; 
0x000000000045bb2a: test edx, edx; je 0x5bb38; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x0000000000482aea: test edx, edx; je 0x82b10; bsf rax, rdx; ret; 
0x0000000000482a7a: test edx, edx; je 0x82b20; bsf rax, rdx; ret; 
0x00000000004837aa: test edx, edx; je 0x837d0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000048373e: test edx, edx; je 0x837e0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000004960ea: test edx, edx; je 0x960f8; mov rax, qword ptr [r12]; add rax, qword ptr [rdx + 8]; call rax; 
0x0000000000409670: test edx, edx; je 0x96a8; mov rbp, rsi; mov rbx, rdi; mov edi, eax; call rdx; 
0x0000000000409688: test edx, edx; je 0x96a8; mov rdi, rax; call rdx; 
0x000000000040974b: test edx, edx; je 0x9770; mov rsi, rbx; mov rdi, r12; call rdx; 
0x0000000000494a4e: test edx, edx; jne 0x94a55; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x0000000000499f7d: test edx, edx; jne 0x9a059; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000453d55: test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x00000000004687d8: test esi, esi; je 0x687de; call rsi; 
0x000000000048db74: test esi, esi; je 0x8db7b; mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x00000000004829e1: test esi, esi; jne 0x829e9; xor rax, rax; ret; 
0x00000000004836a1: test esi, esi; jne 0x836a9; xor rax, rax; ret; 
0x00000000004938f3: test esi, esi; jne 0x93920; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000046dfa4: test esp, eax; idiv bh; jmp qword ptr [rax]; 
0x0000000000453d6f: test esp, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x000000000043e6a2: test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x0000000000499f7c: test r10d, r10d; jne 0x9a059; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000004015c9: test r8, r8; jne 0x15d8; mov eax, 0xffffffea; ret; 
0x0000000000401749: test r8, r8; jne 0x1758; mov eax, 0xffffffea; ret; 
0x000000000048dbd4: test r8b, r8b; cmove rcx, rax; mov rax, rcx; ret; 
0x000000000043a287: test r8d, r8d; je 0x3a28d; xchg eax, edx; sub eax, edx; ret; 
0x000000000040115e: test rax, rax; je 0x1170; mov eax, dword ptr [rax]; add rsp, 8; ret; 
0x00000000004321a0: test rax, rax; je 0x321b0; lea rax, [rdx - 0x10]; ret; 
0x000000000040040b: test rax, rax; je 0x412; call rax; 
0x000000000040040b: test rax, rax; je 0x412; call rax; add rsp, 8; ret; 
0x00000000004688d3: test rax, rax; je 0x688da; call rax; 
0x0000000000469cd8: test rax, rax; je 0x69cdf; call rax; 
0x00000000004941d0: test rax, rax; je 0x941df; lea rdx, [rip + 0x2439c4]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x000000000049447f: test rax, rax; je 0x94490; pop rbx; pop rbp; pop r12; ret; 
0x0000000000409624: test rax, rax; je 0x962e; mov rdi, rsi; jmp rax; 
0x0000000000409644: test rax, rax; je 0x964d; mov edi, esi; jmp rax; 
0x00000000004096e5: test rax, rax; je 0x96bf; mov rbx, rsi; mov rdi, rsi; call rax; 
0x000000000049c5f0: test rax, rax; je 0x9c600; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000049cf44: test rax, rax; je 0x9cf58; mov rsi, rdi; mov edi, 1; jmp rax; 
0x00000000004a00f0: test rax, rax; je 0xa00fc; call rax; 
0x0000000000400aa6: test rax, rax; je 0xab8; pop rbp; mov edi, 0x6d7c10; jmp rax; 
0x0000000000400ae8: test rax, rax; je 0xaf8; pop rbp; mov edi, 0x6d7c10; jmp rax; 
0x000000000049f36d: test rbp, rbp; jne 0x9f348; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049f5c0: test rbp, rbp; jne 0x9f5a8; pop rbx; pop rbp; pop r12; ret; 
0x00000000004a017a: test rbp, rbp; jne 0xa0160; pop rbx; pop rbp; pop r12; ret; 
0x00000000004a02fe: test rbx, rbx; jne 0xa0310; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049f4ab: test rbx, rbx; mov qword ptr [rip + 0x23989b], rbx; jne 0x9f498; pop rbx; ret; 
0x000000000048b714: test rcx, rcx; jne 0x8b9a6; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x000000000048c03c: test rcx, rcx; jne 0x8c616; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000458f00: test rdi, rdi; je 0x58ead; mov r12, rdi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x00000000004a00e7: test rdi, rdi; je 0xa0101; mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0xa00fc; call rax; 
0x000000000040371b: test rdi, rdi; jne 0x3708; xor ebx, ebx; mov rax, rbx; pop rbx; ret; 
0x000000000040695c: test rdi, rdi; jne 0x6948; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000493b5c: test rdi, rdi; mov byte ptr [rsi], al; jne 0x93b48; mov rax, rsi; ret; 
0x000000000045b020: test rdx, rdx; cmove rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000044fbfa: test rdx, rdx; je 0x4fc10; bsf rax, rdx; ret; 
0x000000000044fb99: test rdx, rdx; je 0x4fc20; bsf rax, rdx; ret; 
0x000000000045bb29: test rdx, rdx; je 0x5bb38; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x0000000000482ae9: test rdx, rdx; je 0x82b10; bsf rax, rdx; ret; 
0x0000000000482a79: test rdx, rdx; je 0x82b20; bsf rax, rdx; ret; 
0x00000000004837a9: test rdx, rdx; je 0x837d0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000048373d: test rdx, rdx; je 0x837e0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000004960e9: test rdx, rdx; je 0x960f8; mov rax, qword ptr [r12]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000040966f: test rdx, rdx; je 0x96a8; mov rbp, rsi; mov rbx, rdi; mov edi, eax; call rdx; 
0x0000000000409687: test rdx, rdx; je 0x96a8; mov rdi, rax; call rdx; 
0x000000000040974a: test rdx, rdx; je 0x9770; mov rsi, rbx; mov rdi, r12; call rdx; 
0x00000000004687d7: test rsi, rsi; je 0x687de; call rsi; 
0x000000000048db73: test rsi, rsi; je 0x8db7b; mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x00000000004829e0: test rsi, rsi; jne 0x829e9; xor rax, rax; ret; 
0x00000000004836a0: test rsi, rsi; jne 0x836a9; xor rax, rax; ret; 
0x00000000004938f2: test rsi, rsi; jne 0x93920; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000045fec4: test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000044fdd0: tzcnt eax, eax; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa80: tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000044fdf0: tzcnt eax, eax; add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa90: tzcnt eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000044fe3e: tzcnt eax, eax; add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000043aabe: tzcnt eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000044f9a3: tzcnt eax, eax; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x000000000044fd05: tzcnt eax, eax; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000043ab15: tzcnt eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x0000000000483d00: tzcnt eax, eax; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000044fdc0: tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000043aa70: tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000043a9f0: tzcnt eax, eax; cmp rdx, rax; jbe 0x3aa60; add rax, rdi; vzeroupper; ret; 
0x000000000043b3b0: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000043b3d0: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000043b396: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000043b120: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000004560cc: ud0; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000441ff8: ud2; lea r11, [rip + 0x6cecf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004248b3: vminsd xmm8, xmm4, qword ptr [rcx + 0x5c]; ret; 
0x0000000000457005: vmovdqa ymmword ptr [rcx + 0x60], ymm0; add rcx, 0x80; cmp rdx, rcx; jne 0x56ff7; vzeroupper; ret; 
0x00000000004476fd: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x00000000004564ae: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447701: vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x00000000004564b2: vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000043b241: vmovdqu xmm2, xmmword ptr [rsi]; vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x3b120; ret; 
0x000000000044770a: vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000045703b: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; vmovdqu xmmword ptr [rdi], xmm0; vzeroupper; ret; 
0x00000000004564bc: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447706: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x00000000004564b8: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000455e85: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000457041: vmovdqu xmmword ptr [rdi], xmm0; vzeroupper; ret; 
0x0000000000455e89: vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x00000000004476e9: vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000456417: vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x00000000004476ed: vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000045641b: vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x00000000004476c9: vmovdqu ymm3, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000456f2b: vmovdqu ymmword ptr [edi + edx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000456648: vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x00000000004566ef: vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x00000000004476f6: vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x00000000004476dd: vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x00000000004476d7: vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000456639: vmovdqu ymmword ptr [rcx - 0x20], ymm6; vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000045663e: vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x0000000000456643: vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x0000000000456fa0: vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x00000000004476d2: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000456588: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x00000000004566e0: vmovdqu ymmword ptr [rdi + 0x20], ymm5; vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x00000000004566e5: vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x00000000004566ea: vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x0000000000456fa5: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x0000000000456f2c: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000456425: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000045658d: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000456553: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm4; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x0000000000456fab: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x0000000000456593: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000456559: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000045655f: vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x0000000000456565: vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x00000000004476f2: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000456f9c: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x00000000004476ce: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000456584: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000456421: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000456f32: vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000455e7b: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000455e7f: vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000045684a: vmovdqu64 zmm0, zmmword ptr [rsi]; vmovdqu64 zmm1, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x0000000000456850: vmovdqu64 zmm1, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x0000000000456b02: vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000456bc8: vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000456afb: vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000045713f: vmovdqu64 zmmword ptr [rdi + 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x0000000000456a1a: vmovdqu64 zmmword ptr [rdi + 0x40], zmm1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x0000000000456bc1: vmovdqu64 zmmword ptr [rdi + 0xc0], zmm7; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x00000000004569eb: vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x0000000000457146: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x00000000004570b5: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x000000000045685e: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x0000000000456a21: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x000000000045714e: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x0000000000456a29: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x0000000000457139: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x0000000000456a14: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + 0x40], zmm1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x0000000000456858: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x00000000004570bd: vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000455e94: vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000455e98: vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000447a05: vmovups zmmword ptr [r9 + 0x140], zmm13; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000447a0c: vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000447a13: vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000044765d: vmovups zmmword ptr [r9 - 0x100], zmm4; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004478ac: vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004476ae: vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000447672: vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004478a5: vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004476a7: vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000044766b: vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000044789e: vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000447664: vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004476a0: vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000455e4d: vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000447b60: vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000447b67: vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000447b6e: vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000447b75: vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000455e68: vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000045602a: vmovups zmmword ptr [rsi + 0x140], zmm2; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000456031: vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000456038: vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000455f8d: vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000455f94: vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000455f9b: vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000455e3a: vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455e33: vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000455e2c: vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043b0cc: vpand ymm5, ymm5, ymm4; vptest ymm5, ymm0; jae 0x3b370; xor eax, eax; vzeroupper; ret; 
0x000000000043b207: vpcmpeqb xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x3b120; ret; 
0x000000000043b245: vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x3b120; ret; 
0x000000000043b20b: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x3b120; ret; 
0x000000000043a9dd: vpmovmskb eax, ymm1; test eax, eax; jne 0x3aa00; xor eax, eax; vzeroupper; ret; 
0x0000000000482ddd: vpmovmskb eax, ymm1; test eax, eax; jne 0x82e10; mov rax, r8; vzeroupper; ret; 
0x000000000043b113: vpmovmskb eax, ymm2; sub eax, -1; jne 0x3b120; vzeroupper; ret; 
0x0000000000414675: vpsubsb xmm8, xmm15, xmmword ptr [rsi + rdi*4 - 2]; dec dword ptr [rbp - 0x73]; je 0x14686; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x000000000043b0d0: vptest ymm5, ymm0; jae 0x3b370; xor eax, eax; vzeroupper; ret; 
0x000000000042e954: vshufps xmm2, xmm2, xmm5, 0xff; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000043a888: vzeroupper; ret; 
0x000000000043aa60: vzeroupper; xor eax, eax; ret; 
0x000000000043a351: wait; add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000040b739: wait; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4820; 
0x0000000000491814: wait; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000049f4b1: wait; cwde; and eax, dword ptr [rax]; jne 0x9f498; pop rbx; ret; 
0x000000000045a871: wait; in eax, 0x27; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000410311: wait; mov byte ptr [rax + rax], al; cmp eax, -1; je 0x103eb; add rsp, 0x98; ret; 
0x000000000041c251: wbinvd; add byte ptr [rdi], cl; mov dh, 0xfa; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x00000000004398d3: xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000044cfff: xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004399c3: xchg ah, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004397e3: xchg ah, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000046f852: xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000044ec4c: xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000044e46c: xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000044e85c: xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044e07c: xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000048cc0c: xchg bh, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000047991b: xchg byte ptr [rax + 0xd], dh; add byte ptr [rax], al; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x00000000004572c2: xchg byte ptr [rax + 1], cl; int1; jmp rcx; 
0x000000000043a22b: xchg byte ptr [rax + rax - 0x7cb80000], al; ret 0xeb10; 
0x000000000044db5f: xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044d33f: xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000044cb1f: xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x0000000000439d83: xchg byte ptr [rax - 0x7cb80000], ch; ret 0xeb10; 
0x00000000004aef30: xchg byte ptr [rax - 7], bl; call qword ptr [rsi]; 
0x00000000004aa6dc: xchg byte ptr [rax], al; add byte ptr [rax], al; lahf; fdivr st(7); call qword ptr [rsi]; 
0x00000000004a6508: xchg byte ptr [rax], al; add byte ptr [rax], al; ret 0; 
0x000000000044e21b: xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044d67f: xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000439513: xchg byte ptr [rbp + rcx - 0x7cb80000], bl; ret 0xeb10; 
0x000000000044ce5f: xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044c63f: xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043a350: xchg byte ptr [rbx + 0x48000002], bl; add eax, edi; add rax, rcx; ret; 
0x000000000044d81f: xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x0000000000439f63: xchg byte ptr [rbx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004396f3: xchg byte ptr [rbx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000046e0e7: xchg byte ptr [rcx + 0xb], dh; add byte ptr [rax], al; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000049bd0c: xchg byte ptr [rcx + rax - 0x10], cl; jmp rax; 
0x000000000043a143: xchg byte ptr [rcx + rax], ch; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000040b0bb: xchg byte ptr [rcx + rcx], ch; ret; 
0x000000000040c88b: xchg byte ptr [rcx + rcx], dl; ret; 
0x0000000000493e4b: xchg byte ptr [rcx], al; add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000046dda3: xchg byte ptr [rcx], bl; sldt word ptr [rax]; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x00000000004af428: xchg byte ptr [rdi - 7], bh; call qword ptr [rsi]; 
0x000000000044e70c: xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044df2c: xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044f03c: xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000463503: xchg byte ptr [rdi], dl; or eax, 0xea810000; ret 0; 
0x000000000043a053: xchg byte ptr [rdx + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000044c97f: xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000439995: xchg byte ptr [rdx], bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000439a85: xchg byte ptr [rdx], ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004398a5: xchg byte ptr [rdx], cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044cab5: xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d7b5: xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000046dbce: xchg byte ptr [rsi], al; adc dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000044d2d5: xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044e60d: xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004645f5: xchg byte ptr [rsi], bl; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000044ef3d: xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004589e2: xchg byte ptr [rsi], cl; sub byte ptr [rax], al; test eax, eax; jne 0x58a00; xor eax, eax; syscall; 
0x0000000000439603: xchg byte ptr [rsp + rcx - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000422e96: xchg ch, bh; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004af901: xchg cl, bh; call rax; 
0x00000000004af901: xchg cl, bh; call rax; mov cl, bh; jmp rax; 
0x00000000004a02e6: xchg cl, dh; clc; push rbx; ret; 
0x000000000044daf5: xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044cdf5: xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000044c915: xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d615: xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000042321d: xchg dh, bl; add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000044e75d: xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000044df7d: xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004b0029: xchg dl, bh; inc dword ptr [rsi - 0x7a]; cli; ljmp [rsi - 0x7b]; cli; jmp rcx; 
0x00000000004b0149: xchg dl, bh; jmp rcx; 
0x00000000004b0095: xchg dl, bh; ljmp [rax]; test edx, edi; jmp rcx; 
0x00000000004b002d: xchg dl, bh; ljmp [rsi - 0x7b]; cli; jmp rcx; 
0x00000000004397b5: xchg dl, bh; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004b01e5: xchg dl, bh; push qword ptr [rsi - 0x3f00057b]; test edx, edi; jmp rcx; 
0x00000000004b008d: xchg dl, bh; push rsp; test dl, bh; jmp qword ptr [rdi - 0x7a]; 
0x00000000004395d5: xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004396c5: xchg dl, ch; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004394e5: xchg dl, cl; or eax, 0x83480000; ret 0x4910; 
0x00000000004b002c: xchg dl, r15b; ljmp [rsi - 0x7b]; cli; jmp rcx; 
0x000000000047e829: xchg dword ptr [rax + 1], ecx; clc; jmp rax; 
0x0000000000407fb4: xchg dword ptr [rax - 0x16], edi; ret; 
0x000000000047bef0: xchg dword ptr [rax - 0x76ffffe3], edi; ret 0x349; 
0x00000000004090ab: xchg dword ptr [rax - 0x7f000000], esp; call qword ptr [rsi]; 
0x00000000004a94d8: xchg dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000048aaa6: xchg dword ptr [rax], eax; add eax, dword ptr [rax]; add bl, dh; ret; 
0x000000000048b531: xchg dword ptr [rbp + 0x13], ecx; add byte ptr [rax], al; lea rcx, [rip + 0x34243]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000045e434: xchg dword ptr [rbp + rcx*4 + 0x34], ecx; ret; 
0x000000000047238b: xchg dword ptr [rbp - 0x77000000], eax; ret 0x349; 
0x00000000004325d8: xchg dword ptr [rbx + 1], esi; add byte ptr [rax], al; lea rdx, [rip + 0x7c22c]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000047e99f: xchg dword ptr [rbx + rax], edi; add byte ptr [rax], al; lea rdx, [rip + 0x3fe3d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000047b5a2: xchg dword ptr [rbx - 0x76ffffdb], edi; ret 0x349; 
0x00000000004046ba: xchg dword ptr [rcx + 0x41000000], esp; mov eax, dword ptr [rdi + 0x20]; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x000000000047e1ea: xchg dword ptr [rcx + 0x48000003], esi; lea ecx, [rip + 0x403ae]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000004110ba: xchg dword ptr [rcx + 0x48fffffb], edx; lea edx, [rip + 0x9c042]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004c12ec: xchg dword ptr [rcx + 0x79], ecx; xchg eax, edx; ret 0xf869; 
0x0000000000469aca: xchg dword ptr [rcx + 1], eax; add byte ptr [rax], al; movsxd rdi, dword ptr [r11 + rsi*4]; add rdi, r11; jmp rdi; 
0x000000000049a3ba: xchg dword ptr [rcx + rax - 8], ecx; jmp rax; 
0x000000000049b400: xchg dword ptr [rcx + rax], edx; add byte ptr [rax], al; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000047c59a: xchg dword ptr [rcx - 0x76ffffea], ecx; ret 0x349; 
0x000000000047d1e5: xchg dword ptr [rcx - 0x76fffff6], esp; ret 0x349; 
0x000000000042a122: xchg dword ptr [rcx - 0x9ffffff], ecx; ret; 
0x000000000047d1bc: xchg dword ptr [rdi - 0x76fffff6], edx; ret 0x349; 
0x000000000045b04e: xchg dword ptr [rdi], eax; test eax, eax; jne 0x5b044; pop rdx; pop r10; ret; 
0x000000000047ea14: xchg dword ptr [rdi], esi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x8b08; 
0x000000000047e821: xchg dword ptr [rdx + 0x48000000], ecx; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000410d69: xchg dword ptr [rdx + 0x48fffffd], ebx; lea edx, [rip + 0x9c30f]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000049a3b2: xchg dword ptr [rdx + 0x49000008], ebp; movsxd rax, dword ptr [rdi + rax*4]; add rax, r15; jmp rax; 
0x0000000000458407: xchg dword ptr [rdx + rax - 0x72b80000], esi; adc eax, 0x57c09; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000004790aa: xchg dword ptr [rdx + rbx], esp; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000407f5c: xchg dword ptr [rdx], eax; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x00000000004880f0: xchg dword ptr [rip - 0x76fffffd], edx; ret 0xe8c0; 
0x000000000041bf62: xchg dword ptr [rsi + 6], edi; add byte ptr [rax], al; lea rdi, [rip + 0x91272]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000047b054: xchg dword ptr [rsi - 0x76ffffd5], edi; ret 0x349; 
0x0000000000471238: xchg dword ptr [rsi - 0x76ffffef], eax; ret 0x349; 
0x0000000000471750: xchg dword ptr [rsi - 0x76fffff5], edi; ret 0x349; 
0x000000000047dcd3: xchg dword ptr [rsi - 0x77000000], edx; ret 0x349; 
0x00000000004c148b: xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x00000000004cf775: xchg eax, ebp; add byte ptr [rax], al; or byte ptr [rdi], bh; sti; jmp qword ptr [rax]; 
0x000000000049f9db: xchg eax, ebp; and eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000470aae: xchg eax, ebp; call 0x42070aae; call qword ptr [rdi + 0x38]; 
0x000000000046ff1a: xchg eax, ebp; call 0x4906ff1a; mov esi, dword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x00000000004c9425: xchg eax, ebp; cmc; call qword ptr [rax]; 
0x00000000004678cb: xchg eax, ebp; push 0x4cffffff; mov edi, esi; call rdx; 
0x0000000000499fa0: xchg eax, ebp; ret 0x145; 
0x0000000000459034: xchg eax, ebp; ret 0x3948; 
0x000000000042d18b: xchg eax, ebp; ret 0x8348; 
0x0000000000407b35: xchg eax, ebp; ret 0xc085; 
0x0000000000488db0: xchg eax, ebp; ret 0xc283; 
0x00000000004302ed: xchg eax, ebp; ret 0xd020; 
0x000000000041cbd5: xchg eax, ebp; ret 0xd021; 
0x000000000047393a: xchg eax, ebp; ret 0xd120; 
0x000000000041ef32: xchg eax, ebp; ret 0xdaf7; 
0x000000000045c891: xchg eax, ebp; ret 0xe1eb; 
0x000000000049bb1a: xchg eax, ebp; ret 0xf45; 
0x000000000045d67b: xchg eax, ebp; ret; 
0x0000000000497816: xchg eax, ebp; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000427b7d: xchg eax, ebp; sal bh, 0xd8; ret; 
0x00000000004af91d: xchg eax, ebp; stc; inc dword ptr [rax - 0x69]; stc; call qword ptr [rax - 0x67]; 
0x0000000000420582: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000047b117: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000043b410: xchg eax, ebx; add rcx, r11; jmp rcx; 
0x00000000004ae991: xchg eax, ebx; clc; push rax; xchg eax, esp; clc; jmp qword ptr [rax - 0x6a]; 
0x00000000004a77e4: xchg eax, ebx; fdivr st(7); call rax; 
0x00000000004531ec: xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000043cbb2: xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000045846c: xchg eax, ebx; mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000445379: xchg eax, ebx; movabs byte ptr [0x8d49931463490006], al; adc al, 0x13; jmp rdx; 
0x000000000046a918: xchg eax, ebx; ret 0x3948; 
0x000000000042137c: xchg eax, ebx; ret 0x3949; 
0x000000000042fa00: xchg eax, ebx; ret 0x3d83; 
0x0000000000480675: xchg eax, ebx; ret 0x840; 
0x000000000046b3fd: xchg eax, ebx; ret 0x854d; 
0x0000000000444d79: xchg eax, ebx; test al, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a82f8: xchg eax, ecx; add dword ptr [rax], eax; add byte ptr [rcx], ah; fdivr st(7); jmp qword ptr [rcx]; 
0x000000000048779b: xchg eax, ecx; clc; jmp qword ptr [rsi - 0x70]; 
0x00000000004a535c: xchg eax, ecx; fdivr st(7); call qword ptr [rcx - 0x6e000028]; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004a5364: xchg eax, ecx; fdivr st(7); jmp qword ptr [rdx]; 
0x00000000004aea64: xchg eax, ecx; fprem; call qword ptr [rcx]; 
0x000000000049e08b: xchg eax, ecx; mov cl, 0x23; add byte ptr [rax - 0x7d], cl; and al, 0x10; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000044dc01: xchg eax, ecx; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000470b6b: xchg eax, ecx; ret 0xffff; 
0x0000000000447ca6: xchg eax, ecx; sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x00000000004af915: xchg eax, ecx; stc; jmp qword ptr [rax]; 
0x000000000044c32f: xchg eax, ecx; sub eax, edx; ret; 
0x000000000043f57b: xchg eax, ecx; test dword ptr [rsi], 0x14634900; xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d6b5: xchg eax, edi; adc al, 7; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000423bc4: xchg eax, edi; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000041bf71: xchg eax, edi; add rdx, rdi; jmp rdx; 
0x0000000000440475: xchg eax, edi; call 0x634d0481; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004c273f: xchg eax, edi; call qword ptr [rbx + 0x7c]; 
0x0000000000490c06: xchg eax, edi; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000498d6e: xchg eax, edi; mov eax, 0x89000003; fmul dword ptr [rbx + rcx*4 + 0x34]; ret 0xf41; 
0x0000000000408542: xchg eax, edi; or dword ptr [rax], eax; mov r12d, eax; movsxd rax, dword ptr [rdx + r12*4]; add rax, rdx; jmp rax; 
0x000000000042e1fb: xchg eax, edi; ret 0x394c; 
0x000000000040058e: xchg eax, edi; ret 0xda80; 
0x000000000042e6e1: xchg eax, edi; ret 0xfae9; 
0x000000000042ecd9: xchg eax, edi; ret 0xfbe9; 
0x00000000004af921: xchg eax, edi; stc; call qword ptr [rax - 0x67]; 
0x00000000004af921: xchg eax, edi; stc; call qword ptr [rax - 0x67]; stc; jmp qword ptr [rax - 0x65]; 
0x0000000000481bc3: xchg eax, edi; std; jmp qword ptr [rsi + 0x2e]; 
0x00000000004c1938: xchg eax, edi; xchg eax, esp; ret; 
0x000000000048a39f: xchg eax, edx; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret 0xed75; 
0x00000000004cf3dd: xchg eax, edx; add byte ptr [rax], al; and byte ptr [rax], ch; sti; jmp qword ptr [rbx]; 
0x00000000004cf3f5: xchg eax, edx; add byte ptr [rax], al; cmp byte ptr [rax], ch; sti; jmp qword ptr [rsi]; 
0x00000000004cf3c5: xchg eax, edx; add byte ptr [rax], al; or byte ptr [rax], ch; sti; jmp qword ptr [rbx]; 
0x00000000004a747c: xchg eax, edx; fdivr st(7); call qword ptr [rdx - 0x6d000028]; fdivr st(7); jmp qword ptr [rbp]; 
0x00000000004a7470: xchg eax, edx; fdivr st(7); jmp qword ptr [rbp]; 
0x00000000004c31fd: xchg eax, edx; jae 0xc31d3; push rsi; pop rdx; je 0xc31c8; ret 0xacfc; 
0x00000000004af4b0: xchg eax, edx; jle 0xaf4ac; jmp qword ptr [rdx]; 
0x000000000044f267: xchg eax, edx; lea rcx, [rip + 0x63b91]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000044dbf7: xchg eax, edx; lea rcx, [rip + 0x65201]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043223a: xchg eax, edx; movsxd rdi, edi; jmp qword ptr [rsi - 0x70]; 
0x00000000004aefb8: xchg eax, edx; push rdi; stc; jmp qword ptr [rdx]; 
0x00000000004337ba: xchg eax, edx; push rsi; sub al, byte ptr [rax]; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x0000000000414908: xchg eax, edx; ret 0x8548; 
0x00000000004924f5: xchg eax, edx; ret 0x8949; 
0x00000000004c12ef: xchg eax, edx; ret 0xf869; 
0x000000000048ca92: xchg eax, edx; ret; 
0x0000000000455d5d: xchg eax, edx; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x000000000045966a: xchg eax, edx; shr bl, 0xb4; nop; mov eax, 0x10; syscall; 
0x000000000040fb8e: xchg eax, edx; sub al, 0; add rsp, 0x88; pop rbx; ret; 
0x000000000043a28c: xchg eax, edx; sub eax, edx; ret; 
0x0000000000467a4e: xchg eax, esi; add al, byte ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000043b710: xchg eax, esi; add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000443943: xchg eax, esi; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x0000000000465311: xchg eax, esi; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x00000000004aa310: xchg eax, esi; add dword ptr [rax], eax; add byte ptr [rbx], bl; fdivr st(7); jmp qword ptr [rbp + 0xe]; 
0x0000000000457354: xchg eax, esi; add rax, rsi; jmp rax; 
0x000000000040467b: xchg eax, esi; add rdx, r14; jmp rdx; 
0x0000000000494926: xchg eax, esi; call 0x5b320; nop dword ptr [rax]; mov eax, dword ptr [rip + 0x244fea]; ret; 
0x00000000004ae999: xchg eax, esi; clc; call rax; 
0x00000000004aeabc: xchg eax, esi; fdiv st(0), st(0); jmp qword ptr [rsi]; 
0x000000000043b7cd: xchg eax, esi; lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000445136: xchg eax, esi; movabs byte ptr [0x8d49931463490006], al; adc al, 0x13; jmp rdx; 
0x000000000043b72b: xchg eax, esi; nop; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004085dc: xchg eax, esi; or dword ptr [rax], eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004aef14: xchg eax, esi; pop rbx; stc; jmp qword ptr [rsi]; 
0x0000000000457fb1: xchg eax, esi; ret 0xc085; 
0x00000000004c3b8c: xchg eax, esi; ret 0xcd11; 
0x000000000045800f: xchg eax, esi; ret 0xd284; 
0x0000000000430e56: xchg eax, esi; ret 0xffff; 
0x00000000004a2aac: xchg eax, esi; ret; 
0x000000000043b77c: xchg eax, esi; rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004cc930: xchg eax, esp; add byte ptr [eax], al; cld; sar al, 1; call rsi; 
0x00000000004695cb: xchg eax, esp; add byte ptr [rax], al; add byte ptr [rbx + 0x63], cl; xor al, 0x88; add rsi, r8; jmp rsi; 
0x000000000047bf37: xchg eax, esp; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8948; 
0x00000000004cf5d5: xchg eax, esp; add byte ptr [rax], al; sub byte ptr [rsi], dh; sti; jmp qword ptr [rax]; 
0x00000000004cf5ed: xchg eax, esp; add byte ptr [rax], al; xor byte ptr [rcx], bh; sti; jmp qword ptr [rbx]; 
0x0000000000422908: xchg eax, esp; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0xfffffffffffe00fe; jmp qword ptr [rsi + 0x2e]; 
0x00000000004665c8: xchg eax, esp; and al, 0x84; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], r9d; ret; 
0x00000000004665e6: xchg eax, esp; and al, 0x85; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9b, byte ptr [rax + 0x39]; ret; 
0x0000000000466604: xchg eax, esp; and al, 0x86; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9d, dword ptr [rax + 0x39]; ret; 
0x00000000004ae995: xchg eax, esp; clc; jmp qword ptr [rax - 0x6a]; 
0x00000000004d0e30: xchg eax, esp; lodsb al, byte ptr [rsi]; add byte ptr [rax], al; sub al, 0x1c; cld; jmp qword ptr [rdx + 5]; 
0x00000000004c235a: xchg eax, esp; mov ah, 0x5e; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xc23d7; mov ebp, 0xfb67d10d; ret; 
0x00000000004c668c: xchg eax, esp; mov dl, 0xf3; jmp qword ptr [rdx]; 
0x00000000004c3d9f: xchg eax, esp; push rsi; cli; push 0x6e; ja 0xc3d29; ret 0x48f; 
0x000000000040c91b: xchg eax, esp; push rsp; or dword ptr [rax], eax; ret; 
0x00000000004d2430: xchg eax, esp; ret 0; 
0x000000000046015b: xchg eax, esp; ret 0x1f0f; 
0x000000000045910b: xchg eax, esp; ret 0x2044; 
0x000000000049045c: xchg eax, esp; ret 0x3d; 
0x000000000042bdee: xchg eax, esp; ret 0x3de9; 
0x000000000047d0c7: xchg eax, esp; ret 0x7f3c; 
0x00000000004940c1: xchg eax, esp; ret 0x950f; 
0x0000000000455d60: xchg eax, esp; ret 0xc085; 
0x0000000000459431: xchg eax, esp; ret 0xc221; 
0x0000000000485b65: xchg eax, esp; ret 0xc283; 
0x0000000000458f38: xchg eax, esp; ret 0xca21; 
0x0000000000410003: xchg eax, esp; ret 0xd284; 
0x000000000045eb86: xchg eax, esp; ret 0xd5e9; 
0x000000000049babb: xchg eax, esp; ret 0xf45; 
0x0000000000475d92: xchg eax, esp; ret; 
0x00000000004321ea: xchg eax, esp; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x0000000000476c17: xchg eax, esp; shr cl, 0xfd; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x00000000004c918c: xchg eax, esp; xchg ebp, esi; jmp rdi; 
0x0000000000490450: xchg eax, r8d; mov eax, 0x15; syscall; 
0x00000000004c918d: xchg ebp, esi; jmp rdi; 
0x000000000045811f: xchg ebx, edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000453805: xchg edx, eax; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004c3fb7: xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000004d1ad9: xchg esp, edi; jmp qword ptr [rcx]; 
0x00000000004ab214: xlatb; add byte ptr [rax], al; add dh, ah; fdivr st(7); jmp rsi; 
0x000000000042a0d5: xlatb; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x00000000004bc979: xlatb; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x0000000000446272: xlatb; add rsi, rdx; lea r11, [rip + 0x69393]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004460f2: xlatb; add rsi, rdx; lea r11, [rip + 0x69513]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445f72: xlatb; add rsi, rdx; lea r11, [rip + 0x69693]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445df3: xlatb; add rsi, rdx; lea r11, [rip + 0x69812]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445c72: xlatb; add rsi, rdx; lea r11, [rip + 0x69993]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445af2: xlatb; add rsi, rdx; lea r11, [rip + 0x69b13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445972: xlatb; add rsi, rdx; lea r11, [rip + 0x69c93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004457f2: xlatb; add rsi, rdx; lea r11, [rip + 0x69e13]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445672: xlatb; add rsi, rdx; lea r11, [rip + 0x69f93]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004454f2: xlatb; add rsi, rdx; lea r11, [rip + 0x6a113]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445372: xlatb; add rsi, rdx; lea r11, [rip + 0x6a293]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004451f2: xlatb; add rsi, rdx; lea r11, [rip + 0x6a413]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445072: xlatb; add rsi, rdx; lea r11, [rip + 0x6a593]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444ef2: xlatb; add rsi, rdx; lea r11, [rip + 0x6a713]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444d72: xlatb; add rsi, rdx; lea r11, [rip + 0x6a893]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443792: xlatb; add rsi, rdx; lea r11, [rip + 0x6b973]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443612: xlatb; add rsi, rdx; lea r11, [rip + 0x6baf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443492: xlatb; add rsi, rdx; lea r11, [rip + 0x6bc73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443313: xlatb; add rsi, rdx; lea r11, [rip + 0x6bdf2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443192: xlatb; add rsi, rdx; lea r11, [rip + 0x6bf73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443012: xlatb; add rsi, rdx; lea r11, [rip + 0x6c0f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442e92: xlatb; add rsi, rdx; lea r11, [rip + 0x6c273]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442d12: xlatb; add rsi, rdx; lea r11, [rip + 0x6c3f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442b92: xlatb; add rsi, rdx; lea r11, [rip + 0x6c573]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442a12: xlatb; add rsi, rdx; lea r11, [rip + 0x6c6f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442892: xlatb; add rsi, rdx; lea r11, [rip + 0x6c873]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442712: xlatb; add rsi, rdx; lea r11, [rip + 0x6c9f3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442592: xlatb; add rsi, rdx; lea r11, [rip + 0x6cb73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442412: xlatb; add rsi, rdx; lea r11, [rip + 0x6ccf3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442292: xlatb; add rsi, rdx; lea r11, [rip + 0x6ce73]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f728: xlatb; add rsi, rdx; lea r11, [rip + 0x6f5dd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cd58: xlatb; add rsi, rdx; lea r11, [rip + 0x71ded]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004aea49: xlatb; clc; call qword ptr [rax - 0x28]; 
0x00000000004aea59: xlatb; clc; call qword ptr [rcx]; 
0x00000000004aea39: xlatb; clc; jmp qword ptr [rdx]; 
0x00000000004631f4: xlatb; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000004ab414: xlatb; fdivr st(7); call qword ptr [rbx + 0x11]; 
0x00000000004ab3e0: xlatb; fdivr st(7); call rdi; 
0x00000000004560c3: xlatb; jb 0x560c9; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000041c25d: xlatb; jmp rdi; 
0x00000000004c2363: xlatb; jo 0xc23d7; mov ebp, 0xfb67d10d; ret; 
0x0000000000443f6b: xlatb; lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000446690: xlatb; lea r11, [rip + 0x68d38]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004464dd: xlatb; lea r11, [rip + 0x6912b]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444c38: xlatb; lea r11, [rip + 0x6a9d0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444adc: xlatb; lea r11, [rip + 0x6ab2c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000443b7c: xlatb; lea r11, [rip + 0x6b34c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004439e9: xlatb; lea r11, [rip + 0x6b71f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441ddb: xlatb; lea r11, [rip + 0x6cf2d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442158: xlatb; lea r11, [rip + 0x6cfb0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441fe6: xlatb; lea r11, [rip + 0x6d122]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f63c: xlatb; lea r11, [rip + 0x6f6cc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f577: xlatb; lea r11, [rip + 0x6f791]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cc6c: xlatb; lea r11, [rip + 0x71edc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043cba7: xlatb; lea r11, [rip + 0x71fa1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043be62: xlatb; lea r11, [rip + 0x72ba6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bde8: xlatb; lea r11, [rip + 0x72c20]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bd59: xlatb; lea r11, [rip + 0x72caf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043bb4e: xlatb; lea r11, [rip + 0x72eba]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043ba1c: xlatb; lea r11, [rip + 0x72fec]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b956: xlatb; lea r11, [rip + 0x730b2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b8d8: xlatb; lea r11, [rip + 0x73130]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b841: xlatb; lea r11, [rip + 0x731c7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b645: xlatb; lea r11, [rip + 0x733c3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b514: xlatb; lea r11, [rip + 0x734f4]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000043b405: xlatb; lea r11, [rip + 0x73603]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000493be2: xlatb; mov byte ptr [rsi], al; jne 0x93bc0; mov rax, rsi; ret; 
0x00000000004581d1: xlatb; mov eax, esi; syscall; 
0x00000000004581e0: xlatb; mov eax, r8d; syscall; 
0x000000000041d87c: xlatb; mov edi, 0x4801002b; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000004678bc: xlatb; mov qword ptr [rbp - 0x98], rdx; call 0x5c8b0; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x0000000000440321: xlatb; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x6e9e2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043d951: xlatb; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x711f2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000480f55: xlatb; or al, 0xfa; dec dword ptr [rbx - 0x14f3db8c]; ret 0x5590; 
0x000000000041d575: xlatb; ret 0x2b; 
0x00000000004c3806: xlatb; ret 0x4e27; 
0x00000000004826e7: xlatb; ret 0x94c; 
0x000000000043a39f: xlatb; ret 0xc085; 
0x0000000000434ec0: xlatb; ret 0xc148; 
0x000000000043b024: xlatb; ret 0xe883; 
0x000000000044fb74: xlatb; ret 0xf66; 
0x000000000043b1e8: xlatb; ret 0xff2d; 
0x000000000043a3b4: xlatb; ret; 
0x0000000000482835: xlatb; retf 0xfdc5; xlatb; ret; 
0x000000000043a781: xlatb; rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x0000000000482895: xlatb; rol ch, cl; std; xlatb; ret; 
0x000000000043a9df: xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x000000000043a563: xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000453d1e: xlatb; rol dword ptr [rbp + 0x661075c0], cl; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000043aaa2: xlatb; rol dword ptr [rbp - 0x3a378a40], 0xfd; xlatb; ret 0xc085; 
0x000000000044f8f2: xlatb; rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x000000000043a533: xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000482da6: xlatb; rol dword ptr [rbp - 0x5f7af040], 0; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x000000000043a9a2: xlatb; rol dword ptr [rbp - 0x6b7af040], 0; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x00000000004501e2: xlatb; ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x000000000045021e: xlatb; ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x0000000000453d16: xlatb; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000434da6: xlatb; sal bh, 1; ret 0x8000; 
0x0000000000434c66: xlatb; sal bh, 1; ret 0xc000; 
0x0000000000434b26: xlatb; sal bh, 1; ret 0xe000; 
0x00000000004349e6: xlatb; sal bh, 1; ret 0xf000; 
0x00000000004348a6: xlatb; sal bh, 1; ret 0xf800; 
0x0000000000434766: xlatb; sal bh, 1; ret 0xfc00; 
0x0000000000434626: xlatb; sal bh, 1; ret 0xfe00; 
0x00000000004344e6: xlatb; sal bh, 1; ret 0xff00; 
0x00000000004343a6: xlatb; sal bh, 1; ret 0xff80; 
0x0000000000434266: xlatb; sal bh, 1; ret 0xffc0; 
0x0000000000434126: xlatb; sal bh, 1; ret 0xffe0; 
0x0000000000433fe6: xlatb; sal bh, 1; ret 0xfff0; 
0x0000000000433ea6: xlatb; sal bh, 1; ret 0xfff8; 
0x0000000000433d66: xlatb; sal bh, 1; ret 0xfffc; 
0x0000000000433c26: xlatb; sal bh, 1; ret 0xfffe; 
0x000000000043d175: xlatb; sbb dword ptr [rdi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000441d0d: xlatb; sfence; lea r11, [rip + 0x6cff8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043f325: xlatb; sfence; lea r11, [rip + 0x6f820]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000453d12: xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000482696: xlatb; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000482685: xlatb; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x000000000048e82d: xlatb; stosd dword ptr [rdi], eax; and al, 0; mov qword ptr [rsi], rax; ret; 
0x000000000044632f: xlatb; sub rsi, rdx; lea r11, [rip + 0x69096]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004461af: xlatb; sub rsi, rdx; lea r11, [rip + 0x69216]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044602f: xlatb; sub rsi, rdx; lea r11, [rip + 0x69396]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445eaf: xlatb; sub rsi, rdx; lea r11, [rip + 0x69516]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445d2f: xlatb; sub rsi, rdx; lea r11, [rip + 0x69696]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445baf: xlatb; sub rsi, rdx; lea r11, [rip + 0x69816]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000445a2f: xlatb; sub rsi, rdx; lea r11, [rip + 0x69996]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004458af: xlatb; sub rsi, rdx; lea r11, [rip + 0x69b16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044572f: xlatb; sub rsi, rdx; lea r11, [rip + 0x69c96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004455af: xlatb; sub rsi, rdx; lea r11, [rip + 0x69e16]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044542f: xlatb; sub rsi, rdx; lea r11, [rip + 0x69f96]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004452af: xlatb; sub rsi, rdx; lea r11, [rip + 0x6a116]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044512f: xlatb; sub rsi, rdx; lea r11, [rip + 0x6a296]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444faf: xlatb; sub rsi, rdx; lea r11, [rip + 0x6a416]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444e2f: xlatb; sub rsi, rdx; lea r11, [rip + 0x6a596]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444cb6: xlatb; sub rsi, rdx; lea r11, [rip + 0x6a70f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044384f: xlatb; sub rsi, rdx; lea r11, [rip + 0x6b676]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004436cf: xlatb; sub rsi, rdx; lea r11, [rip + 0x6b7f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044354f: xlatb; sub rsi, rdx; lea r11, [rip + 0x6b976]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004433cf: xlatb; sub rsi, rdx; lea r11, [rip + 0x6baf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044324f: xlatb; sub rsi, rdx; lea r11, [rip + 0x6bc76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004430cf: xlatb; sub rsi, rdx; lea r11, [rip + 0x6bdf6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442f4f: xlatb; sub rsi, rdx; lea r11, [rip + 0x6bf76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442dcf: xlatb; sub rsi, rdx; lea r11, [rip + 0x6c0f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442c4f: xlatb; sub rsi, rdx; lea r11, [rip + 0x6c276]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000442acf: xlatb; sub rsi, rdx; lea r11, [rip + 0x6c3f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044294f: xlatb; sub rsi, rdx; lea r11, [rip + 0x6c576]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004427cf: xlatb; sub rsi, rdx; lea r11, [rip + 0x6c6f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044264f: xlatb; sub rsi, rdx; lea r11, [rip + 0x6c876]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004424cf: xlatb; sub rsi, rdx; lea r11, [rip + 0x6c9f6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044234f: xlatb; sub rsi, rdx; lea r11, [rip + 0x6cb76]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004421d6: xlatb; sub rsi, rdx; lea r11, [rip + 0x6ccef]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004aed08: xor ah, 0xf8; call rax; 
0x000000000043391a: xor ah, byte ptr [rdi]; add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x0000000000470788: xor ah, byte ptr [rsi]; add byte ptr [rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x00000000004aecb0: xor ah, ch; clc; inc dword ptr [rax - 0x2f000713]; out dx, al; clc; jmp qword ptr [rax]; 
0x00000000004d1a68: xor al, 0; add byte ptr [rax], al; sar byte ptr [rax - 0x7bb00000], 1; cld; call qword ptr [rdx]; 
0x00000000004105c4: xor al, 0x19; mov qword ptr [rsi + 8], rax; mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004c12ea: xor al, 0x19; xchg dword ptr [rcx + 0x79], ecx; xchg eax, edx; ret 0xf869; 
0x00000000004704e8: xor al, 0x26; add byte ptr [rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x0000000000433728: xor al, 0x38; add al, byte ptr [rax]; lea rax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x0000000000409673: xor al, 0x48; mov ebp, esi; mov rbx, rdi; mov edi, eax; call rdx; 
0x000000000048013b: xor al, 0x48; mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x0000000000426cab: xor al, 0x48; mov edi, ebx; call qword ptr [rbp + 0x30]; 
0x00000000004af560: xor al, 0x80; stc; inc esp; jg 0xaf560; call qword ptr [rdi + rdi*2 - 7]; jmp rsp; 
0x00000000004695d2: xor al, 0x88; add rsi, r8; jmp rsi; 
0x00000000004d13d0: xor al, 0xb2; add byte ptr [rax], al; in al, dx; cmp edi, esp; call qword ptr [rax]; 
0x000000000047e66b: xor al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x00000000004c24ca: xor al, 0xd8; ret; 
0x00000000004ca1bc: xor al, 0xd9; cmc; call qword ptr [rdi]; 
0x0000000000401938: xor al, 0xdb; add al, byte ptr [rax]; nop dword ptr [rax]; pop rbx; ret; 
0x00000000004687d5: xor al, 0xf0; test rsi, rsi; je 0x687de; call rsi; 
0x00000000004687d1: xor al, 0xf3; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x687de; call rsi; 
0x0000000000461ede: xor al, 0xf6; ret; 
0x00000000004af365: xor al, 0xf9; jmp qword ptr [rax]; 
0x00000000004d1279: xor al, 0xfc; call qword ptr [rax]; 
0x00000000004a83d4: xor al, 1; add byte ptr [rax], al; ret; 
0x000000000043b519: xor al, 7; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x00000000004b0144: xor al, byte ptr [rbp - 0x79a20006]; cli; jmp rcx; 
0x000000000040115a: xor al, byte ptr [rcx - 0x7ab80000]; sal byte ptr [rbp + rcx - 0x75], 0; add rsp, 8; ret; 
0x00000000004af498: xor al, byte ptr [rcx - 0x7f3d0007]; stc; call qword ptr [rdx - 0x80]; 
0x00000000004af498: xor al, byte ptr [rcx - 0x7f3d0007]; stc; call qword ptr [rdx - 0x80]; stc; jmp rdx; 
0x0000000000485c82: xor al, ch; and byte ptr [rax + 0x3948fff7], ch; ret; 
0x00000000004697a7: xor al, ch; ret; 
0x00000000004d1149: xor bh, ah; jmp qword ptr [rbp]; 
0x00000000004680d4: xor bh, bh; jmp qword ptr [rsi + 0xf]; 
0x000000000047802e: xor bh, dh; jmp qword ptr [rsi + 0x2e]; 
0x00000000004aeb94: xor bl, bh; clc; call qword ptr [rax]; 
0x00000000004aefa0: xor bl, byte ptr [rdx - 7]; inc edx; pop rcx; stc; call qword ptr [rdx + 0x59]; 
0x00000000004af9e4: xor bl, ch; stc; inc dword ptr [rax - 0x2f000614]; in eax, dx; stc; jmp qword ptr [rax]; 
0x000000000043a4bd: xor byte ptr [r14 + 0xf], r12b; xlatb; ret; 
0x000000000043a52f: xor byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004207e2: xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x000000000046b078: xor byte ptr [rax + 0x39], cl; ret 0x8d48; 
0x00000000004207e3: xor byte ptr [rax + 1], cl; ret 0x8b49; 
0x00000000004a30a8: xor byte ptr [rax - 0x4cb9000a], ch; idiv bh; mov bl, 0xf6; call qword ptr [rsi]; 
0x00000000004a30e8: xor byte ptr [rax - 0x4d79000a], ch; idiv bh; outsb dx, byte ptr [rsi]; mov dl, 0xf6; call qword ptr [rsi - 0x4e]; 
0x00000000004ae9e8: xor byte ptr [rax - 0x4edf0008], dh; clc; call qword ptr [rax]; 
0x00000000004a2740: xor byte ptr [rax - 0x57cf000a], ch; idiv bh; int 0xf6; jmp qword ptr [rsi]; 
0x00000000004a2a98: xor byte ptr [rax - 0x57cf000a], ch; idiv bh; scasb al, byte ptr [rdi]; ret; 
0x00000000004a2aa4: xor byte ptr [rax - 0x57cf000a], ch; idiv bh; xchg eax, esi; ret; 
0x00000000004a2738: xor byte ptr [rax - 0x57cf000a], ch; idiv bh; xor byte ptr [rax - 0x57cf000a], ch; idiv bh; int 0xf6; jmp qword ptr [rsi]; 
0x0000000000490fc0: xor byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000490f4e: xor byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x000000000047f7a7: xor byte ptr [rax - 0x75], cl; test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000044fedf: xor byte ptr [rax - 0x77], cl; add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000458d02: xor byte ptr [rax - 0x77], cl; and al, 0x20; je 0x58d30; mov eax, 0x48; syscall; 
0x000000000042286d: xor byte ptr [rax - 0x77], cl; call 0xfffffffffffea05e; jmp qword ptr [rsi + 0x2e]; 
0x000000000048341f: xor byte ptr [rax - 0x77], cl; out dx, eax; call rbx; 
0x0000000000499f08: xor byte ptr [rax - 0x77], cl; ret 0x2148; 
0x0000000000480db2: xor byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x000000000045c65f: xor byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004afad0: xor byte ptr [rax - 6], al; inc dword ptr [rax + 0x40]; cli; jmp qword ptr [rax + 0x40]; 
0x00000000004aeef4: xor byte ptr [rax - 7], bl; inc eax; push rdi; stc; call qword ptr [rax + 0x57]; 
0x0000000000480cfe: xor byte ptr [rax], 1; add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x0000000000480e07: xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004802dc: xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000420b3b: xor byte ptr [rax], 1; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000047f916: xor byte ptr [rax], 1; add byte ptr [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000004ca1cc: xor byte ptr [rax], al; add byte ptr [rax - 0x27], al; cmc; call qword ptr [rsi]; 
0x000000000041d689: xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000041d5c3: xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x000000000048d8dc: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x8d210; add rsp, 0xd8; ret; 
0x000000000041d6af: xor byte ptr [rax], al; add byte ptr [rax], al; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x00000000004573a3: xor byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004d03b0: xor byte ptr [rax], al; add byte ptr [rax], al; sbb byte ptr [rdx - 0x29680000], ah; sti; jmp qword ptr [rsi]; 
0x00000000004c87b0: xor byte ptr [rax], al; add byte ptr [rax], al; sbb byte ptr [rsi], ah; add byte ptr [rax], al; or byte ptr [rax - 0xb], dl; jmp qword ptr [rax]; 
0x00000000004aee7c: xor byte ptr [rax], bl; stc; inc dword ptr [rax - 0x2f0006e7]; sbb bh, cl; jmp qword ptr [rax]; 
0x000000000049d46e: xor byte ptr [rbp + 0x27], dh; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000049a2d0: xor byte ptr [rbp + 0x35], dh; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x0000000000458bea: xor byte ptr [rbp + 0x3b], dh; mov eax, dword ptr [rip + 0x280c79]; test eax, eax; jne 0x58c58; mov eax, 0x48; syscall; 
0x0000000000409205: xor byte ptr [rbp + 0x68], 0x48; mov eax, 0x6d2f20; ret; 
0x0000000000456315: xor byte ptr [rbp + 0xf], al; adc dword ptr [rbx], eax; ret; 
0x0000000000453801: xor byte ptr [rbp + rcx*4 + 0x1d], cl; xchg edx, eax; add eax, 0xc634900; xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004b092c: xor byte ptr [rbp - 0x4aa70006], 0xfa; push qword ptr [rax]; mov ch, 0xfa; call qword ptr [rax]; 
0x00000000004af91c: xor byte ptr [rbp - 0x68bf0007], dl; stc; call qword ptr [rax - 0x67]; 
0x00000000004af10c: xor byte ptr [rbp - 7], dl; call rax; 
0x00000000004cbecc: xor byte ptr [rbp], bl; add byte ptr [rax - 0x68], dh; clc; call qword ptr [rbx + 4]; 
0x0000000000475f99: xor byte ptr [rbx + 0x291c2454], cl; ret 0xe683; 
0x0000000000423ed6: xor byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000045e8da: xor byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004c65ab: xor byte ptr [rbx + 0xa570206], al; ret; 
0x00000000004c661b: xor byte ptr [rbx + 0xa680206], al; ret; 
0x00000000004d0ccc: xor byte ptr [rbx + 0xe000000], ch; cld; call qword ptr [rdx]; 
0x0000000000408c36: xor byte ptr [rbx + rcx*4 + 0x34], cl; ret 0x8b48; 
0x0000000000426d4d: xor byte ptr [rbx - 0x438a0008], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004b090c: xor byte ptr [rbx - 0x4cbb0006], dh; cli; inc dword ptr [rbx + rsi*4 - 6]; inc dword ptr [rbx + rsi*4 - 6]; inc dword ptr [rbx + rsi*4 - 6]; jmp rax; 
0x000000000047cffb: xor byte ptr [rbx - 0x78f0f608], al; ret; 
0x00000000004af83c: xor byte ptr [rbx - 7], dh; push qword ptr [rax + 0x20fff972]; jb 0xaf840; call qword ptr [rax + 0xfff971]; jno 0xaf848; jmp qword ptr [rax + 0x53]; 
0x00000000004afa78: xor byte ptr [rbx], bh; cli; call qword ptr [rax + 0x3b]; 
0x000000000045896f: xor byte ptr [rcx + 0x101b8f2], cl; add byte ptr [rax], al; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000499d25: xor byte ptr [rcx + 0x21], cl; ror byte ptr [rax + 0x21], cl; ret 0xc148; 
0x0000000000487a03: xor byte ptr [rcx + 0x29], cl; ret; 
0x00000000004011b0: xor byte ptr [rcx + 0x6d], ah; add byte ptr [rax - 0x75], cl; add byte ptr [rbx - 0x171076d8], cl; rol byte ptr [rax - 0x3f7b0000], 0x89; ret; 
0x0000000000480d3c: xor byte ptr [rcx + rcx*4 + 0x60], cl; cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x00000000004b1d80: xor byte ptr [rcx - 5], bh; jmp qword ptr [rax]; 
0x00000000004024ec: xor byte ptr [rcx], 0xc0; call 0x59670; sar eax, 0x1f; and eax, 0xfffffffe; add rsp, 0x18; ret; 
0x00000000004aed90: xor byte ptr [rcx], ah; stc; push rax; and bh, cl; call rax; 
0x0000000000480cff: xor byte ptr [rcx], al; add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x0000000000480e08: xor byte ptr [rcx], al; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004802dd: xor byte ptr [rcx], al; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004268f7: xor byte ptr [rcx], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000420b3c: xor byte ptr [rcx], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000047f917: xor byte ptr [rcx], al; add byte ptr [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000421e37: xor byte ptr [rcx], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004afa14: xor byte ptr [rcx], bh; cli; inc dword ptr [rax + 0x39]; cli; call qword ptr [rax + 0x39]; 
0x00000000004cf5f0: xor byte ptr [rcx], bh; sti; jmp qword ptr [rbx]; 
0x00000000004d10d0: xor byte ptr [rcx], dh; cld; jmp qword ptr [rdx]; 
0x0000000000404ab8: xor byte ptr [rcx], dh; ror byte ptr [rcx + 0x484c247c], 0x83; ret 0xeb01; 
0x00000000004d10cc: xor byte ptr [rdi + 0x31300000], ch; cld; jmp qword ptr [rdx]; 
0x00000000004afb9c: xor byte ptr [rdi - 6], dh; call qword ptr [rax + 0x77]; 
0x00000000004af3ec: xor byte ptr [rdi - 7], bh; inc eax; jle 0xaf3ec; call qword ptr [rax + 0x7e]; 
0x00000000004af3ec: xor byte ptr [rdi - 7], bh; inc eax; jle 0xaf3ec; call qword ptr [rax + 0x7e]; stc; jmp rax; 
0x00000000004aed1c: xor byte ptr [rdi], ah; stc; call qword ptr [rax]; 
0x000000000043b95b: xor byte ptr [rdi], al; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x00000000004afaa8: xor byte ptr [rdi], bh; cli; inc dword ptr [rax + 0x3f]; cli; call qword ptr [rax + 0x3f]; 
0x00000000004561c6: xor byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], esp; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x000000000046346b: xor byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000432c3b: xor byte ptr [rdx], al; add byte ptr [rax - 0x73], cl; add eax, 0x22f9b; cmovne rax, rdx; ret; 
0x000000000043381a: xor byte ptr [rdx], al; add byte ptr [rax - 0x73], cl; add eax, 0x22ffc; cmovne rax, rdx; ret; 
0x00000000004c682c: xor byte ptr [rdx], al; ret 0xe0a; 
0x00000000004afa54: xor byte ptr [rdx], bh; cli; call qword ptr [rax + 0x3a]; 
0x00000000004afa54: xor byte ptr [rdx], bh; cli; call qword ptr [rax + 0x3a]; cli; jmp qword ptr [rax + 0x3a]; 
0x00000000004cce17: xor byte ptr [rsi + 0x380e4106], al; add dword ptr [rdi], 3; ret 0xa01; 
0x00000000004c4356: xor byte ptr [rsi + 0x4ce2e5dd], 0x67; add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x000000000043b4bf: xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000043b4ba: xor byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000048264c: xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000043a4be: xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000043a530: xor byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000470583: xor byte ptr [rsi], ah; add byte ptr [rax - 0x75], cl; add al, 0xc7; jmp rax; 
0x00000000004708e1: xor byte ptr [rsi], ah; add byte ptr [rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x00000000004aeb78: xor ch, bh; clc; call qword ptr [rax]; 
0x00000000004be46c: xor ch, bh; sti; push qword ptr [rax - 4]; sti; jmp qword ptr [rax]; 
0x00000000004af399: xor cl, bh; jmp qword ptr [rax]; 
0x000000000047e935: xor cl, byte ptr [rax - 0x73]; cmp eax, 0x3fdef; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000042156d: xor cl, byte ptr [rax - 0x77]; ret 0x2948; 
0x0000000000432e22: xor cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x000000000048d103: xor cl, byte ptr [rax - 0x7d]; ret 0x4810; 
0x000000000046abe7: xor cl, byte ptr [rax - 0x7d]; ret 0x4901; 
0x000000000049c4fe: xor cl, byte ptr [rax]; jne 0x9c51c; mov rax, qword ptr [rax]; ret; 
0x000000000040f9ba: xor cl, byte ptr [rcx + 0x2c89c705]; add byte ptr [rax - 0x73], cl; add eax, 0x2c89b8; ret; 
0x0000000000414930: xor cl, ch; ret; 
0x00000000004aec1c: xor dh, bh; clc; call qword ptr [rax]; 
0x00000000004aec1c: xor dh, bh; clc; call qword ptr [rax]; add cl, bh; jmp rax; 
0x00000000004078bb: xor dh, byte ptr [rdx + rdx + 0x48]; cmp eax, ecx; jne 0x78b0; xor eax, eax; ret; 
0x0000000000469a39: xor dh, dh; ret 0x4002; 
0x00000000004680d3: xor dil, r15b; jmp qword ptr [rsi + 0xf]; 
0x00000000004aec34: xor dl, bh; clc; call qword ptr [rax]; 
0x000000000048ef72: xor dl, byte ptr [rip - 0x72b70009]; push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000048f5d0: xor dl, dh; ret; 
0x000000000047556d: xor dword ptr [rax - 0x77], ecx; ror dword ptr [rax - 0x77], 1; ret 0xe7e9; 
0x000000000045b62f: xor dword ptr [rax - 0x7d], ecx; ret 0xf01; 
0x00000000004ad114: xor dword ptr [rax - 0xa], eax; jmp qword ptr [rsi]; 
0x00000000004268f6: xor dword ptr [rax], 0x48000001; mov dword ptr [rdi + 0xa8], 0; ret; 
0x000000000049c56d: xor dword ptr [rax], ecx; jne 0x9c575; mov qword ptr [rax], rdx; ret; 
0x0000000000400cb2: xor dword ptr [rbp - 0x13], 0xfffffff3; ret; 
0x000000000042b30d: xor dword ptr [rbx - 0x76b7f020], eax; ret 0x8948; 
0x00000000004587d6: xor dword ptr [rcx - 0x2976b739], ecx; mov eax, 5; syscall; 
0x000000000043b846: xor dword ptr [rdi], eax; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x00000000004336ba: xor dword ptr [rdx], eax; add byte ptr [rax - 0x73], cl; add eax, 0x2316c; cmovne rax, rdx; ret; 
0x00000000004707e4: xor dword ptr [rsi], esp; add byte ptr [rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x000000000047aeee: xor eax, 0x258dad; jmp rax; 
0x0000000000470c23: xor eax, 0x262978; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x00000000004705cb: xor eax, 0x262fd0; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x0000000000402095: xor eax, 0x2d4086; ret; 
0x0000000000402085: xor eax, 0x2d4092; ret; 
0x0000000000402075: xor eax, 0x2d4096; ret; 
0x0000000000402065: xor eax, 0x2d40a2; ret; 
0x0000000000401f35: xor eax, 0x2d41da; ret; 
0x0000000000401f25: xor eax, 0x2d41ee; ret; 
0x0000000000401f15: xor eax, 0x2d420a; ret; 
0x00000000004a53a4: xor eax, 0x35ffffd8; fdivr st(7); jmp qword ptr [rdi]; 
0x00000000004af3a5: xor eax, 0x36a0fff9; stc; jmp qword ptr [rax]; 
0x000000000047e137: xor eax, 0x403ac; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000004c247a: xor eax, 0x444be0a8; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000004568d3: xor eax, 0x48000002; mov ecx, edx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000457292: xor eax, 0x588e9; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x00000000004572b4: xor eax, 0x588eb; shr eax, 0xc; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000004571f5: xor eax, 0x7701fa80; cmp dh, byte ptr [rdx + 2]; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000474e7a: xor eax, 0x89ffffe6; ret; 
0x000000000047049a: xor eax, 0x8b480026; add al, 0xf8; jmp rax; 
0x00000000004a9d00: xor eax, 0xea000000; fdivr st(7); call rdi; 
0x000000000046a3d8: xor eax, dword ptr [0x28]; jne 0x6a3e6; add rsp, 0x18; ret; 
0x00000000004936ba: xor eax, dword ptr [0x28]; jne 0x936fe; leave; ret; 
0x000000000041d686: xor eax, dword ptr [0x30]; call rax; 
0x00000000004564a0: xor eax, dword ptr [rax + 0x3b7701fa]; jb 0x564ad; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004c94c1: xor eax, dword ptr [rax]; add byte ptr [rcx + rbx*4], cl; cmc; call qword ptr [rdi + 2]; 
0x00000000004aac34: xor eax, dword ptr [rcx]; add byte ptr [rax], al; ret 0; 
0x000000000043b64a: xor eax, dword ptr [rdi]; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000424b00: xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000401c13: xor eax, eax; add rsp, 0x18; ret; 
0x00000000004023be: xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000401170: xor eax, eax; add rsp, 8; ret; 
0x00000000004024ed: xor eax, eax; call 0x59670; sar eax, 0x1f; and eax, 0xfffffffe; add rsp, 0x18; ret; 
0x000000000048ba31: xor eax, eax; call 0x8d9b0; mov r11, qword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x000000000048c69d: xor eax, eax; call 0x8d9b0; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x0000000000427b77: xor eax, eax; cmp esi, -1; setne al; neg eax; ret; 
0x000000000045b027: xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000485010: xor eax, eax; leave; ret; 
0x0000000000401bc4: xor eax, eax; mov dword ptr [rip + 0x2d4538], 0; pop rbx; ret; 
0x0000000000481351: xor eax, eax; mov rcx, r15; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000048152d: xor eax, eax; mov rcx, r15; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000041fb33: xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000483416: xor eax, eax; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x0000000000484b6a: xor eax, eax; mov rdx, rsp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x00000000004830fc: xor eax, eax; mov rsi, rbp; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000047c4f9: xor eax, eax; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000482432: xor eax, eax; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000407f9c: xor eax, eax; pop rbp; pop r12; pop r13; ret; 
0x000000000040785b: xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000421285: xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000407d76: xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000401434: xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000400e58: xor eax, eax; pop rbx; ret; 
0x00000000004832a1: xor eax, eax; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000401180: xor eax, eax; ret; 
0x00000000004350ce: xor eax, eax; sub eax, ecx; ret; 
0x00000000004589ea: xor eax, eax; syscall; 
0x0000000000499e2c: xor eax, eax; test edi, edi; jne 0x99d60; add rsp, 0x38; ret; 
0x000000000043a9ac: xor eax, eax; vzeroupper; ret; 
0x0000000000483227: xor eax, eax; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000406462: xor eax, edi; imul eax, eax, 0xc2b2ae35; mov edx, eax; shr edx, 0x10; xor eax, edx; ret; 
0x000000000048256b: xor eax, edx; and rax, rcx; je 0x82730; bsr rax, rax; add rax, rdi; ret; 
0x00000000004827ef: xor eax, edx; and rsi, rax; je 0x82730; bsr rax, rsi; add rax, rdi; ret; 
0x000000000040646f: xor eax, edx; ret; 
0x00000000004096bd: xor ebp, ebp; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000048cbec: xor ebp, ebp; xor esi, esi; lea rdi, [rip + 0x32d83]; mov eax, 0x15; syscall; 
0x0000000000468398: xor ebp, ecx; ret 0xfffd; 
0x0000000000495013: xor ebx, ebx; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000467c26: xor ebx, ebx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000403720: xor ebx, ebx; mov rax, rbx; pop rbx; ret; 
0x000000000041e45b: xor ecx, dword ptr [0x28]; jne 0x1e46c; add rsp, 0xd8; ret; 
0x0000000000403acf: xor ecx, dword ptr [0x28]; jne 0x3af5; add rsp, 0x48; ret; 
0x000000000045887e: xor ecx, dword ptr [0x28]; jne 0x58939; add rsp, 0x68; ret; 
0x0000000000458990: xor ecx, dword ptr [0x28]; jne 0x589db; add rsp, 0x58; ret; 
0x0000000000458c11: xor ecx, dword ptr [0x28]; jne 0x58cc9; add rsp, 0x78; ret; 
0x0000000000458d20: xor ecx, dword ptr [0x28]; jne 0x58d73; add rsp, 0x68; ret; 
0x000000000046a620: xor ecx, dword ptr [0x28]; jne 0x6a673; add rsp, 0x148; ret; 
0x000000000047801b: xor ecx, dword ptr [0x28]; jne 0x7802c; add rsp, 0xd8; ret; 
0x00000000004849a3: xor ecx, dword ptr [0x28]; jne 0x84a69; add rsp, 0x78; ret; 
0x0000000000484ab5: xor ecx, dword ptr [0x28]; jne 0x84b03; add rsp, 0x58; ret; 
0x0000000000484be7: xor ecx, dword ptr [0x28]; jne 0x84c0b; add rsp, 0x38; ret; 
0x000000000049118e: xor ecx, dword ptr [0x28]; jne 0x911c3; add rsp, 0x38; ret; 
0x000000000049124e: xor ecx, dword ptr [0x28]; jne 0x9127e; add rsp, 0x68; ret; 
0x00000000004913af: xor ecx, dword ptr [0x28]; jne 0x913ee; add rsp, 0x78; ret; 
0x000000000049167e: xor ecx, dword ptr [0x28]; jne 0x916ae; add rsp, 0x68; ret; 
0x00000000004977c4: xor ecx, dword ptr [0x28]; jne 0x977dc; add rsp, 0x38; ret; 
0x0000000000459a8f: xor ecx, dword ptr [rax - 0x75]; jl 0x59ab8; or byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x0000000000498b2b: xor ecx, dword ptr [rcx - 0x7d]; ret; 
0x00000000004825f9: xor ecx, eax; and rsi, rcx; je 0x82730; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000045db4e: xor ecx, ecx; movzx eax, al; xor edx, edx; add eax, 1; push rax; call rbx; 
0x000000000047b405: xor ecx, ecx; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000048db71: xor ecx, ecx; test rsi, rsi; je 0x8db7b; mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x0000000000483229: xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x00000000004af35d: xor ecx, edi; jmp qword ptr [rax]; 
0x00000000004617eb: xor ecx, esi; cli; inc dword ptr [rcx - 0x77]; ret; 
0x000000000045b60c: xor edi, dword ptr [rax]; ret 0x2f75; 
0x0000000000485611: xor edi, ebp; dec dword ptr [rax + 0x39]; ret; 
0x00000000004af3a1: xor edi, ecx; jmp qword ptr [rax]; 
0x0000000000410038: xor edi, edi; mov eax, edx; syscall; 
0x0000000000459806: xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x0000000000429f01: xor edi, edi; pop rbx; mov rax, rdi; pop rbp; pop r12; ret; 
0x00000000004595ac: xor edi, edi; syscall; 
0x0000000000499e2a: xor edi, edi; xor eax, eax; test edi, edi; jne 0x99d60; add rsp, 0x38; ret; 
0x000000000048cbe9: xor edi, edi; xor r13d, r13d; xor esi, esi; lea rdi, [rip + 0x32d83]; mov eax, 0x15; syscall; 
0x00000000004d1229: xor edi, esp; call qword ptr [rdi]; 
0x000000000040169e: xor edx, dword ptr [0x28]; jne 0x172d; add rsp, 0xc8; ret; 
0x000000000040182e: xor edx, dword ptr [0x28]; jne 0x18bd; add rsp, 0xc8; ret; 
0x0000000000458760: xor edx, dword ptr [0x28]; jne 0x58779; add rsp, 0x28; ret; 
0x000000000045970f: xor edx, dword ptr [0x28]; jne 0x59727; add rsp, 0x28; ret; 
0x0000000000494366: xor edx, dword ptr [0x28]; jne 0x94374; add rsp, 0x38; ret; 
0x0000000000494449: xor edx, dword ptr [0x28]; jne 0x94464; add rsp, 0x38; ret; 
0x000000000041d5c0: xor edx, dword ptr [0x30]; call rdx; 
0x000000000041d6ac: xor edx, dword ptr [0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000045db53: xor edx, edx; add eax, 1; push rax; call rbx; 
0x000000000048a9ba: xor edx, edx; add rdi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000045b11f: xor edx, edx; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000048da80: xor edx, edx; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000004573c8: xor edx, edx; and eax, 0x3fffc00; div ecx; pop rbx; mov eax, eax; ret; 
0x0000000000484a91: xor edx, edx; and eax, 0x410000; cmp eax, 0x410000; je 0x84ac8; mov eax, 0x101; syscall; 
0x00000000004755c3: xor edx, edx; div r8d; add r9d, eax; mov eax, r9d; ret; 
0x00000000004264b3: xor edx, edx; jmp rax; 
0x000000000048322b: xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x000000000044f8b4: xor edx, edx; lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000044f8d4: xor edx, edx; lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000044f912: xor edx, edx; lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000044f77a: xor edx, edx; lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000004595a3: xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000042e7d4: xor edx, edx; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000041c8c6: xor edx, edx; mov rsi, r9; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000433999: xor esi, dword ptr [rcx]; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x00000000004c273d: xor esi, dword ptr [rcx]; xchg eax, edi; call qword ptr [rbx + 0x7c]; 
0x00000000004cd159: xor esi, ebx; jmp qword ptr [rbx]; 
0x0000000000470c2c: xor esi, esi; jmp rax; 
0x0000000000490445: xor esi, esi; lea rdi, [rip + 0x2f52c]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000048cbee: xor esi, esi; lea rdi, [rip + 0x32d83]; mov eax, 0x15; syscall; 
0x000000000045b4fb: xor esi, esi; lea rdi, [rip + 0x550c1]; mov eax, 0x15; syscall; 
0x000000000042d0d7: xor esi, esi; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x000000000041f150: xor esi, esi; mov rax, rsi; ret; 
0x00000000004d10d1: xor esp, edi; jmp qword ptr [rdx]; 
0x00000000004d10e9: xor esp, edi; jmp rdx; 
0x000000000045b11e: xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000048a9b9: xor r10d, r10d; add rdi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000484a90: xor r10d, r10d; and eax, 0x410000; cmp eax, 0x410000; je 0x84ac8; mov eax, 0x101; syscall; 
0x000000000048cbeb: xor r13d, r13d; xor esi, esi; lea rdi, [rip + 0x32d83]; mov eax, 0x15; syscall; 
0x000000000048cbe8: xor r15d, r15d; xor r13d, r13d; xor esi, esi; lea rdi, [rip + 0x32d83]; mov eax, 0x15; syscall; 
0x0000000000481350: xor r8d, r8d; mov rcx, r15; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000048152c: xor r8d, r8d; mov rcx, r15; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000483415: xor r8d, r8d; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x00000000004830fb: xor r8d, r8d; mov rsi, rbp; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000047c4f8: xor r8d, r8d; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004832a0: xor r8d, r8d; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000483226: xor r8d, r8d; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x000000000046a3d7: xor rax, qword ptr [0x28]; jne 0x6a3e6; add rsp, 0x18; ret; 
0x00000000004936b9: xor rax, qword ptr [0x28]; jne 0x936fe; leave; ret; 
0x000000000041d685: xor rax, qword ptr [0x30]; call rax; 
0x000000000046a3d6: xor rax, qword ptr fs:[0x28]; jne 0x6a3e6; add rsp, 0x18; ret; 
0x00000000004936b8: xor rax, qword ptr fs:[0x28]; jne 0x936fe; leave; ret; 
0x000000000041d684: xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000453d30: xor rax, rax; ret; 
0x000000000048256a: xor rax, rdx; and rax, rcx; je 0x82730; bsr rax, rax; add rax, rdi; ret; 
0x00000000004827ee: xor rax, rdx; and rsi, rax; je 0x82730; bsr rax, rsi; add rax, rdi; ret; 
0x000000000041e45a: xor rcx, qword ptr [0x28]; jne 0x1e46c; add rsp, 0xd8; ret; 
0x0000000000403ace: xor rcx, qword ptr [0x28]; jne 0x3af5; add rsp, 0x48; ret; 
0x000000000045887d: xor rcx, qword ptr [0x28]; jne 0x58939; add rsp, 0x68; ret; 
0x000000000045898f: xor rcx, qword ptr [0x28]; jne 0x589db; add rsp, 0x58; ret; 
0x0000000000458c10: xor rcx, qword ptr [0x28]; jne 0x58cc9; add rsp, 0x78; ret; 
0x0000000000458d1f: xor rcx, qword ptr [0x28]; jne 0x58d73; add rsp, 0x68; ret; 
0x000000000046a61f: xor rcx, qword ptr [0x28]; jne 0x6a673; add rsp, 0x148; ret; 
0x000000000047801a: xor rcx, qword ptr [0x28]; jne 0x7802c; add rsp, 0xd8; ret; 
0x00000000004849a2: xor rcx, qword ptr [0x28]; jne 0x84a69; add rsp, 0x78; ret; 
0x0000000000484ab4: xor rcx, qword ptr [0x28]; jne 0x84b03; add rsp, 0x58; ret; 
0x0000000000484be6: xor rcx, qword ptr [0x28]; jne 0x84c0b; add rsp, 0x38; ret; 
0x000000000049118d: xor rcx, qword ptr [0x28]; jne 0x911c3; add rsp, 0x38; ret; 
0x000000000049124d: xor rcx, qword ptr [0x28]; jne 0x9127e; add rsp, 0x68; ret; 
0x00000000004913ae: xor rcx, qword ptr [0x28]; jne 0x913ee; add rsp, 0x78; ret; 
0x000000000049167d: xor rcx, qword ptr [0x28]; jne 0x916ae; add rsp, 0x68; ret; 
0x00000000004977c3: xor rcx, qword ptr [0x28]; jne 0x977dc; add rsp, 0x38; ret; 
0x000000000041e459: xor rcx, qword ptr fs:[0x28]; jne 0x1e46c; add rsp, 0xd8; ret; 
0x0000000000403acd: xor rcx, qword ptr fs:[0x28]; jne 0x3af5; add rsp, 0x48; ret; 
0x000000000045887c: xor rcx, qword ptr fs:[0x28]; jne 0x58939; add rsp, 0x68; ret; 
0x000000000045898e: xor rcx, qword ptr fs:[0x28]; jne 0x589db; add rsp, 0x58; ret; 
0x0000000000458c0f: xor rcx, qword ptr fs:[0x28]; jne 0x58cc9; add rsp, 0x78; ret; 
0x0000000000458d1e: xor rcx, qword ptr fs:[0x28]; jne 0x58d73; add rsp, 0x68; ret; 
0x000000000046a61e: xor rcx, qword ptr fs:[0x28]; jne 0x6a673; add rsp, 0x148; ret; 
0x0000000000478019: xor rcx, qword ptr fs:[0x28]; jne 0x7802c; add rsp, 0xd8; ret; 
0x00000000004849a1: xor rcx, qword ptr fs:[0x28]; jne 0x84a69; add rsp, 0x78; ret; 
0x0000000000484ab3: xor rcx, qword ptr fs:[0x28]; jne 0x84b03; add rsp, 0x58; ret; 
0x0000000000484be5: xor rcx, qword ptr fs:[0x28]; jne 0x84c0b; add rsp, 0x38; ret; 
0x000000000049118c: xor rcx, qword ptr fs:[0x28]; jne 0x911c3; add rsp, 0x38; ret; 
0x000000000049124c: xor rcx, qword ptr fs:[0x28]; jne 0x9127e; add rsp, 0x68; ret; 
0x00000000004913ad: xor rcx, qword ptr fs:[0x28]; jne 0x913ee; add rsp, 0x78; ret; 
0x000000000049167c: xor rcx, qword ptr fs:[0x28]; jne 0x916ae; add rsp, 0x68; ret; 
0x00000000004977c2: xor rcx, qword ptr fs:[0x28]; jne 0x977dc; add rsp, 0x38; ret; 
0x00000000004825f8: xor rcx, rax; and rsi, rcx; je 0x82730; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x00000000004d1228: xor rdi, rsp; call qword ptr [rdi]; 
0x000000000040169d: xor rdx, qword ptr [0x28]; jne 0x172d; add rsp, 0xc8; ret; 
0x000000000040182d: xor rdx, qword ptr [0x28]; jne 0x18bd; add rsp, 0xc8; ret; 
0x000000000045875f: xor rdx, qword ptr [0x28]; jne 0x58779; add rsp, 0x28; ret; 
0x000000000045970e: xor rdx, qword ptr [0x28]; jne 0x59727; add rsp, 0x28; ret; 
0x0000000000494365: xor rdx, qword ptr [0x28]; jne 0x94374; add rsp, 0x38; ret; 
0x0000000000494448: xor rdx, qword ptr [0x28]; jne 0x94464; add rsp, 0x38; ret; 
0x000000000041d5bf: xor rdx, qword ptr [0x30]; call rdx; 
0x000000000041d6ab: xor rdx, qword ptr [0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000040169c: xor rdx, qword ptr fs:[0x28]; jne 0x172d; add rsp, 0xc8; ret; 
0x000000000040182c: xor rdx, qword ptr fs:[0x28]; jne 0x18bd; add rsp, 0xc8; ret; 
0x000000000045875e: xor rdx, qword ptr fs:[0x28]; jne 0x58779; add rsp, 0x28; ret; 
0x000000000045970d: xor rdx, qword ptr fs:[0x28]; jne 0x59727; add rsp, 0x28; ret; 
0x0000000000494364: xor rdx, qword ptr fs:[0x28]; jne 0x94374; add rsp, 0x38; ret; 
0x0000000000494447: xor rdx, qword ptr fs:[0x28]; jne 0x94464; add rsp, 0x38; ret; 
0x000000000041d5be: xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000041d6aa: xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x00000000004d10e8: xor rsp, rdi; jmp rdx; 

22813 gadgets found
